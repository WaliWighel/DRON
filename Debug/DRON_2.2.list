
DRON_2.2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00006000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e248  080002d0  080002d0  000062d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e28  0801e518  0801e518  00024518  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08020340  08020340  00026340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08020348  08020348  00026348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0802034c  0802034c  0002634c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000078  24000000  08020350  00027000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000834  24000078  080203c8  00027078  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240008ac  080203c8  000278ac  2**0
                  ALLOC
  9 .IRAM         000041e6  00000000  00000000  00001000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 10 .DRAM         00000000  20000000  20000000  00049710  2**0
                  CONTENTS
 11 .RAM1         00021860  24000eb0  24000eb0  00027eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.attributes 0000002e  00000000  00000000  00049710  2**0
                  CONTENTS, READONLY
 13 .debug_info   00031f1c  00000000  00000000  0004973e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005ed7  00000000  00000000  0007b65a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002410  00000000  00000000  00081538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001bf2  00000000  00000000  00083948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003c704  00000000  00000000  0008553a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00038112  00000000  00000000  000c1c3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0016cbb7  00000000  00000000  000f9d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00266907  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009e54  00000000  00000000  0026694c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004d  00000000  00000000  002707a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000078 	.word	0x24000078
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801e500 	.word	0x0801e500

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400007c 	.word	0x2400007c
 800030c:	0801e500 	.word	0x0801e500

08000310 <__aeabi_ldivmod>:
 8000310:	b97b      	cbnz	r3, 8000332 <__aeabi_ldivmod+0x22>
 8000312:	b972      	cbnz	r2, 8000332 <__aeabi_ldivmod+0x22>
 8000314:	2900      	cmp	r1, #0
 8000316:	bfbe      	ittt	lt
 8000318:	2000      	movlt	r0, #0
 800031a:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 800031e:	e006      	blt.n	800032e <__aeabi_ldivmod+0x1e>
 8000320:	bf08      	it	eq
 8000322:	2800      	cmpeq	r0, #0
 8000324:	bf1c      	itt	ne
 8000326:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800032a:	f04f 30ff 	movne.w	r0, #4294967295
 800032e:	f000 b9b5 	b.w	800069c <__aeabi_idiv0>
 8000332:	f1ad 0c08 	sub.w	ip, sp, #8
 8000336:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800033a:	2900      	cmp	r1, #0
 800033c:	db09      	blt.n	8000352 <__aeabi_ldivmod+0x42>
 800033e:	2b00      	cmp	r3, #0
 8000340:	db1a      	blt.n	8000378 <__aeabi_ldivmod+0x68>
 8000342:	f000 f84d 	bl	80003e0 <__udivmoddi4>
 8000346:	f8dd e004 	ldr.w	lr, [sp, #4]
 800034a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034e:	b004      	add	sp, #16
 8000350:	4770      	bx	lr
 8000352:	4240      	negs	r0, r0
 8000354:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000358:	2b00      	cmp	r3, #0
 800035a:	db1b      	blt.n	8000394 <__aeabi_ldivmod+0x84>
 800035c:	f000 f840 	bl	80003e0 <__udivmoddi4>
 8000360:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000364:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000368:	b004      	add	sp, #16
 800036a:	4240      	negs	r0, r0
 800036c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000370:	4252      	negs	r2, r2
 8000372:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000376:	4770      	bx	lr
 8000378:	4252      	negs	r2, r2
 800037a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037e:	f000 f82f 	bl	80003e0 <__udivmoddi4>
 8000382:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000386:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800038a:	b004      	add	sp, #16
 800038c:	4240      	negs	r0, r0
 800038e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000392:	4770      	bx	lr
 8000394:	4252      	negs	r2, r2
 8000396:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800039a:	f000 f821 	bl	80003e0 <__udivmoddi4>
 800039e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003a6:	b004      	add	sp, #16
 80003a8:	4252      	negs	r2, r2
 80003aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b96a 	b.w	800069c <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	460c      	mov	r4, r1
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d14e      	bne.n	800048a <__udivmoddi4+0xaa>
 80003ec:	4694      	mov	ip, r2
 80003ee:	458c      	cmp	ip, r1
 80003f0:	4686      	mov	lr, r0
 80003f2:	fab2 f282 	clz	r2, r2
 80003f6:	d962      	bls.n	80004be <__udivmoddi4+0xde>
 80003f8:	b14a      	cbz	r2, 800040e <__udivmoddi4+0x2e>
 80003fa:	f1c2 0320 	rsb	r3, r2, #32
 80003fe:	4091      	lsls	r1, r2
 8000400:	fa20 f303 	lsr.w	r3, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	4319      	orrs	r1, r3
 800040a:	fa00 fe02 	lsl.w	lr, r0, r2
 800040e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000412:	fa1f f68c 	uxth.w	r6, ip
 8000416:	fbb1 f4f7 	udiv	r4, r1, r7
 800041a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041e:	fb07 1114 	mls	r1, r7, r4, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb04 f106 	mul.w	r1, r4, r6
 800042a:	4299      	cmp	r1, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x64>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f104 30ff 	add.w	r0, r4, #4294967295
 8000436:	f080 8112 	bcs.w	800065e <__udivmoddi4+0x27e>
 800043a:	4299      	cmp	r1, r3
 800043c:	f240 810f 	bls.w	800065e <__udivmoddi4+0x27e>
 8000440:	3c02      	subs	r4, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	fa1f f38e 	uxth.w	r3, lr
 800044a:	fbb1 f0f7 	udiv	r0, r1, r7
 800044e:	fb07 1110 	mls	r1, r7, r0, r1
 8000452:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000456:	fb00 f606 	mul.w	r6, r0, r6
 800045a:	429e      	cmp	r6, r3
 800045c:	d90a      	bls.n	8000474 <__udivmoddi4+0x94>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 31ff 	add.w	r1, r0, #4294967295
 8000466:	f080 80fc 	bcs.w	8000662 <__udivmoddi4+0x282>
 800046a:	429e      	cmp	r6, r3
 800046c:	f240 80f9 	bls.w	8000662 <__udivmoddi4+0x282>
 8000470:	4463      	add	r3, ip
 8000472:	3802      	subs	r0, #2
 8000474:	1b9b      	subs	r3, r3, r6
 8000476:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800047a:	2100      	movs	r1, #0
 800047c:	b11d      	cbz	r5, 8000486 <__udivmoddi4+0xa6>
 800047e:	40d3      	lsrs	r3, r2
 8000480:	2200      	movs	r2, #0
 8000482:	e9c5 3200 	strd	r3, r2, [r5]
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	428b      	cmp	r3, r1
 800048c:	d905      	bls.n	800049a <__udivmoddi4+0xba>
 800048e:	b10d      	cbz	r5, 8000494 <__udivmoddi4+0xb4>
 8000490:	e9c5 0100 	strd	r0, r1, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	4608      	mov	r0, r1
 8000498:	e7f5      	b.n	8000486 <__udivmoddi4+0xa6>
 800049a:	fab3 f183 	clz	r1, r3
 800049e:	2900      	cmp	r1, #0
 80004a0:	d146      	bne.n	8000530 <__udivmoddi4+0x150>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d302      	bcc.n	80004ac <__udivmoddi4+0xcc>
 80004a6:	4290      	cmp	r0, r2
 80004a8:	f0c0 80f0 	bcc.w	800068c <__udivmoddi4+0x2ac>
 80004ac:	1a86      	subs	r6, r0, r2
 80004ae:	eb64 0303 	sbc.w	r3, r4, r3
 80004b2:	2001      	movs	r0, #1
 80004b4:	2d00      	cmp	r5, #0
 80004b6:	d0e6      	beq.n	8000486 <__udivmoddi4+0xa6>
 80004b8:	e9c5 6300 	strd	r6, r3, [r5]
 80004bc:	e7e3      	b.n	8000486 <__udivmoddi4+0xa6>
 80004be:	2a00      	cmp	r2, #0
 80004c0:	f040 8090 	bne.w	80005e4 <__udivmoddi4+0x204>
 80004c4:	eba1 040c 	sub.w	r4, r1, ip
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa1f f78c 	uxth.w	r7, ip
 80004d0:	2101      	movs	r1, #1
 80004d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004da:	fb08 4416 	mls	r4, r8, r6, r4
 80004de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004e2:	fb07 f006 	mul.w	r0, r7, r6
 80004e6:	4298      	cmp	r0, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x11c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x11a>
 80004f4:	4298      	cmp	r0, r3
 80004f6:	f200 80cd 	bhi.w	8000694 <__udivmoddi4+0x2b4>
 80004fa:	4626      	mov	r6, r4
 80004fc:	1a1c      	subs	r4, r3, r0
 80004fe:	fa1f f38e 	uxth.w	r3, lr
 8000502:	fbb4 f0f8 	udiv	r0, r4, r8
 8000506:	fb08 4410 	mls	r4, r8, r0, r4
 800050a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800050e:	fb00 f707 	mul.w	r7, r0, r7
 8000512:	429f      	cmp	r7, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x148>
 8000516:	eb1c 0303 	adds.w	r3, ip, r3
 800051a:	f100 34ff 	add.w	r4, r0, #4294967295
 800051e:	d202      	bcs.n	8000526 <__udivmoddi4+0x146>
 8000520:	429f      	cmp	r7, r3
 8000522:	f200 80b0 	bhi.w	8000686 <__udivmoddi4+0x2a6>
 8000526:	4620      	mov	r0, r4
 8000528:	1bdb      	subs	r3, r3, r7
 800052a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800052e:	e7a5      	b.n	800047c <__udivmoddi4+0x9c>
 8000530:	f1c1 0620 	rsb	r6, r1, #32
 8000534:	408b      	lsls	r3, r1
 8000536:	fa22 f706 	lsr.w	r7, r2, r6
 800053a:	431f      	orrs	r7, r3
 800053c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000540:	fa04 f301 	lsl.w	r3, r4, r1
 8000544:	ea43 030c 	orr.w	r3, r3, ip
 8000548:	40f4      	lsrs	r4, r6
 800054a:	fa00 f801 	lsl.w	r8, r0, r1
 800054e:	0c38      	lsrs	r0, r7, #16
 8000550:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000554:	fbb4 fef0 	udiv	lr, r4, r0
 8000558:	fa1f fc87 	uxth.w	ip, r7
 800055c:	fb00 441e 	mls	r4, r0, lr, r4
 8000560:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000564:	fb0e f90c 	mul.w	r9, lr, ip
 8000568:	45a1      	cmp	r9, r4
 800056a:	fa02 f201 	lsl.w	r2, r2, r1
 800056e:	d90a      	bls.n	8000586 <__udivmoddi4+0x1a6>
 8000570:	193c      	adds	r4, r7, r4
 8000572:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000576:	f080 8084 	bcs.w	8000682 <__udivmoddi4+0x2a2>
 800057a:	45a1      	cmp	r9, r4
 800057c:	f240 8081 	bls.w	8000682 <__udivmoddi4+0x2a2>
 8000580:	f1ae 0e02 	sub.w	lr, lr, #2
 8000584:	443c      	add	r4, r7
 8000586:	eba4 0409 	sub.w	r4, r4, r9
 800058a:	fa1f f983 	uxth.w	r9, r3
 800058e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000592:	fb00 4413 	mls	r4, r0, r3, r4
 8000596:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800059a:	fb03 fc0c 	mul.w	ip, r3, ip
 800059e:	45a4      	cmp	ip, r4
 80005a0:	d907      	bls.n	80005b2 <__udivmoddi4+0x1d2>
 80005a2:	193c      	adds	r4, r7, r4
 80005a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005a8:	d267      	bcs.n	800067a <__udivmoddi4+0x29a>
 80005aa:	45a4      	cmp	ip, r4
 80005ac:	d965      	bls.n	800067a <__udivmoddi4+0x29a>
 80005ae:	3b02      	subs	r3, #2
 80005b0:	443c      	add	r4, r7
 80005b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005b6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ba:	eba4 040c 	sub.w	r4, r4, ip
 80005be:	429c      	cmp	r4, r3
 80005c0:	46ce      	mov	lr, r9
 80005c2:	469c      	mov	ip, r3
 80005c4:	d351      	bcc.n	800066a <__udivmoddi4+0x28a>
 80005c6:	d04e      	beq.n	8000666 <__udivmoddi4+0x286>
 80005c8:	b155      	cbz	r5, 80005e0 <__udivmoddi4+0x200>
 80005ca:	ebb8 030e 	subs.w	r3, r8, lr
 80005ce:	eb64 040c 	sbc.w	r4, r4, ip
 80005d2:	fa04 f606 	lsl.w	r6, r4, r6
 80005d6:	40cb      	lsrs	r3, r1
 80005d8:	431e      	orrs	r6, r3
 80005da:	40cc      	lsrs	r4, r1
 80005dc:	e9c5 6400 	strd	r6, r4, [r5]
 80005e0:	2100      	movs	r1, #0
 80005e2:	e750      	b.n	8000486 <__udivmoddi4+0xa6>
 80005e4:	f1c2 0320 	rsb	r3, r2, #32
 80005e8:	fa20 f103 	lsr.w	r1, r0, r3
 80005ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f0:	fa24 f303 	lsr.w	r3, r4, r3
 80005f4:	4094      	lsls	r4, r2
 80005f6:	430c      	orrs	r4, r1
 80005f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000600:	fa1f f78c 	uxth.w	r7, ip
 8000604:	fbb3 f0f8 	udiv	r0, r3, r8
 8000608:	fb08 3110 	mls	r1, r8, r0, r3
 800060c:	0c23      	lsrs	r3, r4, #16
 800060e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000612:	fb00 f107 	mul.w	r1, r0, r7
 8000616:	4299      	cmp	r1, r3
 8000618:	d908      	bls.n	800062c <__udivmoddi4+0x24c>
 800061a:	eb1c 0303 	adds.w	r3, ip, r3
 800061e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000622:	d22c      	bcs.n	800067e <__udivmoddi4+0x29e>
 8000624:	4299      	cmp	r1, r3
 8000626:	d92a      	bls.n	800067e <__udivmoddi4+0x29e>
 8000628:	3802      	subs	r0, #2
 800062a:	4463      	add	r3, ip
 800062c:	1a5b      	subs	r3, r3, r1
 800062e:	b2a4      	uxth	r4, r4
 8000630:	fbb3 f1f8 	udiv	r1, r3, r8
 8000634:	fb08 3311 	mls	r3, r8, r1, r3
 8000638:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800063c:	fb01 f307 	mul.w	r3, r1, r7
 8000640:	42a3      	cmp	r3, r4
 8000642:	d908      	bls.n	8000656 <__udivmoddi4+0x276>
 8000644:	eb1c 0404 	adds.w	r4, ip, r4
 8000648:	f101 36ff 	add.w	r6, r1, #4294967295
 800064c:	d213      	bcs.n	8000676 <__udivmoddi4+0x296>
 800064e:	42a3      	cmp	r3, r4
 8000650:	d911      	bls.n	8000676 <__udivmoddi4+0x296>
 8000652:	3902      	subs	r1, #2
 8000654:	4464      	add	r4, ip
 8000656:	1ae4      	subs	r4, r4, r3
 8000658:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800065c:	e739      	b.n	80004d2 <__udivmoddi4+0xf2>
 800065e:	4604      	mov	r4, r0
 8000660:	e6f0      	b.n	8000444 <__udivmoddi4+0x64>
 8000662:	4608      	mov	r0, r1
 8000664:	e706      	b.n	8000474 <__udivmoddi4+0x94>
 8000666:	45c8      	cmp	r8, r9
 8000668:	d2ae      	bcs.n	80005c8 <__udivmoddi4+0x1e8>
 800066a:	ebb9 0e02 	subs.w	lr, r9, r2
 800066e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000672:	3801      	subs	r0, #1
 8000674:	e7a8      	b.n	80005c8 <__udivmoddi4+0x1e8>
 8000676:	4631      	mov	r1, r6
 8000678:	e7ed      	b.n	8000656 <__udivmoddi4+0x276>
 800067a:	4603      	mov	r3, r0
 800067c:	e799      	b.n	80005b2 <__udivmoddi4+0x1d2>
 800067e:	4630      	mov	r0, r6
 8000680:	e7d4      	b.n	800062c <__udivmoddi4+0x24c>
 8000682:	46d6      	mov	lr, sl
 8000684:	e77f      	b.n	8000586 <__udivmoddi4+0x1a6>
 8000686:	4463      	add	r3, ip
 8000688:	3802      	subs	r0, #2
 800068a:	e74d      	b.n	8000528 <__udivmoddi4+0x148>
 800068c:	4606      	mov	r6, r0
 800068e:	4623      	mov	r3, r4
 8000690:	4608      	mov	r0, r1
 8000692:	e70f      	b.n	80004b4 <__udivmoddi4+0xd4>
 8000694:	3e02      	subs	r6, #2
 8000696:	4463      	add	r3, ip
 8000698:	e730      	b.n	80004fc <__udivmoddi4+0x11c>
 800069a:	bf00      	nop

0800069c <__aeabi_idiv0>:
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop

080006a0 <BMP180_read_ID>:

static I2C_HandleTypeDef *hi2c_BMP180;
extern uint8_t BMP180_Press_IT[3], BMP180_Temp_IT[2];
extern uint8_t BMP180_IRQ;

uint8_t BMP180_read_ID(void){// comunication = 0x55
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b086      	sub	sp, #24
 80006a4:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_BMP180, BMP180_ADDRES, id_register, 1, &data, 1, 100);
 80006a6:	4b09      	ldr	r3, [pc, #36]	@ (80006cc <BMP180_read_ID+0x2c>)
 80006a8:	6818      	ldr	r0, [r3, #0]
 80006aa:	2364      	movs	r3, #100	@ 0x64
 80006ac:	9302      	str	r3, [sp, #8]
 80006ae:	2301      	movs	r3, #1
 80006b0:	9301      	str	r3, [sp, #4]
 80006b2:	1dfb      	adds	r3, r7, #7
 80006b4:	9300      	str	r3, [sp, #0]
 80006b6:	2301      	movs	r3, #1
 80006b8:	22d0      	movs	r2, #208	@ 0xd0
 80006ba:	21ee      	movs	r1, #238	@ 0xee
 80006bc:	f00d ff70 	bl	800e5a0 <HAL_I2C_Mem_Read>
	return data;
 80006c0:	79fb      	ldrb	r3, [r7, #7]
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	3708      	adds	r7, #8
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	24000094 	.word	0x24000094

080006d0 <BMP180_init>:

uint8_t BMP180_init(I2C_HandleTypeDef*hi2c){
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
	hi2c_BMP180 = hi2c;
 80006d8:	4a0b      	ldr	r2, [pc, #44]	@ (8000708 <BMP180_init+0x38>)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	6013      	str	r3, [r2, #0]
	BMP180_read_calliberation_data();
 80006de:	f000 f8dd 	bl	800089c <BMP180_read_calliberation_data>

	uint8_t status = 0;
 80006e2:	2300      	movs	r3, #0
 80006e4:	73fb      	strb	r3, [r7, #15]
	status = BMP180_read_ID();
 80006e6:	f7ff ffdb 	bl	80006a0 <BMP180_read_ID>
 80006ea:	4603      	mov	r3, r0
 80006ec:	73fb      	strb	r3, [r7, #15]

	if(status != 0x55){
 80006ee:	7bfb      	ldrb	r3, [r7, #15]
 80006f0:	2b55      	cmp	r3, #85	@ 0x55
 80006f2:	d002      	beq.n	80006fa <BMP180_init+0x2a>
		status = 0;
 80006f4:	2300      	movs	r3, #0
 80006f6:	73fb      	strb	r3, [r7, #15]
 80006f8:	e001      	b.n	80006fe <BMP180_init+0x2e>
	}
	else{
		status = 1;
 80006fa:	2301      	movs	r3, #1
 80006fc:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 80006fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000700:	4618      	mov	r0, r3
 8000702:	3710      	adds	r7, #16
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	24000094 	.word	0x24000094

0800070c <BMP180_READ_temp>:

uint16_t BMP180_READ_temp(void){
 800070c:	b580      	push	{r7, lr}
 800070e:	b086      	sub	sp, #24
 8000710:	af04      	add	r7, sp, #16
	uint8_t data[2];
	HAL_I2C_Mem_Read(hi2c_BMP180, BMP180_ADDRES, out_msb, 1, data, 2, 100);
 8000712:	4b0d      	ldr	r3, [pc, #52]	@ (8000748 <BMP180_READ_temp+0x3c>)
 8000714:	6818      	ldr	r0, [r3, #0]
 8000716:	2364      	movs	r3, #100	@ 0x64
 8000718:	9302      	str	r3, [sp, #8]
 800071a:	2302      	movs	r3, #2
 800071c:	9301      	str	r3, [sp, #4]
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	9300      	str	r3, [sp, #0]
 8000722:	2301      	movs	r3, #1
 8000724:	22f6      	movs	r2, #246	@ 0xf6
 8000726:	21ee      	movs	r1, #238	@ 0xee
 8000728:	f00d ff3a 	bl	800e5a0 <HAL_I2C_Mem_Read>
	UT = ((data[0]<<8) | data[1]);
 800072c:	793b      	ldrb	r3, [r7, #4]
 800072e:	021b      	lsls	r3, r3, #8
 8000730:	797a      	ldrb	r2, [r7, #5]
 8000732:	4313      	orrs	r3, r2
 8000734:	4a05      	ldr	r2, [pc, #20]	@ (800074c <BMP180_READ_temp+0x40>)
 8000736:	6013      	str	r3, [r2, #0]
	return UT;
 8000738:	4b04      	ldr	r3, [pc, #16]	@ (800074c <BMP180_READ_temp+0x40>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	b29b      	uxth	r3, r3
}
 800073e:	4618      	mov	r0, r3
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	24000094 	.word	0x24000094
 800074c:	000000c0 	.word	0x000000c0

08000750 <BMP180_READ_pres>:

uint32_t BMP180_READ_pres(void){
 8000750:	b580      	push	{r7, lr}
 8000752:	b086      	sub	sp, #24
 8000754:	af04      	add	r7, sp, #16
	uint8_t data[3];
	HAL_I2C_Mem_Read(hi2c_BMP180, BMP180_ADDRES, out_msb, 1, data, 3, 1000);
 8000756:	4b0d      	ldr	r3, [pc, #52]	@ (800078c <BMP180_READ_pres+0x3c>)
 8000758:	6818      	ldr	r0, [r3, #0]
 800075a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800075e:	9302      	str	r3, [sp, #8]
 8000760:	2303      	movs	r3, #3
 8000762:	9301      	str	r3, [sp, #4]
 8000764:	1d3b      	adds	r3, r7, #4
 8000766:	9300      	str	r3, [sp, #0]
 8000768:	2301      	movs	r3, #1
 800076a:	22f6      	movs	r2, #246	@ 0xf6
 800076c:	21ee      	movs	r1, #238	@ 0xee
 800076e:	f00d ff17 	bl	800e5a0 <HAL_I2C_Mem_Read>
	return (((data[0]<<16)|(data[1]<<8)|data[2]) >> 5);
 8000772:	793b      	ldrb	r3, [r7, #4]
 8000774:	041a      	lsls	r2, r3, #16
 8000776:	797b      	ldrb	r3, [r7, #5]
 8000778:	021b      	lsls	r3, r3, #8
 800077a:	4313      	orrs	r3, r2
 800077c:	79ba      	ldrb	r2, [r7, #6]
 800077e:	4313      	orrs	r3, r2
 8000780:	115b      	asrs	r3, r3, #5
}
 8000782:	4618      	mov	r0, r3
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	24000094 	.word	0x24000094

08000790 <BMP180_GET_temp_IT>:
void BMP180_READ_pres_IT(void){
	HAL_I2C_Mem_Read_IT(hi2c_BMP180, BMP180_ADDRES, out_msb, 1, (uint8_t *)BMP180_Press_IT, 3);
	BMP180_IRQ = 2;
}

uint16_t BMP180_GET_temp_IT(void){
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
	UT = ((BMP180_Temp_IT[0]<<8) | BMP180_Temp_IT[1]);
 8000794:	4b07      	ldr	r3, [pc, #28]	@ (80007b4 <BMP180_GET_temp_IT+0x24>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	021b      	lsls	r3, r3, #8
 800079a:	4a06      	ldr	r2, [pc, #24]	@ (80007b4 <BMP180_GET_temp_IT+0x24>)
 800079c:	7852      	ldrb	r2, [r2, #1]
 800079e:	4313      	orrs	r3, r2
 80007a0:	4a05      	ldr	r2, [pc, #20]	@ (80007b8 <BMP180_GET_temp_IT+0x28>)
 80007a2:	6013      	str	r3, [r2, #0]
	return UT;
 80007a4:	4b04      	ldr	r3, [pc, #16]	@ (80007b8 <BMP180_GET_temp_IT+0x28>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	b29b      	uxth	r3, r3
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr
 80007b4:	000000f0 	.word	0x000000f0
 80007b8:	000000c0 	.word	0x000000c0

080007bc <BMP180_GET_pres_IT>:

uint32_t BMP180_GET_pres_IT(void){
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
	return (((BMP180_Press_IT[0]<<16)|(BMP180_Press_IT[1]<<8)|BMP180_Press_IT[2]) >> 5);
 80007c0:	4b07      	ldr	r3, [pc, #28]	@ (80007e0 <BMP180_GET_pres_IT+0x24>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	041a      	lsls	r2, r3, #16
 80007c6:	4b06      	ldr	r3, [pc, #24]	@ (80007e0 <BMP180_GET_pres_IT+0x24>)
 80007c8:	785b      	ldrb	r3, [r3, #1]
 80007ca:	021b      	lsls	r3, r3, #8
 80007cc:	4313      	orrs	r3, r2
 80007ce:	4a04      	ldr	r2, [pc, #16]	@ (80007e0 <BMP180_GET_pres_IT+0x24>)
 80007d0:	7892      	ldrb	r2, [r2, #2]
 80007d2:	4313      	orrs	r3, r2
 80007d4:	115b      	asrs	r3, r3, #5
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr
 80007e0:	000000ec 	.word	0x000000ec

080007e4 <BMP180_start_measurment_temp>:
//	BMP180_start_measurment_pres();
//	//HAL_Delay(26);
//	pressure = BMP180_READ_pres();
//}

void BMP180_start_measurment_temp(void){
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b086      	sub	sp, #24
 80007e8:	af04      	add	r7, sp, #16
	uint8_t data = 0x2E;
 80007ea:	232e      	movs	r3, #46	@ 0x2e
 80007ec:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_BMP180, BMP180_ADDRES, ctrl_meas, 1, &data, 1, 100);
 80007ee:	4b08      	ldr	r3, [pc, #32]	@ (8000810 <BMP180_start_measurment_temp+0x2c>)
 80007f0:	6818      	ldr	r0, [r3, #0]
 80007f2:	2364      	movs	r3, #100	@ 0x64
 80007f4:	9302      	str	r3, [sp, #8]
 80007f6:	2301      	movs	r3, #1
 80007f8:	9301      	str	r3, [sp, #4]
 80007fa:	1dfb      	adds	r3, r7, #7
 80007fc:	9300      	str	r3, [sp, #0]
 80007fe:	2301      	movs	r3, #1
 8000800:	22f4      	movs	r2, #244	@ 0xf4
 8000802:	21ee      	movs	r1, #238	@ 0xee
 8000804:	f00d fdb8 	bl	800e378 <HAL_I2C_Mem_Write>
}
 8000808:	bf00      	nop
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	24000094 	.word	0x24000094

08000814 <BMP180_start_measurment_pres>:

void BMP180_start_measurment_pres(void){
 8000814:	b580      	push	{r7, lr}
 8000816:	b086      	sub	sp, #24
 8000818:	af04      	add	r7, sp, #16
	uint8_t data = 0xF4;
 800081a:	23f4      	movs	r3, #244	@ 0xf4
 800081c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_BMP180, BMP180_ADDRES, ctrl_meas, 1, &data, 1, 100);
 800081e:	4b08      	ldr	r3, [pc, #32]	@ (8000840 <BMP180_start_measurment_pres+0x2c>)
 8000820:	6818      	ldr	r0, [r3, #0]
 8000822:	2364      	movs	r3, #100	@ 0x64
 8000824:	9302      	str	r3, [sp, #8]
 8000826:	2301      	movs	r3, #1
 8000828:	9301      	str	r3, [sp, #4]
 800082a:	1dfb      	adds	r3, r7, #7
 800082c:	9300      	str	r3, [sp, #0]
 800082e:	2301      	movs	r3, #1
 8000830:	22f4      	movs	r2, #244	@ 0xf4
 8000832:	21ee      	movs	r1, #238	@ 0xee
 8000834:	f00d fda0 	bl	800e378 <HAL_I2C_Mem_Write>
}
 8000838:	bf00      	nop
 800083a:	3708      	adds	r7, #8
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	24000094 	.word	0x24000094

08000844 <BMP180_start_measurment_pres_IT>:

void BMP180_start_measurment_pres_IT(void){
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af02      	add	r7, sp, #8
	uint8_t data = 0xF4;
 800084a:	23f4      	movs	r3, #244	@ 0xf4
 800084c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write_IT(hi2c_BMP180, BMP180_ADDRES, ctrl_meas, 1, &data, 1);
 800084e:	4b07      	ldr	r3, [pc, #28]	@ (800086c <BMP180_start_measurment_pres_IT+0x28>)
 8000850:	6818      	ldr	r0, [r3, #0]
 8000852:	2301      	movs	r3, #1
 8000854:	9301      	str	r3, [sp, #4]
 8000856:	1dfb      	adds	r3, r7, #7
 8000858:	9300      	str	r3, [sp, #0]
 800085a:	2301      	movs	r3, #1
 800085c:	22f4      	movs	r2, #244	@ 0xf4
 800085e:	21ee      	movs	r1, #238	@ 0xee
 8000860:	f00d ffb8 	bl	800e7d4 <HAL_I2C_Mem_Write_IT>
}
 8000864:	bf00      	nop
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	24000094 	.word	0x24000094

08000870 <BMP180_start_measurment_temp_IT>:

void BMP180_start_measurment_temp_IT(void){
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af02      	add	r7, sp, #8
	uint8_t data = 0x2E;
 8000876:	232e      	movs	r3, #46	@ 0x2e
 8000878:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write_IT(hi2c_BMP180, BMP180_ADDRES, ctrl_meas, 1, &data, 1);
 800087a:	4b07      	ldr	r3, [pc, #28]	@ (8000898 <BMP180_start_measurment_temp_IT+0x28>)
 800087c:	6818      	ldr	r0, [r3, #0]
 800087e:	2301      	movs	r3, #1
 8000880:	9301      	str	r3, [sp, #4]
 8000882:	1dfb      	adds	r3, r7, #7
 8000884:	9300      	str	r3, [sp, #0]
 8000886:	2301      	movs	r3, #1
 8000888:	22f4      	movs	r2, #244	@ 0xf4
 800088a:	21ee      	movs	r1, #238	@ 0xee
 800088c:	f00d ffa2 	bl	800e7d4 <HAL_I2C_Mem_Write_IT>
}
 8000890:	bf00      	nop
 8000892:	3708      	adds	r7, #8
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	24000094 	.word	0x24000094

0800089c <BMP180_read_calliberation_data>:

void BMP180_read_calliberation_data(void){
 800089c:	b580      	push	{r7, lr}
 800089e:	b08a      	sub	sp, #40	@ 0x28
 80008a0:	af04      	add	r7, sp, #16

	uint8_t Callib_Data[22] = {0};
 80008a2:	2300      	movs	r3, #0
 80008a4:	603b      	str	r3, [r7, #0]
 80008a6:	1d3b      	adds	r3, r7, #4
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
 80008ae:	609a      	str	r2, [r3, #8]
 80008b0:	60da      	str	r2, [r3, #12]
 80008b2:	821a      	strh	r2, [r3, #16]
	uint16_t Callib_Start = 0xAA;
 80008b4:	23aa      	movs	r3, #170	@ 0xaa
 80008b6:	82fb      	strh	r3, [r7, #22]
	HAL_I2C_Mem_Read(hi2c_BMP180, BMP180_ADDRES, Callib_Start, 1, Callib_Data, 22, 100);
 80008b8:	4b3b      	ldr	r3, [pc, #236]	@ (80009a8 <BMP180_read_calliberation_data+0x10c>)
 80008ba:	6818      	ldr	r0, [r3, #0]
 80008bc:	8afa      	ldrh	r2, [r7, #22]
 80008be:	2364      	movs	r3, #100	@ 0x64
 80008c0:	9302      	str	r3, [sp, #8]
 80008c2:	2316      	movs	r3, #22
 80008c4:	9301      	str	r3, [sp, #4]
 80008c6:	463b      	mov	r3, r7
 80008c8:	9300      	str	r3, [sp, #0]
 80008ca:	2301      	movs	r3, #1
 80008cc:	21ee      	movs	r1, #238	@ 0xee
 80008ce:	f00d fe67 	bl	800e5a0 <HAL_I2C_Mem_Read>

	AC1 = (int16_t)((Callib_Data[0] << 8) | Callib_Data[1]);
 80008d2:	783b      	ldrb	r3, [r7, #0]
 80008d4:	021b      	lsls	r3, r3, #8
 80008d6:	b21a      	sxth	r2, r3
 80008d8:	787b      	ldrb	r3, [r7, #1]
 80008da:	b21b      	sxth	r3, r3
 80008dc:	4313      	orrs	r3, r2
 80008de:	b21a      	sxth	r2, r3
 80008e0:	4b32      	ldr	r3, [pc, #200]	@ (80009ac <BMP180_read_calliberation_data+0x110>)
 80008e2:	801a      	strh	r2, [r3, #0]
	AC2 = (int16_t)((Callib_Data[2] << 8) | Callib_Data[3]);
 80008e4:	78bb      	ldrb	r3, [r7, #2]
 80008e6:	021b      	lsls	r3, r3, #8
 80008e8:	b21a      	sxth	r2, r3
 80008ea:	78fb      	ldrb	r3, [r7, #3]
 80008ec:	b21b      	sxth	r3, r3
 80008ee:	4313      	orrs	r3, r2
 80008f0:	b21a      	sxth	r2, r3
 80008f2:	4b2f      	ldr	r3, [pc, #188]	@ (80009b0 <BMP180_read_calliberation_data+0x114>)
 80008f4:	801a      	strh	r2, [r3, #0]
	AC3 = (int16_t)((Callib_Data[4] << 8) | Callib_Data[5]);
 80008f6:	793b      	ldrb	r3, [r7, #4]
 80008f8:	021b      	lsls	r3, r3, #8
 80008fa:	b21a      	sxth	r2, r3
 80008fc:	797b      	ldrb	r3, [r7, #5]
 80008fe:	b21b      	sxth	r3, r3
 8000900:	4313      	orrs	r3, r2
 8000902:	b21a      	sxth	r2, r3
 8000904:	4b2b      	ldr	r3, [pc, #172]	@ (80009b4 <BMP180_read_calliberation_data+0x118>)
 8000906:	801a      	strh	r2, [r3, #0]
	AC4 = (int16_t)((Callib_Data[6] << 8) | Callib_Data[7]);
 8000908:	79bb      	ldrb	r3, [r7, #6]
 800090a:	021b      	lsls	r3, r3, #8
 800090c:	b21a      	sxth	r2, r3
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	b21b      	sxth	r3, r3
 8000912:	4313      	orrs	r3, r2
 8000914:	b21b      	sxth	r3, r3
 8000916:	b29a      	uxth	r2, r3
 8000918:	4b27      	ldr	r3, [pc, #156]	@ (80009b8 <BMP180_read_calliberation_data+0x11c>)
 800091a:	801a      	strh	r2, [r3, #0]
	AC5 = (int16_t)((Callib_Data[8] << 8) | Callib_Data[9]);
 800091c:	7a3b      	ldrb	r3, [r7, #8]
 800091e:	021b      	lsls	r3, r3, #8
 8000920:	b21a      	sxth	r2, r3
 8000922:	7a7b      	ldrb	r3, [r7, #9]
 8000924:	b21b      	sxth	r3, r3
 8000926:	4313      	orrs	r3, r2
 8000928:	b21b      	sxth	r3, r3
 800092a:	b29a      	uxth	r2, r3
 800092c:	4b23      	ldr	r3, [pc, #140]	@ (80009bc <BMP180_read_calliberation_data+0x120>)
 800092e:	801a      	strh	r2, [r3, #0]
	AC6 = (int16_t)((Callib_Data[10] << 8) | Callib_Data[11]);
 8000930:	7abb      	ldrb	r3, [r7, #10]
 8000932:	021b      	lsls	r3, r3, #8
 8000934:	b21a      	sxth	r2, r3
 8000936:	7afb      	ldrb	r3, [r7, #11]
 8000938:	b21b      	sxth	r3, r3
 800093a:	4313      	orrs	r3, r2
 800093c:	b21b      	sxth	r3, r3
 800093e:	b29a      	uxth	r2, r3
 8000940:	4b1f      	ldr	r3, [pc, #124]	@ (80009c0 <BMP180_read_calliberation_data+0x124>)
 8000942:	801a      	strh	r2, [r3, #0]
	B1 = (int16_t)((Callib_Data[12] << 8) | Callib_Data[13]);
 8000944:	7b3b      	ldrb	r3, [r7, #12]
 8000946:	021b      	lsls	r3, r3, #8
 8000948:	b21a      	sxth	r2, r3
 800094a:	7b7b      	ldrb	r3, [r7, #13]
 800094c:	b21b      	sxth	r3, r3
 800094e:	4313      	orrs	r3, r2
 8000950:	b21a      	sxth	r2, r3
 8000952:	4b1c      	ldr	r3, [pc, #112]	@ (80009c4 <BMP180_read_calliberation_data+0x128>)
 8000954:	801a      	strh	r2, [r3, #0]
	B2 = (int16_t)((Callib_Data[14] << 8) | Callib_Data[15]);
 8000956:	7bbb      	ldrb	r3, [r7, #14]
 8000958:	021b      	lsls	r3, r3, #8
 800095a:	b21a      	sxth	r2, r3
 800095c:	7bfb      	ldrb	r3, [r7, #15]
 800095e:	b21b      	sxth	r3, r3
 8000960:	4313      	orrs	r3, r2
 8000962:	b21a      	sxth	r2, r3
 8000964:	4b18      	ldr	r3, [pc, #96]	@ (80009c8 <BMP180_read_calliberation_data+0x12c>)
 8000966:	801a      	strh	r2, [r3, #0]
	MB = (int16_t)((Callib_Data[16] << 8) | Callib_Data[17]);
 8000968:	7c3b      	ldrb	r3, [r7, #16]
 800096a:	021b      	lsls	r3, r3, #8
 800096c:	b21a      	sxth	r2, r3
 800096e:	7c7b      	ldrb	r3, [r7, #17]
 8000970:	b21b      	sxth	r3, r3
 8000972:	4313      	orrs	r3, r2
 8000974:	b21a      	sxth	r2, r3
 8000976:	4b15      	ldr	r3, [pc, #84]	@ (80009cc <BMP180_read_calliberation_data+0x130>)
 8000978:	801a      	strh	r2, [r3, #0]
	MC = (int16_t)((Callib_Data[18] << 8) | Callib_Data[19]);
 800097a:	7cbb      	ldrb	r3, [r7, #18]
 800097c:	021b      	lsls	r3, r3, #8
 800097e:	b21a      	sxth	r2, r3
 8000980:	7cfb      	ldrb	r3, [r7, #19]
 8000982:	b21b      	sxth	r3, r3
 8000984:	4313      	orrs	r3, r2
 8000986:	b21a      	sxth	r2, r3
 8000988:	4b11      	ldr	r3, [pc, #68]	@ (80009d0 <BMP180_read_calliberation_data+0x134>)
 800098a:	801a      	strh	r2, [r3, #0]
	MD = (int16_t)((Callib_Data[20] << 8) | Callib_Data[21]);
 800098c:	7d3b      	ldrb	r3, [r7, #20]
 800098e:	021b      	lsls	r3, r3, #8
 8000990:	b21a      	sxth	r2, r3
 8000992:	7d7b      	ldrb	r3, [r7, #21]
 8000994:	b21b      	sxth	r3, r3
 8000996:	4313      	orrs	r3, r2
 8000998:	b21a      	sxth	r2, r3
 800099a:	4b0e      	ldr	r3, [pc, #56]	@ (80009d4 <BMP180_read_calliberation_data+0x138>)
 800099c:	801a      	strh	r2, [r3, #0]
}
 800099e:	bf00      	nop
 80009a0:	3718      	adds	r7, #24
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	24000094 	.word	0x24000094
 80009ac:	0000009a 	.word	0x0000009a
 80009b0:	0000009c 	.word	0x0000009c
 80009b4:	0000009e 	.word	0x0000009e
 80009b8:	00000094 	.word	0x00000094
 80009bc:	00000096 	.word	0x00000096
 80009c0:	00000098 	.word	0x00000098
 80009c4:	000000a0 	.word	0x000000a0
 80009c8:	000000a2 	.word	0x000000a2
 80009cc:	000000a4 	.word	0x000000a4
 80009d0:	000000a6 	.word	0x000000a6
 80009d4:	000000a8 	.word	0x000000a8

080009d8 <BMP180_GET_temp>:

float BMP180_GET_temp(uint16_t temperature){
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	80fb      	strh	r3, [r7, #6]

	X1 = ((temperature - AC6) * AC5)/32768;
 80009e2:	88fb      	ldrh	r3, [r7, #6]
 80009e4:	4a22      	ldr	r2, [pc, #136]	@ (8000a70 <BMP180_GET_temp+0x98>)
 80009e6:	8812      	ldrh	r2, [r2, #0]
 80009e8:	1a9b      	subs	r3, r3, r2
 80009ea:	4a22      	ldr	r2, [pc, #136]	@ (8000a74 <BMP180_GET_temp+0x9c>)
 80009ec:	8812      	ldrh	r2, [r2, #0]
 80009ee:	fb02 f303 	mul.w	r3, r2, r3
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	da03      	bge.n	80009fe <BMP180_GET_temp+0x26>
 80009f6:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80009fa:	441a      	add	r2, r3
 80009fc:	4613      	mov	r3, r2
 80009fe:	13db      	asrs	r3, r3, #15
 8000a00:	461a      	mov	r2, r3
 8000a02:	4b1d      	ldr	r3, [pc, #116]	@ (8000a78 <BMP180_GET_temp+0xa0>)
 8000a04:	601a      	str	r2, [r3, #0]
	X2 = (MC * 2048)/(X1 + MD);
 8000a06:	4b1d      	ldr	r3, [pc, #116]	@ (8000a7c <BMP180_GET_temp+0xa4>)
 8000a08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a0c:	02da      	lsls	r2, r3, #11
 8000a0e:	4b1c      	ldr	r3, [pc, #112]	@ (8000a80 <BMP180_GET_temp+0xa8>)
 8000a10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a14:	4619      	mov	r1, r3
 8000a16:	4b18      	ldr	r3, [pc, #96]	@ (8000a78 <BMP180_GET_temp+0xa0>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	440b      	add	r3, r1
 8000a1c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000a20:	4a18      	ldr	r2, [pc, #96]	@ (8000a84 <BMP180_GET_temp+0xac>)
 8000a22:	6013      	str	r3, [r2, #0]
	B5 = X1 + X2;
 8000a24:	4b14      	ldr	r3, [pc, #80]	@ (8000a78 <BMP180_GET_temp+0xa0>)
 8000a26:	681a      	ldr	r2, [r3, #0]
 8000a28:	4b16      	ldr	r3, [pc, #88]	@ (8000a84 <BMP180_GET_temp+0xac>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4413      	add	r3, r2
 8000a2e:	4a16      	ldr	r2, [pc, #88]	@ (8000a88 <BMP180_GET_temp+0xb0>)
 8000a30:	6013      	str	r3, [r2, #0]
	temp = (B5 + 8)/16;
 8000a32:	4b15      	ldr	r3, [pc, #84]	@ (8000a88 <BMP180_GET_temp+0xb0>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	3308      	adds	r3, #8
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	da00      	bge.n	8000a3e <BMP180_GET_temp+0x66>
 8000a3c:	330f      	adds	r3, #15
 8000a3e:	111b      	asrs	r3, r3, #4
 8000a40:	ee07 3a90 	vmov	s15, r3
 8000a44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a48:	4b10      	ldr	r3, [pc, #64]	@ (8000a8c <BMP180_GET_temp+0xb4>)
 8000a4a:	edc3 7a00 	vstr	s15, [r3]
	return temp/10.0;
 8000a4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a8c <BMP180_GET_temp+0xb4>)
 8000a50:	edd3 7a00 	vldr	s15, [r3]
 8000a54:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000a58:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000a5c:	eef0 7a66 	vmov.f32	s15, s13
}
 8000a60:	eeb0 0a67 	vmov.f32	s0, s15
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	00000098 	.word	0x00000098
 8000a74:	00000096 	.word	0x00000096
 8000a78:	000000c4 	.word	0x000000c4
 8000a7c:	000000a6 	.word	0x000000a6
 8000a80:	000000a8 	.word	0x000000a8
 8000a84:	000000c8 	.word	0x000000c8
 8000a88:	000000cc 	.word	0x000000cc
 8000a8c:	000000dc 	.word	0x000000dc

08000a90 <BMP180_GET_pres>:

float BMP180_GET_pres(uint16_t pressure){
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	4603      	mov	r3, r0
 8000a98:	80fb      	strh	r3, [r7, #6]

	UP = BMP180_READ_pres();
 8000a9a:	f7ff fe59 	bl	8000750 <BMP180_READ_pres>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	4a9c      	ldr	r2, [pc, #624]	@ (8000d14 <BMP180_GET_pres+0x284>)
 8000aa2:	6013      	str	r3, [r2, #0]
	X1 = (((UT-AC6) * AC5)/32768);//
 8000aa4:	4b9c      	ldr	r3, [pc, #624]	@ (8000d18 <BMP180_GET_pres+0x288>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a9c      	ldr	r2, [pc, #624]	@ (8000d1c <BMP180_GET_pres+0x28c>)
 8000aaa:	8812      	ldrh	r2, [r2, #0]
 8000aac:	1a9b      	subs	r3, r3, r2
 8000aae:	4a9c      	ldr	r2, [pc, #624]	@ (8000d20 <BMP180_GET_pres+0x290>)
 8000ab0:	8812      	ldrh	r2, [r2, #0]
 8000ab2:	fb02 f303 	mul.w	r3, r2, r3
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	da03      	bge.n	8000ac2 <BMP180_GET_pres+0x32>
 8000aba:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8000abe:	441a      	add	r2, r3
 8000ac0:	4613      	mov	r3, r2
 8000ac2:	13db      	asrs	r3, r3, #15
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	4b97      	ldr	r3, [pc, #604]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000ac8:	601a      	str	r2, [r3, #0]
	X2 = ((MC*(2048)) / (X1+MD));
 8000aca:	4b97      	ldr	r3, [pc, #604]	@ (8000d28 <BMP180_GET_pres+0x298>)
 8000acc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ad0:	02da      	lsls	r2, r3, #11
 8000ad2:	4b96      	ldr	r3, [pc, #600]	@ (8000d2c <BMP180_GET_pres+0x29c>)
 8000ad4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4b92      	ldr	r3, [pc, #584]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	440b      	add	r3, r1
 8000ae0:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ae4:	4a92      	ldr	r2, [pc, #584]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000ae6:	6013      	str	r3, [r2, #0]
	B5 = X1+X2;
 8000ae8:	4b8e      	ldr	r3, [pc, #568]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	4b90      	ldr	r3, [pc, #576]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4413      	add	r3, r2
 8000af2:	4a90      	ldr	r2, [pc, #576]	@ (8000d34 <BMP180_GET_pres+0x2a4>)
 8000af4:	6013      	str	r3, [r2, #0]
	B6 = B5-4000;
 8000af6:	4b8f      	ldr	r3, [pc, #572]	@ (8000d34 <BMP180_GET_pres+0x2a4>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	f5a3 637a 	sub.w	r3, r3, #4000	@ 0xfa0
 8000afe:	4a8e      	ldr	r2, [pc, #568]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000b00:	6013      	str	r3, [r2, #0]
	X1 = (B2 * (B6*B6/(4096)))/(2048);
 8000b02:	4b8e      	ldr	r3, [pc, #568]	@ (8000d3c <BMP180_GET_pres+0x2ac>)
 8000b04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4b8b      	ldr	r3, [pc, #556]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4a8a      	ldr	r2, [pc, #552]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000b10:	6812      	ldr	r2, [r2, #0]
 8000b12:	fb02 f303 	mul.w	r3, r2, r3
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	da01      	bge.n	8000b1e <BMP180_GET_pres+0x8e>
 8000b1a:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8000b1e:	131b      	asrs	r3, r3, #12
 8000b20:	fb01 f303 	mul.w	r3, r1, r3
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	da01      	bge.n	8000b2c <BMP180_GET_pres+0x9c>
 8000b28:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 8000b2c:	12db      	asrs	r3, r3, #11
 8000b2e:	461a      	mov	r2, r3
 8000b30:	4b7c      	ldr	r3, [pc, #496]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000b32:	601a      	str	r2, [r3, #0]
	X2 = AC2*B6/(2048);
 8000b34:	4b82      	ldr	r3, [pc, #520]	@ (8000d40 <BMP180_GET_pres+0x2b0>)
 8000b36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b3a:	461a      	mov	r2, r3
 8000b3c:	4b7e      	ldr	r3, [pc, #504]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	fb02 f303 	mul.w	r3, r2, r3
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	da01      	bge.n	8000b4c <BMP180_GET_pres+0xbc>
 8000b48:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 8000b4c:	12db      	asrs	r3, r3, #11
 8000b4e:	461a      	mov	r2, r3
 8000b50:	4b77      	ldr	r3, [pc, #476]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000b52:	601a      	str	r2, [r3, #0]
	X3 = X1+X2;
 8000b54:	4b73      	ldr	r3, [pc, #460]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	4b75      	ldr	r3, [pc, #468]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	4a79      	ldr	r2, [pc, #484]	@ (8000d44 <BMP180_GET_pres+0x2b4>)
 8000b60:	6013      	str	r3, [r2, #0]
	B3 = (((AC1*4+X3)<<3)+2)/4;
 8000b62:	4b79      	ldr	r3, [pc, #484]	@ (8000d48 <BMP180_GET_pres+0x2b8>)
 8000b64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b68:	009a      	lsls	r2, r3, #2
 8000b6a:	4b76      	ldr	r3, [pc, #472]	@ (8000d44 <BMP180_GET_pres+0x2b4>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4413      	add	r3, r2
 8000b70:	00db      	lsls	r3, r3, #3
 8000b72:	3302      	adds	r3, #2
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	da00      	bge.n	8000b7a <BMP180_GET_pres+0xea>
 8000b78:	3303      	adds	r3, #3
 8000b7a:	109b      	asrs	r3, r3, #2
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	4b73      	ldr	r3, [pc, #460]	@ (8000d4c <BMP180_GET_pres+0x2bc>)
 8000b80:	601a      	str	r2, [r3, #0]
	X1 = AC3*B6/8192;
 8000b82:	4b73      	ldr	r3, [pc, #460]	@ (8000d50 <BMP180_GET_pres+0x2c0>)
 8000b84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b88:	461a      	mov	r2, r3
 8000b8a:	4b6b      	ldr	r3, [pc, #428]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	fb02 f303 	mul.w	r3, r2, r3
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	da03      	bge.n	8000b9e <BMP180_GET_pres+0x10e>
 8000b96:	f641 72ff 	movw	r2, #8191	@ 0x1fff
 8000b9a:	441a      	add	r2, r3
 8000b9c:	4613      	mov	r3, r2
 8000b9e:	135b      	asrs	r3, r3, #13
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	4b60      	ldr	r3, [pc, #384]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000ba4:	601a      	str	r2, [r3, #0]
	X2 = (B1 * (B6*B6/(4096)))/(65536);
 8000ba6:	4b6b      	ldr	r3, [pc, #428]	@ (8000d54 <BMP180_GET_pres+0x2c4>)
 8000ba8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bac:	4619      	mov	r1, r3
 8000bae:	4b62      	ldr	r3, [pc, #392]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4a61      	ldr	r2, [pc, #388]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000bb4:	6812      	ldr	r2, [r2, #0]
 8000bb6:	fb02 f303 	mul.w	r3, r2, r3
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	da01      	bge.n	8000bc2 <BMP180_GET_pres+0x132>
 8000bbe:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8000bc2:	131b      	asrs	r3, r3, #12
 8000bc4:	fb01 f303 	mul.w	r3, r1, r3
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	da03      	bge.n	8000bd4 <BMP180_GET_pres+0x144>
 8000bcc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000bd0:	441a      	add	r2, r3
 8000bd2:	4613      	mov	r3, r2
 8000bd4:	141b      	asrs	r3, r3, #16
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	4b55      	ldr	r3, [pc, #340]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000bda:	601a      	str	r2, [r3, #0]
	X3 = ((X1+X2)+2)/4;
 8000bdc:	4b51      	ldr	r3, [pc, #324]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	4b53      	ldr	r3, [pc, #332]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4413      	add	r3, r2
 8000be6:	3302      	adds	r3, #2
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	da00      	bge.n	8000bee <BMP180_GET_pres+0x15e>
 8000bec:	3303      	adds	r3, #3
 8000bee:	109b      	asrs	r3, r3, #2
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	4b54      	ldr	r3, [pc, #336]	@ (8000d44 <BMP180_GET_pres+0x2b4>)
 8000bf4:	601a      	str	r2, [r3, #0]
	B4 = AC4* (uint32_t)(X3+32768)/(32768);
 8000bf6:	4b58      	ldr	r3, [pc, #352]	@ (8000d58 <BMP180_GET_pres+0x2c8>)
 8000bf8:	881b      	ldrh	r3, [r3, #0]
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	4b51      	ldr	r3, [pc, #324]	@ (8000d44 <BMP180_GET_pres+0x2b4>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8000c04:	fb02 f303 	mul.w	r3, r2, r3
 8000c08:	0bdb      	lsrs	r3, r3, #15
 8000c0a:	4a54      	ldr	r2, [pc, #336]	@ (8000d5c <BMP180_GET_pres+0x2cc>)
 8000c0c:	6013      	str	r3, [r2, #0]
	B7 = ((uint32_t)UP-B3)*(50000>>3);
 8000c0e:	4b41      	ldr	r3, [pc, #260]	@ (8000d14 <BMP180_GET_pres+0x284>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a4e      	ldr	r2, [pc, #312]	@ (8000d4c <BMP180_GET_pres+0x2bc>)
 8000c14:	6812      	ldr	r2, [r2, #0]
 8000c16:	1a9b      	subs	r3, r3, r2
 8000c18:	f641 026a 	movw	r2, #6250	@ 0x186a
 8000c1c:	fb02 f303 	mul.w	r3, r2, r3
 8000c20:	4a4f      	ldr	r2, [pc, #316]	@ (8000d60 <BMP180_GET_pres+0x2d0>)
 8000c22:	6013      	str	r3, [r2, #0]
	if (B7 < 0x80000000){
 8000c24:	4b4e      	ldr	r3, [pc, #312]	@ (8000d60 <BMP180_GET_pres+0x2d0>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	db0e      	blt.n	8000c4a <BMP180_GET_pres+0x1ba>
		pres = (B7*2)/B4;
 8000c2c:	4b4c      	ldr	r3, [pc, #304]	@ (8000d60 <BMP180_GET_pres+0x2d0>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	005a      	lsls	r2, r3, #1
 8000c32:	4b4a      	ldr	r3, [pc, #296]	@ (8000d5c <BMP180_GET_pres+0x2cc>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c3a:	ee07 3a90 	vmov	s15, r3
 8000c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c42:	4b48      	ldr	r3, [pc, #288]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000c44:	edc3 7a00 	vstr	s15, [r3]
 8000c48:	e00d      	b.n	8000c66 <BMP180_GET_pres+0x1d6>
	}
	else{
		pres = (B7/B4)*2;
 8000c4a:	4b45      	ldr	r3, [pc, #276]	@ (8000d60 <BMP180_GET_pres+0x2d0>)
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	4b43      	ldr	r3, [pc, #268]	@ (8000d5c <BMP180_GET_pres+0x2cc>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c56:	005b      	lsls	r3, r3, #1
 8000c58:	ee07 3a90 	vmov	s15, r3
 8000c5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c60:	4b40      	ldr	r3, [pc, #256]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000c62:	edc3 7a00 	vstr	s15, [r3]
	}
	X1 = (pres/(256))*(pres/(256));
 8000c66:	4b3f      	ldr	r3, [pc, #252]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000c68:	edd3 7a00 	vldr	s15, [r3]
 8000c6c:	eddf 6a3e 	vldr	s13, [pc, #248]	@ 8000d68 <BMP180_GET_pres+0x2d8>
 8000c70:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000c74:	4b3b      	ldr	r3, [pc, #236]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000c76:	edd3 6a00 	vldr	s13, [r3]
 8000c7a:	ed9f 6a3b 	vldr	s12, [pc, #236]	@ 8000d68 <BMP180_GET_pres+0x2d8>
 8000c7e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000c82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c8a:	ee17 2a90 	vmov	r2, s15
 8000c8e:	4b25      	ldr	r3, [pc, #148]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000c90:	601a      	str	r2, [r3, #0]
	X1 = (X1*3038)/(65536);
 8000c92:	4b24      	ldr	r3, [pc, #144]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f640 32de 	movw	r2, #3038	@ 0xbde
 8000c9a:	fb02 f303 	mul.w	r3, r2, r3
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	da03      	bge.n	8000caa <BMP180_GET_pres+0x21a>
 8000ca2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ca6:	441a      	add	r2, r3
 8000ca8:	4613      	mov	r3, r2
 8000caa:	141b      	asrs	r3, r3, #16
 8000cac:	461a      	mov	r2, r3
 8000cae:	4b1d      	ldr	r3, [pc, #116]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000cb0:	601a      	str	r2, [r3, #0]
	X2 = (-7357*pres)/(65536);
 8000cb2:	4b2c      	ldr	r3, [pc, #176]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000cb4:	edd3 7a00 	vldr	s15, [r3]
 8000cb8:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8000d6c <BMP180_GET_pres+0x2dc>
 8000cbc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000cc0:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 8000d70 <BMP180_GET_pres+0x2e0>
 8000cc4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000cc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ccc:	ee17 2a90 	vmov	r2, s15
 8000cd0:	4b17      	ldr	r3, [pc, #92]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000cd2:	601a      	str	r2, [r3, #0]
	pres = pres + (X1+X2+3791)/(16);
 8000cd4:	4b13      	ldr	r3, [pc, #76]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	4b15      	ldr	r3, [pc, #84]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4413      	add	r3, r2
 8000cde:	f603 63cf 	addw	r3, r3, #3791	@ 0xecf
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	da00      	bge.n	8000ce8 <BMP180_GET_pres+0x258>
 8000ce6:	330f      	adds	r3, #15
 8000ce8:	111b      	asrs	r3, r3, #4
 8000cea:	ee07 3a90 	vmov	s15, r3
 8000cee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000cf2:	4b1c      	ldr	r3, [pc, #112]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000cf4:	edd3 7a00 	vldr	s15, [r3]
 8000cf8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cfc:	4b19      	ldr	r3, [pc, #100]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000cfe:	edc3 7a00 	vstr	s15, [r3]
	return pres;
 8000d02:	4b18      	ldr	r3, [pc, #96]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	ee07 3a90 	vmov	s15, r3
}
 8000d0a:	eeb0 0a67 	vmov.f32	s0, s15
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	000000b4 	.word	0x000000b4
 8000d18:	000000c0 	.word	0x000000c0
 8000d1c:	00000098 	.word	0x00000098
 8000d20:	00000096 	.word	0x00000096
 8000d24:	000000c4 	.word	0x000000c4
 8000d28:	000000a6 	.word	0x000000a6
 8000d2c:	000000a8 	.word	0x000000a8
 8000d30:	000000c8 	.word	0x000000c8
 8000d34:	000000cc 	.word	0x000000cc
 8000d38:	000000d0 	.word	0x000000d0
 8000d3c:	000000a2 	.word	0x000000a2
 8000d40:	0000009c 	.word	0x0000009c
 8000d44:	000000d8 	.word	0x000000d8
 8000d48:	0000009a 	.word	0x0000009a
 8000d4c:	000000d4 	.word	0x000000d4
 8000d50:	0000009e 	.word	0x0000009e
 8000d54:	000000a0 	.word	0x000000a0
 8000d58:	00000094 	.word	0x00000094
 8000d5c:	000000ac 	.word	0x000000ac
 8000d60:	000000b0 	.word	0x000000b0
 8000d64:	000000e0 	.word	0x000000e0
 8000d68:	43800000 	.word	0x43800000
 8000d6c:	c5e5e800 	.word	0xc5e5e800
 8000d70:	47800000 	.word	0x47800000

08000d74 <BMP180_CALIBRATION>:

void BMP180_CALIBRATION(float *firstpres){
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]

	//for(int i = 0; i < 30; i++){
	BMP180_start_measurment_temp();
 8000d7c:	f7ff fd32 	bl	80007e4 <BMP180_start_measurment_temp>
	HAL_Delay(10); // 9
 8000d80:	200a      	movs	r0, #10
 8000d82:	f008 f8cb 	bl	8008f1c <HAL_Delay>
	temperature = BMP180_READ_temp();
 8000d86:	f7ff fcc1 	bl	800070c <BMP180_READ_temp>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	4b15      	ldr	r3, [pc, #84]	@ (8000de4 <BMP180_CALIBRATION+0x70>)
 8000d90:	601a      	str	r2, [r3, #0]
	temp = BMP180_GET_temp(temperature);
 8000d92:	4b14      	ldr	r3, [pc, #80]	@ (8000de4 <BMP180_CALIBRATION+0x70>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	b29b      	uxth	r3, r3
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff fe1d 	bl	80009d8 <BMP180_GET_temp>
 8000d9e:	eef0 7a40 	vmov.f32	s15, s0
 8000da2:	4b11      	ldr	r3, [pc, #68]	@ (8000de8 <BMP180_CALIBRATION+0x74>)
 8000da4:	edc3 7a00 	vstr	s15, [r3]
	BMP180_start_measurment_pres();
 8000da8:	f7ff fd34 	bl	8000814 <BMP180_start_measurment_pres>
	HAL_Delay(30); // 30
 8000dac:	201e      	movs	r0, #30
 8000dae:	f008 f8b5 	bl	8008f1c <HAL_Delay>
	pressure = BMP180_READ_pres();
 8000db2:	f7ff fccd 	bl	8000750 <BMP180_READ_pres>
 8000db6:	4603      	mov	r3, r0
 8000db8:	461a      	mov	r2, r3
 8000dba:	4b0c      	ldr	r3, [pc, #48]	@ (8000dec <BMP180_CALIBRATION+0x78>)
 8000dbc:	601a      	str	r2, [r3, #0]
	pres = BMP180_GET_pres(pressure);
 8000dbe:	4b0b      	ldr	r3, [pc, #44]	@ (8000dec <BMP180_CALIBRATION+0x78>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	b29b      	uxth	r3, r3
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff fe63 	bl	8000a90 <BMP180_GET_pres>
 8000dca:	eef0 7a40 	vmov.f32	s15, s0
 8000dce:	4b08      	ldr	r3, [pc, #32]	@ (8000df0 <BMP180_CALIBRATION+0x7c>)
 8000dd0:	edc3 7a00 	vstr	s15, [r3]
	//}
	*firstpres = pres;
 8000dd4:	4b06      	ldr	r3, [pc, #24]	@ (8000df0 <BMP180_CALIBRATION+0x7c>)
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	601a      	str	r2, [r3, #0]
}
 8000ddc:	bf00      	nop
 8000dde:	3708      	adds	r7, #8
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	000000b8 	.word	0x000000b8
 8000de8:	000000dc 	.word	0x000000dc
 8000dec:	000000bc 	.word	0x000000bc
 8000df0:	000000e0 	.word	0x000000e0

08000df4 <BMP180_GET_height>:

float BMP180_GET_height(void){
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
	float height = 0, factor; // metry
 8000dfa:	f04f 0300 	mov.w	r3, #0
 8000dfe:	607b      	str	r3, [r7, #4]
	factor = 11.3; // na 1m cisnienie spada o 11,3 pa
 8000e00:	4b0a      	ldr	r3, [pc, #40]	@ (8000e2c <BMP180_GET_height+0x38>)
 8000e02:	603b      	str	r3, [r7, #0]
	height = (ampritude/factor);
 8000e04:	4b0a      	ldr	r3, [pc, #40]	@ (8000e30 <BMP180_GET_height+0x3c>)
 8000e06:	edd3 6a00 	vldr	s13, [r3]
 8000e0a:	ed97 7a00 	vldr	s14, [r7]
 8000e0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e12:	edc7 7a01 	vstr	s15, [r7, #4]
	return height;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	ee07 3a90 	vmov	s15, r3
}
 8000e1c:	eeb0 0a67 	vmov.f32	s0, s15
 8000e20:	370c      	adds	r7, #12
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	4134cccd 	.word	0x4134cccd
 8000e30:	000000e8 	.word	0x000000e8

08000e34 <ESC_1_SPEED>:
static TIM_HandleTypeDef *htim_ESC; //450Hz



void ESC_1_SPEED(uint16_t a)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	80fb      	strh	r3, [r7, #6]
	  if(a < min_speed)
 8000e3e:	88fb      	ldrh	r3, [r7, #6]
 8000e40:	f642 1203 	movw	r2, #10499	@ 0x2903
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d802      	bhi.n	8000e4e <ESC_1_SPEED+0x1a>
	  {
		  a = min_speed;
 8000e48:	f642 1304 	movw	r3, #10500	@ 0x2904
 8000e4c:	80fb      	strh	r3, [r7, #6]
	  }
	  if(a >  max_speed)
 8000e4e:	88fb      	ldrh	r3, [r7, #6]
 8000e50:	f644 422c 	movw	r2, #19500	@ 0x4c2c
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d902      	bls.n	8000e5e <ESC_1_SPEED+0x2a>
	  {
		  a =  max_speed;
 8000e58:	f644 432c 	movw	r3, #19500	@ 0x4c2c
 8000e5c:	80fb      	strh	r3, [r7, #6]
	  }
	  __HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_1, a);
 8000e5e:	4b05      	ldr	r3, [pc, #20]	@ (8000e74 <ESC_1_SPEED+0x40>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	88fa      	ldrh	r2, [r7, #6]
 8000e66:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000e68:	bf00      	nop
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	24000098 	.word	0x24000098

08000e78 <ESC_2_SPEED>:

void ESC_2_SPEED(uint16_t a)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	80fb      	strh	r3, [r7, #6]
	  if(a < min_speed)
 8000e82:	88fb      	ldrh	r3, [r7, #6]
 8000e84:	f642 1203 	movw	r2, #10499	@ 0x2903
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d802      	bhi.n	8000e92 <ESC_2_SPEED+0x1a>
	  {
		  a = min_speed;
 8000e8c:	f642 1304 	movw	r3, #10500	@ 0x2904
 8000e90:	80fb      	strh	r3, [r7, #6]
	  }
	  if(a >  max_speed)
 8000e92:	88fb      	ldrh	r3, [r7, #6]
 8000e94:	f644 422c 	movw	r2, #19500	@ 0x4c2c
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d902      	bls.n	8000ea2 <ESC_2_SPEED+0x2a>
	  {
		  a =  max_speed;
 8000e9c:	f644 432c 	movw	r3, #19500	@ 0x4c2c
 8000ea0:	80fb      	strh	r3, [r7, #6]
	  }

	  __HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_2, a);
 8000ea2:	4b05      	ldr	r3, [pc, #20]	@ (8000eb8 <ESC_2_SPEED+0x40>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	88fa      	ldrh	r2, [r7, #6]
 8000eaa:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000eac:	bf00      	nop
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	24000098 	.word	0x24000098

08000ebc <ESC_3_SPEED>:

void ESC_3_SPEED(uint16_t a)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	80fb      	strh	r3, [r7, #6]
	  if(a < min_speed)
 8000ec6:	88fb      	ldrh	r3, [r7, #6]
 8000ec8:	f642 1203 	movw	r2, #10499	@ 0x2903
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d802      	bhi.n	8000ed6 <ESC_3_SPEED+0x1a>
	  {
		  a = min_speed;
 8000ed0:	f642 1304 	movw	r3, #10500	@ 0x2904
 8000ed4:	80fb      	strh	r3, [r7, #6]
	  }
	  if(a >  max_speed)
 8000ed6:	88fb      	ldrh	r3, [r7, #6]
 8000ed8:	f644 422c 	movw	r2, #19500	@ 0x4c2c
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d902      	bls.n	8000ee6 <ESC_3_SPEED+0x2a>
	  {
		  a =  max_speed;
 8000ee0:	f644 432c 	movw	r3, #19500	@ 0x4c2c
 8000ee4:	80fb      	strh	r3, [r7, #6]
	  }

	  __HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_3, a);
 8000ee6:	4b05      	ldr	r3, [pc, #20]	@ (8000efc <ESC_3_SPEED+0x40>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	88fa      	ldrh	r2, [r7, #6]
 8000eee:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000ef0:	bf00      	nop
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	24000098 	.word	0x24000098

08000f00 <ESC_4_SPEED>:

void ESC_4_SPEED(uint16_t a)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	80fb      	strh	r3, [r7, #6]
	  if(a < min_speed)
 8000f0a:	88fb      	ldrh	r3, [r7, #6]
 8000f0c:	f642 1203 	movw	r2, #10499	@ 0x2903
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d802      	bhi.n	8000f1a <ESC_4_SPEED+0x1a>
	  {
		  a = min_speed;
 8000f14:	f642 1304 	movw	r3, #10500	@ 0x2904
 8000f18:	80fb      	strh	r3, [r7, #6]
	  }
	  if(a > max_speed)
 8000f1a:	88fb      	ldrh	r3, [r7, #6]
 8000f1c:	f644 422c 	movw	r2, #19500	@ 0x4c2c
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d902      	bls.n	8000f2a <ESC_4_SPEED+0x2a>
	  {
		  a = max_speed;
 8000f24:	f644 432c 	movw	r3, #19500	@ 0x4c2c
 8000f28:	80fb      	strh	r3, [r7, #6]
	  }

	  __HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_4, a);
 8000f2a:	4b05      	ldr	r3, [pc, #20]	@ (8000f40 <ESC_4_SPEED+0x40>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	88fa      	ldrh	r2, [r7, #6]
 8000f32:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000f34:	bf00      	nop
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	24000098 	.word	0x24000098

08000f44 <ESC_INT>:
 *
 * najpierw wlonczamy PWM a dopiero potem zasilanie do silników, w przeciwnym razie ESC mogą włączyć się w trybie programowania.
 *
 */
void ESC_INT(TIM_HandleTypeDef *htim)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
	htim_ESC = htim;
 8000f4c:	4a20      	ldr	r2, [pc, #128]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6013      	str	r3, [r2, #0]


	HAL_TIM_PWM_Start(htim_ESC, TIM_CHANNEL_1);
 8000f52:	4b1f      	ldr	r3, [pc, #124]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	2100      	movs	r1, #0
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f015 f889 	bl	8016070 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim_ESC, TIM_CHANNEL_2);
 8000f5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	2104      	movs	r1, #4
 8000f64:	4618      	mov	r0, r3
 8000f66:	f015 f883 	bl	8016070 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim_ESC, TIM_CHANNEL_3);
 8000f6a:	4b19      	ldr	r3, [pc, #100]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	2108      	movs	r1, #8
 8000f70:	4618      	mov	r0, r3
 8000f72:	f015 f87d 	bl	8016070 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim_ESC, TIM_CHANNEL_4);
 8000f76:	4b16      	ldr	r3, [pc, #88]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	210c      	movs	r1, #12
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f015 f877 	bl	8016070 <HAL_TIM_PWM_Start>

	__HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_1, 10000);
 8000f82:	4b13      	ldr	r3, [pc, #76]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000f8c:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_2, 10000);
 8000f8e:	4b10      	ldr	r3, [pc, #64]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000f98:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_3, 10000);
 8000f9a:	4b0d      	ldr	r3, [pc, #52]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000fa4:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_4, 10000);
 8000fa6:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd0 <ESC_INT+0x8c>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000fb0:	641a      	str	r2, [r3, #64]	@ 0x40
	ESC_POWER_0;
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000fb8:	4806      	ldr	r0, [pc, #24]	@ (8000fd4 <ESC_INT+0x90>)
 8000fba:	f00d f90d 	bl	800e1d8 <HAL_GPIO_WritePin>
	HAL_Delay(3000);
 8000fbe:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000fc2:	f007 ffab 	bl	8008f1c <HAL_Delay>
}
 8000fc6:	bf00      	nop
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	24000098 	.word	0x24000098
 8000fd4:	58021800 	.word	0x58021800

08000fd8 <HMC5883L_Init>:
static I2C_HandleTypeDef *hi2c_HMC5883L;

extern uint8_t HMC5883L_Data_IT[6];
extern uint8_t HMC583L_IRQ;

uint8_t HMC5883L_Init(I2C_HandleTypeDef*hi2c){
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b088      	sub	sp, #32
 8000fdc:	af04      	add	r7, sp, #16
 8000fde:	6078      	str	r0, [r7, #4]

	hi2c_HMC5883L = hi2c;
 8000fe0:	4a2a      	ldr	r2, [pc, #168]	@ (800108c <HMC5883L_Init+0xb4>)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6013      	str	r3, [r2, #0]

	uint8_t data = 0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	73fb      	strb	r3, [r7, #15]
	 * bit3 = 0			30 HzOutput rate
	 * bit2 = 0		}
	 * bit1 = 0
	 * bit0 = 0
	 */
	data = 0xF0;
 8000fea:	23f0      	movs	r3, #240	@ 0xf0
 8000fec:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Write(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Configuration_Register_A, 1, &data, 1, 1);
 8000fee:	4b27      	ldr	r3, [pc, #156]	@ (800108c <HMC5883L_Init+0xb4>)
 8000ff0:	6818      	ldr	r0, [r3, #0]
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	9302      	str	r3, [sp, #8]
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	9301      	str	r3, [sp, #4]
 8000ffa:	f107 030f 	add.w	r3, r7, #15
 8000ffe:	9300      	str	r3, [sp, #0]
 8001000:	2301      	movs	r3, #1
 8001002:	2200      	movs	r2, #0
 8001004:	213c      	movs	r1, #60	@ 0x3c
 8001006:	f00d f9b7 	bl	800e378 <HAL_I2C_Mem_Write>
	 * bit3 = 0
	 * bit2 = 0
	 * bit1 = 0
	 * bit0 = 0
	 */
	data = 0x32;
 800100a:	2332      	movs	r3, #50	@ 0x32
 800100c:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Write(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Configuration_Register_B, 1, &data, 1, 1);
 800100e:	4b1f      	ldr	r3, [pc, #124]	@ (800108c <HMC5883L_Init+0xb4>)
 8001010:	6818      	ldr	r0, [r3, #0]
 8001012:	2301      	movs	r3, #1
 8001014:	9302      	str	r3, [sp, #8]
 8001016:	2301      	movs	r3, #1
 8001018:	9301      	str	r3, [sp, #4]
 800101a:	f107 030f 	add.w	r3, r7, #15
 800101e:	9300      	str	r3, [sp, #0]
 8001020:	2301      	movs	r3, #1
 8001022:	2201      	movs	r2, #1
 8001024:	213c      	movs	r1, #60	@ 0x3c
 8001026:	f00d f9a7 	bl	800e378 <HAL_I2C_Mem_Write>
	 * bit3 = 0
	 * bit2 = 0
	 * bit1 = 0	{ Continuous-Measurement Mode
	 * bit0 = 0 }
	 */
	data = 0x80;
 800102a:	2380      	movs	r3, #128	@ 0x80
 800102c:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Write(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Mode_Register, 1, &data, 1, 1);
 800102e:	4b17      	ldr	r3, [pc, #92]	@ (800108c <HMC5883L_Init+0xb4>)
 8001030:	6818      	ldr	r0, [r3, #0]
 8001032:	2301      	movs	r3, #1
 8001034:	9302      	str	r3, [sp, #8]
 8001036:	2301      	movs	r3, #1
 8001038:	9301      	str	r3, [sp, #4]
 800103a:	f107 030f 	add.w	r3, r7, #15
 800103e:	9300      	str	r3, [sp, #0]
 8001040:	2301      	movs	r3, #1
 8001042:	2202      	movs	r2, #2
 8001044:	213c      	movs	r1, #60	@ 0x3c
 8001046:	f00d f997 	bl	800e378 <HAL_I2C_Mem_Write>


	uint8_t status = 0;
 800104a:	2300      	movs	r3, #0
 800104c:	73bb      	strb	r3, [r7, #14]

	HAL_I2C_Mem_Read(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Identifaction_Register_A, 1, &status, 1, 1);
 800104e:	4b0f      	ldr	r3, [pc, #60]	@ (800108c <HMC5883L_Init+0xb4>)
 8001050:	6818      	ldr	r0, [r3, #0]
 8001052:	2301      	movs	r3, #1
 8001054:	9302      	str	r3, [sp, #8]
 8001056:	2301      	movs	r3, #1
 8001058:	9301      	str	r3, [sp, #4]
 800105a:	f107 030e 	add.w	r3, r7, #14
 800105e:	9300      	str	r3, [sp, #0]
 8001060:	2301      	movs	r3, #1
 8001062:	220a      	movs	r2, #10
 8001064:	213c      	movs	r1, #60	@ 0x3c
 8001066:	f00d fa9b 	bl	800e5a0 <HAL_I2C_Mem_Read>

	if(status != 0x48){
 800106a:	7bbb      	ldrb	r3, [r7, #14]
 800106c:	2b48      	cmp	r3, #72	@ 0x48
 800106e:	d002      	beq.n	8001076 <HMC5883L_Init+0x9e>
		status = 0;
 8001070:	2300      	movs	r3, #0
 8001072:	73bb      	strb	r3, [r7, #14]
 8001074:	e001      	b.n	800107a <HMC5883L_Init+0xa2>
	}
	else{
		status = 1;
 8001076:	2301      	movs	r3, #1
 8001078:	73bb      	strb	r3, [r7, #14]
	}
	HAL_Delay(10);
 800107a:	200a      	movs	r0, #10
 800107c:	f007 ff4e 	bl	8008f1c <HAL_Delay>

	return status;
 8001080:	7bbb      	ldrb	r3, [r7, #14]
}
 8001082:	4618      	mov	r0, r3
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	2400009c 	.word	0x2400009c

08001090 <HMC5883L_Get_Z_Start>:


int16_t HMC5883L_Get_Z_Start(void){
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af04      	add	r7, sp, #16
	int16_t fulldata = 182;
 8001096:	23b6      	movs	r3, #182	@ 0xb6
 8001098:	80fb      	strh	r3, [r7, #6]
	uint8_t data[6];

	HAL_I2C_Mem_Read(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Data_Output_Z_MSB_Register, 1, data, 6, 1);
 800109a:	4b0d      	ldr	r3, [pc, #52]	@ (80010d0 <HMC5883L_Get_Z_Start+0x40>)
 800109c:	6818      	ldr	r0, [r3, #0]
 800109e:	2301      	movs	r3, #1
 80010a0:	9302      	str	r3, [sp, #8]
 80010a2:	2306      	movs	r3, #6
 80010a4:	9301      	str	r3, [sp, #4]
 80010a6:	463b      	mov	r3, r7
 80010a8:	9300      	str	r3, [sp, #0]
 80010aa:	2301      	movs	r3, #1
 80010ac:	2205      	movs	r2, #5
 80010ae:	213c      	movs	r1, #60	@ 0x3c
 80010b0:	f00d fa76 	bl	800e5a0 <HAL_I2C_Mem_Read>

	fulldata = ((int16_t)data[4]<<8) | data[5];
 80010b4:	793b      	ldrb	r3, [r7, #4]
 80010b6:	021b      	lsls	r3, r3, #8
 80010b8:	b21a      	sxth	r2, r3
 80010ba:	797b      	ldrb	r3, [r7, #5]
 80010bc:	b21b      	sxth	r3, r3
 80010be:	4313      	orrs	r3, r2
 80010c0:	80fb      	strh	r3, [r7, #6]

	return fulldata;
 80010c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	2400009c 	.word	0x2400009c

080010d4 <HMC5883L_Get_Z_Start_IT>:

void HMC5883L_Get_Z_Start_IT(void){
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af02      	add	r7, sp, #8
	HAL_I2C_Mem_Read_IT(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Data_Output_Z_MSB_Register, 1, (uint8_t *)HMC5883L_Data_IT, 6);
 80010da:	4b08      	ldr	r3, [pc, #32]	@ (80010fc <HMC5883L_Get_Z_Start_IT+0x28>)
 80010dc:	6818      	ldr	r0, [r3, #0]
 80010de:	2306      	movs	r3, #6
 80010e0:	9301      	str	r3, [sp, #4]
 80010e2:	4b07      	ldr	r3, [pc, #28]	@ (8001100 <HMC5883L_Get_Z_Start_IT+0x2c>)
 80010e4:	9300      	str	r3, [sp, #0]
 80010e6:	2301      	movs	r3, #1
 80010e8:	2205      	movs	r2, #5
 80010ea:	213c      	movs	r1, #60	@ 0x3c
 80010ec:	f00d fbfc 	bl	800e8e8 <HAL_I2C_Mem_Read_IT>
	HMC583L_IRQ = 1;
 80010f0:	4b04      	ldr	r3, [pc, #16]	@ (8001104 <HMC5883L_Get_Z_Start_IT+0x30>)
 80010f2:	2201      	movs	r2, #1
 80010f4:	701a      	strb	r2, [r3, #0]
}
 80010f6:	bf00      	nop
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	2400009c 	.word	0x2400009c
 8001100:	00000064 	.word	0x00000064
 8001104:	000041d5 	.word	0x000041d5

08001108 <HMC5883L_Get_Z_End_IT>:

int16_t HMC5883L_Get_Z_End_IT(void){
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
	int16_t fulldata = 0;
 800110e:	2300      	movs	r3, #0
 8001110:	80fb      	strh	r3, [r7, #6]

	fulldata = ((int16_t)HMC5883L_Data_IT[4]<<8) | HMC5883L_Data_IT[5];
 8001112:	4b08      	ldr	r3, [pc, #32]	@ (8001134 <HMC5883L_Get_Z_End_IT+0x2c>)
 8001114:	791b      	ldrb	r3, [r3, #4]
 8001116:	021b      	lsls	r3, r3, #8
 8001118:	b21a      	sxth	r2, r3
 800111a:	4b06      	ldr	r3, [pc, #24]	@ (8001134 <HMC5883L_Get_Z_End_IT+0x2c>)
 800111c:	795b      	ldrb	r3, [r3, #5]
 800111e:	b21b      	sxth	r3, r3
 8001120:	4313      	orrs	r3, r2
 8001122:	80fb      	strh	r3, [r7, #6]

	return fulldata;
 8001124:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001128:	4618      	mov	r0, r3
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	00000064 	.word	0x00000064

08001138 <HMC5883L_Calibration>:


int16_t HMC5883L_Calibration(void){
 8001138:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800113c:	b084      	sub	sp, #16
 800113e:	af00      	add	r7, sp, #0
	int64_t mes_data = 0;
 8001140:	f04f 0200 	mov.w	r2, #0
 8001144:	f04f 0300 	mov.w	r3, #0
 8001148:	e9c7 2302 	strd	r2, r3, [r7, #8]
	for(int i = 0; i < 10; i++){
 800114c:	2300      	movs	r3, #0
 800114e:	607b      	str	r3, [r7, #4]
 8001150:	e014      	b.n	800117c <HMC5883L_Calibration+0x44>
		mes_data += HMC5883L_Get_Z_Start();
 8001152:	f7ff ff9d 	bl	8001090 <HMC5883L_Get_Z_Start>
 8001156:	4603      	mov	r3, r0
 8001158:	b21b      	sxth	r3, r3
 800115a:	17da      	asrs	r2, r3, #31
 800115c:	461c      	mov	r4, r3
 800115e:	4615      	mov	r5, r2
 8001160:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001164:	eb12 0804 	adds.w	r8, r2, r4
 8001168:	eb43 0905 	adc.w	r9, r3, r5
 800116c:	e9c7 8902 	strd	r8, r9, [r7, #8]
		HAL_Delay(100); //Output = 30Hz
 8001170:	2064      	movs	r0, #100	@ 0x64
 8001172:	f007 fed3 	bl	8008f1c <HAL_Delay>
	for(int i = 0; i < 10; i++){
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	3301      	adds	r3, #1
 800117a:	607b      	str	r3, [r7, #4]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2b09      	cmp	r3, #9
 8001180:	dde7      	ble.n	8001152 <HMC5883L_Calibration+0x1a>
	}

	return (mes_data/10);
 8001182:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001186:	f04f 020a 	mov.w	r2, #10
 800118a:	f04f 0300 	mov.w	r3, #0
 800118e:	f7ff f8bf 	bl	8000310 <__aeabi_ldivmod>
 8001192:	4602      	mov	r2, r0
 8001194:	460b      	mov	r3, r1
 8001196:	b213      	sxth	r3, r2
}
 8001198:	4618      	mov	r0, r3
 800119a:	3710      	adds	r7, #16
 800119c:	46bd      	mov	sp, r7
 800119e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

080011a4 <MPU6050_INIT>:
//extern float xval;
//extern float yval;
//extern float zval;


uint8_t MPU6050_INIT(I2C_HandleTypeDef*hi2c){
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
	hi2c_mpu6050 = hi2c;
 80011ac:	4a13      	ldr	r2, [pc, #76]	@ (80011fc <MPU6050_INIT+0x58>)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6013      	str	r3, [r2, #0]
	MPU6050_RESET();
 80011b2:	f000 f825 	bl	8001200 <MPU6050_RESET>
	MPU6050_CONFIG_SAMPLE_RATE();
 80011b6:	f000 f88f 	bl	80012d8 <MPU6050_CONFIG_SAMPLE_RATE>
	MPU6050_CONFIG_DLPF(0x05);// //05
 80011ba:	2005      	movs	r0, #5
 80011bc:	f000 f838 	bl	8001230 <MPU6050_CONFIG_DLPF>
	/*
	 *  0 - 250 o/s
	 *  0x08 - 500 o/s
	 */
	MPU6050_CONFIG_GYRO(0x08);//+-500 o/s
 80011c0:	2008      	movs	r0, #8
 80011c2:	f000 f851 	bl	8001268 <MPU6050_CONFIG_GYRO>
	MPU6050_CONFIG_ACCEL(0x08); // +-4g
 80011c6:	2008      	movs	r0, #8
 80011c8:	f000 f86a 	bl	80012a0 <MPU6050_CONFIG_ACCEL>

	MPU6050_Enable_I2C_Bypass();
 80011cc:	f000 fd34 	bl	8001c38 <MPU6050_Enable_I2C_Bypass>
	MPU6050_CONFIG_USER_CONTROL();
 80011d0:	f000 f89a 	bl	8001308 <MPU6050_CONFIG_USER_CONTROL>

	HAL_Delay(10);
 80011d4:	200a      	movs	r0, #10
 80011d6:	f007 fea1 	bl	8008f1c <HAL_Delay>

	uint8_t status;
	status = MPU6050_READ_ID();
 80011da:	f000 fd15 	bl	8001c08 <MPU6050_READ_ID>
 80011de:	4603      	mov	r3, r0
 80011e0:	73fb      	strb	r3, [r7, #15]

	if(status != 104){
 80011e2:	7bfb      	ldrb	r3, [r7, #15]
 80011e4:	2b68      	cmp	r3, #104	@ 0x68
 80011e6:	d002      	beq.n	80011ee <MPU6050_INIT+0x4a>
		status = 0;//error
 80011e8:	2300      	movs	r3, #0
 80011ea:	73fb      	strb	r3, [r7, #15]
 80011ec:	e001      	b.n	80011f2 <MPU6050_INIT+0x4e>
	}
	else{
		status = 1;//ok
 80011ee:	2301      	movs	r3, #1
 80011f0:	73fb      	strb	r3, [r7, #15]
//	int x = MPU6050_GET_ACCEL_FULLVALUE_X();
//	x = MPU6050_READ_CONFIG_SAMPLE_RATE();
//	x = MPU6050_READ_CONFIG_DLPF();//1kHz;
//	x = MPU6050_READ_CONFIG_GYRO();//+-500 o/s;
//	x = MPU6050_READ_CONFIG_ACCEL(); // +-8g;;
	return status;
 80011f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3710      	adds	r7, #16
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	240000a0 	.word	0x240000a0

08001200 <MPU6050_RESET>:


void MPU6050_RESET(void){
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af04      	add	r7, sp, #16
	uint8_t data = 0x00;//0x80
 8001206:	2300      	movs	r3, #0
 8001208:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, 1, &data, 1, 1);
 800120a:	4b08      	ldr	r3, [pc, #32]	@ (800122c <MPU6050_RESET+0x2c>)
 800120c:	6818      	ldr	r0, [r3, #0]
 800120e:	2301      	movs	r3, #1
 8001210:	9302      	str	r3, [sp, #8]
 8001212:	2301      	movs	r3, #1
 8001214:	9301      	str	r3, [sp, #4]
 8001216:	1dfb      	adds	r3, r7, #7
 8001218:	9300      	str	r3, [sp, #0]
 800121a:	2301      	movs	r3, #1
 800121c:	226b      	movs	r2, #107	@ 0x6b
 800121e:	21d0      	movs	r1, #208	@ 0xd0
 8001220:	f00d f8aa 	bl	800e378 <HAL_I2C_Mem_Write>
}
 8001224:	bf00      	nop
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	240000a0 	.word	0x240000a0

08001230 <MPU6050_CONFIG_DLPF>:

void MPU6050_CONFIG_DLPF(uint8_t DLPF_CFG){
 8001230:	b580      	push	{r7, lr}
 8001232:	b088      	sub	sp, #32
 8001234:	af04      	add	r7, sp, #16
 8001236:	4603      	mov	r3, r0
 8001238:	71fb      	strb	r3, [r7, #7]
	uint8_t data = DLPF_CFG;
 800123a:	79fb      	ldrb	r3, [r7, #7]
 800123c:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_CONFIG, 1, &data, 1, 1);
 800123e:	4b09      	ldr	r3, [pc, #36]	@ (8001264 <MPU6050_CONFIG_DLPF+0x34>)
 8001240:	6818      	ldr	r0, [r3, #0]
 8001242:	2301      	movs	r3, #1
 8001244:	9302      	str	r3, [sp, #8]
 8001246:	2301      	movs	r3, #1
 8001248:	9301      	str	r3, [sp, #4]
 800124a:	f107 030f 	add.w	r3, r7, #15
 800124e:	9300      	str	r3, [sp, #0]
 8001250:	2301      	movs	r3, #1
 8001252:	221a      	movs	r2, #26
 8001254:	21d0      	movs	r1, #208	@ 0xd0
 8001256:	f00d f88f 	bl	800e378 <HAL_I2C_Mem_Write>
}
 800125a:	bf00      	nop
 800125c:	3710      	adds	r7, #16
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	240000a0 	.word	0x240000a0

08001268 <MPU6050_CONFIG_GYRO>:

void MPU6050_CONFIG_GYRO(uint8_t GYRO_CFG/*konfiguracja gyroskopy*/){
 8001268:	b580      	push	{r7, lr}
 800126a:	b088      	sub	sp, #32
 800126c:	af04      	add	r7, sp, #16
 800126e:	4603      	mov	r3, r0
 8001270:	71fb      	strb	r3, [r7, #7]
	uint8_t data = GYRO_CFG;
 8001272:	79fb      	ldrb	r3, [r7, #7]
 8001274:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_CONFIG, 1, &data, 1, 1);
 8001276:	4b09      	ldr	r3, [pc, #36]	@ (800129c <MPU6050_CONFIG_GYRO+0x34>)
 8001278:	6818      	ldr	r0, [r3, #0]
 800127a:	2301      	movs	r3, #1
 800127c:	9302      	str	r3, [sp, #8]
 800127e:	2301      	movs	r3, #1
 8001280:	9301      	str	r3, [sp, #4]
 8001282:	f107 030f 	add.w	r3, r7, #15
 8001286:	9300      	str	r3, [sp, #0]
 8001288:	2301      	movs	r3, #1
 800128a:	221b      	movs	r2, #27
 800128c:	21d0      	movs	r1, #208	@ 0xd0
 800128e:	f00d f873 	bl	800e378 <HAL_I2C_Mem_Write>
}
 8001292:	bf00      	nop
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	240000a0 	.word	0x240000a0

080012a0 <MPU6050_CONFIG_ACCEL>:

void MPU6050_CONFIG_ACCEL(uint8_t ACCEL_CFG/*konfiguracja akcelorometru*/){
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b088      	sub	sp, #32
 80012a4:	af04      	add	r7, sp, #16
 80012a6:	4603      	mov	r3, r0
 80012a8:	71fb      	strb	r3, [r7, #7]
	uint8_t data = ACCEL_CFG;
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_CONFIG, 1, &data, 1, 1);
 80012ae:	4b09      	ldr	r3, [pc, #36]	@ (80012d4 <MPU6050_CONFIG_ACCEL+0x34>)
 80012b0:	6818      	ldr	r0, [r3, #0]
 80012b2:	2301      	movs	r3, #1
 80012b4:	9302      	str	r3, [sp, #8]
 80012b6:	2301      	movs	r3, #1
 80012b8:	9301      	str	r3, [sp, #4]
 80012ba:	f107 030f 	add.w	r3, r7, #15
 80012be:	9300      	str	r3, [sp, #0]
 80012c0:	2301      	movs	r3, #1
 80012c2:	221c      	movs	r2, #28
 80012c4:	21d0      	movs	r1, #208	@ 0xd0
 80012c6:	f00d f857 	bl	800e378 <HAL_I2C_Mem_Write>
}
 80012ca:	bf00      	nop
 80012cc:	3710      	adds	r7, #16
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	240000a0 	.word	0x240000a0

080012d8 <MPU6050_CONFIG_SAMPLE_RATE>:
void MPU6050_CONFIG_INT(void){
	uint8_t data = 0x00;
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_INT_ENABLE, 1, &data, 1, 1);
}

void MPU6050_CONFIG_SAMPLE_RATE(void){
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af04      	add	r7, sp, #16
	uint8_t data = 0x00; // Sample Rate = Gyroscope Output Rate / (1 + SMPLRT_DIV)                 Gyroscope Output Rate = 1kHz
 80012de:	2300      	movs	r3, #0
 80012e0:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_SMPLRT_DIV, 1, &data, 1, 1);
 80012e2:	4b08      	ldr	r3, [pc, #32]	@ (8001304 <MPU6050_CONFIG_SAMPLE_RATE+0x2c>)
 80012e4:	6818      	ldr	r0, [r3, #0]
 80012e6:	2301      	movs	r3, #1
 80012e8:	9302      	str	r3, [sp, #8]
 80012ea:	2301      	movs	r3, #1
 80012ec:	9301      	str	r3, [sp, #4]
 80012ee:	1dfb      	adds	r3, r7, #7
 80012f0:	9300      	str	r3, [sp, #0]
 80012f2:	2301      	movs	r3, #1
 80012f4:	2219      	movs	r2, #25
 80012f6:	21d0      	movs	r1, #208	@ 0xd0
 80012f8:	f00d f83e 	bl	800e378 <HAL_I2C_Mem_Write>
}
 80012fc:	bf00      	nop
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	240000a0 	.word	0x240000a0

08001308 <MPU6050_CONFIG_USER_CONTROL>:
void MPU6050_CONFIG_INTERRUPT_ENABLE(void){
	uint8_t data = 0x00;
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_2, 1, &data, 1, 1);
}

void MPU6050_CONFIG_USER_CONTROL(void){
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af04      	add	r7, sp, #16
	uint8_t data = 0x00;
 800130e:	2300      	movs	r3, #0
 8001310:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_USER_CTRL, 1, &data, 1, 1);
 8001312:	4b08      	ldr	r3, [pc, #32]	@ (8001334 <MPU6050_CONFIG_USER_CONTROL+0x2c>)
 8001314:	6818      	ldr	r0, [r3, #0]
 8001316:	2301      	movs	r3, #1
 8001318:	9302      	str	r3, [sp, #8]
 800131a:	2301      	movs	r3, #1
 800131c:	9301      	str	r3, [sp, #4]
 800131e:	1dfb      	adds	r3, r7, #7
 8001320:	9300      	str	r3, [sp, #0]
 8001322:	2301      	movs	r3, #1
 8001324:	226a      	movs	r2, #106	@ 0x6a
 8001326:	21d0      	movs	r1, #208	@ 0xd0
 8001328:	f00d f826 	bl	800e378 <HAL_I2C_Mem_Write>
}
 800132c:	bf00      	nop
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	240000a0 	.word	0x240000a0

08001338 <MPU6050_CALIBRATION>:


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void MPU6050_CALIBRATION(float *accelx_cal,float *accely_cal,float*accelz_cal,float *gyrox_cal,float *gyroy_cal,
		float *gyroz_cal, float Gyr_Scale, float Acc_Scale){
 8001338:	b580      	push	{r7, lr}
 800133a:	b08e      	sub	sp, #56	@ 0x38
 800133c:	af00      	add	r7, sp, #0
 800133e:	6178      	str	r0, [r7, #20]
 8001340:	6139      	str	r1, [r7, #16]
 8001342:	60fa      	str	r2, [r7, #12]
 8001344:	60bb      	str	r3, [r7, #8]
 8001346:	ed87 0a01 	vstr	s0, [r7, #4]
 800134a:	edc7 0a00 	vstr	s1, [r7]

	float accelx = 0, accely = 0, accelz = 0, gyrox = 0, gyroy = 0, gyroz = 0;
 800134e:	f04f 0300 	mov.w	r3, #0
 8001352:	637b      	str	r3, [r7, #52]	@ 0x34
 8001354:	f04f 0300 	mov.w	r3, #0
 8001358:	633b      	str	r3, [r7, #48]	@ 0x30
 800135a:	f04f 0300 	mov.w	r3, #0
 800135e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001360:	f04f 0300 	mov.w	r3, #0
 8001364:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001366:	f04f 0300 	mov.w	r3, #0
 800136a:	627b      	str	r3, [r7, #36]	@ 0x24
 800136c:	f04f 0300 	mov.w	r3, #0
 8001370:	623b      	str	r3, [r7, #32]
	for(int i = 0; i < 1000; i++){ //5 sec
 8001372:	2300      	movs	r3, #0
 8001374:	61fb      	str	r3, [r7, #28]
 8001376:	e06b      	b.n	8001450 <MPU6050_CALIBRATION+0x118>
		  accelx = accelx + MPU6050_GET_ACCEL_FULLVALUE_X()/Acc_Scale;
 8001378:	f000 fbc2 	bl	8001b00 <MPU6050_GET_ACCEL_FULLVALUE_X>
 800137c:	4603      	mov	r3, r0
 800137e:	ee07 3a90 	vmov	s15, r3
 8001382:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001386:	ed97 7a00 	vldr	s14, [r7]
 800138a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800138e:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001392:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001396:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		  accely = accely + MPU6050_GET_ACCEL_FULLVALUE_Y()/Acc_Scale;
 800139a:	f000 fbd1 	bl	8001b40 <MPU6050_GET_ACCEL_FULLVALUE_Y>
 800139e:	4603      	mov	r3, r0
 80013a0:	ee07 3a90 	vmov	s15, r3
 80013a4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80013a8:	ed97 7a00 	vldr	s14, [r7]
 80013ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013b0:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80013b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013b8:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		  accelz = accelz + MPU6050_GET_ACCEL_FULLVALUE_Z()/Acc_Scale;
 80013bc:	f000 fbd4 	bl	8001b68 <MPU6050_GET_ACCEL_FULLVALUE_Z>
 80013c0:	4603      	mov	r3, r0
 80013c2:	ee07 3a90 	vmov	s15, r3
 80013c6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80013ca:	ed97 7a00 	vldr	s14, [r7]
 80013ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013d2:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80013d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013da:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

		  gyrox = gyrox + MPU6050_GET_GYRO_FULLVALUE_X()/Gyr_Scale;
 80013de:	f000 fbd7 	bl	8001b90 <MPU6050_GET_GYRO_FULLVALUE_X>
 80013e2:	4603      	mov	r3, r0
 80013e4:	ee07 3a90 	vmov	s15, r3
 80013e8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80013ec:	ed97 7a01 	vldr	s14, [r7, #4]
 80013f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013f4:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80013f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013fc:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
		  gyroy = gyroy + MPU6050_GET_GYRO_FULLVALUE_Y()/Gyr_Scale;
 8001400:	f000 fbda 	bl	8001bb8 <MPU6050_GET_GYRO_FULLVALUE_Y>
 8001404:	4603      	mov	r3, r0
 8001406:	ee07 3a90 	vmov	s15, r3
 800140a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800140e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001412:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001416:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800141a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800141e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		  gyroz = gyroz + MPU6050_GET_GYRO_FULLVALUE_Z()/Gyr_Scale;
 8001422:	f000 fbdd 	bl	8001be0 <MPU6050_GET_GYRO_FULLVALUE_Z>
 8001426:	4603      	mov	r3, r0
 8001428:	ee07 3a90 	vmov	s15, r3
 800142c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001430:	ed97 7a01 	vldr	s14, [r7, #4]
 8001434:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001438:	ed97 7a08 	vldr	s14, [r7, #32]
 800143c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001440:	edc7 7a08 	vstr	s15, [r7, #32]
		  HAL_Delay(1);
 8001444:	2001      	movs	r0, #1
 8001446:	f007 fd69 	bl	8008f1c <HAL_Delay>
	for(int i = 0; i < 1000; i++){ //5 sec
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	3301      	adds	r3, #1
 800144e:	61fb      	str	r3, [r7, #28]
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001456:	db8f      	blt.n	8001378 <MPU6050_CALIBRATION+0x40>
	}
	*accelx_cal = accelx/1000;
 8001458:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800145c:	eddf 6a20 	vldr	s13, [pc, #128]	@ 80014e0 <MPU6050_CALIBRATION+0x1a8>
 8001460:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	edc3 7a00 	vstr	s15, [r3]
	*accely_cal = accely/1000;
 800146a:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800146e:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 80014e0 <MPU6050_CALIBRATION+0x1a8>
 8001472:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	edc3 7a00 	vstr	s15, [r3]
	*accelz_cal = accelz/1000;
 800147c:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001480:	eddf 6a17 	vldr	s13, [pc, #92]	@ 80014e0 <MPU6050_CALIBRATION+0x1a8>
 8001484:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	edc3 7a00 	vstr	s15, [r3]

	*accelz_cal = 1 - *accelz_cal;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	edd3 7a00 	vldr	s15, [r3]
 8001494:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001498:	ee77 7a67 	vsub.f32	s15, s14, s15
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	edc3 7a00 	vstr	s15, [r3]

	*gyrox_cal = gyrox/1000;
 80014a2:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80014a6:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 80014e0 <MPU6050_CALIBRATION+0x1a8>
 80014aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	edc3 7a00 	vstr	s15, [r3]
	*gyroy_cal = gyroy/1000;
 80014b4:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80014b8:	eddf 6a09 	vldr	s13, [pc, #36]	@ 80014e0 <MPU6050_CALIBRATION+0x1a8>
 80014bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80014c2:	edc3 7a00 	vstr	s15, [r3]
	*gyroz_cal = gyroz/1000;
 80014c6:	ed97 7a08 	vldr	s14, [r7, #32]
 80014ca:	eddf 6a05 	vldr	s13, [pc, #20]	@ 80014e0 <MPU6050_CALIBRATION+0x1a8>
 80014ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80014d4:	edc3 7a00 	vstr	s15, [r3]
}
 80014d8:	bf00      	nop
 80014da:	3738      	adds	r7, #56	@ 0x38
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	447a0000 	.word	0x447a0000
 80014e4:	00000000 	.word	0x00000000

080014e8 <MPU6050_GET_ACCEL_TO_ANGLE>:

void MPU6050_GET_ACCEL_TO_ANGLE(float ax, float ay, float az, float *ax_ang, float *ay_ang/*, float *az_ang*/){
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b090      	sub	sp, #64	@ 0x40
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	ed87 0a05 	vstr	s0, [r7, #20]
 80014f2:	edc7 0a04 	vstr	s1, [r7, #16]
 80014f6:	ed87 1a03 	vstr	s2, [r7, #12]
 80014fa:	60b8      	str	r0, [r7, #8]
 80014fc:	6079      	str	r1, [r7, #4]
	double i = 0-1,axan,ayan;
 80014fe:	f04f 0200 	mov.w	r2, #0
 8001502:	4b37      	ldr	r3, [pc, #220]	@ (80015e0 <MPU6050_GET_ACCEL_TO_ANGLE+0xf8>)
 8001504:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
	double ang1 = sqrt((ax*ax)+(az*az));
 8001508:	edd7 7a05 	vldr	s15, [r7, #20]
 800150c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001510:	edd7 7a03 	vldr	s15, [r7, #12]
 8001514:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001518:	ee77 7a27 	vadd.f32	s15, s14, s15
 800151c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001520:	eeb0 0b47 	vmov.f64	d0, d7
 8001524:	f01c fb08 	bl	801db38 <sqrt>
 8001528:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30
	double ang2 = sqrt((ay*ay)+(az*az));
 800152c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001530:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001534:	edd7 7a03 	vldr	s15, [r7, #12]
 8001538:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800153c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001540:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001544:	eeb0 0b47 	vmov.f64	d0, d7
 8001548:	f01c faf6 	bl	801db38 <sqrt>
 800154c:	ed87 0b0a 	vstr	d0, [r7, #40]	@ 0x28
	axan = atan2((ay*i), ang1);
 8001550:	edd7 7a04 	vldr	s15, [r7, #16]
 8001554:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001558:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 800155c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001560:	ed97 1b0c 	vldr	d1, [r7, #48]	@ 0x30
 8001564:	eeb0 0b47 	vmov.f64	d0, d7
 8001568:	f01c fae2 	bl	801db30 <atan2>
 800156c:	ed87 0b08 	vstr	d0, [r7, #32]
	ayan= atan2(ax, ang2);
 8001570:	edd7 7a05 	vldr	s15, [r7, #20]
 8001574:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001578:	ed97 1b0a 	vldr	d1, [r7, #40]	@ 0x28
 800157c:	eeb0 0b47 	vmov.f64	d0, d7
 8001580:	f01c fad6 	bl	801db30 <atan2>
 8001584:	ed87 0b06 	vstr	d0, [r7, #24]

	*ax_ang = (axan*180)/M_PI;
 8001588:	ed97 7b08 	vldr	d7, [r7, #32]
 800158c:	ed9f 6b10 	vldr	d6, [pc, #64]	@ 80015d0 <MPU6050_GET_ACCEL_TO_ANGLE+0xe8>
 8001590:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001594:	ed9f 5b10 	vldr	d5, [pc, #64]	@ 80015d8 <MPU6050_GET_ACCEL_TO_ANGLE+0xf0>
 8001598:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800159c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	edc3 7a00 	vstr	s15, [r3]
	*ay_ang = (ayan*180)/M_PI;
 80015a6:	ed97 7b06 	vldr	d7, [r7, #24]
 80015aa:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 80015d0 <MPU6050_GET_ACCEL_TO_ANGLE+0xe8>
 80015ae:	ee27 6b06 	vmul.f64	d6, d7, d6
 80015b2:	ed9f 5b09 	vldr	d5, [pc, #36]	@ 80015d8 <MPU6050_GET_ACCEL_TO_ANGLE+0xf0>
 80015b6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80015ba:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	edc3 7a00 	vstr	s15, [r3]
}
 80015c4:	bf00      	nop
 80015c6:	3740      	adds	r7, #64	@ 0x40
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	f3af 8000 	nop.w
 80015d0:	00000000 	.word	0x00000000
 80015d4:	40668000 	.word	0x40668000
 80015d8:	54442d18 	.word	0x54442d18
 80015dc:	400921fb 	.word	0x400921fb
 80015e0:	bff00000 	.word	0xbff00000

080015e4 <MPU6050_GET_ACCANDGYR_CALANDSCL>:
	*gy_ang = (gy/1000) + *gy_ang;
	*gz_ang = (gz/1000) + *gz_ang;
}

void MPU6050_GET_ACCANDGYR_CALANDSCL(float *ax, float*ay, float*az, float*gx, float*gy, float*gz, float accelx_cal,float accely_cal,
		float accelz_cal,float gyrox_cal,float gyroy_cal,float gyroz_cal, float Gyr_Scale, float Acc_Scale){
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b094      	sub	sp, #80	@ 0x50
 80015e8:	af04      	add	r7, sp, #16
 80015ea:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80015ec:	62b9      	str	r1, [r7, #40]	@ 0x28
 80015ee:	627a      	str	r2, [r7, #36]	@ 0x24
 80015f0:	623b      	str	r3, [r7, #32]
 80015f2:	ed87 0a07 	vstr	s0, [r7, #28]
 80015f6:	edc7 0a06 	vstr	s1, [r7, #24]
 80015fa:	ed87 1a05 	vstr	s2, [r7, #20]
 80015fe:	edc7 1a04 	vstr	s3, [r7, #16]
 8001602:	ed87 2a03 	vstr	s4, [r7, #12]
 8001606:	edc7 2a02 	vstr	s5, [r7, #8]
 800160a:	ed87 3a01 	vstr	s6, [r7, #4]
 800160e:	edc7 3a00 	vstr	s7, [r7]

	uint8_t pdata[14];
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, 1, pdata, 14, 1); // szybesz o ~1ms
 8001612:	4b4e      	ldr	r3, [pc, #312]	@ (800174c <MPU6050_GET_ACCANDGYR_CALANDSCL+0x168>)
 8001614:	6818      	ldr	r0, [r3, #0]
 8001616:	2301      	movs	r3, #1
 8001618:	9302      	str	r3, [sp, #8]
 800161a:	230e      	movs	r3, #14
 800161c:	9301      	str	r3, [sp, #4]
 800161e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001622:	9300      	str	r3, [sp, #0]
 8001624:	2301      	movs	r3, #1
 8001626:	223b      	movs	r2, #59	@ 0x3b
 8001628:	21d0      	movs	r1, #208	@ 0xd0
 800162a:	f00c ffb9 	bl	800e5a0 <HAL_I2C_Mem_Read>

	//HAL_I2C_Mem_Read_IT(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, 1, pdata, 14);

	*ax = (((int16_t)(pdata[0]<<8) | pdata[1])/Acc_Scale) - accelx_cal;
 800162e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001632:	021b      	lsls	r3, r3, #8
 8001634:	b21b      	sxth	r3, r3
 8001636:	461a      	mov	r2, r3
 8001638:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 800163c:	4313      	orrs	r3, r2
 800163e:	ee07 3a90 	vmov	s15, r3
 8001642:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001646:	edd7 7a00 	vldr	s15, [r7]
 800164a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800164e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001652:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001656:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001658:	edc3 7a00 	vstr	s15, [r3]
	*ay = (((int16_t)(pdata[2]<<8) | pdata[3])/Acc_Scale) - accely_cal;
 800165c:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8001660:	021b      	lsls	r3, r3, #8
 8001662:	b21b      	sxth	r3, r3
 8001664:	461a      	mov	r2, r3
 8001666:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800166a:	4313      	orrs	r3, r2
 800166c:	ee07 3a90 	vmov	s15, r3
 8001670:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001674:	edd7 7a00 	vldr	s15, [r7]
 8001678:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800167c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001680:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001686:	edc3 7a00 	vstr	s15, [r3]
	*az = (((int16_t)(pdata[4]<<8) | pdata[5])/Acc_Scale) + accelz_cal;
 800168a:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800168e:	021b      	lsls	r3, r3, #8
 8001690:	b21b      	sxth	r3, r3
 8001692:	461a      	mov	r2, r3
 8001694:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001698:	4313      	orrs	r3, r2
 800169a:	ee07 3a90 	vmov	s15, r3
 800169e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80016a2:	edd7 7a00 	vldr	s15, [r7]
 80016a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80016aa:	edd7 7a05 	vldr	s15, [r7, #20]
 80016ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016b4:	edc3 7a00 	vstr	s15, [r3]

	*gx = (((int16_t)(pdata[8]<<8) | pdata[9])/Gyr_Scale) - gyrox_cal;
 80016b8:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80016bc:	021b      	lsls	r3, r3, #8
 80016be:	b21b      	sxth	r3, r3
 80016c0:	461a      	mov	r2, r3
 80016c2:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80016c6:	4313      	orrs	r3, r2
 80016c8:	ee07 3a90 	vmov	s15, r3
 80016cc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80016d0:	edd7 7a01 	vldr	s15, [r7, #4]
 80016d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80016d8:	edd7 7a04 	vldr	s15, [r7, #16]
 80016dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016e0:	6a3b      	ldr	r3, [r7, #32]
 80016e2:	edc3 7a00 	vstr	s15, [r3]
	*gy = (((int16_t)(pdata[10]<<8) | pdata[11])/Gyr_Scale) - gyroy_cal;
 80016e6:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 80016ea:	021b      	lsls	r3, r3, #8
 80016ec:	b21b      	sxth	r3, r3
 80016ee:	461a      	mov	r2, r3
 80016f0:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80016f4:	4313      	orrs	r3, r2
 80016f6:	ee07 3a90 	vmov	s15, r3
 80016fa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80016fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8001702:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001706:	edd7 7a03 	vldr	s15, [r7, #12]
 800170a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800170e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001710:	edc3 7a00 	vstr	s15, [r3]
	*gz = (((int16_t)(pdata[12]<<8) | pdata[13])/Gyr_Scale) - gyroz_cal;
 8001714:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8001718:	021b      	lsls	r3, r3, #8
 800171a:	b21b      	sxth	r3, r3
 800171c:	461a      	mov	r2, r3
 800171e:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8001722:	4313      	orrs	r3, r2
 8001724:	ee07 3a90 	vmov	s15, r3
 8001728:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800172c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001730:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001734:	edd7 7a02 	vldr	s15, [r7, #8]
 8001738:	ee77 7a67 	vsub.f32	s15, s14, s15
 800173c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800173e:	edc3 7a00 	vstr	s15, [r3]
//	  *az = (MPU6050_GET_ACCEL_FULLVALUE_Z()/Acc_Scale) + accelz_cal;
//
//	  *gx = (MPU6050_GET_GYRO_FULLVALUE_X()/Gyr_Scale) - gyrox_cal;
//	  *gy = (MPU6050_GET_GYRO_FULLVALUE_Y()/Gyr_Scale) - gyroy_cal;
//	  *gz = (MPU6050_GET_GYRO_FULLVALUE_Z()/Gyr_Scale) - gyroz_cal;
}
 8001742:	bf00      	nop
 8001744:	3740      	adds	r7, #64	@ 0x40
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	240000a0 	.word	0x240000a0

08001750 <MPU6050_GET_ACCANDGYR_CALANDSCL_IT>:

void MPU6050_GET_ACCANDGYR_CALANDSCL_IT(void){
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af02      	add	r7, sp, #8


	HAL_I2C_Mem_Read_IT(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, 1, (uint8_t *)MPU6050_IT_DATA, 14);
 8001756:	4b08      	ldr	r3, [pc, #32]	@ (8001778 <MPU6050_GET_ACCANDGYR_CALANDSCL_IT+0x28>)
 8001758:	6818      	ldr	r0, [r3, #0]
 800175a:	230e      	movs	r3, #14
 800175c:	9301      	str	r3, [sp, #4]
 800175e:	4b07      	ldr	r3, [pc, #28]	@ (800177c <MPU6050_GET_ACCANDGYR_CALANDSCL_IT+0x2c>)
 8001760:	9300      	str	r3, [sp, #0]
 8001762:	2301      	movs	r3, #1
 8001764:	223b      	movs	r2, #59	@ 0x3b
 8001766:	21d0      	movs	r1, #208	@ 0xd0
 8001768:	f00d f8be 	bl	800e8e8 <HAL_I2C_Mem_Read_IT>
	MPU6050_IRQ = 1;
 800176c:	4b04      	ldr	r3, [pc, #16]	@ (8001780 <MPU6050_GET_ACCANDGYR_CALANDSCL_IT+0x30>)
 800176e:	2201      	movs	r2, #1
 8001770:	701a      	strb	r2, [r3, #0]


}
 8001772:	bf00      	nop
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	240000a0 	.word	0x240000a0
 800177c:	00000048 	.word	0x00000048
 8001780:	000041d4 	.word	0x000041d4

08001784 <MPU6050_GET_CALANDSCL_IT>:

void MPU6050_GET_CALANDSCL_IT(float *ax, float*ay, float*az, float*gx, float*gy, float*gz, float accelx_cal,float accely_cal,float accelz_cal,float gyrox_cal,float gyroy_cal,float gyroz_cal, float Gyr_Scale, float Acc_Scale){
 8001784:	b480      	push	{r7}
 8001786:	b08d      	sub	sp, #52	@ 0x34
 8001788:	af00      	add	r7, sp, #0
 800178a:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800178c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800178e:	627a      	str	r2, [r7, #36]	@ 0x24
 8001790:	623b      	str	r3, [r7, #32]
 8001792:	ed87 0a07 	vstr	s0, [r7, #28]
 8001796:	edc7 0a06 	vstr	s1, [r7, #24]
 800179a:	ed87 1a05 	vstr	s2, [r7, #20]
 800179e:	edc7 1a04 	vstr	s3, [r7, #16]
 80017a2:	ed87 2a03 	vstr	s4, [r7, #12]
 80017a6:	edc7 2a02 	vstr	s5, [r7, #8]
 80017aa:	ed87 3a01 	vstr	s6, [r7, #4]
 80017ae:	edc7 3a00 	vstr	s7, [r7]
	*ax = (((int16_t)(MPU6050_IT_DATA[0]<<8) | MPU6050_IT_DATA[1])/Acc_Scale) - accelx_cal;
 80017b2:	4b48      	ldr	r3, [pc, #288]	@ (80018d4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	021b      	lsls	r3, r3, #8
 80017b8:	b21b      	sxth	r3, r3
 80017ba:	461a      	mov	r2, r3
 80017bc:	4b45      	ldr	r3, [pc, #276]	@ (80018d4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 80017be:	785b      	ldrb	r3, [r3, #1]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	ee07 3a90 	vmov	s15, r3
 80017c6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017ca:	edd7 7a00 	vldr	s15, [r7]
 80017ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80017d2:	edd7 7a07 	vldr	s15, [r7, #28]
 80017d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017dc:	edc3 7a00 	vstr	s15, [r3]
	*ay = (((int16_t)(MPU6050_IT_DATA[2]<<8) | MPU6050_IT_DATA[3])/Acc_Scale) - accely_cal;
 80017e0:	4b3c      	ldr	r3, [pc, #240]	@ (80018d4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 80017e2:	789b      	ldrb	r3, [r3, #2]
 80017e4:	021b      	lsls	r3, r3, #8
 80017e6:	b21b      	sxth	r3, r3
 80017e8:	461a      	mov	r2, r3
 80017ea:	4b3a      	ldr	r3, [pc, #232]	@ (80018d4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 80017ec:	78db      	ldrb	r3, [r3, #3]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	ee07 3a90 	vmov	s15, r3
 80017f4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017f8:	edd7 7a00 	vldr	s15, [r7]
 80017fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001800:	edd7 7a06 	vldr	s15, [r7, #24]
 8001804:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800180a:	edc3 7a00 	vstr	s15, [r3]
	*az = (((int16_t)(MPU6050_IT_DATA[4]<<8) | MPU6050_IT_DATA[5])/Acc_Scale) + accelz_cal;
 800180e:	4b31      	ldr	r3, [pc, #196]	@ (80018d4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 8001810:	791b      	ldrb	r3, [r3, #4]
 8001812:	021b      	lsls	r3, r3, #8
 8001814:	b21b      	sxth	r3, r3
 8001816:	461a      	mov	r2, r3
 8001818:	4b2e      	ldr	r3, [pc, #184]	@ (80018d4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 800181a:	795b      	ldrb	r3, [r3, #5]
 800181c:	4313      	orrs	r3, r2
 800181e:	ee07 3a90 	vmov	s15, r3
 8001822:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001826:	edd7 7a00 	vldr	s15, [r7]
 800182a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800182e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001832:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001838:	edc3 7a00 	vstr	s15, [r3]

	*gx = (((int16_t)(MPU6050_IT_DATA[8]<<8) | MPU6050_IT_DATA[9])/Gyr_Scale) - gyrox_cal;
 800183c:	4b25      	ldr	r3, [pc, #148]	@ (80018d4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 800183e:	7a1b      	ldrb	r3, [r3, #8]
 8001840:	021b      	lsls	r3, r3, #8
 8001842:	b21b      	sxth	r3, r3
 8001844:	461a      	mov	r2, r3
 8001846:	4b23      	ldr	r3, [pc, #140]	@ (80018d4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 8001848:	7a5b      	ldrb	r3, [r3, #9]
 800184a:	4313      	orrs	r3, r2
 800184c:	ee07 3a90 	vmov	s15, r3
 8001850:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001854:	edd7 7a01 	vldr	s15, [r7, #4]
 8001858:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800185c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001860:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001864:	6a3b      	ldr	r3, [r7, #32]
 8001866:	edc3 7a00 	vstr	s15, [r3]
	*gy = (((int16_t)(MPU6050_IT_DATA[10]<<8) | MPU6050_IT_DATA[11])/Gyr_Scale) - gyroy_cal;
 800186a:	4b1a      	ldr	r3, [pc, #104]	@ (80018d4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 800186c:	7a9b      	ldrb	r3, [r3, #10]
 800186e:	021b      	lsls	r3, r3, #8
 8001870:	b21b      	sxth	r3, r3
 8001872:	461a      	mov	r2, r3
 8001874:	4b17      	ldr	r3, [pc, #92]	@ (80018d4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 8001876:	7adb      	ldrb	r3, [r3, #11]
 8001878:	4313      	orrs	r3, r2
 800187a:	ee07 3a90 	vmov	s15, r3
 800187e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001882:	edd7 7a01 	vldr	s15, [r7, #4]
 8001886:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800188a:	edd7 7a03 	vldr	s15, [r7, #12]
 800188e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001894:	edc3 7a00 	vstr	s15, [r3]
	*gz = (((int16_t)(MPU6050_IT_DATA[12]<<8) | MPU6050_IT_DATA[13])/Gyr_Scale) - gyroz_cal;
 8001898:	4b0e      	ldr	r3, [pc, #56]	@ (80018d4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 800189a:	7b1b      	ldrb	r3, [r3, #12]
 800189c:	021b      	lsls	r3, r3, #8
 800189e:	b21b      	sxth	r3, r3
 80018a0:	461a      	mov	r2, r3
 80018a2:	4b0c      	ldr	r3, [pc, #48]	@ (80018d4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 80018a4:	7b5b      	ldrb	r3, [r3, #13]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	ee07 3a90 	vmov	s15, r3
 80018ac:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80018b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80018b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80018b8:	edd7 7a02 	vldr	s15, [r7, #8]
 80018bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80018c2:	edc3 7a00 	vstr	s15, [r3]
}
 80018c6:	bf00      	nop
 80018c8:	3734      	adds	r7, #52	@ 0x34
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	00000048 	.word	0x00000048

080018d8 <MPU6050_GET_ACCANDGYR_FILTRED>:

void MPU6050_GET_ACCANDGYR_FILTRED(Complementary_Filter *Complementary_Filter_st, float ax_ang, float ay_ang, float megz_ang, float gx_ang,
		float gy_ang, float gz_ang){
 80018d8:	b580      	push	{r7, lr}
 80018da:	b088      	sub	sp, #32
 80018dc:	af00      	add	r7, sp, #0
 80018de:	61f8      	str	r0, [r7, #28]
 80018e0:	ed87 0a06 	vstr	s0, [r7, #24]
 80018e4:	edc7 0a05 	vstr	s1, [r7, #20]
 80018e8:	ed87 1a04 	vstr	s2, [r7, #16]
 80018ec:	edc7 1a03 	vstr	s3, [r7, #12]
 80018f0:	ed87 2a02 	vstr	s4, [r7, #8]
 80018f4:	edc7 2a01 	vstr	s5, [r7, #4]
	Complementary_getFilter(Complementary_Filter_st, ax_ang, ay_ang, megz_ang, gx_ang, gy_ang, gz_ang);
 80018f8:	edd7 2a01 	vldr	s5, [r7, #4]
 80018fc:	ed97 2a02 	vldr	s4, [r7, #8]
 8001900:	edd7 1a03 	vldr	s3, [r7, #12]
 8001904:	ed97 1a04 	vldr	s2, [r7, #16]
 8001908:	edd7 0a05 	vldr	s1, [r7, #20]
 800190c:	ed97 0a06 	vldr	s0, [r7, #24]
 8001910:	69f8      	ldr	r0, [r7, #28]
 8001912:	f000 f9a9 	bl	8001c68 <Complementary_getFilter>
	//W_Filter(Complementary_Filter_st);
}
 8001916:	bf00      	nop
 8001918:	3720      	adds	r7, #32
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
	...

08001920 <MPU6050_GET_ACCEL_YH>:
uint8_t MPU6050_GET_ACCEL_XL(void){
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_L, 1, &data, 1, 1);
	return data;
}
uint8_t MPU6050_GET_ACCEL_YH(void){
 8001920:	b580      	push	{r7, lr}
 8001922:	b086      	sub	sp, #24
 8001924:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_YOUT_H, 1, &data, 1, 1);
 8001926:	4b09      	ldr	r3, [pc, #36]	@ (800194c <MPU6050_GET_ACCEL_YH+0x2c>)
 8001928:	6818      	ldr	r0, [r3, #0]
 800192a:	2301      	movs	r3, #1
 800192c:	9302      	str	r3, [sp, #8]
 800192e:	2301      	movs	r3, #1
 8001930:	9301      	str	r3, [sp, #4]
 8001932:	1dfb      	adds	r3, r7, #7
 8001934:	9300      	str	r3, [sp, #0]
 8001936:	2301      	movs	r3, #1
 8001938:	223d      	movs	r2, #61	@ 0x3d
 800193a:	21d0      	movs	r1, #208	@ 0xd0
 800193c:	f00c fe30 	bl	800e5a0 <HAL_I2C_Mem_Read>
	return data;
 8001940:	79fb      	ldrb	r3, [r7, #7]
}
 8001942:	4618      	mov	r0, r3
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	240000a0 	.word	0x240000a0

08001950 <MPU6050_GET_ACCEL_YL>:
uint8_t MPU6050_GET_ACCEL_YL(void){
 8001950:	b580      	push	{r7, lr}
 8001952:	b086      	sub	sp, #24
 8001954:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_YOUT_L, 1, &data, 1, 1);
 8001956:	4b09      	ldr	r3, [pc, #36]	@ (800197c <MPU6050_GET_ACCEL_YL+0x2c>)
 8001958:	6818      	ldr	r0, [r3, #0]
 800195a:	2301      	movs	r3, #1
 800195c:	9302      	str	r3, [sp, #8]
 800195e:	2301      	movs	r3, #1
 8001960:	9301      	str	r3, [sp, #4]
 8001962:	1dfb      	adds	r3, r7, #7
 8001964:	9300      	str	r3, [sp, #0]
 8001966:	2301      	movs	r3, #1
 8001968:	223e      	movs	r2, #62	@ 0x3e
 800196a:	21d0      	movs	r1, #208	@ 0xd0
 800196c:	f00c fe18 	bl	800e5a0 <HAL_I2C_Mem_Read>
	return data;
 8001970:	79fb      	ldrb	r3, [r7, #7]
}
 8001972:	4618      	mov	r0, r3
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	240000a0 	.word	0x240000a0

08001980 <MPU6050_GET_ACCEL_ZH>:
uint8_t MPU6050_GET_ACCEL_ZH(void){
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_ZOUT_H, 1, &data, 1, 1);
 8001986:	4b09      	ldr	r3, [pc, #36]	@ (80019ac <MPU6050_GET_ACCEL_ZH+0x2c>)
 8001988:	6818      	ldr	r0, [r3, #0]
 800198a:	2301      	movs	r3, #1
 800198c:	9302      	str	r3, [sp, #8]
 800198e:	2301      	movs	r3, #1
 8001990:	9301      	str	r3, [sp, #4]
 8001992:	1dfb      	adds	r3, r7, #7
 8001994:	9300      	str	r3, [sp, #0]
 8001996:	2301      	movs	r3, #1
 8001998:	223f      	movs	r2, #63	@ 0x3f
 800199a:	21d0      	movs	r1, #208	@ 0xd0
 800199c:	f00c fe00 	bl	800e5a0 <HAL_I2C_Mem_Read>
	return data;
 80019a0:	79fb      	ldrb	r3, [r7, #7]
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	240000a0 	.word	0x240000a0

080019b0 <MPU6050_GET_ACCEL_ZL>:
uint8_t MPU6050_GET_ACCEL_ZL(void){
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b086      	sub	sp, #24
 80019b4:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_ZOUT_L, 1, &data, 1, 1);
 80019b6:	4b09      	ldr	r3, [pc, #36]	@ (80019dc <MPU6050_GET_ACCEL_ZL+0x2c>)
 80019b8:	6818      	ldr	r0, [r3, #0]
 80019ba:	2301      	movs	r3, #1
 80019bc:	9302      	str	r3, [sp, #8]
 80019be:	2301      	movs	r3, #1
 80019c0:	9301      	str	r3, [sp, #4]
 80019c2:	1dfb      	adds	r3, r7, #7
 80019c4:	9300      	str	r3, [sp, #0]
 80019c6:	2301      	movs	r3, #1
 80019c8:	2240      	movs	r2, #64	@ 0x40
 80019ca:	21d0      	movs	r1, #208	@ 0xd0
 80019cc:	f00c fde8 	bl	800e5a0 <HAL_I2C_Mem_Read>
	return data;
 80019d0:	79fb      	ldrb	r3, [r7, #7]
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	240000a0 	.word	0x240000a0

080019e0 <MPU6050_GET_GYRO_XH>:

uint8_t MPU6050_GET_GYRO_XH(void){
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b086      	sub	sp, #24
 80019e4:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_XOUT_H, 1, &data, 1, 1);
 80019e6:	4b09      	ldr	r3, [pc, #36]	@ (8001a0c <MPU6050_GET_GYRO_XH+0x2c>)
 80019e8:	6818      	ldr	r0, [r3, #0]
 80019ea:	2301      	movs	r3, #1
 80019ec:	9302      	str	r3, [sp, #8]
 80019ee:	2301      	movs	r3, #1
 80019f0:	9301      	str	r3, [sp, #4]
 80019f2:	1dfb      	adds	r3, r7, #7
 80019f4:	9300      	str	r3, [sp, #0]
 80019f6:	2301      	movs	r3, #1
 80019f8:	2243      	movs	r2, #67	@ 0x43
 80019fa:	21d0      	movs	r1, #208	@ 0xd0
 80019fc:	f00c fdd0 	bl	800e5a0 <HAL_I2C_Mem_Read>
	return data;
 8001a00:	79fb      	ldrb	r3, [r7, #7]
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	240000a0 	.word	0x240000a0

08001a10 <MPU6050_GET_GYRO_XL>:
uint8_t MPU6050_GET_GYRO_XL(void){
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b086      	sub	sp, #24
 8001a14:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_XOUT_L, 1, &data, 1, 1);
 8001a16:	4b09      	ldr	r3, [pc, #36]	@ (8001a3c <MPU6050_GET_GYRO_XL+0x2c>)
 8001a18:	6818      	ldr	r0, [r3, #0]
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	9302      	str	r3, [sp, #8]
 8001a1e:	2301      	movs	r3, #1
 8001a20:	9301      	str	r3, [sp, #4]
 8001a22:	1dfb      	adds	r3, r7, #7
 8001a24:	9300      	str	r3, [sp, #0]
 8001a26:	2301      	movs	r3, #1
 8001a28:	2244      	movs	r2, #68	@ 0x44
 8001a2a:	21d0      	movs	r1, #208	@ 0xd0
 8001a2c:	f00c fdb8 	bl	800e5a0 <HAL_I2C_Mem_Read>
	return data;
 8001a30:	79fb      	ldrb	r3, [r7, #7]
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	240000a0 	.word	0x240000a0

08001a40 <MPU6050_GET_GYRO_YH>:
uint8_t MPU6050_GET_GYRO_YH(void){
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_YOUT_H, 1, &data, 1, 1);
 8001a46:	4b09      	ldr	r3, [pc, #36]	@ (8001a6c <MPU6050_GET_GYRO_YH+0x2c>)
 8001a48:	6818      	ldr	r0, [r3, #0]
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	9302      	str	r3, [sp, #8]
 8001a4e:	2301      	movs	r3, #1
 8001a50:	9301      	str	r3, [sp, #4]
 8001a52:	1dfb      	adds	r3, r7, #7
 8001a54:	9300      	str	r3, [sp, #0]
 8001a56:	2301      	movs	r3, #1
 8001a58:	2245      	movs	r2, #69	@ 0x45
 8001a5a:	21d0      	movs	r1, #208	@ 0xd0
 8001a5c:	f00c fda0 	bl	800e5a0 <HAL_I2C_Mem_Read>
	return data;
 8001a60:	79fb      	ldrb	r3, [r7, #7]
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	240000a0 	.word	0x240000a0

08001a70 <MPU6050_GET_GYRO_YL>:
uint8_t MPU6050_GET_GYRO_YL(void){
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b086      	sub	sp, #24
 8001a74:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_YOUT_L, 1, &data, 1, 1);
 8001a76:	4b09      	ldr	r3, [pc, #36]	@ (8001a9c <MPU6050_GET_GYRO_YL+0x2c>)
 8001a78:	6818      	ldr	r0, [r3, #0]
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	9302      	str	r3, [sp, #8]
 8001a7e:	2301      	movs	r3, #1
 8001a80:	9301      	str	r3, [sp, #4]
 8001a82:	1dfb      	adds	r3, r7, #7
 8001a84:	9300      	str	r3, [sp, #0]
 8001a86:	2301      	movs	r3, #1
 8001a88:	2246      	movs	r2, #70	@ 0x46
 8001a8a:	21d0      	movs	r1, #208	@ 0xd0
 8001a8c:	f00c fd88 	bl	800e5a0 <HAL_I2C_Mem_Read>
	return data;
 8001a90:	79fb      	ldrb	r3, [r7, #7]
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	240000a0 	.word	0x240000a0

08001aa0 <MPU6050_GET_GYRO_ZH>:
uint8_t MPU6050_GET_GYRO_ZH(void){
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b086      	sub	sp, #24
 8001aa4:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_ZOUT_H, 1, &data, 1, 1);
 8001aa6:	4b09      	ldr	r3, [pc, #36]	@ (8001acc <MPU6050_GET_GYRO_ZH+0x2c>)
 8001aa8:	6818      	ldr	r0, [r3, #0]
 8001aaa:	2301      	movs	r3, #1
 8001aac:	9302      	str	r3, [sp, #8]
 8001aae:	2301      	movs	r3, #1
 8001ab0:	9301      	str	r3, [sp, #4]
 8001ab2:	1dfb      	adds	r3, r7, #7
 8001ab4:	9300      	str	r3, [sp, #0]
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	2247      	movs	r2, #71	@ 0x47
 8001aba:	21d0      	movs	r1, #208	@ 0xd0
 8001abc:	f00c fd70 	bl	800e5a0 <HAL_I2C_Mem_Read>
	return data;
 8001ac0:	79fb      	ldrb	r3, [r7, #7]
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	240000a0 	.word	0x240000a0

08001ad0 <MPU6050_GET_GYRO_ZL>:
uint8_t MPU6050_GET_GYRO_ZL(void){
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b086      	sub	sp, #24
 8001ad4:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_ZOUT_L, 1, &data, 1, 1);
 8001ad6:	4b09      	ldr	r3, [pc, #36]	@ (8001afc <MPU6050_GET_GYRO_ZL+0x2c>)
 8001ad8:	6818      	ldr	r0, [r3, #0]
 8001ada:	2301      	movs	r3, #1
 8001adc:	9302      	str	r3, [sp, #8]
 8001ade:	2301      	movs	r3, #1
 8001ae0:	9301      	str	r3, [sp, #4]
 8001ae2:	1dfb      	adds	r3, r7, #7
 8001ae4:	9300      	str	r3, [sp, #0]
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	2248      	movs	r2, #72	@ 0x48
 8001aea:	21d0      	movs	r1, #208	@ 0xd0
 8001aec:	f00c fd58 	bl	800e5a0 <HAL_I2C_Mem_Read>
	return data;
 8001af0:	79fb      	ldrb	r3, [r7, #7]
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	240000a0 	.word	0x240000a0

08001b00 <MPU6050_GET_ACCEL_FULLVALUE_X>:
int16_t MPU6050_GET_ACCEL_FULLVALUE_X(void){
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af04      	add	r7, sp, #16
	int16_t data;
	uint8_t pdata[2];

	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, 1, pdata, 2, 1);
 8001b06:	4b0d      	ldr	r3, [pc, #52]	@ (8001b3c <MPU6050_GET_ACCEL_FULLVALUE_X+0x3c>)
 8001b08:	6818      	ldr	r0, [r3, #0]
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	9302      	str	r3, [sp, #8]
 8001b0e:	2302      	movs	r3, #2
 8001b10:	9301      	str	r3, [sp, #4]
 8001b12:	1d3b      	adds	r3, r7, #4
 8001b14:	9300      	str	r3, [sp, #0]
 8001b16:	2301      	movs	r3, #1
 8001b18:	223b      	movs	r2, #59	@ 0x3b
 8001b1a:	21d0      	movs	r1, #208	@ 0xd0
 8001b1c:	f00c fd40 	bl	800e5a0 <HAL_I2C_Mem_Read>

	data = (pdata[0]<<8)|pdata[1];
 8001b20:	793b      	ldrb	r3, [r7, #4]
 8001b22:	021b      	lsls	r3, r3, #8
 8001b24:	b21a      	sxth	r2, r3
 8001b26:	797b      	ldrb	r3, [r7, #5]
 8001b28:	b21b      	sxth	r3, r3
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	80fb      	strh	r3, [r7, #6]
	return data;
 8001b2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	240000a0 	.word	0x240000a0

08001b40 <MPU6050_GET_ACCEL_FULLVALUE_Y>:

int16_t MPU6050_GET_ACCEL_FULLVALUE_Y(void){
 8001b40:	b590      	push	{r4, r7, lr}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
	int16_t data;
	data = (MPU6050_GET_ACCEL_YH()<<8)|MPU6050_GET_ACCEL_YL();
 8001b46:	f7ff feeb 	bl	8001920 <MPU6050_GET_ACCEL_YH>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	021b      	lsls	r3, r3, #8
 8001b4e:	b21c      	sxth	r4, r3
 8001b50:	f7ff fefe 	bl	8001950 <MPU6050_GET_ACCEL_YL>
 8001b54:	4603      	mov	r3, r0
 8001b56:	b21b      	sxth	r3, r3
 8001b58:	4323      	orrs	r3, r4
 8001b5a:	80fb      	strh	r3, [r7, #6]
	return data;
 8001b5c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd90      	pop	{r4, r7, pc}

08001b68 <MPU6050_GET_ACCEL_FULLVALUE_Z>:
int16_t MPU6050_GET_ACCEL_FULLVALUE_Z(void){
 8001b68:	b590      	push	{r4, r7, lr}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
	int16_t data;
	data = (MPU6050_GET_ACCEL_ZH()<<8)|MPU6050_GET_ACCEL_ZL();
 8001b6e:	f7ff ff07 	bl	8001980 <MPU6050_GET_ACCEL_ZH>
 8001b72:	4603      	mov	r3, r0
 8001b74:	021b      	lsls	r3, r3, #8
 8001b76:	b21c      	sxth	r4, r3
 8001b78:	f7ff ff1a 	bl	80019b0 <MPU6050_GET_ACCEL_ZL>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	b21b      	sxth	r3, r3
 8001b80:	4323      	orrs	r3, r4
 8001b82:	80fb      	strh	r3, [r7, #6]
	return data;
 8001b84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd90      	pop	{r4, r7, pc}

08001b90 <MPU6050_GET_GYRO_FULLVALUE_X>:

int16_t MPU6050_GET_GYRO_FULLVALUE_X(void){
 8001b90:	b590      	push	{r4, r7, lr}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
	int16_t data;
	data = (MPU6050_GET_GYRO_XH()<<8)|MPU6050_GET_GYRO_XL();
 8001b96:	f7ff ff23 	bl	80019e0 <MPU6050_GET_GYRO_XH>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	021b      	lsls	r3, r3, #8
 8001b9e:	b21c      	sxth	r4, r3
 8001ba0:	f7ff ff36 	bl	8001a10 <MPU6050_GET_GYRO_XL>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	b21b      	sxth	r3, r3
 8001ba8:	4323      	orrs	r3, r4
 8001baa:	80fb      	strh	r3, [r7, #6]
	return data;
 8001bac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd90      	pop	{r4, r7, pc}

08001bb8 <MPU6050_GET_GYRO_FULLVALUE_Y>:
int16_t MPU6050_GET_GYRO_FULLVALUE_Y(void){
 8001bb8:	b590      	push	{r4, r7, lr}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
	int16_t data;
	data = (MPU6050_GET_GYRO_YH()<<8)|MPU6050_GET_GYRO_YL();
 8001bbe:	f7ff ff3f 	bl	8001a40 <MPU6050_GET_GYRO_YH>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	021b      	lsls	r3, r3, #8
 8001bc6:	b21c      	sxth	r4, r3
 8001bc8:	f7ff ff52 	bl	8001a70 <MPU6050_GET_GYRO_YL>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	b21b      	sxth	r3, r3
 8001bd0:	4323      	orrs	r3, r4
 8001bd2:	80fb      	strh	r3, [r7, #6]
	return data;
 8001bd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd90      	pop	{r4, r7, pc}

08001be0 <MPU6050_GET_GYRO_FULLVALUE_Z>:
int16_t MPU6050_GET_GYRO_FULLVALUE_Z(void){
 8001be0:	b590      	push	{r4, r7, lr}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
	int16_t data;
	data = (MPU6050_GET_GYRO_ZH()<<8)|MPU6050_GET_GYRO_ZL();
 8001be6:	f7ff ff5b 	bl	8001aa0 <MPU6050_GET_GYRO_ZH>
 8001bea:	4603      	mov	r3, r0
 8001bec:	021b      	lsls	r3, r3, #8
 8001bee:	b21c      	sxth	r4, r3
 8001bf0:	f7ff ff6e 	bl	8001ad0 <MPU6050_GET_GYRO_ZL>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	b21b      	sxth	r3, r3
 8001bf8:	4323      	orrs	r3, r4
 8001bfa:	80fb      	strh	r3, [r7, #6]
	return data;
 8001bfc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd90      	pop	{r4, r7, pc}

08001c08 <MPU6050_READ_ID>:

int8_t MPU6050_READ_ID(void){
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_WHO_AM_I, 1, &data, 1, 1);
 8001c0e:	4b09      	ldr	r3, [pc, #36]	@ (8001c34 <MPU6050_READ_ID+0x2c>)
 8001c10:	6818      	ldr	r0, [r3, #0]
 8001c12:	2301      	movs	r3, #1
 8001c14:	9302      	str	r3, [sp, #8]
 8001c16:	2301      	movs	r3, #1
 8001c18:	9301      	str	r3, [sp, #4]
 8001c1a:	1dfb      	adds	r3, r7, #7
 8001c1c:	9300      	str	r3, [sp, #0]
 8001c1e:	2301      	movs	r3, #1
 8001c20:	2275      	movs	r2, #117	@ 0x75
 8001c22:	21d0      	movs	r1, #208	@ 0xd0
 8001c24:	f00c fcbc 	bl	800e5a0 <HAL_I2C_Mem_Read>
	return data;
 8001c28:	79fb      	ldrb	r3, [r7, #7]
 8001c2a:	b25b      	sxtb	r3, r3
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3708      	adds	r7, #8
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	240000a0 	.word	0x240000a0

08001c38 <MPU6050_Enable_I2C_Bypass>:
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_USER_CTRL, 1, &data, 1, 1);
	return data;
}


void MPU6050_Enable_I2C_Bypass(void){
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b086      	sub	sp, #24
 8001c3c:	af04      	add	r7, sp, #16
	uint8_t data = 0x02;
 8001c3e:	2302      	movs	r3, #2
 8001c40:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_INT_PIN_CFG, 1, &data, 1, 1);
 8001c42:	4b08      	ldr	r3, [pc, #32]	@ (8001c64 <MPU6050_Enable_I2C_Bypass+0x2c>)
 8001c44:	6818      	ldr	r0, [r3, #0]
 8001c46:	2301      	movs	r3, #1
 8001c48:	9302      	str	r3, [sp, #8]
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	9301      	str	r3, [sp, #4]
 8001c4e:	1dfb      	adds	r3, r7, #7
 8001c50:	9300      	str	r3, [sp, #0]
 8001c52:	2301      	movs	r3, #1
 8001c54:	2237      	movs	r2, #55	@ 0x37
 8001c56:	21d0      	movs	r1, #208	@ 0xd0
 8001c58:	f00c fb8e 	bl	800e378 <HAL_I2C_Mem_Write>
}
 8001c5c:	bf00      	nop
 8001c5e:	3708      	adds	r7, #8
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	240000a0 	.word	0x240000a0

08001c68 <Complementary_getFilter>:

    return Kalman->angle;
};


void Complementary_getFilter(Complementary_Filter *Complementary_Filter_st,float ax_ang, float ay_ang, float magz_ang, float gx_ang, float gy_ang, float gz_ang){
 8001c68:	b480      	push	{r7}
 8001c6a:	b089      	sub	sp, #36	@ 0x24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	61f8      	str	r0, [r7, #28]
 8001c70:	ed87 0a06 	vstr	s0, [r7, #24]
 8001c74:	edc7 0a05 	vstr	s1, [r7, #20]
 8001c78:	ed87 1a04 	vstr	s2, [r7, #16]
 8001c7c:	edc7 1a03 	vstr	s3, [r7, #12]
 8001c80:	ed87 2a02 	vstr	s4, [r7, #8]
 8001c84:	edc7 2a01 	vstr	s5, [r7, #4]

		Complementary_Filter_st->x = (0.02*ax_ang*(-1))+(0.98*((gx_ang*looptime)+Complementary_Filter_st->ox));// mnozenie X-1 poniewaz akcelerometr miezy w drugą strone niz zyroskop
 8001c88:	4b35      	ldr	r3, [pc, #212]	@ (8001d60 <Complementary_getFilter+0xf8>)
 8001c8a:	ed93 7a00 	vldr	s14, [r3]
 8001c8e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	edd3 7a03 	vldr	s15, [r3, #12]
 8001c9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ca0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001ca4:	ed9f 6b2a 	vldr	d6, [pc, #168]	@ 8001d50 <Complementary_getFilter+0xe8>
 8001ca8:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001cac:	edd7 7a06 	vldr	s15, [r7, #24]
 8001cb0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001cb4:	ed9f 5b28 	vldr	d5, [pc, #160]	@ 8001d58 <Complementary_getFilter+0xf0>
 8001cb8:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001cbc:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001cc0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	edc3 7a00 	vstr	s15, [r3]
		Complementary_Filter_st->y = (0.02*ay_ang*(-1))+(0.98*((gy_ang*looptime)+Complementary_Filter_st->oy));
 8001cca:	4b25      	ldr	r3, [pc, #148]	@ (8001d60 <Complementary_getFilter+0xf8>)
 8001ccc:	ed93 7a00 	vldr	s14, [r3]
 8001cd0:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cd4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	edd3 7a04 	vldr	s15, [r3, #16]
 8001cde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ce2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001ce6:	ed9f 6b1a 	vldr	d6, [pc, #104]	@ 8001d50 <Complementary_getFilter+0xe8>
 8001cea:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001cee:	edd7 7a05 	vldr	s15, [r7, #20]
 8001cf2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001cf6:	ed9f 5b18 	vldr	d5, [pc, #96]	@ 8001d58 <Complementary_getFilter+0xf0>
 8001cfa:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001cfe:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001d02:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	edc3 7a01 	vstr	s15, [r3, #4]
		Complementary_Filter_st->z = (1*((gz_ang*looptime)+Complementary_Filter_st->oz));
 8001d0c:	4b14      	ldr	r3, [pc, #80]	@ (8001d60 <Complementary_getFilter+0xf8>)
 8001d0e:	ed93 7a00 	vldr	s14, [r3]
 8001d12:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d16:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001d20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	edc3 7a02 	vstr	s15, [r3, #8]

		Complementary_Filter_st->ox = Complementary_Filter_st->x;
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	60da      	str	r2, [r3, #12]
		Complementary_Filter_st->oy = Complementary_Filter_st->y;
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	685a      	ldr	r2, [r3, #4]
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	611a      	str	r2, [r3, #16]
		Complementary_Filter_st->oz = Complementary_Filter_st->z;
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	689a      	ldr	r2, [r3, #8]
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	615a      	str	r2, [r3, #20]
//
//	for(int i = 1; i < 15; i++){
//		OldZs[i] = OldZs[i-1];
//	}
//	OldZs[0] = Complementary_Filter_st->oz;
}
 8001d42:	bf00      	nop
 8001d44:	3724      	adds	r7, #36	@ 0x24
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	f5c28f5c 	.word	0xf5c28f5c
 8001d54:	3fef5c28 	.word	0x3fef5c28
 8001d58:	47ae147b 	.word	0x47ae147b
 8001d5c:	3f947ae1 	.word	0x3f947ae1
 8001d60:	0801e58c 	.word	0x0801e58c

08001d64 <nRF24_Delay>:

#define NRF24_CE_HIGH		HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_SET)
#define NRF24_CE_LOW		HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_RESET)

static void nRF24_Delay(uint8_t Time)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(1);
 8001d6e:	2001      	movs	r0, #1
 8001d70:	f007 f8d4 	bl	8008f1c <HAL_Delay>
}
 8001d74:	bf00      	nop
 8001d76:	3708      	adds	r7, #8
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <nRF24_SendSpi>:

static void nRF24_SendSpi(uint8_t *Data, uint8_t Length)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	460b      	mov	r3, r1
 8001d86:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(hspi_nrf, Data, Length, 1000);
 8001d88:	4b06      	ldr	r3, [pc, #24]	@ (8001da4 <nRF24_SendSpi+0x28>)
 8001d8a:	6818      	ldr	r0, [r3, #0]
 8001d8c:	78fb      	ldrb	r3, [r7, #3]
 8001d8e:	b29a      	uxth	r2, r3
 8001d90:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d94:	6879      	ldr	r1, [r7, #4]
 8001d96:	f012 fb7b 	bl	8014490 <HAL_SPI_Transmit>
}
 8001d9a:	bf00      	nop
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	240000a4 	.word	0x240000a4

08001da8 <nRF24_ReadSpi>:

static void nRF24_ReadSpi(uint8_t *Data, uint8_t Length)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	460b      	mov	r3, r1
 8001db2:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Receive(hspi_nrf, Data, Length, 1000);
 8001db4:	4b06      	ldr	r3, [pc, #24]	@ (8001dd0 <nRF24_ReadSpi+0x28>)
 8001db6:	6818      	ldr	r0, [r3, #0]
 8001db8:	78fb      	ldrb	r3, [r7, #3]
 8001dba:	b29a      	uxth	r2, r3
 8001dbc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dc0:	6879      	ldr	r1, [r7, #4]
 8001dc2:	f012 fd53 	bl	801486c <HAL_SPI_Receive>
}
 8001dc6:	bf00      	nop
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	240000a4 	.word	0x240000a4

08001dd4 <nRF24_ReadRegister>:
//
// END OF BASIC READ/WRITE FUNCTIONS
//

static uint8_t nRF24_ReadRegister(uint8_t reg)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	4603      	mov	r3, r0
 8001ddc:	71fb      	strb	r3, [r7, #7]
	uint8_t result;

	reg = NRF24_CMD_R_REGISTER | reg;
 8001dde:	79fb      	ldrb	r3, [r7, #7]
 8001de0:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001de2:	2200      	movs	r2, #0
 8001de4:	2180      	movs	r1, #128	@ 0x80
 8001de6:	480c      	ldr	r0, [pc, #48]	@ (8001e18 <nRF24_ReadRegister+0x44>)
 8001de8:	f00c f9f6 	bl	800e1d8 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&reg, 1);
 8001dec:	1dfb      	adds	r3, r7, #7
 8001dee:	2101      	movs	r1, #1
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7ff ffc3 	bl	8001d7c <nRF24_SendSpi>
	nRF24_ReadSpi(&result, 1);
 8001df6:	f107 030f 	add.w	r3, r7, #15
 8001dfa:	2101      	movs	r1, #1
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff ffd3 	bl	8001da8 <nRF24_ReadSpi>
	NRF24_CSN_HIGH;
 8001e02:	2201      	movs	r2, #1
 8001e04:	2180      	movs	r1, #128	@ 0x80
 8001e06:	4804      	ldr	r0, [pc, #16]	@ (8001e18 <nRF24_ReadRegister+0x44>)
 8001e08:	f00c f9e6 	bl	800e1d8 <HAL_GPIO_WritePin>

	return result;
 8001e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3710      	adds	r7, #16
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	58020400 	.word	0x58020400

08001e1c <nRF24_ReadRegisters>:

static void nRF24_ReadRegisters(uint8_t reg, uint8_t* ret, uint8_t len)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	4603      	mov	r3, r0
 8001e24:	6039      	str	r1, [r7, #0]
 8001e26:	71fb      	strb	r3, [r7, #7]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_R_REGISTER | reg;
 8001e2c:	79fb      	ldrb	r3, [r7, #7]
 8001e2e:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001e30:	2200      	movs	r2, #0
 8001e32:	2180      	movs	r1, #128	@ 0x80
 8001e34:	480a      	ldr	r0, [pc, #40]	@ (8001e60 <nRF24_ReadRegisters+0x44>)
 8001e36:	f00c f9cf 	bl	800e1d8 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 8001e3a:	1dfb      	adds	r3, r7, #7
 8001e3c:	2101      	movs	r1, #1
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7ff ff9c 	bl	8001d7c <nRF24_SendSpi>
	nRF24_ReadSpi(ret, len);
 8001e44:	79bb      	ldrb	r3, [r7, #6]
 8001e46:	4619      	mov	r1, r3
 8001e48:	6838      	ldr	r0, [r7, #0]
 8001e4a:	f7ff ffad 	bl	8001da8 <nRF24_ReadSpi>

	NRF24_CSN_HIGH;
 8001e4e:	2201      	movs	r2, #1
 8001e50:	2180      	movs	r1, #128	@ 0x80
 8001e52:	4803      	ldr	r0, [pc, #12]	@ (8001e60 <nRF24_ReadRegisters+0x44>)
 8001e54:	f00c f9c0 	bl	800e1d8 <HAL_GPIO_WritePin>
}
 8001e58:	bf00      	nop
 8001e5a:	3708      	adds	r7, #8
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	58020400 	.word	0x58020400

08001e64 <nRF24_WriteRegister>:

static void nRF24_WriteRegister(uint8_t reg, uint8_t val)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	460a      	mov	r2, r1
 8001e6e:	71fb      	strb	r3, [r7, #7]
 8001e70:	4613      	mov	r3, r2
 8001e72:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp[2];

	tmp[0] = NRF24_CMD_W_REGISTER | reg;
 8001e74:	79fb      	ldrb	r3, [r7, #7]
 8001e76:	f043 0320 	orr.w	r3, r3, #32
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	733b      	strb	r3, [r7, #12]
	tmp[1] = val;
 8001e7e:	79bb      	ldrb	r3, [r7, #6]
 8001e80:	737b      	strb	r3, [r7, #13]

	NRF24_CSN_LOW;
 8001e82:	2200      	movs	r2, #0
 8001e84:	2180      	movs	r1, #128	@ 0x80
 8001e86:	4809      	ldr	r0, [pc, #36]	@ (8001eac <nRF24_WriteRegister+0x48>)
 8001e88:	f00c f9a6 	bl	800e1d8 <HAL_GPIO_WritePin>

	nRF24_SendSpi(tmp, 2);
 8001e8c:	f107 030c 	add.w	r3, r7, #12
 8001e90:	2102      	movs	r1, #2
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7ff ff72 	bl	8001d7c <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8001e98:	2201      	movs	r2, #1
 8001e9a:	2180      	movs	r1, #128	@ 0x80
 8001e9c:	4803      	ldr	r0, [pc, #12]	@ (8001eac <nRF24_WriteRegister+0x48>)
 8001e9e:	f00c f99b 	bl	800e1d8 <HAL_GPIO_WritePin>
}
 8001ea2:	bf00      	nop
 8001ea4:	3710      	adds	r7, #16
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	58020400 	.word	0x58020400

08001eb0 <nRF24_WriteRegisters>:

static void nRF24_WriteRegisters(uint8_t reg, uint8_t* val, uint8_t len)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	6039      	str	r1, [r7, #0]
 8001eba:	71fb      	strb	r3, [r7, #7]
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_W_REGISTER | reg;
 8001ec0:	79fb      	ldrb	r3, [r7, #7]
 8001ec2:	f043 0320 	orr.w	r3, r3, #32
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001eca:	2200      	movs	r2, #0
 8001ecc:	2180      	movs	r1, #128	@ 0x80
 8001ece:	480b      	ldr	r0, [pc, #44]	@ (8001efc <nRF24_WriteRegisters+0x4c>)
 8001ed0:	f00c f982 	bl	800e1d8 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 8001ed4:	1dfb      	adds	r3, r7, #7
 8001ed6:	2101      	movs	r1, #1
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7ff ff4f 	bl	8001d7c <nRF24_SendSpi>
	nRF24_SendSpi(val, len);
 8001ede:	79bb      	ldrb	r3, [r7, #6]
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	6838      	ldr	r0, [r7, #0]
 8001ee4:	f7ff ff4a 	bl	8001d7c <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8001ee8:	2201      	movs	r2, #1
 8001eea:	2180      	movs	r1, #128	@ 0x80
 8001eec:	4803      	ldr	r0, [pc, #12]	@ (8001efc <nRF24_WriteRegisters+0x4c>)
 8001eee:	f00c f973 	bl	800e1d8 <HAL_GPIO_WritePin>
}
 8001ef2:	bf00      	nop
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	58020400 	.word	0x58020400

08001f00 <nRF24_RX_Mode>:

void nRF24_RX_Mode(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
	uint8_t config = nRF24_ReadConfig();
 8001f06:	f000 f84d 	bl	8001fa4 <nRF24_ReadConfig>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	71fb      	strb	r3, [r7, #7]
	// Restore pipe 0 adress after comeback from TX mode
	nRF24_SetRXAddress(0, addr_p0_backup);
 8001f0e:	4910      	ldr	r1, [pc, #64]	@ (8001f50 <nRF24_RX_Mode+0x50>)
 8001f10:	2000      	movs	r0, #0
 8001f12:	f000 f9f6 	bl	8002302 <nRF24_SetRXAddress>
	// PWR_UP bit set
	config |= (1<<NRF24_PWR_UP);
 8001f16:	79fb      	ldrb	r3, [r7, #7]
 8001f18:	f043 0302 	orr.w	r3, r3, #2
 8001f1c:	71fb      	strb	r3, [r7, #7]
	// PRIM_RX bit set
	config |= (1<<NRF24_PRIM_RX);
 8001f1e:	79fb      	ldrb	r3, [r7, #7]
 8001f20:	f043 0301 	orr.w	r3, r3, #1
 8001f24:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteConfig(config);
 8001f26:	79fb      	ldrb	r3, [r7, #7]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f000 f843 	bl	8001fb4 <nRF24_WriteConfig>
	// Reset status
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 8001f2e:	2070      	movs	r0, #112	@ 0x70
 8001f30:	f000 f89b 	bl	800206a <nRF24_WriteStatus>
	// Flush RX
	nRF24_FlushRX();
 8001f34:	f000 f8a8 	bl	8002088 <nRF24_FlushRX>
	// Flush TX
	nRF24_FlushTX();
 8001f38:	f000 f8c0 	bl	80020bc <nRF24_FlushTX>

	NRF24_CE_HIGH;
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	2140      	movs	r1, #64	@ 0x40
 8001f40:	4804      	ldr	r0, [pc, #16]	@ (8001f54 <nRF24_RX_Mode+0x54>)
 8001f42:	f00c f949 	bl	800e1d8 <HAL_GPIO_WritePin>
	//nRF24_Delay(1);
}
 8001f46:	bf00      	nop
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	240000a8 	.word	0x240000a8
 8001f54:	58020400 	.word	0x58020400

08001f58 <nRF24_TX_Mode>:

void nRF24_TX_Mode(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
	NRF24_CE_LOW;
 8001f5e:	2200      	movs	r2, #0
 8001f60:	2140      	movs	r1, #64	@ 0x40
 8001f62:	480f      	ldr	r0, [pc, #60]	@ (8001fa0 <nRF24_TX_Mode+0x48>)
 8001f64:	f00c f938 	bl	800e1d8 <HAL_GPIO_WritePin>

	uint8_t config = nRF24_ReadConfig();
 8001f68:	f000 f81c 	bl	8001fa4 <nRF24_ReadConfig>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	71fb      	strb	r3, [r7, #7]
	// PWR_UP bit set
	config |= (1<<NRF24_PWR_UP);
 8001f70:	79fb      	ldrb	r3, [r7, #7]
 8001f72:	f043 0302 	orr.w	r3, r3, #2
 8001f76:	71fb      	strb	r3, [r7, #7]
	// PRIM_RX bit low
	config &= ~(1<<NRF24_PRIM_RX);
 8001f78:	79fb      	ldrb	r3, [r7, #7]
 8001f7a:	f023 0301 	bic.w	r3, r3, #1
 8001f7e:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteConfig(config);
 8001f80:	79fb      	ldrb	r3, [r7, #7]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f000 f816 	bl	8001fb4 <nRF24_WriteConfig>
	// Reset status
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 8001f88:	2070      	movs	r0, #112	@ 0x70
 8001f8a:	f000 f86e 	bl	800206a <nRF24_WriteStatus>
	// Flush RX
	nRF24_FlushRX();
 8001f8e:	f000 f87b 	bl	8002088 <nRF24_FlushRX>
	// Flush TX
	nRF24_FlushTX();
 8001f92:	f000 f893 	bl	80020bc <nRF24_FlushTX>

	//nRF24_Delay(1);
}
 8001f96:	bf00      	nop
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	58020400 	.word	0x58020400

08001fa4 <nRF24_ReadConfig>:



uint8_t nRF24_ReadConfig(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_CONFIG));
 8001fa8:	2000      	movs	r0, #0
 8001faa:	f7ff ff13 	bl	8001dd4 <nRF24_ReadRegister>
 8001fae:	4603      	mov	r3, r0
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <nRF24_WriteConfig>:

void nRF24_WriteConfig(uint8_t conf)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	4603      	mov	r3, r0
 8001fbc:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_CONFIG, conf);
 8001fbe:	79fb      	ldrb	r3, [r7, #7]
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	2000      	movs	r0, #0
 8001fc4:	f7ff ff4e 	bl	8001e64 <nRF24_WriteRegister>
}
 8001fc8:	bf00      	nop
 8001fca:	3708      	adds	r7, #8
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <nRF24_SetPALevel>:

void nRF24_SetPALevel(uint8_t lev)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8001fda:	2006      	movs	r0, #6
 8001fdc:	f7ff fefa 	bl	8001dd4 <nRF24_ReadRegister>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xF8; // Clear PWR bits
 8001fe4:	7bfb      	ldrb	r3, [r7, #15]
 8001fe6:	f023 0307 	bic.w	r3, r3, #7
 8001fea:	73fb      	strb	r3, [r7, #15]
	rf_setup |= (lev<<1);
 8001fec:	79fb      	ldrb	r3, [r7, #7]
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	b25a      	sxtb	r2, r3
 8001ff2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	b25b      	sxtb	r3, r3
 8001ffa:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8001ffc:	7bfb      	ldrb	r3, [r7, #15]
 8001ffe:	4619      	mov	r1, r3
 8002000:	2006      	movs	r0, #6
 8002002:	f7ff ff2f 	bl	8001e64 <nRF24_WriteRegister>
}
 8002006:	bf00      	nop
 8002008:	3710      	adds	r7, #16
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <nRF24_SetDataRate>:

void nRF24_SetDataRate(uint8_t dr)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	b084      	sub	sp, #16
 8002012:	af00      	add	r7, sp, #0
 8002014:	4603      	mov	r3, r0
 8002016:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8002018:	2006      	movs	r0, #6
 800201a:	f7ff fedb 	bl	8001dd4 <nRF24_ReadRegister>
 800201e:	4603      	mov	r3, r0
 8002020:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xD7; // Clear DR bits (1MBPS)
 8002022:	7bfb      	ldrb	r3, [r7, #15]
 8002024:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 8002028:	73fb      	strb	r3, [r7, #15]
	if(dr == NRF24_RF_DR_250KBPS)
 800202a:	79fb      	ldrb	r3, [r7, #7]
 800202c:	2b02      	cmp	r3, #2
 800202e:	d104      	bne.n	800203a <nRF24_SetDataRate+0x2c>
		rf_setup |= (1<<NRF24_RF_DR_LOW);
 8002030:	7bfb      	ldrb	r3, [r7, #15]
 8002032:	f043 0320 	orr.w	r3, r3, #32
 8002036:	73fb      	strb	r3, [r7, #15]
 8002038:	e006      	b.n	8002048 <nRF24_SetDataRate+0x3a>
	else if(dr == NRF24_RF_DR_2MBPS)
 800203a:	79fb      	ldrb	r3, [r7, #7]
 800203c:	2b01      	cmp	r3, #1
 800203e:	d103      	bne.n	8002048 <nRF24_SetDataRate+0x3a>
		rf_setup |= (1<<NRF24_RF_DR_HIGH);
 8002040:	7bfb      	ldrb	r3, [r7, #15]
 8002042:	f043 0308 	orr.w	r3, r3, #8
 8002046:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8002048:	7bfb      	ldrb	r3, [r7, #15]
 800204a:	4619      	mov	r1, r3
 800204c:	2006      	movs	r0, #6
 800204e:	f7ff ff09 	bl	8001e64 <nRF24_WriteRegister>
}
 8002052:	bf00      	nop
 8002054:	3710      	adds	r7, #16
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <nRF24_ReadStatus>:

uint8_t nRF24_ReadStatus(void)
{
 800205a:	b580      	push	{r7, lr}
 800205c:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_STATUS));
 800205e:	2007      	movs	r0, #7
 8002060:	f7ff feb8 	bl	8001dd4 <nRF24_ReadRegister>
 8002064:	4603      	mov	r3, r0
}
 8002066:	4618      	mov	r0, r3
 8002068:	bd80      	pop	{r7, pc}

0800206a <nRF24_WriteStatus>:

void nRF24_WriteStatus(uint8_t st)
{
 800206a:	b580      	push	{r7, lr}
 800206c:	b082      	sub	sp, #8
 800206e:	af00      	add	r7, sp, #0
 8002070:	4603      	mov	r3, r0
 8002072:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_STATUS, st);
 8002074:	79fb      	ldrb	r3, [r7, #7]
 8002076:	4619      	mov	r1, r3
 8002078:	2007      	movs	r0, #7
 800207a:	f7ff fef3 	bl	8001e64 <nRF24_WriteRegister>
}
 800207e:	bf00      	nop
 8002080:	3708      	adds	r7, #8
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
	...

08002088 <nRF24_FlushRX>:

void nRF24_FlushRX(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_RX;
 800208e:	23e2      	movs	r3, #226	@ 0xe2
 8002090:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8002092:	2200      	movs	r2, #0
 8002094:	2180      	movs	r1, #128	@ 0x80
 8002096:	4808      	ldr	r0, [pc, #32]	@ (80020b8 <nRF24_FlushRX+0x30>)
 8002098:	f00c f89e 	bl	800e1d8 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 800209c:	1dfb      	adds	r3, r7, #7
 800209e:	2101      	movs	r1, #1
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7ff fe6b 	bl	8001d7c <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 80020a6:	2201      	movs	r2, #1
 80020a8:	2180      	movs	r1, #128	@ 0x80
 80020aa:	4803      	ldr	r0, [pc, #12]	@ (80020b8 <nRF24_FlushRX+0x30>)
 80020ac:	f00c f894 	bl	800e1d8 <HAL_GPIO_WritePin>
}
 80020b0:	bf00      	nop
 80020b2:	3708      	adds	r7, #8
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	58020400 	.word	0x58020400

080020bc <nRF24_FlushTX>:

void nRF24_FlushTX(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_TX;
 80020c2:	23e1      	movs	r3, #225	@ 0xe1
 80020c4:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 80020c6:	2200      	movs	r2, #0
 80020c8:	2180      	movs	r1, #128	@ 0x80
 80020ca:	4808      	ldr	r0, [pc, #32]	@ (80020ec <nRF24_FlushTX+0x30>)
 80020cc:	f00c f884 	bl	800e1d8 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 80020d0:	1dfb      	adds	r3, r7, #7
 80020d2:	2101      	movs	r1, #1
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7ff fe51 	bl	8001d7c <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 80020da:	2201      	movs	r2, #1
 80020dc:	2180      	movs	r1, #128	@ 0x80
 80020de:	4803      	ldr	r0, [pc, #12]	@ (80020ec <nRF24_FlushTX+0x30>)
 80020e0:	f00c f87a 	bl	800e1d8 <HAL_GPIO_WritePin>
}
 80020e4:	bf00      	nop
 80020e6:	3708      	adds	r7, #8
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	58020400 	.word	0x58020400

080020f0 <nRF24_EnableCRC>:

void nRF24_EnableCRC(uint8_t onoff)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	4603      	mov	r3, r0
 80020f8:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 80020fa:	f7ff ff53 	bl	8001fa4 <nRF24_ReadConfig>
 80020fe:	4603      	mov	r3, r0
 8002100:	73fb      	strb	r3, [r7, #15]

	if(onoff)
 8002102:	79fb      	ldrb	r3, [r7, #7]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d004      	beq.n	8002112 <nRF24_EnableCRC+0x22>
		config |= (1<<NRF24_EN_CRC);
 8002108:	7bfb      	ldrb	r3, [r7, #15]
 800210a:	f043 0308 	orr.w	r3, r3, #8
 800210e:	73fb      	strb	r3, [r7, #15]
 8002110:	e003      	b.n	800211a <nRF24_EnableCRC+0x2a>
	else
		config &= ~(1<<NRF24_EN_CRC);
 8002112:	7bfb      	ldrb	r3, [r7, #15]
 8002114:	f023 0308 	bic.w	r3, r3, #8
 8002118:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 800211a:	7bfb      	ldrb	r3, [r7, #15]
 800211c:	4618      	mov	r0, r3
 800211e:	f7ff ff49 	bl	8001fb4 <nRF24_WriteConfig>
}
 8002122:	bf00      	nop
 8002124:	3710      	adds	r7, #16
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <nRF24_SetCRCLength>:

void nRF24_SetCRCLength(uint8_t crcl)
{
 800212a:	b580      	push	{r7, lr}
 800212c:	b084      	sub	sp, #16
 800212e:	af00      	add	r7, sp, #0
 8002130:	4603      	mov	r3, r0
 8002132:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8002134:	f7ff ff36 	bl	8001fa4 <nRF24_ReadConfig>
 8002138:	4603      	mov	r3, r0
 800213a:	73fb      	strb	r3, [r7, #15]
	if(crcl == NRF24_CRC_WIDTH_2B)
 800213c:	79fb      	ldrb	r3, [r7, #7]
 800213e:	2b01      	cmp	r3, #1
 8002140:	d104      	bne.n	800214c <nRF24_SetCRCLength+0x22>
		config |= (1<<NRF24_CRCO);
 8002142:	7bfb      	ldrb	r3, [r7, #15]
 8002144:	f043 0304 	orr.w	r3, r3, #4
 8002148:	73fb      	strb	r3, [r7, #15]
 800214a:	e003      	b.n	8002154 <nRF24_SetCRCLength+0x2a>
	else
		config &= ~(1<<NRF24_CRCO);
 800214c:	7bfb      	ldrb	r3, [r7, #15]
 800214e:	f023 0304 	bic.w	r3, r3, #4
 8002152:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 8002154:	7bfb      	ldrb	r3, [r7, #15]
 8002156:	4618      	mov	r0, r3
 8002158:	f7ff ff2c 	bl	8001fb4 <nRF24_WriteConfig>
}
 800215c:	bf00      	nop
 800215e:	3710      	adds	r7, #16
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <nRF24_SetRetries>:

void nRF24_SetRetries(uint8_t ard, uint8_t arc)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	4603      	mov	r3, r0
 800216c:	460a      	mov	r2, r1
 800216e:	71fb      	strb	r3, [r7, #7]
 8002170:	4613      	mov	r3, r2
 8002172:	71bb      	strb	r3, [r7, #6]
	// ard * 250us, arc repeats
	nRF24_WriteRegister(NRF24_SETUP_RETR, (((ard & 0x0F)<<NRF24_ARD) | ((arc & 0x0F)<<NRF24_ARC)));
 8002174:	79fb      	ldrb	r3, [r7, #7]
 8002176:	011b      	lsls	r3, r3, #4
 8002178:	b25a      	sxtb	r2, r3
 800217a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800217e:	f003 030f 	and.w	r3, r3, #15
 8002182:	b25b      	sxtb	r3, r3
 8002184:	4313      	orrs	r3, r2
 8002186:	b25b      	sxtb	r3, r3
 8002188:	b2db      	uxtb	r3, r3
 800218a:	4619      	mov	r1, r3
 800218c:	2004      	movs	r0, #4
 800218e:	f7ff fe69 	bl	8001e64 <nRF24_WriteRegister>
}
 8002192:	bf00      	nop
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <nRF24_SetRFChannel>:

void nRF24_SetRFChannel(uint8_t channel)
{
 800219a:	b580      	push	{r7, lr}
 800219c:	b082      	sub	sp, #8
 800219e:	af00      	add	r7, sp, #0
 80021a0:	4603      	mov	r3, r0
 80021a2:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_RF_CH, (channel & 0x7F));
 80021a4:	79fb      	ldrb	r3, [r7, #7]
 80021a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	4619      	mov	r1, r3
 80021ae:	2005      	movs	r0, #5
 80021b0:	f7ff fe58 	bl	8001e64 <nRF24_WriteRegister>
}
 80021b4:	bf00      	nop
 80021b6:	3708      	adds	r7, #8
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}

080021bc <nRF24_SetPayloadSize>:

void nRF24_SetPayloadSize(uint8_t pipe, uint8_t size)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	4603      	mov	r3, r0
 80021c4:	460a      	mov	r2, r1
 80021c6:	71fb      	strb	r3, [r7, #7]
 80021c8:	4613      	mov	r3, r2
 80021ca:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 80021cc:	79fb      	ldrb	r3, [r7, #7]
 80021ce:	2b05      	cmp	r3, #5
 80021d0:	d901      	bls.n	80021d6 <nRF24_SetPayloadSize+0x1a>
		pipe = 5; // Block too high pipe number
 80021d2:	2305      	movs	r3, #5
 80021d4:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_RX_PW_P0 + pipe , (size & 0x3F));
 80021d6:	79fb      	ldrb	r3, [r7, #7]
 80021d8:	3311      	adds	r3, #17
 80021da:	b2da      	uxtb	r2, r3
 80021dc:	79bb      	ldrb	r3, [r7, #6]
 80021de:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	4619      	mov	r1, r3
 80021e6:	4610      	mov	r0, r2
 80021e8:	f7ff fe3c 	bl	8001e64 <nRF24_WriteRegister>
}
 80021ec:	bf00      	nop
 80021ee:	3708      	adds	r7, #8
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <nRF24_EnablePipe>:

void nRF24_EnablePipe(uint8_t pipe, uint8_t onoff)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	4603      	mov	r3, r0
 80021fc:	460a      	mov	r2, r1
 80021fe:	71fb      	strb	r3, [r7, #7]
 8002200:	4613      	mov	r3, r2
 8002202:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 8002204:	79fb      	ldrb	r3, [r7, #7]
 8002206:	2b05      	cmp	r3, #5
 8002208:	d901      	bls.n	800220e <nRF24_EnablePipe+0x1a>
		pipe = 5; // Block too high pipe number
 800220a:	2305      	movs	r3, #5
 800220c:	71fb      	strb	r3, [r7, #7]
	uint8_t enable_pipe = nRF24_ReadRegister(NRF24_EN_RXADDR);
 800220e:	2002      	movs	r0, #2
 8002210:	f7ff fde0 	bl	8001dd4 <nRF24_ReadRegister>
 8002214:	4603      	mov	r3, r0
 8002216:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 8002218:	79bb      	ldrb	r3, [r7, #6]
 800221a:	2b01      	cmp	r3, #1
 800221c:	d10a      	bne.n	8002234 <nRF24_EnablePipe+0x40>
		enable_pipe |= (1<<pipe);
 800221e:	79fb      	ldrb	r3, [r7, #7]
 8002220:	2201      	movs	r2, #1
 8002222:	fa02 f303 	lsl.w	r3, r2, r3
 8002226:	b25a      	sxtb	r2, r3
 8002228:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800222c:	4313      	orrs	r3, r2
 800222e:	b25b      	sxtb	r3, r3
 8002230:	73fb      	strb	r3, [r7, #15]
 8002232:	e00b      	b.n	800224c <nRF24_EnablePipe+0x58>
	else
		enable_pipe &= ~(1<<pipe);
 8002234:	79fb      	ldrb	r3, [r7, #7]
 8002236:	2201      	movs	r2, #1
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	b25b      	sxtb	r3, r3
 800223e:	43db      	mvns	r3, r3
 8002240:	b25a      	sxtb	r2, r3
 8002242:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002246:	4013      	ands	r3, r2
 8002248:	b25b      	sxtb	r3, r3
 800224a:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_RXADDR, enable_pipe);
 800224c:	7bfb      	ldrb	r3, [r7, #15]
 800224e:	4619      	mov	r1, r3
 8002250:	2002      	movs	r0, #2
 8002252:	f7ff fe07 	bl	8001e64 <nRF24_WriteRegister>
}
 8002256:	bf00      	nop
 8002258:	3710      	adds	r7, #16
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}

0800225e <nRF24_AutoACK>:

void nRF24_AutoACK(uint8_t pipe, uint8_t onoff)
{
 800225e:	b580      	push	{r7, lr}
 8002260:	b084      	sub	sp, #16
 8002262:	af00      	add	r7, sp, #0
 8002264:	4603      	mov	r3, r0
 8002266:	460a      	mov	r2, r1
 8002268:	71fb      	strb	r3, [r7, #7]
 800226a:	4613      	mov	r3, r2
 800226c:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 800226e:	79fb      	ldrb	r3, [r7, #7]
 8002270:	2b05      	cmp	r3, #5
 8002272:	d901      	bls.n	8002278 <nRF24_AutoACK+0x1a>
		pipe = 5; // Block too high pipe number
 8002274:	2305      	movs	r3, #5
 8002276:	71fb      	strb	r3, [r7, #7]
	uint8_t enaa = nRF24_ReadRegister(NRF24_EN_AA);
 8002278:	2001      	movs	r0, #1
 800227a:	f7ff fdab 	bl	8001dd4 <nRF24_ReadRegister>
 800227e:	4603      	mov	r3, r0
 8002280:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 8002282:	79bb      	ldrb	r3, [r7, #6]
 8002284:	2b01      	cmp	r3, #1
 8002286:	d10a      	bne.n	800229e <nRF24_AutoACK+0x40>
		enaa |= (1<<pipe);
 8002288:	79fb      	ldrb	r3, [r7, #7]
 800228a:	2201      	movs	r2, #1
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	b25a      	sxtb	r2, r3
 8002292:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002296:	4313      	orrs	r3, r2
 8002298:	b25b      	sxtb	r3, r3
 800229a:	73fb      	strb	r3, [r7, #15]
 800229c:	e00b      	b.n	80022b6 <nRF24_AutoACK+0x58>
	else
		enaa &= ~(1<<pipe);
 800229e:	79fb      	ldrb	r3, [r7, #7]
 80022a0:	2201      	movs	r2, #1
 80022a2:	fa02 f303 	lsl.w	r3, r2, r3
 80022a6:	b25b      	sxtb	r3, r3
 80022a8:	43db      	mvns	r3, r3
 80022aa:	b25a      	sxtb	r2, r3
 80022ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022b0:	4013      	ands	r3, r2
 80022b2:	b25b      	sxtb	r3, r3
 80022b4:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_AA, enaa);
 80022b6:	7bfb      	ldrb	r3, [r7, #15]
 80022b8:	4619      	mov	r1, r3
 80022ba:	2001      	movs	r0, #1
 80022bc:	f7ff fdd2 	bl	8001e64 <nRF24_WriteRegister>
}
 80022c0:	bf00      	nop
 80022c2:	3710      	adds	r7, #16
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <nRF24_SetAddressWidth>:

void nRF24_SetAddressWidth(uint8_t size)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	4603      	mov	r3, r0
 80022d0:	71fb      	strb	r3, [r7, #7]
	if(size > 5)
 80022d2:	79fb      	ldrb	r3, [r7, #7]
 80022d4:	2b05      	cmp	r3, #5
 80022d6:	d901      	bls.n	80022dc <nRF24_SetAddressWidth+0x14>
		size = 5; // Maximum are 5 bytes
 80022d8:	2305      	movs	r3, #5
 80022da:	71fb      	strb	r3, [r7, #7]
	if(size < 3)
 80022dc:	79fb      	ldrb	r3, [r7, #7]
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d801      	bhi.n	80022e6 <nRF24_SetAddressWidth+0x1e>
		size = 3; // Minimum are 3 bytes
 80022e2:	2303      	movs	r3, #3
 80022e4:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_SETUP_AW, ((size-2) & 0x03));
 80022e6:	79fb      	ldrb	r3, [r7, #7]
 80022e8:	3b02      	subs	r3, #2
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	f003 0303 	and.w	r3, r3, #3
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	4619      	mov	r1, r3
 80022f4:	2003      	movs	r0, #3
 80022f6:	f7ff fdb5 	bl	8001e64 <nRF24_WriteRegister>
}
 80022fa:	bf00      	nop
 80022fc:	3708      	adds	r7, #8
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <nRF24_SetRXAddress>:

void nRF24_SetRXAddress(uint8_t pipe, uint8_t* address)
{
 8002302:	b580      	push	{r7, lr}
 8002304:	b084      	sub	sp, #16
 8002306:	af00      	add	r7, sp, #0
 8002308:	4603      	mov	r3, r0
 800230a:	6039      	str	r1, [r7, #0]
 800230c:	71fb      	strb	r3, [r7, #7]
	// pipe 0 and pipe 1 are fully 40-bits storaged
	// pipe 2-5 is storaged only with last byte. Rest are as same as pipe 1
	// pipe 0 and 1 are LSByte first so they are needed to reverse address
	if((pipe == 0) || (pipe == 1))
 800230e:	79fb      	ldrb	r3, [r7, #7]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d002      	beq.n	800231a <nRF24_SetRXAddress+0x18>
 8002314:	79fb      	ldrb	r3, [r7, #7]
 8002316:	2b01      	cmp	r3, #1
 8002318:	d11d      	bne.n	8002356 <nRF24_SetRXAddress+0x54>
	{
		uint8_t i;
		uint8_t address_rev[NRF24_ADDR_SIZE];
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 800231a:	2300      	movs	r3, #0
 800231c:	73fb      	strb	r3, [r7, #15]
 800231e:	e00d      	b.n	800233c <nRF24_SetRXAddress+0x3a>
			address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 8002320:	7bfb      	ldrb	r3, [r7, #15]
 8002322:	683a      	ldr	r2, [r7, #0]
 8002324:	441a      	add	r2, r3
 8002326:	7bfb      	ldrb	r3, [r7, #15]
 8002328:	f1c3 0302 	rsb	r3, r3, #2
 800232c:	7812      	ldrb	r2, [r2, #0]
 800232e:	3310      	adds	r3, #16
 8002330:	443b      	add	r3, r7
 8002332:	f803 2c04 	strb.w	r2, [r3, #-4]
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8002336:	7bfb      	ldrb	r3, [r7, #15]
 8002338:	3301      	adds	r3, #1
 800233a:	73fb      	strb	r3, [r7, #15]
 800233c:	7bfb      	ldrb	r3, [r7, #15]
 800233e:	2b02      	cmp	r3, #2
 8002340:	d9ee      	bls.n	8002320 <nRF24_SetRXAddress+0x1e>
		nRF24_WriteRegisters(NRF24_RX_ADDR_P0 + pipe, address_rev, NRF24_ADDR_SIZE);
 8002342:	79fb      	ldrb	r3, [r7, #7]
 8002344:	330a      	adds	r3, #10
 8002346:	b2db      	uxtb	r3, r3
 8002348:	f107 010c 	add.w	r1, r7, #12
 800234c:	2203      	movs	r2, #3
 800234e:	4618      	mov	r0, r3
 8002350:	f7ff fdae 	bl	8001eb0 <nRF24_WriteRegisters>
	{
 8002354:	e00a      	b.n	800236c <nRF24_SetRXAddress+0x6a>
	}
	else
		nRF24_WriteRegister(NRF24_RX_ADDR_P0 + pipe, address[NRF24_ADDR_SIZE-1]);
 8002356:	79fb      	ldrb	r3, [r7, #7]
 8002358:	330a      	adds	r3, #10
 800235a:	b2da      	uxtb	r2, r3
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	3302      	adds	r3, #2
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	4619      	mov	r1, r3
 8002364:	4610      	mov	r0, r2
 8002366:	f7ff fd7d 	bl	8001e64 <nRF24_WriteRegister>
}
 800236a:	bf00      	nop
 800236c:	bf00      	nop
 800236e:	3710      	adds	r7, #16
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}

08002374 <nRF24_SetTXAddress>:

void nRF24_SetTXAddress(uint8_t* address)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
	// TX address is storaged similar to RX pipe 0 - LSByte first
	uint8_t i;
	uint8_t address_rev[NRF24_ADDR_SIZE];

	nRF24_ReadRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Backup P0 address
 800237c:	f107 030c 	add.w	r3, r7, #12
 8002380:	2203      	movs	r2, #3
 8002382:	4619      	mov	r1, r3
 8002384:	200a      	movs	r0, #10
 8002386:	f7ff fd49 	bl	8001e1c <nRF24_ReadRegisters>
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 800238a:	2300      	movs	r3, #0
 800238c:	73fb      	strb	r3, [r7, #15]
 800238e:	e00c      	b.n	80023aa <nRF24_SetTXAddress+0x36>
		addr_p0_backup[NRF24_ADDR_SIZE - 1 - i] = address_rev[i]; //Reverse P0 address
 8002390:	7bfa      	ldrb	r2, [r7, #15]
 8002392:	7bfb      	ldrb	r3, [r7, #15]
 8002394:	f1c3 0302 	rsb	r3, r3, #2
 8002398:	3210      	adds	r2, #16
 800239a:	443a      	add	r2, r7
 800239c:	f812 1c04 	ldrb.w	r1, [r2, #-4]
 80023a0:	4a16      	ldr	r2, [pc, #88]	@ (80023fc <nRF24_SetTXAddress+0x88>)
 80023a2:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80023a4:	7bfb      	ldrb	r3, [r7, #15]
 80023a6:	3301      	adds	r3, #1
 80023a8:	73fb      	strb	r3, [r7, #15]
 80023aa:	7bfb      	ldrb	r3, [r7, #15]
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d9ef      	bls.n	8002390 <nRF24_SetTXAddress+0x1c>

	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80023b0:	2300      	movs	r3, #0
 80023b2:	73fb      	strb	r3, [r7, #15]
 80023b4:	e00d      	b.n	80023d2 <nRF24_SetTXAddress+0x5e>
		address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 80023b6:	7bfb      	ldrb	r3, [r7, #15]
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	441a      	add	r2, r3
 80023bc:	7bfb      	ldrb	r3, [r7, #15]
 80023be:	f1c3 0302 	rsb	r3, r3, #2
 80023c2:	7812      	ldrb	r2, [r2, #0]
 80023c4:	3310      	adds	r3, #16
 80023c6:	443b      	add	r3, r7
 80023c8:	f803 2c04 	strb.w	r2, [r3, #-4]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80023cc:	7bfb      	ldrb	r3, [r7, #15]
 80023ce:	3301      	adds	r3, #1
 80023d0:	73fb      	strb	r3, [r7, #15]
 80023d2:	7bfb      	ldrb	r3, [r7, #15]
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d9ee      	bls.n	80023b6 <nRF24_SetTXAddress+0x42>
	//make pipe 0 address backup;

	nRF24_WriteRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Pipe 0 must be same for auto ACk
 80023d8:	f107 030c 	add.w	r3, r7, #12
 80023dc:	2203      	movs	r2, #3
 80023de:	4619      	mov	r1, r3
 80023e0:	200a      	movs	r0, #10
 80023e2:	f7ff fd65 	bl	8001eb0 <nRF24_WriteRegisters>
	nRF24_WriteRegisters(NRF24_TX_ADDR, address_rev, NRF24_ADDR_SIZE);
 80023e6:	f107 030c 	add.w	r3, r7, #12
 80023ea:	2203      	movs	r2, #3
 80023ec:	4619      	mov	r1, r3
 80023ee:	2010      	movs	r0, #16
 80023f0:	f7ff fd5e 	bl	8001eb0 <nRF24_WriteRegisters>

}
 80023f4:	bf00      	nop
 80023f6:	3710      	adds	r7, #16
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	240000a8 	.word	0x240000a8

08002400 <nRF24_ClearInterrupts>:

void nRF24_ClearInterrupts(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
	uint8_t status = nRF24_ReadStatus();
 8002406:	f7ff fe28 	bl	800205a <nRF24_ReadStatus>
 800240a:	4603      	mov	r3, r0
 800240c:	71fb      	strb	r3, [r7, #7]
	status |= (7<<4); // Clear bits 4, 5, 6.
 800240e:	79fb      	ldrb	r3, [r7, #7]
 8002410:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8002414:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteStatus(status);
 8002416:	79fb      	ldrb	r3, [r7, #7]
 8002418:	4618      	mov	r0, r3
 800241a:	f7ff fe26 	bl	800206a <nRF24_WriteStatus>
}
 800241e:	bf00      	nop
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <nRF24_EnableRXDataReadyIRQ>:

void nRF24_EnableRXDataReadyIRQ(uint8_t onoff)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	b084      	sub	sp, #16
 800242a:	af00      	add	r7, sp, #0
 800242c:	4603      	mov	r3, r0
 800242e:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8002430:	f7ff fdb8 	bl	8001fa4 <nRF24_ReadConfig>
 8002434:	4603      	mov	r3, r0
 8002436:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 8002438:	79fb      	ldrb	r3, [r7, #7]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d104      	bne.n	8002448 <nRF24_EnableRXDataReadyIRQ+0x22>
		config |= (1<<NRF24_RX_DR);
 800243e:	7bfb      	ldrb	r3, [r7, #15]
 8002440:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002444:	73fb      	strb	r3, [r7, #15]
 8002446:	e003      	b.n	8002450 <nRF24_EnableRXDataReadyIRQ+0x2a>
	else
		config &= ~(1<<NRF24_RX_DR);
 8002448:	7bfb      	ldrb	r3, [r7, #15]
 800244a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800244e:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 8002450:	7bfb      	ldrb	r3, [r7, #15]
 8002452:	4618      	mov	r0, r3
 8002454:	f7ff fdae 	bl	8001fb4 <nRF24_WriteConfig>
}
 8002458:	bf00      	nop
 800245a:	3710      	adds	r7, #16
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}

08002460 <nRF24_EnableTXDataSentIRQ>:

void nRF24_EnableTXDataSentIRQ(uint8_t onoff)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	4603      	mov	r3, r0
 8002468:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 800246a:	f7ff fd9b 	bl	8001fa4 <nRF24_ReadConfig>
 800246e:	4603      	mov	r3, r0
 8002470:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 8002472:	79fb      	ldrb	r3, [r7, #7]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d104      	bne.n	8002482 <nRF24_EnableTXDataSentIRQ+0x22>
		config |= (1<<NRF24_TX_DS);
 8002478:	7bfb      	ldrb	r3, [r7, #15]
 800247a:	f043 0320 	orr.w	r3, r3, #32
 800247e:	73fb      	strb	r3, [r7, #15]
 8002480:	e003      	b.n	800248a <nRF24_EnableTXDataSentIRQ+0x2a>
	else
		config &= ~(1<<NRF24_TX_DS);
 8002482:	7bfb      	ldrb	r3, [r7, #15]
 8002484:	f023 0320 	bic.w	r3, r3, #32
 8002488:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 800248a:	7bfb      	ldrb	r3, [r7, #15]
 800248c:	4618      	mov	r0, r3
 800248e:	f7ff fd91 	bl	8001fb4 <nRF24_WriteConfig>
}
 8002492:	bf00      	nop
 8002494:	3710      	adds	r7, #16
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}

0800249a <nRF24_EnableMaxRetransmitIRQ>:

void nRF24_EnableMaxRetransmitIRQ(uint8_t onoff)
{
 800249a:	b580      	push	{r7, lr}
 800249c:	b084      	sub	sp, #16
 800249e:	af00      	add	r7, sp, #0
 80024a0:	4603      	mov	r3, r0
 80024a2:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 80024a4:	f7ff fd7e 	bl	8001fa4 <nRF24_ReadConfig>
 80024a8:	4603      	mov	r3, r0
 80024aa:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 80024ac:	79fb      	ldrb	r3, [r7, #7]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d104      	bne.n	80024bc <nRF24_EnableMaxRetransmitIRQ+0x22>
		config |= (1<<NRF24_MAX_RT);
 80024b2:	7bfb      	ldrb	r3, [r7, #15]
 80024b4:	f043 0310 	orr.w	r3, r3, #16
 80024b8:	73fb      	strb	r3, [r7, #15]
 80024ba:	e003      	b.n	80024c4 <nRF24_EnableMaxRetransmitIRQ+0x2a>
	else
		config &= ~(1<<NRF24_MAX_RT);
 80024bc:	7bfb      	ldrb	r3, [r7, #15]
 80024be:	f023 0310 	bic.w	r3, r3, #16
 80024c2:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 80024c4:	7bfb      	ldrb	r3, [r7, #15]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7ff fd74 	bl	8001fb4 <nRF24_WriteConfig>
}
 80024cc:	bf00      	nop
 80024ce:	3710      	adds	r7, #16
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <nRF24_WriteTXPayload>:

void nRF24_WriteTXPayload(uint8_t * data/*, uint8_t size*/)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
	nRF24_WriteRegisters(NRF24_CMD_W_TX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
 80024dc:	2220      	movs	r2, #32
 80024de:	6879      	ldr	r1, [r7, #4]
 80024e0:	20a0      	movs	r0, #160	@ 0xa0
 80024e2:	f7ff fce5 	bl	8001eb0 <nRF24_WriteRegisters>
	//nRF24_WaitTX();
}
 80024e6:	bf00      	nop
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
	...

080024f0 <nRF24_WaitTX>:

void nRF24_WaitTX()
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
	uint8_t status;
	NRF24_CE_HIGH;
 80024f6:	2201      	movs	r2, #1
 80024f8:	2140      	movs	r1, #64	@ 0x40
 80024fa:	4810      	ldr	r0, [pc, #64]	@ (800253c <nRF24_WaitTX+0x4c>)
 80024fc:	f00b fe6c 	bl	800e1d8 <HAL_GPIO_WritePin>
	nRF24_Delay(1);
 8002500:	2001      	movs	r0, #1
 8002502:	f7ff fc2f 	bl	8001d64 <nRF24_Delay>
	NRF24_CE_LOW;
 8002506:	2200      	movs	r2, #0
 8002508:	2140      	movs	r1, #64	@ 0x40
 800250a:	480c      	ldr	r0, [pc, #48]	@ (800253c <nRF24_WaitTX+0x4c>)
 800250c:	f00b fe64 	bl	800e1d8 <HAL_GPIO_WritePin>
	do
	{
		nRF24_Delay(1);
 8002510:	2001      	movs	r0, #1
 8002512:	f7ff fc27 	bl	8001d64 <nRF24_Delay>
		status = nRF24_ReadStatus();
 8002516:	f7ff fda0 	bl	800205a <nRF24_ReadStatus>
 800251a:	4603      	mov	r3, r0
 800251c:	71fb      	strb	r3, [r7, #7]
	}while(!((status & (1<<NRF24_MAX_RT)) || (status & (1<<NRF24_TX_DS))));
 800251e:	79fb      	ldrb	r3, [r7, #7]
 8002520:	f003 0310 	and.w	r3, r3, #16
 8002524:	2b00      	cmp	r3, #0
 8002526:	d104      	bne.n	8002532 <nRF24_WaitTX+0x42>
 8002528:	79fb      	ldrb	r3, [r7, #7]
 800252a:	f003 0320 	and.w	r3, r3, #32
 800252e:	2b00      	cmp	r3, #0
 8002530:	d0ee      	beq.n	8002510 <nRF24_WaitTX+0x20>

}
 8002532:	bf00      	nop
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	58020400 	.word	0x58020400

08002540 <nRF24_ReadRXPaylaod>:

void nRF24_ReadRXPaylaod(uint8_t *data/*, uint8_t *size*/)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
	nRF24_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
 8002548:	2220      	movs	r2, #32
 800254a:	6879      	ldr	r1, [r7, #4]
 800254c:	2061      	movs	r0, #97	@ 0x61
 800254e:	f7ff fc65 	bl	8001e1c <nRF24_ReadRegisters>
	nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_RX_DR));
 8002552:	2140      	movs	r1, #64	@ 0x40
 8002554:	2007      	movs	r0, #7
 8002556:	f7ff fc85 	bl	8001e64 <nRF24_WriteRegister>

	if(nRF24_ReadStatus() & (1<<NRF24_TX_DS)){
 800255a:	f7ff fd7e 	bl	800205a <nRF24_ReadStatus>
 800255e:	4603      	mov	r3, r0
 8002560:	f003 0320 	and.w	r3, r3, #32
 8002564:	2b00      	cmp	r3, #0
 8002566:	d003      	beq.n	8002570 <nRF24_ReadRXPaylaod+0x30>
		nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
 8002568:	2120      	movs	r1, #32
 800256a:	2007      	movs	r0, #7
 800256c:	f7ff fc7a 	bl	8001e64 <nRF24_WriteRegister>
//	nRF24_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, *size);
//
//	nRF24_WriteRegister(NRF24_STATUS, (1<NRF24_RX_DR));
//	if(nRF24_ReadStatus() & (1<<NRF24_TX_DS))
//		nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
}
 8002570:	bf00      	nop
 8002572:	3708      	adds	r7, #8
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}

08002578 <nRF24_IsBitSetInFifoStatus>:

	return 0;
}

uint8_t nRF24_IsBitSetInFifoStatus(uint8_t Bit)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	4603      	mov	r3, r0
 8002580:	71fb      	strb	r3, [r7, #7]
	uint8_t FifoStatus;

	FifoStatus = nRF24_ReadFifoStatus();
 8002582:	f000 f811 	bl	80025a8 <nRF24_ReadFifoStatus>
 8002586:	4603      	mov	r3, r0
 8002588:	73fb      	strb	r3, [r7, #15]

	if(FifoStatus & (1<<Bit))
 800258a:	7bfa      	ldrb	r2, [r7, #15]
 800258c:	79fb      	ldrb	r3, [r7, #7]
 800258e:	fa42 f303 	asr.w	r3, r2, r3
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <nRF24_IsBitSetInFifoStatus+0x26>
	{
		return 1;
 800259a:	2301      	movs	r3, #1
 800259c:	e000      	b.n	80025a0 <nRF24_IsBitSetInFifoStatus+0x28>
	}

	return 0;
 800259e:	2300      	movs	r3, #0
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3710      	adds	r7, #16
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <nRF24_ReadFifoStatus>:

uint8_t nRF24_ReadFifoStatus(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_FIFO_STATUS));
 80025ac:	2017      	movs	r0, #23
 80025ae:	f7ff fc11 	bl	8001dd4 <nRF24_ReadRegister>
 80025b2:	4603      	mov	r3, r0
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <nRF24_Init>:



void nRF24_Init(SPI_HandleTypeDef *hspi)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
	hspi_nrf = hspi;
 80025c0:	4a25      	ldr	r2, [pc, #148]	@ (8002658 <nRF24_Init+0xa0>)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6013      	str	r3, [r2, #0]

	NRF24_CE_LOW;
 80025c6:	2200      	movs	r2, #0
 80025c8:	2140      	movs	r1, #64	@ 0x40
 80025ca:	4824      	ldr	r0, [pc, #144]	@ (800265c <nRF24_Init+0xa4>)
 80025cc:	f00b fe04 	bl	800e1d8 <HAL_GPIO_WritePin>
	NRF24_CSN_HIGH;
 80025d0:	2201      	movs	r2, #1
 80025d2:	2180      	movs	r1, #128	@ 0x80
 80025d4:	4821      	ldr	r0, [pc, #132]	@ (800265c <nRF24_Init+0xa4>)
 80025d6:	f00b fdff 	bl	800e1d8 <HAL_GPIO_WritePin>

	HAL_Delay(10); // Wait for radio power up
 80025da:	200a      	movs	r0, #10
 80025dc:	f006 fc9e 	bl	8008f1c <HAL_Delay>

	nRF24_SetPALevel(NRF24_PA_PWR_0dBM); // Radio power
 80025e0:	2003      	movs	r0, #3
 80025e2:	f7ff fcf5 	bl	8001fd0 <nRF24_SetPALevel>
	nRF24_SetDataRate(NRF24_RF_DR_2MBPS); // Data Rate
 80025e6:	2001      	movs	r0, #1
 80025e8:	f7ff fd11 	bl	800200e <nRF24_SetDataRate>
	nRF24_EnableCRC(1); // Enable CRC
 80025ec:	2001      	movs	r0, #1
 80025ee:	f7ff fd7f 	bl	80020f0 <nRF24_EnableCRC>
	nRF24_SetCRCLength(NRF24_CRC_WIDTH_1B); // CRC Length 1 byte
 80025f2:	2000      	movs	r0, #0
 80025f4:	f7ff fd99 	bl	800212a <nRF24_SetCRCLength>
	nRF24_SetRetries(0x00, 0x00); // 1000us, 0 times
 80025f8:	2100      	movs	r1, #0
 80025fa:	2000      	movs	r0, #0
 80025fc:	f7ff fdb2 	bl	8002164 <nRF24_SetRetries>

#if (NRF24_DYNAMIC_PAYLOAD == 1)
	nRF24_WriteRegister(NRF24_FEATURE, nRF24_ReadRegister(NRF24_FEATURE) | (1<<NRF24_EN_DPL)); // Enable dynamic payload feature
	nRF24_WriteRegister(NRF24_DYNPD, 0x3F); // Enable dynamic payloads for all pipes
#else
	nRF24_WriteRegister(NRF24_DYNPD, 0); // Disable dynamic payloads for all pipes
 8002600:	2100      	movs	r1, #0
 8002602:	201c      	movs	r0, #28
 8002604:	f7ff fc2e 	bl	8001e64 <nRF24_WriteRegister>
	nRF24_SetPayloadSize(0, NRF24_PAYLOAD_SIZE); // Set 32 bytes payload for pipe 0
 8002608:	2120      	movs	r1, #32
 800260a:	2000      	movs	r0, #0
 800260c:	f7ff fdd6 	bl	80021bc <nRF24_SetPayloadSize>
#endif
	nRF24_SetRFChannel(15); // Set RF channel for transmission
 8002610:	200f      	movs	r0, #15
 8002612:	f7ff fdc2 	bl	800219a <nRF24_SetRFChannel>
	nRF24_EnablePipe(0, 1); // Enable pipe 0
 8002616:	2101      	movs	r1, #1
 8002618:	2000      	movs	r0, #0
 800261a:	f7ff fdeb 	bl	80021f4 <nRF24_EnablePipe>
	nRF24_AutoACK(0, 1); // Enable auto ACK for pipe 0
 800261e:	2101      	movs	r1, #1
 8002620:	2000      	movs	r0, #0
 8002622:	f7ff fe1c 	bl	800225e <nRF24_AutoACK>
	nRF24_SetAddressWidth(NRF24_ADDR_SIZE); // Set address size
 8002626:	2003      	movs	r0, #3
 8002628:	f7ff fe4e 	bl	80022c8 <nRF24_SetAddressWidth>

	HAL_Delay(1);
 800262c:	2001      	movs	r0, #1
 800262e:	f006 fc75 	bl	8008f1c <HAL_Delay>

	nRF24_EnableRXDataReadyIRQ(1);
 8002632:	2001      	movs	r0, #1
 8002634:	f7ff fef7 	bl	8002426 <nRF24_EnableRXDataReadyIRQ>
	nRF24_EnableTXDataSentIRQ(0);
 8002638:	2000      	movs	r0, #0
 800263a:	f7ff ff11 	bl	8002460 <nRF24_EnableTXDataSentIRQ>
	nRF24_EnableMaxRetransmitIRQ(0);
 800263e:	2000      	movs	r0, #0
 8002640:	f7ff ff2b 	bl	800249a <nRF24_EnableMaxRetransmitIRQ>

	HAL_Delay(1);
 8002644:	2001      	movs	r0, #1
 8002646:	f006 fc69 	bl	8008f1c <HAL_Delay>

	nRF24_ClearInterrupts();
 800264a:	f7ff fed9 	bl	8002400 <nRF24_ClearInterrupts>


}
 800264e:	bf00      	nop
 8002650:	3708      	adds	r7, #8
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	240000a4 	.word	0x240000a4
 800265c:	58020400 	.word	0x58020400

08002660 <nRF24_Inittest>:
void nRF24_Inittest(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
	xz[0] = nRF24_ReadRegister(NRF24_RF_SETUP); // Radio power
 8002664:	2006      	movs	r0, #6
 8002666:	f7ff fbb5 	bl	8001dd4 <nRF24_ReadRegister>
 800266a:	4603      	mov	r3, r0
 800266c:	461a      	mov	r2, r3
 800266e:	4b1d      	ldr	r3, [pc, #116]	@ (80026e4 <nRF24_Inittest+0x84>)
 8002670:	701a      	strb	r2, [r3, #0]
	//z = nRF24_ReadRegister(NRF24_RF_SETUP); // Data Rate
	xz[1] = nRF24_ReadConfig(); // Enable CRC //
 8002672:	f7ff fc97 	bl	8001fa4 <nRF24_ReadConfig>
 8002676:	4603      	mov	r3, r0
 8002678:	461a      	mov	r2, r3
 800267a:	4b1a      	ldr	r3, [pc, #104]	@ (80026e4 <nRF24_Inittest+0x84>)
 800267c:	705a      	strb	r2, [r3, #1]
	//z = nRF24_SetCRCLength(NRF24_CRC_WIDTH_1B); // CRC Length 1 byte
	xz[2] = nRF24_ReadRegister(NRF24_SETUP_RETR); // 1000us, 7 times
 800267e:	2004      	movs	r0, #4
 8002680:	f7ff fba8 	bl	8001dd4 <nRF24_ReadRegister>
 8002684:	4603      	mov	r3, r0
 8002686:	461a      	mov	r2, r3
 8002688:	4b16      	ldr	r3, [pc, #88]	@ (80026e4 <nRF24_Inittest+0x84>)
 800268a:	709a      	strb	r2, [r3, #2]
	xz[3] = nRF24_ReadRegister(NRF24_RF_CH);
 800268c:	2005      	movs	r0, #5
 800268e:	f7ff fba1 	bl	8001dd4 <nRF24_ReadRegister>
 8002692:	4603      	mov	r3, r0
 8002694:	461a      	mov	r2, r3
 8002696:	4b13      	ldr	r3, [pc, #76]	@ (80026e4 <nRF24_Inittest+0x84>)
 8002698:	70da      	strb	r2, [r3, #3]
	z = nRF24_ReadRegister(NRF24_FEATURE); // Enable dynamic payload feature
	z = nRF24_ReadRegister(NRF24_DYNPD); // Enable dynamic payloads for all pipes
#else
	//nRF24_WriteRegister(NRF24_DYNPD, 0); // Disable dynamic payloads for all pipes
	//nRF24_SetPayloadSize(0, NRF24_PAYLOAD_SIZE); // Set 32 bytes payload for pipe 0
	xz[4] = nRF24_ReadRegister(NRF24_RX_PW_P0);
 800269a:	2011      	movs	r0, #17
 800269c:	f7ff fb9a 	bl	8001dd4 <nRF24_ReadRegister>
 80026a0:	4603      	mov	r3, r0
 80026a2:	461a      	mov	r2, r3
 80026a4:	4b0f      	ldr	r3, [pc, #60]	@ (80026e4 <nRF24_Inittest+0x84>)
 80026a6:	711a      	strb	r2, [r3, #4]
#endif
	xz[5] = nRF24_ReadRegister(NRF24_EN_RXADDR);
 80026a8:	2002      	movs	r0, #2
 80026aa:	f7ff fb93 	bl	8001dd4 <nRF24_ReadRegister>
 80026ae:	4603      	mov	r3, r0
 80026b0:	461a      	mov	r2, r3
 80026b2:	4b0c      	ldr	r3, [pc, #48]	@ (80026e4 <nRF24_Inittest+0x84>)
 80026b4:	715a      	strb	r2, [r3, #5]
	xz[6] = nRF24_ReadRegister(NRF24_EN_AA);
 80026b6:	2001      	movs	r0, #1
 80026b8:	f7ff fb8c 	bl	8001dd4 <nRF24_ReadRegister>
 80026bc:	4603      	mov	r3, r0
 80026be:	461a      	mov	r2, r3
 80026c0:	4b08      	ldr	r3, [pc, #32]	@ (80026e4 <nRF24_Inittest+0x84>)
 80026c2:	719a      	strb	r2, [r3, #6]
	xz[7] = nRF24_ReadRegister(NRF24_SETUP_AW);
 80026c4:	2003      	movs	r0, #3
 80026c6:	f7ff fb85 	bl	8001dd4 <nRF24_ReadRegister>
 80026ca:	4603      	mov	r3, r0
 80026cc:	461a      	mov	r2, r3
 80026ce:	4b05      	ldr	r3, [pc, #20]	@ (80026e4 <nRF24_Inittest+0x84>)
 80026d0:	71da      	strb	r2, [r3, #7]
	xz[8] = nRF24_ReadConfig();
 80026d2:	f7ff fc67 	bl	8001fa4 <nRF24_ReadConfig>
 80026d6:	4603      	mov	r3, r0
 80026d8:	461a      	mov	r2, r3
 80026da:	4b02      	ldr	r3, [pc, #8]	@ (80026e4 <nRF24_Inittest+0x84>)
 80026dc:	721a      	strb	r2, [r3, #8]

}
 80026de:	bf00      	nop
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	00000174 	.word	0x00000174

080026e8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80026ec:	f3bf 8f4f 	dsb	sy
}
 80026f0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80026f2:	4b06      	ldr	r3, [pc, #24]	@ (800270c <__NVIC_SystemReset+0x24>)
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80026fa:	4904      	ldr	r1, [pc, #16]	@ (800270c <__NVIC_SystemReset+0x24>)
 80026fc:	4b04      	ldr	r3, [pc, #16]	@ (8002710 <__NVIC_SystemReset+0x28>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002702:	f3bf 8f4f 	dsb	sy
}
 8002706:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002708:	bf00      	nop
 800270a:	e7fd      	b.n	8002708 <__NVIC_SystemReset+0x20>
 800270c:	e000ed00 	.word	0xe000ed00
 8002710:	05fa0004 	.word	0x05fa0004

08002714 <interpretcommand>:
#include "main.h"

void interpretcommand(void){
 8002714:	b480      	push	{r7}
 8002716:	b087      	sub	sp, #28
 8002718:	af00      	add	r7, sp, #0

	uint8_t vcount = 0, J1 = 0;
 800271a:	2300      	movs	r3, #0
 800271c:	75fb      	strb	r3, [r7, #23]
 800271e:	2300      	movs	r3, #0
 8002720:	75bb      	strb	r3, [r7, #22]
	char value1[10];


	commandready = 0;
 8002722:	4b1f      	ldr	r3, [pc, #124]	@ (80027a0 <interpretcommand+0x8c>)
 8002724:	2200      	movs	r2, #0
 8002726:	701a      	strb	r2, [r3, #0]

	for(int j = 0; j < 80; j++){
 8002728:	2300      	movs	r3, #0
 800272a:	613b      	str	r3, [r7, #16]
 800272c:	e02e      	b.n	800278c <interpretcommand+0x78>

		if(words[j] == ' '){
 800272e:	4a1d      	ldr	r2, [pc, #116]	@ (80027a4 <interpretcommand+0x90>)
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	4413      	add	r3, r2
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	2b20      	cmp	r3, #32
 8002738:	d102      	bne.n	8002740 <interpretcommand+0x2c>
			vcount++;
 800273a:	7dfb      	ldrb	r3, [r7, #23]
 800273c:	3301      	adds	r3, #1
 800273e:	75fb      	strb	r3, [r7, #23]
		}
		if(vcount == 0){
 8002740:	7dfb      	ldrb	r3, [r7, #23]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d108      	bne.n	8002758 <interpretcommand+0x44>
			command[j] = words[j];
 8002746:	4a17      	ldr	r2, [pc, #92]	@ (80027a4 <interpretcommand+0x90>)
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	4413      	add	r3, r2
 800274c:	7819      	ldrb	r1, [r3, #0]
 800274e:	4a16      	ldr	r2, [pc, #88]	@ (80027a8 <interpretcommand+0x94>)
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	4413      	add	r3, r2
 8002754:	460a      	mov	r2, r1
 8002756:	701a      	strb	r2, [r3, #0]
		}
		if(vcount == 1){
 8002758:	7dfb      	ldrb	r3, [r7, #23]
 800275a:	2b01      	cmp	r3, #1
 800275c:	d113      	bne.n	8002786 <interpretcommand+0x72>
			value1[J1] = words[j];
 800275e:	7dbb      	ldrb	r3, [r7, #22]
 8002760:	4910      	ldr	r1, [pc, #64]	@ (80027a4 <interpretcommand+0x90>)
 8002762:	693a      	ldr	r2, [r7, #16]
 8002764:	440a      	add	r2, r1
 8002766:	7812      	ldrb	r2, [r2, #0]
 8002768:	3318      	adds	r3, #24
 800276a:	443b      	add	r3, r7
 800276c:	f803 2c14 	strb.w	r2, [r3, #-20]
			UASRT_PID_VAL[J1] = (int)value1[J1];//;printf("%d", value11[i]);
 8002770:	7dba      	ldrb	r2, [r7, #22]
 8002772:	7dbb      	ldrb	r3, [r7, #22]
 8002774:	3218      	adds	r2, #24
 8002776:	443a      	add	r2, r7
 8002778:	f812 1c14 	ldrb.w	r1, [r2, #-20]
 800277c:	4a0b      	ldr	r2, [pc, #44]	@ (80027ac <interpretcommand+0x98>)
 800277e:	54d1      	strb	r1, [r2, r3]
			J1++;
 8002780:	7dbb      	ldrb	r3, [r7, #22]
 8002782:	3301      	adds	r3, #1
 8002784:	75bb      	strb	r3, [r7, #22]
	for(int j = 0; j < 80; j++){
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	3301      	adds	r3, #1
 800278a:	613b      	str	r3, [r7, #16]
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	2b4f      	cmp	r3, #79	@ 0x4f
 8002790:	ddcd      	ble.n	800272e <interpretcommand+0x1a>
		}
	}
}
 8002792:	bf00      	nop
 8002794:	bf00      	nop
 8002796:	371c      	adds	r7, #28
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr
 80027a0:	000041be 	.word	0x000041be
 80027a4:	000041b4 	.word	0x000041b4
 80027a8:	000041b0 	.word	0x000041b0
 80027ac:	000041a0 	.word	0x000041a0

080027b0 <executecommand>:

void executecommand(char command[], uint8_t value1[]){
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]

	if(command[0] == 'P')
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	2b50      	cmp	r3, #80	@ 0x50
 80027c0:	d14c      	bne.n	800285c <executecommand+0xac>
	{
		p_pitchfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 80027c2:	4bd5      	ldr	r3, [pc, #852]	@ (8002b18 <executecommand+0x368>)
 80027c4:	785b      	ldrb	r3, [r3, #1]
 80027c6:	ee07 3a90 	vmov	s15, r3
 80027ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027ce:	ed9f 7ad3 	vldr	s14, [pc, #844]	@ 8002b1c <executecommand+0x36c>
 80027d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80027d6:	ed9f 7ad2 	vldr	s14, [pc, #840]	@ 8002b20 <executecommand+0x370>
 80027da:	ee27 7a87 	vmul.f32	s14, s15, s14
 80027de:	4bce      	ldr	r3, [pc, #824]	@ (8002b18 <executecommand+0x368>)
 80027e0:	789b      	ldrb	r3, [r3, #2]
 80027e2:	ee07 3a90 	vmov	s15, r3
 80027e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027ea:	eddf 6acc 	vldr	s13, [pc, #816]	@ 8002b1c <executecommand+0x36c>
 80027ee:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80027f2:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80027f6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80027fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027fe:	4bc6      	ldr	r3, [pc, #792]	@ (8002b18 <executecommand+0x368>)
 8002800:	78db      	ldrb	r3, [r3, #3]
 8002802:	ee07 3a90 	vmov	s15, r3
 8002806:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800280a:	eddf 6ac4 	vldr	s13, [pc, #784]	@ 8002b1c <executecommand+0x36c>
 800280e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002812:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002816:	4bc0      	ldr	r3, [pc, #768]	@ (8002b18 <executecommand+0x368>)
 8002818:	791b      	ldrb	r3, [r3, #4]
 800281a:	ee07 3a90 	vmov	s15, r3
 800281e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002822:	eddf 6abe 	vldr	s13, [pc, #760]	@ 8002b1c <executecommand+0x36c>
 8002826:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800282a:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 800282e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002832:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002836:	4bb8      	ldr	r3, [pc, #736]	@ (8002b18 <executecommand+0x368>)
 8002838:	795b      	ldrb	r3, [r3, #5]
 800283a:	ee07 3a90 	vmov	s15, r3
 800283e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002842:	eddf 6ab6 	vldr	s13, [pc, #728]	@ 8002b1c <executecommand+0x36c>
 8002846:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800284a:	ed9f 6ab5 	vldr	s12, [pc, #724]	@ 8002b20 <executecommand+0x370>
 800284e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002852:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002856:	4bb3      	ldr	r3, [pc, #716]	@ (8002b24 <executecommand+0x374>)
 8002858:	edc3 7a00 	vstr	s15, [r3]
	}

	if(command[0] == 'I')
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	2b49      	cmp	r3, #73	@ 0x49
 8002862:	d14f      	bne.n	8002904 <executecommand+0x154>
	{
		i_pitchfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002864:	4bac      	ldr	r3, [pc, #688]	@ (8002b18 <executecommand+0x368>)
 8002866:	785b      	ldrb	r3, [r3, #1]
 8002868:	ee07 3a90 	vmov	s15, r3
 800286c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002870:	ed9f 7aaa 	vldr	s14, [pc, #680]	@ 8002b1c <executecommand+0x36c>
 8002874:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002878:	ed9f 7aa9 	vldr	s14, [pc, #676]	@ 8002b20 <executecommand+0x370>
 800287c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002880:	4ba5      	ldr	r3, [pc, #660]	@ (8002b18 <executecommand+0x368>)
 8002882:	789b      	ldrb	r3, [r3, #2]
 8002884:	ee07 3a90 	vmov	s15, r3
 8002888:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800288c:	eddf 6aa3 	vldr	s13, [pc, #652]	@ 8002b1c <executecommand+0x36c>
 8002890:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002894:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002898:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800289c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028a0:	4b9d      	ldr	r3, [pc, #628]	@ (8002b18 <executecommand+0x368>)
 80028a2:	78db      	ldrb	r3, [r3, #3]
 80028a4:	ee07 3a90 	vmov	s15, r3
 80028a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028ac:	eddf 6a9b 	vldr	s13, [pc, #620]	@ 8002b1c <executecommand+0x36c>
 80028b0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80028b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028b8:	4b97      	ldr	r3, [pc, #604]	@ (8002b18 <executecommand+0x368>)
 80028ba:	791b      	ldrb	r3, [r3, #4]
 80028bc:	ee07 3a90 	vmov	s15, r3
 80028c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028c4:	eddf 6a95 	vldr	s13, [pc, #596]	@ 8002b1c <executecommand+0x36c>
 80028c8:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80028cc:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80028d0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80028d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028d8:	4b8f      	ldr	r3, [pc, #572]	@ (8002b18 <executecommand+0x368>)
 80028da:	795b      	ldrb	r3, [r3, #5]
 80028dc:	ee07 3a90 	vmov	s15, r3
 80028e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028e4:	eddf 6a8d 	vldr	s13, [pc, #564]	@ 8002b1c <executecommand+0x36c>
 80028e8:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80028ec:	ed9f 6a8c 	vldr	s12, [pc, #560]	@ 8002b20 <executecommand+0x370>
 80028f0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80028f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028f8:	4b8b      	ldr	r3, [pc, #556]	@ (8002b28 <executecommand+0x378>)
 80028fa:	edc3 7a00 	vstr	s15, [r3]
		error_sum_pitch = 0;
 80028fe:	4b8b      	ldr	r3, [pc, #556]	@ (8002b2c <executecommand+0x37c>)
 8002900:	2200      	movs	r2, #0
 8002902:	601a      	str	r2, [r3, #0]
	}

	if(command[0] == 'D')
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	2b44      	cmp	r3, #68	@ 0x44
 800290a:	d14c      	bne.n	80029a6 <executecommand+0x1f6>
	{
		d_pitchfactor = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 800290c:	4b82      	ldr	r3, [pc, #520]	@ (8002b18 <executecommand+0x368>)
 800290e:	785b      	ldrb	r3, [r3, #1]
 8002910:	ee07 3a90 	vmov	s15, r3
 8002914:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002918:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8002b1c <executecommand+0x36c>
 800291c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002920:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 8002b30 <executecommand+0x380>
 8002924:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002928:	4b7b      	ldr	r3, [pc, #492]	@ (8002b18 <executecommand+0x368>)
 800292a:	789b      	ldrb	r3, [r3, #2]
 800292c:	ee07 3a90 	vmov	s15, r3
 8002930:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002934:	eddf 6a79 	vldr	s13, [pc, #484]	@ 8002b1c <executecommand+0x36c>
 8002938:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800293c:	eddf 6a78 	vldr	s13, [pc, #480]	@ 8002b20 <executecommand+0x370>
 8002940:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002944:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002948:	4b73      	ldr	r3, [pc, #460]	@ (8002b18 <executecommand+0x368>)
 800294a:	78db      	ldrb	r3, [r3, #3]
 800294c:	ee07 3a90 	vmov	s15, r3
 8002950:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002954:	eddf 6a71 	vldr	s13, [pc, #452]	@ 8002b1c <executecommand+0x36c>
 8002958:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800295c:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002960:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002964:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002968:	4b6b      	ldr	r3, [pc, #428]	@ (8002b18 <executecommand+0x368>)
 800296a:	791b      	ldrb	r3, [r3, #4]
 800296c:	ee07 3a90 	vmov	s15, r3
 8002970:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002974:	eddf 6a69 	vldr	s13, [pc, #420]	@ 8002b1c <executecommand+0x36c>
 8002978:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800297c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002980:	4b65      	ldr	r3, [pc, #404]	@ (8002b18 <executecommand+0x368>)
 8002982:	795b      	ldrb	r3, [r3, #5]
 8002984:	ee07 3a90 	vmov	s15, r3
 8002988:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800298c:	eddf 6a63 	vldr	s13, [pc, #396]	@ 8002b1c <executecommand+0x36c>
 8002990:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002994:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002998:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800299c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029a0:	4b64      	ldr	r3, [pc, #400]	@ (8002b34 <executecommand+0x384>)
 80029a2:	edc3 7a00 	vstr	s15, [r3]
	}
	if(command[0] == 'p')
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	2b70      	cmp	r3, #112	@ 0x70
 80029ac:	d14c      	bne.n	8002a48 <executecommand+0x298>
	{
		p_angular_rate_pitchfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 80029ae:	4b5a      	ldr	r3, [pc, #360]	@ (8002b18 <executecommand+0x368>)
 80029b0:	785b      	ldrb	r3, [r3, #1]
 80029b2:	ee07 3a90 	vmov	s15, r3
 80029b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029ba:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8002b1c <executecommand+0x36c>
 80029be:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80029c2:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 8002b20 <executecommand+0x370>
 80029c6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80029ca:	4b53      	ldr	r3, [pc, #332]	@ (8002b18 <executecommand+0x368>)
 80029cc:	789b      	ldrb	r3, [r3, #2]
 80029ce:	ee07 3a90 	vmov	s15, r3
 80029d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029d6:	eddf 6a51 	vldr	s13, [pc, #324]	@ 8002b1c <executecommand+0x36c>
 80029da:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80029de:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80029e2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80029e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029ea:	4b4b      	ldr	r3, [pc, #300]	@ (8002b18 <executecommand+0x368>)
 80029ec:	78db      	ldrb	r3, [r3, #3]
 80029ee:	ee07 3a90 	vmov	s15, r3
 80029f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029f6:	eddf 6a49 	vldr	s13, [pc, #292]	@ 8002b1c <executecommand+0x36c>
 80029fa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80029fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a02:	4b45      	ldr	r3, [pc, #276]	@ (8002b18 <executecommand+0x368>)
 8002a04:	791b      	ldrb	r3, [r3, #4]
 8002a06:	ee07 3a90 	vmov	s15, r3
 8002a0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a0e:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8002b1c <executecommand+0x36c>
 8002a12:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002a16:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002a1a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002a1e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a22:	4b3d      	ldr	r3, [pc, #244]	@ (8002b18 <executecommand+0x368>)
 8002a24:	795b      	ldrb	r3, [r3, #5]
 8002a26:	ee07 3a90 	vmov	s15, r3
 8002a2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a2e:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8002b1c <executecommand+0x36c>
 8002a32:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002a36:	ed9f 6a3a 	vldr	s12, [pc, #232]	@ 8002b20 <executecommand+0x370>
 8002a3a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002a3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a42:	4b3d      	ldr	r3, [pc, #244]	@ (8002b38 <executecommand+0x388>)
 8002a44:	edc3 7a00 	vstr	s15, [r3]
	}

	if(command[0] == 'i')
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	2b69      	cmp	r3, #105	@ 0x69
 8002a4e:	d14f      	bne.n	8002af0 <executecommand+0x340>
	{
		i_angular_rate_pitchfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002a50:	4b31      	ldr	r3, [pc, #196]	@ (8002b18 <executecommand+0x368>)
 8002a52:	785b      	ldrb	r3, [r3, #1]
 8002a54:	ee07 3a90 	vmov	s15, r3
 8002a58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a5c:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8002b1c <executecommand+0x36c>
 8002a60:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002a64:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8002b20 <executecommand+0x370>
 8002a68:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002a6c:	4b2a      	ldr	r3, [pc, #168]	@ (8002b18 <executecommand+0x368>)
 8002a6e:	789b      	ldrb	r3, [r3, #2]
 8002a70:	ee07 3a90 	vmov	s15, r3
 8002a74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a78:	eddf 6a28 	vldr	s13, [pc, #160]	@ 8002b1c <executecommand+0x36c>
 8002a7c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002a80:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002a84:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002a88:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a8c:	4b22      	ldr	r3, [pc, #136]	@ (8002b18 <executecommand+0x368>)
 8002a8e:	78db      	ldrb	r3, [r3, #3]
 8002a90:	ee07 3a90 	vmov	s15, r3
 8002a94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a98:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8002b1c <executecommand+0x36c>
 8002a9c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002aa0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002aa4:	4b1c      	ldr	r3, [pc, #112]	@ (8002b18 <executecommand+0x368>)
 8002aa6:	791b      	ldrb	r3, [r3, #4]
 8002aa8:	ee07 3a90 	vmov	s15, r3
 8002aac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ab0:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 8002b1c <executecommand+0x36c>
 8002ab4:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002ab8:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002abc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002ac0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ac4:	4b14      	ldr	r3, [pc, #80]	@ (8002b18 <executecommand+0x368>)
 8002ac6:	795b      	ldrb	r3, [r3, #5]
 8002ac8:	ee07 3a90 	vmov	s15, r3
 8002acc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ad0:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8002b1c <executecommand+0x36c>
 8002ad4:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002ad8:	ed9f 6a11 	vldr	s12, [pc, #68]	@ 8002b20 <executecommand+0x370>
 8002adc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002ae0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ae4:	4b15      	ldr	r3, [pc, #84]	@ (8002b3c <executecommand+0x38c>)
 8002ae6:	edc3 7a00 	vstr	s15, [r3]
		error_sum_angular_rate_pitch = 0;
 8002aea:	4b15      	ldr	r3, [pc, #84]	@ (8002b40 <executecommand+0x390>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	601a      	str	r2, [r3, #0]
	}

	if(command[0] == 'd')
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	2b64      	cmp	r3, #100	@ 0x64
 8002af6:	d164      	bne.n	8002bc2 <executecommand+0x412>
	{
		d_angular_rate_pitchfactor = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8002af8:	4b07      	ldr	r3, [pc, #28]	@ (8002b18 <executecommand+0x368>)
 8002afa:	785b      	ldrb	r3, [r3, #1]
 8002afc:	ee07 3a90 	vmov	s15, r3
 8002b00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b04:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002b1c <executecommand+0x36c>
 8002b08:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002b0c:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8002b30 <executecommand+0x380>
 8002b10:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002b14:	e016      	b.n	8002b44 <executecommand+0x394>
 8002b16:	bf00      	nop
 8002b18:	000041a0 	.word	0x000041a0
 8002b1c:	42400000 	.word	0x42400000
 8002b20:	42c80000 	.word	0x42c80000
 8002b24:	000040cc 	.word	0x000040cc
 8002b28:	000040d8 	.word	0x000040d8
 8002b2c:	0000409c 	.word	0x0000409c
 8002b30:	447a0000 	.word	0x447a0000
 8002b34:	000040e4 	.word	0x000040e4
 8002b38:	0000412c 	.word	0x0000412c
 8002b3c:	00004138 	.word	0x00004138
 8002b40:	000040a8 	.word	0x000040a8
 8002b44:	4bd3      	ldr	r3, [pc, #844]	@ (8002e94 <executecommand+0x6e4>)
 8002b46:	789b      	ldrb	r3, [r3, #2]
 8002b48:	ee07 3a90 	vmov	s15, r3
 8002b4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b50:	eddf 6ad1 	vldr	s13, [pc, #836]	@ 8002e98 <executecommand+0x6e8>
 8002b54:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002b58:	eddf 6ad0 	vldr	s13, [pc, #832]	@ 8002e9c <executecommand+0x6ec>
 8002b5c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002b60:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b64:	4bcb      	ldr	r3, [pc, #812]	@ (8002e94 <executecommand+0x6e4>)
 8002b66:	78db      	ldrb	r3, [r3, #3]
 8002b68:	ee07 3a90 	vmov	s15, r3
 8002b6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b70:	eddf 6ac9 	vldr	s13, [pc, #804]	@ 8002e98 <executecommand+0x6e8>
 8002b74:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002b78:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002b7c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002b80:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b84:	4bc3      	ldr	r3, [pc, #780]	@ (8002e94 <executecommand+0x6e4>)
 8002b86:	791b      	ldrb	r3, [r3, #4]
 8002b88:	ee07 3a90 	vmov	s15, r3
 8002b8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b90:	eddf 6ac1 	vldr	s13, [pc, #772]	@ 8002e98 <executecommand+0x6e8>
 8002b94:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002b98:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b9c:	4bbd      	ldr	r3, [pc, #756]	@ (8002e94 <executecommand+0x6e4>)
 8002b9e:	795b      	ldrb	r3, [r3, #5]
 8002ba0:	ee07 3a90 	vmov	s15, r3
 8002ba4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ba8:	eddf 6abb 	vldr	s13, [pc, #748]	@ 8002e98 <executecommand+0x6e8>
 8002bac:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002bb0:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002bb4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002bb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bbc:	4bb8      	ldr	r3, [pc, #736]	@ (8002ea0 <executecommand+0x6f0>)
 8002bbe:	edc3 7a00 	vstr	s15, [r3]
	}
	if(command[0] == 'F')
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	2b46      	cmp	r3, #70	@ 0x46
 8002bc8:	d150      	bne.n	8002c6c <executecommand+0x4bc>
	{
		FDP_D_Gain_AR = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8002bca:	4bb2      	ldr	r3, [pc, #712]	@ (8002e94 <executecommand+0x6e4>)
 8002bcc:	785b      	ldrb	r3, [r3, #1]
 8002bce:	ee07 3a90 	vmov	s15, r3
 8002bd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bd6:	ed9f 7ab0 	vldr	s14, [pc, #704]	@ 8002e98 <executecommand+0x6e8>
 8002bda:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002bde:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 8002ea4 <executecommand+0x6f4>
 8002be2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002be6:	4bab      	ldr	r3, [pc, #684]	@ (8002e94 <executecommand+0x6e4>)
 8002be8:	789b      	ldrb	r3, [r3, #2]
 8002bea:	ee07 3a90 	vmov	s15, r3
 8002bee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bf2:	eddf 6aa9 	vldr	s13, [pc, #676]	@ 8002e98 <executecommand+0x6e8>
 8002bf6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002bfa:	eddf 6aa8 	vldr	s13, [pc, #672]	@ 8002e9c <executecommand+0x6ec>
 8002bfe:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002c02:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c06:	4ba3      	ldr	r3, [pc, #652]	@ (8002e94 <executecommand+0x6e4>)
 8002c08:	78db      	ldrb	r3, [r3, #3]
 8002c0a:	ee07 3a90 	vmov	s15, r3
 8002c0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c12:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 8002e98 <executecommand+0x6e8>
 8002c16:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002c1a:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002c1e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002c22:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c26:	4b9b      	ldr	r3, [pc, #620]	@ (8002e94 <executecommand+0x6e4>)
 8002c28:	791b      	ldrb	r3, [r3, #4]
 8002c2a:	ee07 3a90 	vmov	s15, r3
 8002c2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c32:	eddf 6a99 	vldr	s13, [pc, #612]	@ 8002e98 <executecommand+0x6e8>
 8002c36:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002c3a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c3e:	4b95      	ldr	r3, [pc, #596]	@ (8002e94 <executecommand+0x6e4>)
 8002c40:	795b      	ldrb	r3, [r3, #5]
 8002c42:	ee07 3a90 	vmov	s15, r3
 8002c46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c4a:	eddf 6a93 	vldr	s13, [pc, #588]	@ 8002e98 <executecommand+0x6e8>
 8002c4e:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002c52:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002c56:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002c5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c62:	ee17 3a90 	vmov	r3, s15
 8002c66:	b21a      	sxth	r2, r3
 8002c68:	4b8f      	ldr	r3, [pc, #572]	@ (8002ea8 <executecommand+0x6f8>)
 8002c6a:	801a      	strh	r2, [r3, #0]
	}
	if(command[0] == 'f')
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	2b66      	cmp	r3, #102	@ 0x66
 8002c72:	d150      	bne.n	8002d16 <executecommand+0x566>
	{
		FDP_D_Gain = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8002c74:	4b87      	ldr	r3, [pc, #540]	@ (8002e94 <executecommand+0x6e4>)
 8002c76:	785b      	ldrb	r3, [r3, #1]
 8002c78:	ee07 3a90 	vmov	s15, r3
 8002c7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c80:	ed9f 7a85 	vldr	s14, [pc, #532]	@ 8002e98 <executecommand+0x6e8>
 8002c84:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002c88:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 8002ea4 <executecommand+0x6f4>
 8002c8c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002c90:	4b80      	ldr	r3, [pc, #512]	@ (8002e94 <executecommand+0x6e4>)
 8002c92:	789b      	ldrb	r3, [r3, #2]
 8002c94:	ee07 3a90 	vmov	s15, r3
 8002c98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c9c:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8002e98 <executecommand+0x6e8>
 8002ca0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002ca4:	eddf 6a7d 	vldr	s13, [pc, #500]	@ 8002e9c <executecommand+0x6ec>
 8002ca8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002cac:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002cb0:	4b78      	ldr	r3, [pc, #480]	@ (8002e94 <executecommand+0x6e4>)
 8002cb2:	78db      	ldrb	r3, [r3, #3]
 8002cb4:	ee07 3a90 	vmov	s15, r3
 8002cb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cbc:	eddf 6a76 	vldr	s13, [pc, #472]	@ 8002e98 <executecommand+0x6e8>
 8002cc0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002cc4:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002cc8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002ccc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002cd0:	4b70      	ldr	r3, [pc, #448]	@ (8002e94 <executecommand+0x6e4>)
 8002cd2:	791b      	ldrb	r3, [r3, #4]
 8002cd4:	ee07 3a90 	vmov	s15, r3
 8002cd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cdc:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8002e98 <executecommand+0x6e8>
 8002ce0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002ce4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ce8:	4b6a      	ldr	r3, [pc, #424]	@ (8002e94 <executecommand+0x6e4>)
 8002cea:	795b      	ldrb	r3, [r3, #5]
 8002cec:	ee07 3a90 	vmov	s15, r3
 8002cf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cf4:	eddf 6a68 	vldr	s13, [pc, #416]	@ 8002e98 <executecommand+0x6e8>
 8002cf8:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002cfc:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002d00:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002d04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d0c:	ee17 3a90 	vmov	r3, s15
 8002d10:	b21a      	sxth	r2, r3
 8002d12:	4b66      	ldr	r3, [pc, #408]	@ (8002eac <executecommand+0x6fc>)
 8002d14:	801a      	strh	r2, [r3, #0]




//rool
	if(command[0] == 'a')
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	2b61      	cmp	r3, #97	@ 0x61
 8002d1c:	d14c      	bne.n	8002db8 <executecommand+0x608>
		{
			p_roolfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002d1e:	4b5d      	ldr	r3, [pc, #372]	@ (8002e94 <executecommand+0x6e4>)
 8002d20:	785b      	ldrb	r3, [r3, #1]
 8002d22:	ee07 3a90 	vmov	s15, r3
 8002d26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d2a:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 8002e98 <executecommand+0x6e8>
 8002d2e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002d32:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8002e9c <executecommand+0x6ec>
 8002d36:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002d3a:	4b56      	ldr	r3, [pc, #344]	@ (8002e94 <executecommand+0x6e4>)
 8002d3c:	789b      	ldrb	r3, [r3, #2]
 8002d3e:	ee07 3a90 	vmov	s15, r3
 8002d42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d46:	eddf 6a54 	vldr	s13, [pc, #336]	@ 8002e98 <executecommand+0x6e8>
 8002d4a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002d4e:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002d52:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002d56:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d5a:	4b4e      	ldr	r3, [pc, #312]	@ (8002e94 <executecommand+0x6e4>)
 8002d5c:	78db      	ldrb	r3, [r3, #3]
 8002d5e:	ee07 3a90 	vmov	s15, r3
 8002d62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d66:	eddf 6a4c 	vldr	s13, [pc, #304]	@ 8002e98 <executecommand+0x6e8>
 8002d6a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002d6e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d72:	4b48      	ldr	r3, [pc, #288]	@ (8002e94 <executecommand+0x6e4>)
 8002d74:	791b      	ldrb	r3, [r3, #4]
 8002d76:	ee07 3a90 	vmov	s15, r3
 8002d7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d7e:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8002e98 <executecommand+0x6e8>
 8002d82:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002d86:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002d8a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002d8e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d92:	4b40      	ldr	r3, [pc, #256]	@ (8002e94 <executecommand+0x6e4>)
 8002d94:	795b      	ldrb	r3, [r3, #5]
 8002d96:	ee07 3a90 	vmov	s15, r3
 8002d9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d9e:	eddf 6a3e 	vldr	s13, [pc, #248]	@ 8002e98 <executecommand+0x6e8>
 8002da2:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002da6:	ed9f 6a3d 	vldr	s12, [pc, #244]	@ 8002e9c <executecommand+0x6ec>
 8002daa:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002dae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002db2:	4b3f      	ldr	r3, [pc, #252]	@ (8002eb0 <executecommand+0x700>)
 8002db4:	edc3 7a00 	vstr	s15, [r3]
		}

		if(command[0] == 'b')
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	2b62      	cmp	r3, #98	@ 0x62
 8002dbe:	d14f      	bne.n	8002e60 <executecommand+0x6b0>
		{
			i_roolfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002dc0:	4b34      	ldr	r3, [pc, #208]	@ (8002e94 <executecommand+0x6e4>)
 8002dc2:	785b      	ldrb	r3, [r3, #1]
 8002dc4:	ee07 3a90 	vmov	s15, r3
 8002dc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dcc:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8002e98 <executecommand+0x6e8>
 8002dd0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002dd4:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8002e9c <executecommand+0x6ec>
 8002dd8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002ddc:	4b2d      	ldr	r3, [pc, #180]	@ (8002e94 <executecommand+0x6e4>)
 8002dde:	789b      	ldrb	r3, [r3, #2]
 8002de0:	ee07 3a90 	vmov	s15, r3
 8002de4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002de8:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 8002e98 <executecommand+0x6e8>
 8002dec:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002df0:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002df4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002df8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002dfc:	4b25      	ldr	r3, [pc, #148]	@ (8002e94 <executecommand+0x6e4>)
 8002dfe:	78db      	ldrb	r3, [r3, #3]
 8002e00:	ee07 3a90 	vmov	s15, r3
 8002e04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e08:	eddf 6a23 	vldr	s13, [pc, #140]	@ 8002e98 <executecommand+0x6e8>
 8002e0c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002e10:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e14:	4b1f      	ldr	r3, [pc, #124]	@ (8002e94 <executecommand+0x6e4>)
 8002e16:	791b      	ldrb	r3, [r3, #4]
 8002e18:	ee07 3a90 	vmov	s15, r3
 8002e1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e20:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 8002e98 <executecommand+0x6e8>
 8002e24:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002e28:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002e2c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002e30:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e34:	4b17      	ldr	r3, [pc, #92]	@ (8002e94 <executecommand+0x6e4>)
 8002e36:	795b      	ldrb	r3, [r3, #5]
 8002e38:	ee07 3a90 	vmov	s15, r3
 8002e3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e40:	eddf 6a15 	vldr	s13, [pc, #84]	@ 8002e98 <executecommand+0x6e8>
 8002e44:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002e48:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 8002e9c <executecommand+0x6ec>
 8002e4c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002e50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e54:	4b17      	ldr	r3, [pc, #92]	@ (8002eb4 <executecommand+0x704>)
 8002e56:	edc3 7a00 	vstr	s15, [r3]
			error_sum_rool = 0;
 8002e5a:	4b17      	ldr	r3, [pc, #92]	@ (8002eb8 <executecommand+0x708>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	601a      	str	r2, [r3, #0]
		}

		if(command[0] == 'c')
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	2b63      	cmp	r3, #99	@ 0x63
 8002e66:	d166      	bne.n	8002f36 <executecommand+0x786>
		{
			d_roolfactor = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8002e68:	4b0a      	ldr	r3, [pc, #40]	@ (8002e94 <executecommand+0x6e4>)
 8002e6a:	785b      	ldrb	r3, [r3, #1]
 8002e6c:	ee07 3a90 	vmov	s15, r3
 8002e70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e74:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8002e98 <executecommand+0x6e8>
 8002e78:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002e7c:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8002ea4 <executecommand+0x6f4>
 8002e80:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002e84:	4b03      	ldr	r3, [pc, #12]	@ (8002e94 <executecommand+0x6e4>)
 8002e86:	789b      	ldrb	r3, [r3, #2]
 8002e88:	ee07 3a90 	vmov	s15, r3
 8002e8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e90:	e018      	b.n	8002ec4 <executecommand+0x714>
 8002e92:	bf00      	nop
 8002e94:	000041a0 	.word	0x000041a0
 8002e98:	42400000 	.word	0x42400000
 8002e9c:	42c80000 	.word	0x42c80000
 8002ea0:	00004144 	.word	0x00004144
 8002ea4:	447a0000 	.word	0x447a0000
 8002ea8:	00004074 	.word	0x00004074
 8002eac:	00004076 	.word	0x00004076
 8002eb0:	000040d0 	.word	0x000040d0
 8002eb4:	000040dc 	.word	0x000040dc
 8002eb8:	000040a0 	.word	0x000040a0
 8002ebc:	42400000 	.word	0x42400000
 8002ec0:	42c80000 	.word	0x42c80000
 8002ec4:	ed5f 6a03 	vldr	s13, [pc, #-12]	@ 8002ebc <executecommand+0x70c>
 8002ec8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002ecc:	ed5f 6a04 	vldr	s13, [pc, #-16]	@ 8002ec0 <executecommand+0x710>
 8002ed0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002ed4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ed8:	4bd5      	ldr	r3, [pc, #852]	@ (8003230 <executecommand+0xa80>)
 8002eda:	78db      	ldrb	r3, [r3, #3]
 8002edc:	ee07 3a90 	vmov	s15, r3
 8002ee0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ee4:	eddf 6ad3 	vldr	s13, [pc, #844]	@ 8003234 <executecommand+0xa84>
 8002ee8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002eec:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002ef0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002ef4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ef8:	4bcd      	ldr	r3, [pc, #820]	@ (8003230 <executecommand+0xa80>)
 8002efa:	791b      	ldrb	r3, [r3, #4]
 8002efc:	ee07 3a90 	vmov	s15, r3
 8002f00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f04:	eddf 6acb 	vldr	s13, [pc, #812]	@ 8003234 <executecommand+0xa84>
 8002f08:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002f0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f10:	4bc7      	ldr	r3, [pc, #796]	@ (8003230 <executecommand+0xa80>)
 8002f12:	795b      	ldrb	r3, [r3, #5]
 8002f14:	ee07 3a90 	vmov	s15, r3
 8002f18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f1c:	eddf 6ac5 	vldr	s13, [pc, #788]	@ 8003234 <executecommand+0xa84>
 8002f20:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002f24:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002f28:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002f2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f30:	4bc1      	ldr	r3, [pc, #772]	@ (8003238 <executecommand+0xa88>)
 8002f32:	edc3 7a00 	vstr	s15, [r3]
		}
		if(command[0] == 'e')
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	2b65      	cmp	r3, #101	@ 0x65
 8002f3c:	d14c      	bne.n	8002fd8 <executecommand+0x828>
		{
			p_angular_rate_roolfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002f3e:	4bbc      	ldr	r3, [pc, #752]	@ (8003230 <executecommand+0xa80>)
 8002f40:	785b      	ldrb	r3, [r3, #1]
 8002f42:	ee07 3a90 	vmov	s15, r3
 8002f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f4a:	ed9f 7aba 	vldr	s14, [pc, #744]	@ 8003234 <executecommand+0xa84>
 8002f4e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002f52:	ed9f 7aba 	vldr	s14, [pc, #744]	@ 800323c <executecommand+0xa8c>
 8002f56:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002f5a:	4bb5      	ldr	r3, [pc, #724]	@ (8003230 <executecommand+0xa80>)
 8002f5c:	789b      	ldrb	r3, [r3, #2]
 8002f5e:	ee07 3a90 	vmov	s15, r3
 8002f62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f66:	eddf 6ab3 	vldr	s13, [pc, #716]	@ 8003234 <executecommand+0xa84>
 8002f6a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002f6e:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002f72:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002f76:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f7a:	4bad      	ldr	r3, [pc, #692]	@ (8003230 <executecommand+0xa80>)
 8002f7c:	78db      	ldrb	r3, [r3, #3]
 8002f7e:	ee07 3a90 	vmov	s15, r3
 8002f82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f86:	eddf 6aab 	vldr	s13, [pc, #684]	@ 8003234 <executecommand+0xa84>
 8002f8a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002f8e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f92:	4ba7      	ldr	r3, [pc, #668]	@ (8003230 <executecommand+0xa80>)
 8002f94:	791b      	ldrb	r3, [r3, #4]
 8002f96:	ee07 3a90 	vmov	s15, r3
 8002f9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f9e:	eddf 6aa5 	vldr	s13, [pc, #660]	@ 8003234 <executecommand+0xa84>
 8002fa2:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002fa6:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002faa:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002fae:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002fb2:	4b9f      	ldr	r3, [pc, #636]	@ (8003230 <executecommand+0xa80>)
 8002fb4:	795b      	ldrb	r3, [r3, #5]
 8002fb6:	ee07 3a90 	vmov	s15, r3
 8002fba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fbe:	eddf 6a9d 	vldr	s13, [pc, #628]	@ 8003234 <executecommand+0xa84>
 8002fc2:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002fc6:	ed9f 6a9d 	vldr	s12, [pc, #628]	@ 800323c <executecommand+0xa8c>
 8002fca:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002fce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fd2:	4b9b      	ldr	r3, [pc, #620]	@ (8003240 <executecommand+0xa90>)
 8002fd4:	edc3 7a00 	vstr	s15, [r3]
		}

		if(command[0] == 'g')
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	2b67      	cmp	r3, #103	@ 0x67
 8002fde:	d14f      	bne.n	8003080 <executecommand+0x8d0>
		{
			i_angular_rate_roolfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002fe0:	4b93      	ldr	r3, [pc, #588]	@ (8003230 <executecommand+0xa80>)
 8002fe2:	785b      	ldrb	r3, [r3, #1]
 8002fe4:	ee07 3a90 	vmov	s15, r3
 8002fe8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fec:	ed9f 7a91 	vldr	s14, [pc, #580]	@ 8003234 <executecommand+0xa84>
 8002ff0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002ff4:	ed9f 7a91 	vldr	s14, [pc, #580]	@ 800323c <executecommand+0xa8c>
 8002ff8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002ffc:	4b8c      	ldr	r3, [pc, #560]	@ (8003230 <executecommand+0xa80>)
 8002ffe:	789b      	ldrb	r3, [r3, #2]
 8003000:	ee07 3a90 	vmov	s15, r3
 8003004:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003008:	eddf 6a8a 	vldr	s13, [pc, #552]	@ 8003234 <executecommand+0xa84>
 800300c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003010:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8003014:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003018:	ee37 7a27 	vadd.f32	s14, s14, s15
 800301c:	4b84      	ldr	r3, [pc, #528]	@ (8003230 <executecommand+0xa80>)
 800301e:	78db      	ldrb	r3, [r3, #3]
 8003020:	ee07 3a90 	vmov	s15, r3
 8003024:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003028:	eddf 6a82 	vldr	s13, [pc, #520]	@ 8003234 <executecommand+0xa84>
 800302c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003030:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003034:	4b7e      	ldr	r3, [pc, #504]	@ (8003230 <executecommand+0xa80>)
 8003036:	791b      	ldrb	r3, [r3, #4]
 8003038:	ee07 3a90 	vmov	s15, r3
 800303c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003040:	eddf 6a7c 	vldr	s13, [pc, #496]	@ 8003234 <executecommand+0xa84>
 8003044:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003048:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 800304c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003050:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003054:	4b76      	ldr	r3, [pc, #472]	@ (8003230 <executecommand+0xa80>)
 8003056:	795b      	ldrb	r3, [r3, #5]
 8003058:	ee07 3a90 	vmov	s15, r3
 800305c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003060:	eddf 6a74 	vldr	s13, [pc, #464]	@ 8003234 <executecommand+0xa84>
 8003064:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003068:	ed9f 6a74 	vldr	s12, [pc, #464]	@ 800323c <executecommand+0xa8c>
 800306c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003070:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003074:	4b73      	ldr	r3, [pc, #460]	@ (8003244 <executecommand+0xa94>)
 8003076:	edc3 7a00 	vstr	s15, [r3]
			error_sum_angular_rate_rool = 0;
 800307a:	4b73      	ldr	r3, [pc, #460]	@ (8003248 <executecommand+0xa98>)
 800307c:	2200      	movs	r2, #0
 800307e:	601a      	str	r2, [r3, #0]
		}

		if(command[0] == 'h')
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	2b68      	cmp	r3, #104	@ 0x68
 8003086:	d14c      	bne.n	8003122 <executecommand+0x972>
		{
			d_angular_rate_roolfactor = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8003088:	4b69      	ldr	r3, [pc, #420]	@ (8003230 <executecommand+0xa80>)
 800308a:	785b      	ldrb	r3, [r3, #1]
 800308c:	ee07 3a90 	vmov	s15, r3
 8003090:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003094:	ed9f 7a67 	vldr	s14, [pc, #412]	@ 8003234 <executecommand+0xa84>
 8003098:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800309c:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 800324c <executecommand+0xa9c>
 80030a0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80030a4:	4b62      	ldr	r3, [pc, #392]	@ (8003230 <executecommand+0xa80>)
 80030a6:	789b      	ldrb	r3, [r3, #2]
 80030a8:	ee07 3a90 	vmov	s15, r3
 80030ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030b0:	eddf 6a60 	vldr	s13, [pc, #384]	@ 8003234 <executecommand+0xa84>
 80030b4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80030b8:	eddf 6a60 	vldr	s13, [pc, #384]	@ 800323c <executecommand+0xa8c>
 80030bc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80030c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030c4:	4b5a      	ldr	r3, [pc, #360]	@ (8003230 <executecommand+0xa80>)
 80030c6:	78db      	ldrb	r3, [r3, #3]
 80030c8:	ee07 3a90 	vmov	s15, r3
 80030cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030d0:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003234 <executecommand+0xa84>
 80030d4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80030d8:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80030dc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80030e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030e4:	4b52      	ldr	r3, [pc, #328]	@ (8003230 <executecommand+0xa80>)
 80030e6:	791b      	ldrb	r3, [r3, #4]
 80030e8:	ee07 3a90 	vmov	s15, r3
 80030ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030f0:	eddf 6a50 	vldr	s13, [pc, #320]	@ 8003234 <executecommand+0xa84>
 80030f4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80030f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030fc:	4b4c      	ldr	r3, [pc, #304]	@ (8003230 <executecommand+0xa80>)
 80030fe:	795b      	ldrb	r3, [r3, #5]
 8003100:	ee07 3a90 	vmov	s15, r3
 8003104:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003108:	eddf 6a4a 	vldr	s13, [pc, #296]	@ 8003234 <executecommand+0xa84>
 800310c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003110:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8003114:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003118:	ee77 7a27 	vadd.f32	s15, s14, s15
 800311c:	4b4c      	ldr	r3, [pc, #304]	@ (8003250 <executecommand+0xaa0>)
 800311e:	edc3 7a00 	vstr	s15, [r3]





		if(command[0] == 'j')
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	2b6a      	cmp	r3, #106	@ 0x6a
 8003128:	d14c      	bne.n	80031c4 <executecommand+0xa14>
			{
				p_yawfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 800312a:	4b41      	ldr	r3, [pc, #260]	@ (8003230 <executecommand+0xa80>)
 800312c:	785b      	ldrb	r3, [r3, #1]
 800312e:	ee07 3a90 	vmov	s15, r3
 8003132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003136:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8003234 <executecommand+0xa84>
 800313a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800313e:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800323c <executecommand+0xa8c>
 8003142:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003146:	4b3a      	ldr	r3, [pc, #232]	@ (8003230 <executecommand+0xa80>)
 8003148:	789b      	ldrb	r3, [r3, #2]
 800314a:	ee07 3a90 	vmov	s15, r3
 800314e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003152:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003234 <executecommand+0xa84>
 8003156:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800315a:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800315e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003162:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003166:	4b32      	ldr	r3, [pc, #200]	@ (8003230 <executecommand+0xa80>)
 8003168:	78db      	ldrb	r3, [r3, #3]
 800316a:	ee07 3a90 	vmov	s15, r3
 800316e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003172:	eddf 6a30 	vldr	s13, [pc, #192]	@ 8003234 <executecommand+0xa84>
 8003176:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800317a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800317e:	4b2c      	ldr	r3, [pc, #176]	@ (8003230 <executecommand+0xa80>)
 8003180:	791b      	ldrb	r3, [r3, #4]
 8003182:	ee07 3a90 	vmov	s15, r3
 8003186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800318a:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8003234 <executecommand+0xa84>
 800318e:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003192:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8003196:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800319a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800319e:	4b24      	ldr	r3, [pc, #144]	@ (8003230 <executecommand+0xa80>)
 80031a0:	795b      	ldrb	r3, [r3, #5]
 80031a2:	ee07 3a90 	vmov	s15, r3
 80031a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031aa:	eddf 6a22 	vldr	s13, [pc, #136]	@ 8003234 <executecommand+0xa84>
 80031ae:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80031b2:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 800323c <executecommand+0xa8c>
 80031b6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80031ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031be:	4b25      	ldr	r3, [pc, #148]	@ (8003254 <executecommand+0xaa4>)
 80031c0:	edc3 7a00 	vstr	s15, [r3]
			}

			if(command[0] == 'k')
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	2b6b      	cmp	r3, #107	@ 0x6b
 80031ca:	d167      	bne.n	800329c <executecommand+0xaec>
			{
				i_yawfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 80031cc:	4b18      	ldr	r3, [pc, #96]	@ (8003230 <executecommand+0xa80>)
 80031ce:	785b      	ldrb	r3, [r3, #1]
 80031d0:	ee07 3a90 	vmov	s15, r3
 80031d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031d8:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8003234 <executecommand+0xa84>
 80031dc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80031e0:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 800323c <executecommand+0xa8c>
 80031e4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80031e8:	4b11      	ldr	r3, [pc, #68]	@ (8003230 <executecommand+0xa80>)
 80031ea:	789b      	ldrb	r3, [r3, #2]
 80031ec:	ee07 3a90 	vmov	s15, r3
 80031f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031f4:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8003234 <executecommand+0xa84>
 80031f8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80031fc:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8003200:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003204:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003208:	4b09      	ldr	r3, [pc, #36]	@ (8003230 <executecommand+0xa80>)
 800320a:	78db      	ldrb	r3, [r3, #3]
 800320c:	ee07 3a90 	vmov	s15, r3
 8003210:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003214:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8003234 <executecommand+0xa84>
 8003218:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800321c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003220:	4b03      	ldr	r3, [pc, #12]	@ (8003230 <executecommand+0xa80>)
 8003222:	791b      	ldrb	r3, [r3, #4]
 8003224:	ee07 3a90 	vmov	s15, r3
 8003228:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800322c:	e016      	b.n	800325c <executecommand+0xaac>
 800322e:	bf00      	nop
 8003230:	000041a0 	.word	0x000041a0
 8003234:	42400000 	.word	0x42400000
 8003238:	000040e8 	.word	0x000040e8
 800323c:	42c80000 	.word	0x42c80000
 8003240:	00004130 	.word	0x00004130
 8003244:	0000413c 	.word	0x0000413c
 8003248:	000040ac 	.word	0x000040ac
 800324c:	447a0000 	.word	0x447a0000
 8003250:	00004148 	.word	0x00004148
 8003254:	000040d4 	.word	0x000040d4
 8003258:	42400000 	.word	0x42400000
 800325c:	ed5f 6a02 	vldr	s13, [pc, #-8]	@ 8003258 <executecommand+0xaa8>
 8003260:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003264:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8003268:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800326c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003270:	4bba      	ldr	r3, [pc, #744]	@ (800355c <executecommand+0xdac>)
 8003272:	795b      	ldrb	r3, [r3, #5]
 8003274:	ee07 3a90 	vmov	s15, r3
 8003278:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800327c:	eddf 6ab8 	vldr	s13, [pc, #736]	@ 8003560 <executecommand+0xdb0>
 8003280:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003284:	ed9f 6ab7 	vldr	s12, [pc, #732]	@ 8003564 <executecommand+0xdb4>
 8003288:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800328c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003290:	4bb5      	ldr	r3, [pc, #724]	@ (8003568 <executecommand+0xdb8>)
 8003292:	edc3 7a00 	vstr	s15, [r3]
				error_sum_yaw = 0;
 8003296:	4bb5      	ldr	r3, [pc, #724]	@ (800356c <executecommand+0xdbc>)
 8003298:	2200      	movs	r2, #0
 800329a:	601a      	str	r2, [r3, #0]
			}

			if(command[0] == 'l')
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	2b6c      	cmp	r3, #108	@ 0x6c
 80032a2:	d14c      	bne.n	800333e <executecommand+0xb8e>
			{
				d_yawfactor = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 80032a4:	4bad      	ldr	r3, [pc, #692]	@ (800355c <executecommand+0xdac>)
 80032a6:	785b      	ldrb	r3, [r3, #1]
 80032a8:	ee07 3a90 	vmov	s15, r3
 80032ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032b0:	ed9f 7aab 	vldr	s14, [pc, #684]	@ 8003560 <executecommand+0xdb0>
 80032b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80032b8:	ed9f 7aad 	vldr	s14, [pc, #692]	@ 8003570 <executecommand+0xdc0>
 80032bc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80032c0:	4ba6      	ldr	r3, [pc, #664]	@ (800355c <executecommand+0xdac>)
 80032c2:	789b      	ldrb	r3, [r3, #2]
 80032c4:	ee07 3a90 	vmov	s15, r3
 80032c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032cc:	eddf 6aa4 	vldr	s13, [pc, #656]	@ 8003560 <executecommand+0xdb0>
 80032d0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80032d4:	eddf 6aa3 	vldr	s13, [pc, #652]	@ 8003564 <executecommand+0xdb4>
 80032d8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80032dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032e0:	4b9e      	ldr	r3, [pc, #632]	@ (800355c <executecommand+0xdac>)
 80032e2:	78db      	ldrb	r3, [r3, #3]
 80032e4:	ee07 3a90 	vmov	s15, r3
 80032e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032ec:	eddf 6a9c 	vldr	s13, [pc, #624]	@ 8003560 <executecommand+0xdb0>
 80032f0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80032f4:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80032f8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80032fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003300:	4b96      	ldr	r3, [pc, #600]	@ (800355c <executecommand+0xdac>)
 8003302:	791b      	ldrb	r3, [r3, #4]
 8003304:	ee07 3a90 	vmov	s15, r3
 8003308:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800330c:	eddf 6a94 	vldr	s13, [pc, #592]	@ 8003560 <executecommand+0xdb0>
 8003310:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003314:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003318:	4b90      	ldr	r3, [pc, #576]	@ (800355c <executecommand+0xdac>)
 800331a:	795b      	ldrb	r3, [r3, #5]
 800331c:	ee07 3a90 	vmov	s15, r3
 8003320:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003324:	eddf 6a8e 	vldr	s13, [pc, #568]	@ 8003560 <executecommand+0xdb0>
 8003328:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800332c:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8003330:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003334:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003338:	4b8e      	ldr	r3, [pc, #568]	@ (8003574 <executecommand+0xdc4>)
 800333a:	edc3 7a00 	vstr	s15, [r3]
			}
			if(command[0] == 'm')
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	2b6d      	cmp	r3, #109	@ 0x6d
 8003344:	d14c      	bne.n	80033e0 <executecommand+0xc30>
			{
				p_angular_rate_yawfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8003346:	4b85      	ldr	r3, [pc, #532]	@ (800355c <executecommand+0xdac>)
 8003348:	785b      	ldrb	r3, [r3, #1]
 800334a:	ee07 3a90 	vmov	s15, r3
 800334e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003352:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 8003560 <executecommand+0xdb0>
 8003356:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800335a:	ed9f 7a82 	vldr	s14, [pc, #520]	@ 8003564 <executecommand+0xdb4>
 800335e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003362:	4b7e      	ldr	r3, [pc, #504]	@ (800355c <executecommand+0xdac>)
 8003364:	789b      	ldrb	r3, [r3, #2]
 8003366:	ee07 3a90 	vmov	s15, r3
 800336a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800336e:	eddf 6a7c 	vldr	s13, [pc, #496]	@ 8003560 <executecommand+0xdb0>
 8003372:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003376:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800337a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800337e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003382:	4b76      	ldr	r3, [pc, #472]	@ (800355c <executecommand+0xdac>)
 8003384:	78db      	ldrb	r3, [r3, #3]
 8003386:	ee07 3a90 	vmov	s15, r3
 800338a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800338e:	eddf 6a74 	vldr	s13, [pc, #464]	@ 8003560 <executecommand+0xdb0>
 8003392:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003396:	ee37 7a27 	vadd.f32	s14, s14, s15
 800339a:	4b70      	ldr	r3, [pc, #448]	@ (800355c <executecommand+0xdac>)
 800339c:	791b      	ldrb	r3, [r3, #4]
 800339e:	ee07 3a90 	vmov	s15, r3
 80033a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033a6:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8003560 <executecommand+0xdb0>
 80033aa:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80033ae:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80033b2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80033b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033ba:	4b68      	ldr	r3, [pc, #416]	@ (800355c <executecommand+0xdac>)
 80033bc:	795b      	ldrb	r3, [r3, #5]
 80033be:	ee07 3a90 	vmov	s15, r3
 80033c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033c6:	eddf 6a66 	vldr	s13, [pc, #408]	@ 8003560 <executecommand+0xdb0>
 80033ca:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80033ce:	ed9f 6a65 	vldr	s12, [pc, #404]	@ 8003564 <executecommand+0xdb4>
 80033d2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80033d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033da:	4b67      	ldr	r3, [pc, #412]	@ (8003578 <executecommand+0xdc8>)
 80033dc:	edc3 7a00 	vstr	s15, [r3]
			}

			if(command[0] == 'n')
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	2b6e      	cmp	r3, #110	@ 0x6e
 80033e6:	d14f      	bne.n	8003488 <executecommand+0xcd8>
			{
				i_angular_rate_yawfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 80033e8:	4b5c      	ldr	r3, [pc, #368]	@ (800355c <executecommand+0xdac>)
 80033ea:	785b      	ldrb	r3, [r3, #1]
 80033ec:	ee07 3a90 	vmov	s15, r3
 80033f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033f4:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8003560 <executecommand+0xdb0>
 80033f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80033fc:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8003564 <executecommand+0xdb4>
 8003400:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003404:	4b55      	ldr	r3, [pc, #340]	@ (800355c <executecommand+0xdac>)
 8003406:	789b      	ldrb	r3, [r3, #2]
 8003408:	ee07 3a90 	vmov	s15, r3
 800340c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003410:	eddf 6a53 	vldr	s13, [pc, #332]	@ 8003560 <executecommand+0xdb0>
 8003414:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003418:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800341c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003420:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003424:	4b4d      	ldr	r3, [pc, #308]	@ (800355c <executecommand+0xdac>)
 8003426:	78db      	ldrb	r3, [r3, #3]
 8003428:	ee07 3a90 	vmov	s15, r3
 800342c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003430:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 8003560 <executecommand+0xdb0>
 8003434:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003438:	ee37 7a27 	vadd.f32	s14, s14, s15
 800343c:	4b47      	ldr	r3, [pc, #284]	@ (800355c <executecommand+0xdac>)
 800343e:	791b      	ldrb	r3, [r3, #4]
 8003440:	ee07 3a90 	vmov	s15, r3
 8003444:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003448:	eddf 6a45 	vldr	s13, [pc, #276]	@ 8003560 <executecommand+0xdb0>
 800344c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003450:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8003454:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003458:	ee37 7a27 	vadd.f32	s14, s14, s15
 800345c:	4b3f      	ldr	r3, [pc, #252]	@ (800355c <executecommand+0xdac>)
 800345e:	795b      	ldrb	r3, [r3, #5]
 8003460:	ee07 3a90 	vmov	s15, r3
 8003464:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003468:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8003560 <executecommand+0xdb0>
 800346c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003470:	ed9f 6a3c 	vldr	s12, [pc, #240]	@ 8003564 <executecommand+0xdb4>
 8003474:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003478:	ee77 7a27 	vadd.f32	s15, s14, s15
 800347c:	4b3f      	ldr	r3, [pc, #252]	@ (800357c <executecommand+0xdcc>)
 800347e:	edc3 7a00 	vstr	s15, [r3]
				error_sum_angular_rate_yaw = 0;
 8003482:	4b3f      	ldr	r3, [pc, #252]	@ (8003580 <executecommand+0xdd0>)
 8003484:	2200      	movs	r2, #0
 8003486:	601a      	str	r2, [r3, #0]
			}

			if(command[0] == 'o')
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	2b6f      	cmp	r3, #111	@ 0x6f
 800348e:	d14c      	bne.n	800352a <executecommand+0xd7a>
			{
				d_angular_rate_yawfactor = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8003490:	4b32      	ldr	r3, [pc, #200]	@ (800355c <executecommand+0xdac>)
 8003492:	785b      	ldrb	r3, [r3, #1]
 8003494:	ee07 3a90 	vmov	s15, r3
 8003498:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800349c:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8003560 <executecommand+0xdb0>
 80034a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80034a4:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8003570 <executecommand+0xdc0>
 80034a8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80034ac:	4b2b      	ldr	r3, [pc, #172]	@ (800355c <executecommand+0xdac>)
 80034ae:	789b      	ldrb	r3, [r3, #2]
 80034b0:	ee07 3a90 	vmov	s15, r3
 80034b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034b8:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8003560 <executecommand+0xdb0>
 80034bc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80034c0:	eddf 6a28 	vldr	s13, [pc, #160]	@ 8003564 <executecommand+0xdb4>
 80034c4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80034c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034cc:	4b23      	ldr	r3, [pc, #140]	@ (800355c <executecommand+0xdac>)
 80034ce:	78db      	ldrb	r3, [r3, #3]
 80034d0:	ee07 3a90 	vmov	s15, r3
 80034d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034d8:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8003560 <executecommand+0xdb0>
 80034dc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80034e0:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80034e4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80034e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034ec:	4b1b      	ldr	r3, [pc, #108]	@ (800355c <executecommand+0xdac>)
 80034ee:	791b      	ldrb	r3, [r3, #4]
 80034f0:	ee07 3a90 	vmov	s15, r3
 80034f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034f8:	eddf 6a19 	vldr	s13, [pc, #100]	@ 8003560 <executecommand+0xdb0>
 80034fc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003500:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003504:	4b15      	ldr	r3, [pc, #84]	@ (800355c <executecommand+0xdac>)
 8003506:	795b      	ldrb	r3, [r3, #5]
 8003508:	ee07 3a90 	vmov	s15, r3
 800350c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003510:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8003560 <executecommand+0xdb0>
 8003514:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003518:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 800351c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003520:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003524:	4b17      	ldr	r3, [pc, #92]	@ (8003584 <executecommand+0xdd4>)
 8003526:	edc3 7a00 	vstr	s15, [r3]
			}

	if(command[0] == 'r'){
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	2b72      	cmp	r3, #114	@ 0x72
 8003530:	d101      	bne.n	8003536 <executecommand+0xd86>
		NVIC_SystemReset();
 8003532:	f7ff f8d9 	bl	80026e8 <__NVIC_SystemReset>
	}

	for(int i = 0; i < 15; i++){
 8003536:	2300      	movs	r3, #0
 8003538:	60fb      	str	r3, [r7, #12]
 800353a:	e007      	b.n	800354c <executecommand+0xd9c>
		UASRT_PID_VAL[i] = 0;
 800353c:	4a07      	ldr	r2, [pc, #28]	@ (800355c <executecommand+0xdac>)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	4413      	add	r3, r2
 8003542:	2200      	movs	r2, #0
 8003544:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 15; i++){
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	3301      	adds	r3, #1
 800354a:	60fb      	str	r3, [r7, #12]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2b0e      	cmp	r3, #14
 8003550:	ddf4      	ble.n	800353c <executecommand+0xd8c>
	}
//	for(int i = 0; i < 10; i++){
//		words[i] = 0;
//	}

}
 8003552:	bf00      	nop
 8003554:	bf00      	nop
 8003556:	3710      	adds	r7, #16
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}
 800355c:	000041a0 	.word	0x000041a0
 8003560:	42400000 	.word	0x42400000
 8003564:	42c80000 	.word	0x42c80000
 8003568:	000040e0 	.word	0x000040e0
 800356c:	000040a4 	.word	0x000040a4
 8003570:	447a0000 	.word	0x447a0000
 8003574:	000040ec 	.word	0x000040ec
 8003578:	00004134 	.word	0x00004134
 800357c:	00004140 	.word	0x00004140
 8003580:	000040b0 	.word	0x000040b0
 8003584:	0000414c 	.word	0x0000414c

08003588 <MX_ADC2_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b08a      	sub	sp, #40	@ 0x28
 800358c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800358e:	1d3b      	adds	r3, r7, #4
 8003590:	2224      	movs	r2, #36	@ 0x24
 8003592:	2100      	movs	r1, #0
 8003594:	4618      	mov	r0, r3
 8003596:	f01a fa99 	bl	801dacc <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800359a:	4b2e      	ldr	r3, [pc, #184]	@ (8003654 <MX_ADC2_Init+0xcc>)
 800359c:	4a2e      	ldr	r2, [pc, #184]	@ (8003658 <MX_ADC2_Init+0xd0>)
 800359e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 80035a0:	4b2c      	ldr	r3, [pc, #176]	@ (8003654 <MX_ADC2_Init+0xcc>)
 80035a2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80035a6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80035a8:	4b2a      	ldr	r3, [pc, #168]	@ (8003654 <MX_ADC2_Init+0xcc>)
 80035aa:	2208      	movs	r2, #8
 80035ac:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80035ae:	4b29      	ldr	r3, [pc, #164]	@ (8003654 <MX_ADC2_Init+0xcc>)
 80035b0:	2200      	movs	r2, #0
 80035b2:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80035b4:	4b27      	ldr	r3, [pc, #156]	@ (8003654 <MX_ADC2_Init+0xcc>)
 80035b6:	2204      	movs	r2, #4
 80035b8:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80035ba:	4b26      	ldr	r3, [pc, #152]	@ (8003654 <MX_ADC2_Init+0xcc>)
 80035bc:	2200      	movs	r2, #0
 80035be:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80035c0:	4b24      	ldr	r3, [pc, #144]	@ (8003654 <MX_ADC2_Init+0xcc>)
 80035c2:	2200      	movs	r2, #0
 80035c4:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 80035c6:	4b23      	ldr	r3, [pc, #140]	@ (8003654 <MX_ADC2_Init+0xcc>)
 80035c8:	2201      	movs	r2, #1
 80035ca:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80035cc:	4b21      	ldr	r3, [pc, #132]	@ (8003654 <MX_ADC2_Init+0xcc>)
 80035ce:	2200      	movs	r2, #0
 80035d0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T8_TRGO;
 80035d4:	4b1f      	ldr	r3, [pc, #124]	@ (8003654 <MX_ADC2_Init+0xcc>)
 80035d6:	f44f 629c 	mov.w	r2, #1248	@ 0x4e0
 80035da:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80035dc:	4b1d      	ldr	r3, [pc, #116]	@ (8003654 <MX_ADC2_Init+0xcc>)
 80035de:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80035e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80035e4:	4b1b      	ldr	r3, [pc, #108]	@ (8003654 <MX_ADC2_Init+0xcc>)
 80035e6:	2203      	movs	r2, #3
 80035e8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80035ea:	4b1a      	ldr	r3, [pc, #104]	@ (8003654 <MX_ADC2_Init+0xcc>)
 80035ec:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80035f0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80035f2:	4b18      	ldr	r3, [pc, #96]	@ (8003654 <MX_ADC2_Init+0xcc>)
 80035f4:	2200      	movs	r2, #0
 80035f6:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 80035f8:	4b16      	ldr	r3, [pc, #88]	@ (8003654 <MX_ADC2_Init+0xcc>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.Ratio = 1;
 8003600:	4b14      	ldr	r3, [pc, #80]	@ (8003654 <MX_ADC2_Init+0xcc>)
 8003602:	2201      	movs	r2, #1
 8003604:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003606:	4813      	ldr	r0, [pc, #76]	@ (8003654 <MX_ADC2_Init+0xcc>)
 8003608:	f005 ff98 	bl	800953c <HAL_ADC_Init>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d001      	beq.n	8003616 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8003612:	f004 f919 	bl	8007848 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8003616:	4b11      	ldr	r3, [pc, #68]	@ (800365c <MX_ADC2_Init+0xd4>)
 8003618:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800361a:	2306      	movs	r3, #6
 800361c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 800361e:	2307      	movs	r3, #7
 8003620:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003622:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8003626:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003628:	2304      	movs	r3, #4
 800362a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800362c:	2300      	movs	r3, #0
 800362e:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8003630:	2300      	movs	r3, #0
 8003632:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003636:	1d3b      	adds	r3, r7, #4
 8003638:	4619      	mov	r1, r3
 800363a:	4806      	ldr	r0, [pc, #24]	@ (8003654 <MX_ADC2_Init+0xcc>)
 800363c:	f006 fcc4 	bl	8009fc8 <HAL_ADC_ConfigChannel>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d001      	beq.n	800364a <MX_ADC2_Init+0xc2>
  {
    Error_Handler();
 8003646:	f004 f8ff 	bl	8007848 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800364a:	bf00      	nop
 800364c:	3728      	adds	r7, #40	@ 0x28
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	240000ac 	.word	0x240000ac
 8003658:	40022100 	.word	0x40022100
 800365c:	19200040 	.word	0x19200040

08003660 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b08a      	sub	sp, #40	@ 0x28
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003668:	f107 0314 	add.w	r3, r7, #20
 800366c:	2200      	movs	r2, #0
 800366e:	601a      	str	r2, [r3, #0]
 8003670:	605a      	str	r2, [r3, #4]
 8003672:	609a      	str	r2, [r3, #8]
 8003674:	60da      	str	r2, [r3, #12]
 8003676:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC2)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a34      	ldr	r2, [pc, #208]	@ (8003750 <HAL_ADC_MspInit+0xf0>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d162      	bne.n	8003748 <HAL_ADC_MspInit+0xe8>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* ADC2 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003682:	4b34      	ldr	r3, [pc, #208]	@ (8003754 <HAL_ADC_MspInit+0xf4>)
 8003684:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003688:	4a32      	ldr	r2, [pc, #200]	@ (8003754 <HAL_ADC_MspInit+0xf4>)
 800368a:	f043 0320 	orr.w	r3, r3, #32
 800368e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003692:	4b30      	ldr	r3, [pc, #192]	@ (8003754 <HAL_ADC_MspInit+0xf4>)
 8003694:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003698:	f003 0320 	and.w	r3, r3, #32
 800369c:	613b      	str	r3, [r7, #16]
 800369e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80036a0:	4b2c      	ldr	r3, [pc, #176]	@ (8003754 <HAL_ADC_MspInit+0xf4>)
 80036a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80036a6:	4a2b      	ldr	r2, [pc, #172]	@ (8003754 <HAL_ADC_MspInit+0xf4>)
 80036a8:	f043 0320 	orr.w	r3, r3, #32
 80036ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80036b0:	4b28      	ldr	r3, [pc, #160]	@ (8003754 <HAL_ADC_MspInit+0xf4>)
 80036b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80036b6:	f003 0320 	and.w	r3, r3, #32
 80036ba:	60fb      	str	r3, [r7, #12]
 80036bc:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PF14     ------> ADC2_INP6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80036be:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80036c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80036c4:	2303      	movs	r3, #3
 80036c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036c8:	2300      	movs	r3, #0
 80036ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80036cc:	f107 0314 	add.w	r3, r7, #20
 80036d0:	4619      	mov	r1, r3
 80036d2:	4821      	ldr	r0, [pc, #132]	@ (8003758 <HAL_ADC_MspInit+0xf8>)
 80036d4:	f00a fbc0 	bl	800de58 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream0;
 80036d8:	4b20      	ldr	r3, [pc, #128]	@ (800375c <HAL_ADC_MspInit+0xfc>)
 80036da:	4a21      	ldr	r2, [pc, #132]	@ (8003760 <HAL_ADC_MspInit+0x100>)
 80036dc:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80036de:	4b1f      	ldr	r3, [pc, #124]	@ (800375c <HAL_ADC_MspInit+0xfc>)
 80036e0:	220a      	movs	r2, #10
 80036e2:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80036e4:	4b1d      	ldr	r3, [pc, #116]	@ (800375c <HAL_ADC_MspInit+0xfc>)
 80036e6:	2200      	movs	r2, #0
 80036e8:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80036ea:	4b1c      	ldr	r3, [pc, #112]	@ (800375c <HAL_ADC_MspInit+0xfc>)
 80036ec:	2200      	movs	r2, #0
 80036ee:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80036f0:	4b1a      	ldr	r3, [pc, #104]	@ (800375c <HAL_ADC_MspInit+0xfc>)
 80036f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80036f6:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80036f8:	4b18      	ldr	r3, [pc, #96]	@ (800375c <HAL_ADC_MspInit+0xfc>)
 80036fa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80036fe:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003700:	4b16      	ldr	r3, [pc, #88]	@ (800375c <HAL_ADC_MspInit+0xfc>)
 8003702:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003706:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8003708:	4b14      	ldr	r3, [pc, #80]	@ (800375c <HAL_ADC_MspInit+0xfc>)
 800370a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800370e:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8003710:	4b12      	ldr	r3, [pc, #72]	@ (800375c <HAL_ADC_MspInit+0xfc>)
 8003712:	2200      	movs	r2, #0
 8003714:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003716:	4b11      	ldr	r3, [pc, #68]	@ (800375c <HAL_ADC_MspInit+0xfc>)
 8003718:	2200      	movs	r2, #0
 800371a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800371c:	480f      	ldr	r0, [pc, #60]	@ (800375c <HAL_ADC_MspInit+0xfc>)
 800371e:	f007 fd49 	bl	800b1b4 <HAL_DMA_Init>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d001      	beq.n	800372c <HAL_ADC_MspInit+0xcc>
    {
      Error_Handler();
 8003728:	f004 f88e 	bl	8007848 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	4a0b      	ldr	r2, [pc, #44]	@ (800375c <HAL_ADC_MspInit+0xfc>)
 8003730:	659a      	str	r2, [r3, #88]	@ 0x58
 8003732:	4a0a      	ldr	r2, [pc, #40]	@ (800375c <HAL_ADC_MspInit+0xfc>)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8003738:	2200      	movs	r2, #0
 800373a:	2100      	movs	r1, #0
 800373c:	2012      	movs	r0, #18
 800373e:	f007 fc8c 	bl	800b05a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003742:	2012      	movs	r0, #18
 8003744:	f007 fca3 	bl	800b08e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8003748:	bf00      	nop
 800374a:	3728      	adds	r7, #40	@ 0x28
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	40022100 	.word	0x40022100
 8003754:	58024400 	.word	0x58024400
 8003758:	58021400 	.word	0x58021400
 800375c:	2400011c 	.word	0x2400011c
 8003760:	40020410 	.word	0x40020410

08003764 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800376a:	4b19      	ldr	r3, [pc, #100]	@ (80037d0 <MX_DMA_Init+0x6c>)
 800376c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003770:	4a17      	ldr	r2, [pc, #92]	@ (80037d0 <MX_DMA_Init+0x6c>)
 8003772:	f043 0302 	orr.w	r3, r3, #2
 8003776:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800377a:	4b15      	ldr	r3, [pc, #84]	@ (80037d0 <MX_DMA_Init+0x6c>)
 800377c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003780:	f003 0302 	and.w	r3, r3, #2
 8003784:	607b      	str	r3, [r7, #4]
 8003786:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003788:	4b11      	ldr	r3, [pc, #68]	@ (80037d0 <MX_DMA_Init+0x6c>)
 800378a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800378e:	4a10      	ldr	r2, [pc, #64]	@ (80037d0 <MX_DMA_Init+0x6c>)
 8003790:	f043 0301 	orr.w	r3, r3, #1
 8003794:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003798:	4b0d      	ldr	r3, [pc, #52]	@ (80037d0 <MX_DMA_Init+0x6c>)
 800379a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800379e:	f003 0301 	and.w	r3, r3, #1
 80037a2:	603b      	str	r3, [r7, #0]
 80037a4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80037a6:	2200      	movs	r2, #0
 80037a8:	2100      	movs	r1, #0
 80037aa:	200b      	movs	r0, #11
 80037ac:	f007 fc55 	bl	800b05a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80037b0:	200b      	movs	r0, #11
 80037b2:	f007 fc6c 	bl	800b08e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80037b6:	2200      	movs	r2, #0
 80037b8:	2100      	movs	r1, #0
 80037ba:	2038      	movs	r0, #56	@ 0x38
 80037bc:	f007 fc4d 	bl	800b05a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80037c0:	2038      	movs	r0, #56	@ 0x38
 80037c2:	f007 fc64 	bl	800b08e <HAL_NVIC_EnableIRQ>

}
 80037c6:	bf00      	nop
 80037c8:	3708      	adds	r7, #8
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	58024400 	.word	0x58024400
 80037d4:	00000000 	.word	0x00000000

080037d8 <Thrust_filter>:
 * Thrust_filter
 *
 * niepozwala zwiększac ani znimiejszac ciągu jezeli error wychylenia jest zbyt duzy
 *
 */
void Thrust_filter(double factor){
 80037d8:	b580      	push	{r7, lr}
 80037da:	b08e      	sub	sp, #56	@ 0x38
 80037dc:	af00      	add	r7, sp, #0
 80037de:	ed87 0b00 	vstr	d0, [r7]
	double error_pitch, error_rool, error_sum;
	double thrust_add = 0;
 80037e2:	f04f 0200 	mov.w	r2, #0
 80037e6:	f04f 0300 	mov.w	r3, #0
 80037ea:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	int16_t thrust_error;
	double thrust_function;
	uint8_t negflag = 0;
 80037ee:	2300      	movs	r3, #0
 80037f0:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	error_pitch = (float)(wanted_pitch - now_pitch);
 80037f4:	4b8c      	ldr	r3, [pc, #560]	@ (8003a28 <Thrust_filter+0x250>)
 80037f6:	ed93 7a00 	vldr	s14, [r3]
 80037fa:	4b8c      	ldr	r3, [pc, #560]	@ (8003a2c <Thrust_filter+0x254>)
 80037fc:	edd3 7a00 	vldr	s15, [r3]
 8003800:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003804:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003808:	ed87 7b08 	vstr	d7, [r7, #32]
	error_rool 	= (float)(wanted_rool - now_rool);
 800380c:	4b88      	ldr	r3, [pc, #544]	@ (8003a30 <Thrust_filter+0x258>)
 800380e:	ed93 7a00 	vldr	s14, [r3]
 8003812:	4b88      	ldr	r3, [pc, #544]	@ (8003a34 <Thrust_filter+0x25c>)
 8003814:	edd3 7a00 	vldr	s15, [r3]
 8003818:	ee77 7a67 	vsub.f32	s15, s14, s15
 800381c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003820:	ed87 7b06 	vstr	d7, [r7, #24]

	error_pitch = WartoscBezwgledna(error_pitch);
 8003824:	ed97 7b08 	vldr	d7, [r7, #32]
 8003828:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800382c:	eeb0 0a67 	vmov.f32	s0, s15
 8003830:	f003 fbec 	bl	800700c <WartoscBezwgledna>
 8003834:	eef0 7a40 	vmov.f32	s15, s0
 8003838:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800383c:	ed87 7b08 	vstr	d7, [r7, #32]
	error_rool 	= WartoscBezwgledna(error_rool);
 8003840:	ed97 7b06 	vldr	d7, [r7, #24]
 8003844:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003848:	eeb0 0a67 	vmov.f32	s0, s15
 800384c:	f003 fbde 	bl	800700c <WartoscBezwgledna>
 8003850:	eef0 7a40 	vmov.f32	s15, s0
 8003854:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003858:	ed87 7b06 	vstr	d7, [r7, #24]

	error_sum = pow(error_pitch + error_rool + 1, 5);
 800385c:	ed97 6b08 	vldr	d6, [r7, #32]
 8003860:	ed97 7b06 	vldr	d7, [r7, #24]
 8003864:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003868:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800386c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003870:	eeb1 1b04 	vmov.f64	d1, #20	@ 0x40a00000  5.0
 8003874:	eeb0 0b47 	vmov.f64	d0, d7
 8003878:	f01a f9b2 	bl	801dbe0 <pow>
 800387c:	ed87 0b04 	vstr	d0, [r7, #16]
	if(wanted_thrust > 10500){
 8003880:	4b6d      	ldr	r3, [pc, #436]	@ (8003a38 <Thrust_filter+0x260>)
 8003882:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003886:	f642 1204 	movw	r2, #10500	@ 0x2904
 800388a:	4293      	cmp	r3, r2
 800388c:	dd03      	ble.n	8003896 <Thrust_filter+0xbe>
		wanted_thrust = 10500;
 800388e:	4b6a      	ldr	r3, [pc, #424]	@ (8003a38 <Thrust_filter+0x260>)
 8003890:	f642 1204 	movw	r2, #10500	@ 0x2904
 8003894:	801a      	strh	r2, [r3, #0]
	}

	thrust_error = wanted_thrust - MYDRON.THRUST;
 8003896:	4b68      	ldr	r3, [pc, #416]	@ (8003a38 <Thrust_filter+0x260>)
 8003898:	f9b3 3000 	ldrsh.w	r3, [r3]
 800389c:	b29a      	uxth	r2, r3
 800389e:	4b67      	ldr	r3, [pc, #412]	@ (8003a3c <Thrust_filter+0x264>)
 80038a0:	885b      	ldrh	r3, [r3, #2]
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	if(thrust_error < 0){
 80038a8:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	da13      	bge.n	80038d8 <Thrust_filter+0x100>
		thrust_error = WartoscBezwgledna(thrust_error);
 80038b0:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 80038b4:	ee07 3a90 	vmov	s15, r3
 80038b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038bc:	eeb0 0a67 	vmov.f32	s0, s15
 80038c0:	f003 fba4 	bl	800700c <WartoscBezwgledna>
 80038c4:	eef0 7a40 	vmov.f32	s15, s0
 80038c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80038cc:	ee17 3a90 	vmov	r3, s15
 80038d0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		negflag = 1;
 80038d2:	2301      	movs	r3, #1
 80038d4:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	}


	if((thrust_error) != 0){
 80038d8:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 80038dc:	2b00      	cmp	r3, #0
 80038de:	f000 8097 	beq.w	8003a10 <Thrust_filter+0x238>
		thrust_function = 2000*(sqrt(sqrt((double)(thrust_error))));
 80038e2:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 80038e6:	ee07 3a90 	vmov	s15, r3
 80038ea:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80038ee:	eeb0 0b47 	vmov.f64	d0, d7
 80038f2:	f01a f921 	bl	801db38 <sqrt>
 80038f6:	eeb0 7b40 	vmov.f64	d7, d0
 80038fa:	eeb0 0b47 	vmov.f64	d0, d7
 80038fe:	f01a f91b 	bl	801db38 <sqrt>
 8003902:	eeb0 7b40 	vmov.f64	d7, d0
 8003906:	ed9f 6b44 	vldr	d6, [pc, #272]	@ 8003a18 <Thrust_filter+0x240>
 800390a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800390e:	ed87 7b02 	vstr	d7, [r7, #8]

		thrust_add = ((double)(factor * thrust_increse_factor * thrust_function/error_sum));
 8003912:	ed97 7b00 	vldr	d7, [r7]
 8003916:	ed9f 6b42 	vldr	d6, [pc, #264]	@ 8003a20 <Thrust_filter+0x248>
 800391a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800391e:	ed97 7b02 	vldr	d7, [r7, #8]
 8003922:	ee26 5b07 	vmul.f64	d5, d6, d7
 8003926:	ed97 6b04 	vldr	d6, [r7, #16]
 800392a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800392e:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
		if(negflag == 1){
 8003932:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8003936:	2b01      	cmp	r3, #1
 8003938:	d105      	bne.n	8003946 <Thrust_filter+0x16e>
			thrust_add = thrust_add*(-1);
 800393a:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 800393e:	eeb1 7b47 	vneg.f64	d7, d7
 8003942:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
		}


		if(thrust_add < 1 && thrust_add > -1){
 8003946:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 800394a:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800394e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8003952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003956:	d513      	bpl.n	8003980 <Thrust_filter+0x1a8>
 8003958:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 800395c:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 8003960:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8003964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003968:	dd0a      	ble.n	8003980 <Thrust_filter+0x1a8>
			thrust_values = thrust_values + thrust_add;
 800396a:	4b35      	ldr	r3, [pc, #212]	@ (8003a40 <Thrust_filter+0x268>)
 800396c:	ed93 6b00 	vldr	d6, [r3]
 8003970:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8003974:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003978:	4b31      	ldr	r3, [pc, #196]	@ (8003a40 <Thrust_filter+0x268>)
 800397a:	ed83 7b00 	vstr	d7, [r3]
 800397e:	e010      	b.n	80039a2 <Thrust_filter+0x1ca>
		}
		else{
			MYDRON.THRUST = MYDRON.THRUST + thrust_add;
 8003980:	4b2e      	ldr	r3, [pc, #184]	@ (8003a3c <Thrust_filter+0x264>)
 8003982:	885b      	ldrh	r3, [r3, #2]
 8003984:	ee07 3a90 	vmov	s15, r3
 8003988:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800398c:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8003990:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003994:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003998:	ee17 3a90 	vmov	r3, s15
 800399c:	b29a      	uxth	r2, r3
 800399e:	4b27      	ldr	r3, [pc, #156]	@ (8003a3c <Thrust_filter+0x264>)
 80039a0:	805a      	strh	r2, [r3, #2]
		}

		if(thrust_values >= 1 || thrust_values <= -1){
 80039a2:	4b27      	ldr	r3, [pc, #156]	@ (8003a40 <Thrust_filter+0x268>)
 80039a4:	ed93 7b00 	vldr	d7, [r3]
 80039a8:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80039ac:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80039b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039b4:	da09      	bge.n	80039ca <Thrust_filter+0x1f2>
 80039b6:	4b22      	ldr	r3, [pc, #136]	@ (8003a40 <Thrust_filter+0x268>)
 80039b8:	ed93 7b00 	vldr	d7, [r3]
 80039bc:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 80039c0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80039c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039c8:	d818      	bhi.n	80039fc <Thrust_filter+0x224>
			MYDRON.THRUST = MYDRON.THRUST + thrust_values;
 80039ca:	4b1c      	ldr	r3, [pc, #112]	@ (8003a3c <Thrust_filter+0x264>)
 80039cc:	885b      	ldrh	r3, [r3, #2]
 80039ce:	ee07 3a90 	vmov	s15, r3
 80039d2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80039d6:	4b1a      	ldr	r3, [pc, #104]	@ (8003a40 <Thrust_filter+0x268>)
 80039d8:	ed93 7b00 	vldr	d7, [r3]
 80039dc:	ee36 7b07 	vadd.f64	d7, d6, d7
 80039e0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80039e4:	ee17 3a90 	vmov	r3, s15
 80039e8:	b29a      	uxth	r2, r3
 80039ea:	4b14      	ldr	r3, [pc, #80]	@ (8003a3c <Thrust_filter+0x264>)
 80039ec:	805a      	strh	r2, [r3, #2]
			thrust_values = 0;
 80039ee:	4914      	ldr	r1, [pc, #80]	@ (8003a40 <Thrust_filter+0x268>)
 80039f0:	f04f 0200 	mov.w	r2, #0
 80039f4:	f04f 0300 	mov.w	r3, #0
 80039f8:	e9c1 2300 	strd	r2, r3, [r1]
		}
		if(MYDRON.THRUST > 10000){//ograniczenie THRUST
 80039fc:	4b0f      	ldr	r3, [pc, #60]	@ (8003a3c <Thrust_filter+0x264>)
 80039fe:	885b      	ldrh	r3, [r3, #2]
 8003a00:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d903      	bls.n	8003a10 <Thrust_filter+0x238>
			MYDRON.THRUST = 10000;
 8003a08:	4b0c      	ldr	r3, [pc, #48]	@ (8003a3c <Thrust_filter+0x264>)
 8003a0a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003a0e:	805a      	strh	r2, [r3, #2]
		}
	}
}
 8003a10:	bf00      	nop
 8003a12:	3738      	adds	r7, #56	@ 0x38
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	00000000 	.word	0x00000000
 8003a1c:	409f4000 	.word	0x409f4000
 8003a20:	30553261 	.word	0x30553261
 8003a24:	3f33a92a 	.word	0x3f33a92a
 8003a28:	00004068 	.word	0x00004068
 8003a2c:	00004078 	.word	0x00004078
 8003a30:	0000406c 	.word	0x0000406c
 8003a34:	0000407c 	.word	0x0000407c
 8003a38:	0000405c 	.word	0x0000405c
 8003a3c:	00000180 	.word	0x00000180
 8003a40:	00004060 	.word	0x00004060

08003a44 <Wobble_Detect>:
	}

	return factor;
}

float Wobble_Detect(void){
 8003a44:	b480      	push	{r7}
 8003a46:	b08b      	sub	sp, #44	@ 0x2c
 8003a48:	af00      	add	r7, sp, #0
	float wobble_strenght = 1;// zakes od 1 do 1.5
 8003a4a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8003a4e:	627b      	str	r3, [r7, #36]	@ 0x24
	float angle_pitch_error_sum = 0;
 8003a50:	f04f 0300 	mov.w	r3, #0
 8003a54:	623b      	str	r3, [r7, #32]
	float angle_rool_error_sum = 0;
 8003a56:	f04f 0300 	mov.w	r3, #0
 8003a5a:	61fb      	str	r3, [r7, #28]
	float D_part_pitch = 0;
 8003a5c:	f04f 0300 	mov.w	r3, #0
 8003a60:	61bb      	str	r3, [r7, #24]
	float D_part_rool = 0;
 8003a62:	f04f 0300 	mov.w	r3, #0
 8003a66:	617b      	str	r3, [r7, #20]


	for(int i = 3; i < 4000; i+=4){
 8003a68:	2303      	movs	r3, #3
 8003a6a:	613b      	str	r3, [r7, #16]
 8003a6c:	e00e      	b.n	8003a8c <Wobble_Detect+0x48>
		angle_pitch_error_sum += Old_Data_stack.olddata[i];
 8003a6e:	4a58      	ldr	r2, [pc, #352]	@ (8003bd0 <Wobble_Detect+0x18c>)
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	4413      	add	r3, r2
 8003a76:	edd3 7a00 	vldr	s15, [r3]
 8003a7a:	ed97 7a08 	vldr	s14, [r7, #32]
 8003a7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a82:	edc7 7a08 	vstr	s15, [r7, #32]
	for(int i = 3; i < 4000; i+=4){
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	3304      	adds	r3, #4
 8003a8a:	613b      	str	r3, [r7, #16]
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8003a92:	dbec      	blt.n	8003a6e <Wobble_Detect+0x2a>
	}
	for(int i = 4; i < 4000; i+=4){
 8003a94:	2304      	movs	r3, #4
 8003a96:	60fb      	str	r3, [r7, #12]
 8003a98:	e00e      	b.n	8003ab8 <Wobble_Detect+0x74>
		angle_rool_error_sum += Old_Data_stack.olddata[i];
 8003a9a:	4a4d      	ldr	r2, [pc, #308]	@ (8003bd0 <Wobble_Detect+0x18c>)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	4413      	add	r3, r2
 8003aa2:	edd3 7a00 	vldr	s15, [r3]
 8003aa6:	ed97 7a07 	vldr	s14, [r7, #28]
 8003aaa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003aae:	edc7 7a07 	vstr	s15, [r7, #28]
	for(int i = 4; i < 4000; i+=4){
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	3304      	adds	r3, #4
 8003ab6:	60fb      	str	r3, [r7, #12]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8003abe:	dbec      	blt.n	8003a9a <Wobble_Detect+0x56>
	}
	angle_pitch_error_sum = angle_pitch_error_sum/1000;
 8003ac0:	ed97 7a08 	vldr	s14, [r7, #32]
 8003ac4:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8003bd4 <Wobble_Detect+0x190>
 8003ac8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003acc:	edc7 7a08 	vstr	s15, [r7, #32]
	angle_rool_error_sum = angle_rool_error_sum/1000;
 8003ad0:	ed97 7a07 	vldr	s14, [r7, #28]
 8003ad4:	eddf 6a3f 	vldr	s13, [pc, #252]	@ 8003bd4 <Wobble_Detect+0x190>
 8003ad8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003adc:	edc7 7a07 	vstr	s15, [r7, #28]

	for(int i = 1; i < 4000; i+=4){
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	60bb      	str	r3, [r7, #8]
 8003ae4:	e00e      	b.n	8003b04 <Wobble_Detect+0xc0>
		D_part_pitch += Old_Data_stack.olddata[i];
 8003ae6:	4a3a      	ldr	r2, [pc, #232]	@ (8003bd0 <Wobble_Detect+0x18c>)
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	4413      	add	r3, r2
 8003aee:	edd3 7a00 	vldr	s15, [r3]
 8003af2:	ed97 7a06 	vldr	s14, [r7, #24]
 8003af6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003afa:	edc7 7a06 	vstr	s15, [r7, #24]
	for(int i = 1; i < 4000; i+=4){
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	3304      	adds	r3, #4
 8003b02:	60bb      	str	r3, [r7, #8]
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8003b0a:	dbec      	blt.n	8003ae6 <Wobble_Detect+0xa2>
	}
	for(int i = 2; i < 4000; i+=4){
 8003b0c:	2302      	movs	r3, #2
 8003b0e:	607b      	str	r3, [r7, #4]
 8003b10:	e00e      	b.n	8003b30 <Wobble_Detect+0xec>
		D_part_rool += Old_Data_stack.olddata[i];
 8003b12:	4a2f      	ldr	r2, [pc, #188]	@ (8003bd0 <Wobble_Detect+0x18c>)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	4413      	add	r3, r2
 8003b1a:	edd3 7a00 	vldr	s15, [r3]
 8003b1e:	ed97 7a05 	vldr	s14, [r7, #20]
 8003b22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b26:	edc7 7a05 	vstr	s15, [r7, #20]
	for(int i = 2; i < 4000; i+=4){
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	3304      	adds	r3, #4
 8003b2e:	607b      	str	r3, [r7, #4]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8003b36:	dbec      	blt.n	8003b12 <Wobble_Detect+0xce>
	}

	if(angle_pitch_error_sum < 1 && angle_pitch_error_sum > -1){
 8003b38:	edd7 7a08 	vldr	s15, [r7, #32]
 8003b3c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003b40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b48:	d520      	bpl.n	8003b8c <Wobble_Detect+0x148>
 8003b4a:	edd7 7a08 	vldr	s15, [r7, #32]
 8003b4e:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8003b52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b5a:	dd17      	ble.n	8003b8c <Wobble_Detect+0x148>
		if(D_part_pitch > 100000){
 8003b5c:	edd7 7a06 	vldr	s15, [r7, #24]
 8003b60:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8003bd8 <Wobble_Detect+0x194>
 8003b64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b6c:	dd0e      	ble.n	8003b8c <Wobble_Detect+0x148>
			wobble_strenght = 1 + (D_part_pitch/100000);
 8003b6e:	ed97 7a06 	vldr	s14, [r7, #24]
 8003b72:	eddf 6a19 	vldr	s13, [pc, #100]	@ 8003bd8 <Wobble_Detect+0x194>
 8003b76:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b7a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003b7e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003b82:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
			MYDRON.dron_status.wobble = WOBBLE_PITCH;
 8003b86:	4b15      	ldr	r3, [pc, #84]	@ (8003bdc <Wobble_Detect+0x198>)
 8003b88:	220f      	movs	r2, #15
 8003b8a:	829a      	strh	r2, [r3, #20]
//			wobble_strenght = 1 + (D_part_rool/100000);
//			MYDRON.dron_status.wobble = WOBBLE_ROOL;
//		}
//	}

	if(wobble_strenght > 2){
 8003b8c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003b90:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8003b94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b9c:	dd02      	ble.n	8003ba4 <Wobble_Detect+0x160>
		wobble_strenght = 2;
 8003b9e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003ba2:	627b      	str	r3, [r7, #36]	@ 0x24
	}
	if(wobble_strenght < 1){
 8003ba4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003ba8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003bac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bb4:	d502      	bpl.n	8003bbc <Wobble_Detect+0x178>
		wobble_strenght = 1;
 8003bb6:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8003bba:	627b      	str	r3, [r7, #36]	@ 0x24
	}

	return wobble_strenght;
 8003bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bbe:	ee07 3a90 	vmov	s15, r3
}
 8003bc2:	eeb0 0a67 	vmov.f32	s0, s15
 8003bc6:	372c      	adds	r7, #44	@ 0x2c
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr
 8003bd0:	0000019c 	.word	0x0000019c
 8003bd4:	447a0000 	.word	0x447a0000
 8003bd8:	47c35000 	.word	0x47c35000
 8003bdc:	00000180 	.word	0x00000180

08003be0 <Wobble_handler>:

void Wobble_handler(void){
 8003be0:	b580      	push	{r7, lr}
 8003be2:	af00      	add	r7, sp, #0
	Thrust_filter(1);
 8003be4:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8003be8:	f7ff fdf6 	bl	80037d8 <Thrust_filter>
//		PID_FAC_Rool[2] = PID_FAC_Rool[2] + 1;
//		if(PID_FAC_Rool[0] < 1){
//			PID_FAC_Rool[0] = 1;
//		}
	}
}
 8003bec:	bf00      	nop
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <PID_cal>:

	*g_ax = *g_ax + PID_FAC[2]*((wanted_pitch - *g_ax) - old_error_pitch);

}

void PID_cal(float *PID_var, float *PID_FAC, uint8_t pry){//pitch = 1, rool = 2, yaw = 3
 8003bf0:	b480      	push	{r7}
 8003bf2:	b085      	sub	sp, #20
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	4613      	mov	r3, r2
 8003bfc:	71fb      	strb	r3, [r7, #7]
	switch(pry){
 8003bfe:	79fb      	ldrb	r3, [r7, #7]
 8003c00:	3b01      	subs	r3, #1
 8003c02:	2b05      	cmp	r3, #5
 8003c04:	f200 8270 	bhi.w	80040e8 <PID_cal+0x4f8>
 8003c08:	a201      	add	r2, pc, #4	@ (adr r2, 8003c10 <PID_cal+0x20>)
 8003c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c0e:	bf00      	nop
 8003c10:	08003c29 	.word	0x08003c29
 8003c14:	08003d03 	.word	0x08003d03
 8003c18:	08003ddd 	.word	0x08003ddd
 8003c1c:	08003efd 	.word	0x08003efd
 8003c20:	08003fa1 	.word	0x08003fa1
 8003c24:	08004045 	.word	0x08004045
		case 1://pitch

			*PID_var = PID_FAC[0]*(wanted_pitch - now_pitch);
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	ed93 7a00 	vldr	s14, [r3]
 8003c2e:	4ba2      	ldr	r3, [pc, #648]	@ (8003eb8 <PID_cal+0x2c8>)
 8003c30:	edd3 6a00 	vldr	s13, [r3]
 8003c34:	4ba1      	ldr	r3, [pc, #644]	@ (8003ebc <PID_cal+0x2cc>)
 8003c36:	edd3 7a00 	vldr	s15, [r3]
 8003c3a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003c3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	edc3 7a00 	vstr	s15, [r3]

			*PID_var = *PID_var + PID_FAC[1]*error_sum_pitch*looptime;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	ed93 7a00 	vldr	s14, [r3]
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	3304      	adds	r3, #4
 8003c52:	edd3 6a00 	vldr	s13, [r3]
 8003c56:	4b9a      	ldr	r3, [pc, #616]	@ (8003ec0 <PID_cal+0x2d0>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	ee07 3a90 	vmov	s15, r3
 8003c5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c62:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003c66:	4b97      	ldr	r3, [pc, #604]	@ (8003ec4 <PID_cal+0x2d4>)
 8003c68:	edd3 7a00 	vldr	s15, [r3]
 8003c6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	edc3 7a00 	vstr	s15, [r3]

			PID_FAC[3] = PID_FAC[2]*((wanted_pitch - now_pitch) - old_error_pitch);//policzenie częsci D
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	3308      	adds	r3, #8
 8003c7e:	ed93 7a00 	vldr	s14, [r3]
 8003c82:	4b8d      	ldr	r3, [pc, #564]	@ (8003eb8 <PID_cal+0x2c8>)
 8003c84:	edd3 6a00 	vldr	s13, [r3]
 8003c88:	4b8c      	ldr	r3, [pc, #560]	@ (8003ebc <PID_cal+0x2cc>)
 8003c8a:	edd3 7a00 	vldr	s15, [r3]
 8003c8e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003c92:	4b8d      	ldr	r3, [pc, #564]	@ (8003ec8 <PID_cal+0x2d8>)
 8003c94:	edd3 7a00 	vldr	s15, [r3]
 8003c98:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	330c      	adds	r3, #12
 8003ca0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ca4:	edc3 7a00 	vstr	s15, [r3]

			//FDP
			//PID_FAC[4] = (PID_FAC[4] * (FDP_D_Gain * looptime) / (1 + (FDP_D_Gain * looptime))) + (PID_FAC[5] * (1 / (1 + (FDP_D_Gain * looptime))));
			PID_FAC[4] = PID_FAC[3];//old d_fac
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	3310      	adds	r3, #16
 8003cac:	68ba      	ldr	r2, [r7, #8]
 8003cae:	68d2      	ldr	r2, [r2, #12]
 8003cb0:	601a      	str	r2, [r3, #0]

			*PID_var = *PID_var + PID_FAC[3];
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	ed93 7a00 	vldr	s14, [r3]
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	330c      	adds	r3, #12
 8003cbc:	edd3 7a00 	vldr	s15, [r3]
 8003cc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	edc3 7a00 	vstr	s15, [r3]

				if(*PID_var > 400){//PID_var jest w o/s, jezeli bendzei chcailo sie obracac szybciej niz.. przekroczy zakres pomiarowy akcelerometru
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	edd3 7a00 	vldr	s15, [r3]
 8003cd0:	ed9f 7a7e 	vldr	s14, [pc, #504]	@ 8003ecc <PID_cal+0x2dc>
 8003cd4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cdc:	dd02      	ble.n	8003ce4 <PID_cal+0xf4>
					*PID_var = 400;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	4a7b      	ldr	r2, [pc, #492]	@ (8003ed0 <PID_cal+0x2e0>)
 8003ce2:	601a      	str	r2, [r3, #0]
				}
				if(*PID_var < -400){
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	edd3 7a00 	vldr	s15, [r3]
 8003cea:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 8003ed4 <PID_cal+0x2e4>
 8003cee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cf6:	d400      	bmi.n	8003cfa <PID_cal+0x10a>
					*PID_var = -400;
				}
			break;
 8003cf8:	e1f7      	b.n	80040ea <PID_cal+0x4fa>
					*PID_var = -400;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	4a76      	ldr	r2, [pc, #472]	@ (8003ed8 <PID_cal+0x2e8>)
 8003cfe:	601a      	str	r2, [r3, #0]
			break;
 8003d00:	e1f3      	b.n	80040ea <PID_cal+0x4fa>

		case 2://rool

			*PID_var = PID_FAC[0]*(wanted_rool - now_rool);
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	ed93 7a00 	vldr	s14, [r3]
 8003d08:	4b74      	ldr	r3, [pc, #464]	@ (8003edc <PID_cal+0x2ec>)
 8003d0a:	edd3 6a00 	vldr	s13, [r3]
 8003d0e:	4b74      	ldr	r3, [pc, #464]	@ (8003ee0 <PID_cal+0x2f0>)
 8003d10:	edd3 7a00 	vldr	s15, [r3]
 8003d14:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003d18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	edc3 7a00 	vstr	s15, [r3]

			*PID_var = *PID_var + PID_FAC[1]*error_sum_rool*looptime;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	ed93 7a00 	vldr	s14, [r3]
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	3304      	adds	r3, #4
 8003d2c:	edd3 6a00 	vldr	s13, [r3]
 8003d30:	4b6c      	ldr	r3, [pc, #432]	@ (8003ee4 <PID_cal+0x2f4>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	ee07 3a90 	vmov	s15, r3
 8003d38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d3c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003d40:	4b60      	ldr	r3, [pc, #384]	@ (8003ec4 <PID_cal+0x2d4>)
 8003d42:	edd3 7a00 	vldr	s15, [r3]
 8003d46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	edc3 7a00 	vstr	s15, [r3]

			PID_FAC[3] =  PID_FAC[2]*((wanted_rool - now_rool) - old_error_rool);
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	3308      	adds	r3, #8
 8003d58:	ed93 7a00 	vldr	s14, [r3]
 8003d5c:	4b5f      	ldr	r3, [pc, #380]	@ (8003edc <PID_cal+0x2ec>)
 8003d5e:	edd3 6a00 	vldr	s13, [r3]
 8003d62:	4b5f      	ldr	r3, [pc, #380]	@ (8003ee0 <PID_cal+0x2f0>)
 8003d64:	edd3 7a00 	vldr	s15, [r3]
 8003d68:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003d6c:	4b5e      	ldr	r3, [pc, #376]	@ (8003ee8 <PID_cal+0x2f8>)
 8003d6e:	edd3 7a00 	vldr	s15, [r3]
 8003d72:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	330c      	adds	r3, #12
 8003d7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d7e:	edc3 7a00 	vstr	s15, [r3]

			//FDP
			//PID_FAC[4] = (PID_FAC[4] * (FDP_D_Gain * looptime) / (1 + (FDP_D_Gain * looptime))) + (PID_FAC[5] * (1 / (1 + (FDP_D_Gain * looptime))));
			PID_FAC[4] = PID_FAC[3];//old d_fac
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	3310      	adds	r3, #16
 8003d86:	68ba      	ldr	r2, [r7, #8]
 8003d88:	68d2      	ldr	r2, [r2, #12]
 8003d8a:	601a      	str	r2, [r3, #0]

			*PID_var = *PID_var + PID_FAC[3];
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	ed93 7a00 	vldr	s14, [r3]
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	330c      	adds	r3, #12
 8003d96:	edd3 7a00 	vldr	s15, [r3]
 8003d9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	edc3 7a00 	vstr	s15, [r3]

			if(*PID_var > 400){
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	edd3 7a00 	vldr	s15, [r3]
 8003daa:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8003ecc <PID_cal+0x2dc>
 8003dae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003db2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003db6:	dd02      	ble.n	8003dbe <PID_cal+0x1ce>
				*PID_var = 400;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	4a45      	ldr	r2, [pc, #276]	@ (8003ed0 <PID_cal+0x2e0>)
 8003dbc:	601a      	str	r2, [r3, #0]
			}
			if(*PID_var < -400){
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	edd3 7a00 	vldr	s15, [r3]
 8003dc4:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 8003ed4 <PID_cal+0x2e4>
 8003dc8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003dcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dd0:	d400      	bmi.n	8003dd4 <PID_cal+0x1e4>
				*PID_var = -400;
			}
			break;
 8003dd2:	e18a      	b.n	80040ea <PID_cal+0x4fa>
				*PID_var = -400;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	4a40      	ldr	r2, [pc, #256]	@ (8003ed8 <PID_cal+0x2e8>)
 8003dd8:	601a      	str	r2, [r3, #0]
			break;
 8003dda:	e186      	b.n	80040ea <PID_cal+0x4fa>

		case 3:

			*PID_var = PID_FAC[0]*(wanted_yaw - now_yaw);
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	ed93 7a00 	vldr	s14, [r3]
 8003de2:	4b42      	ldr	r3, [pc, #264]	@ (8003eec <PID_cal+0x2fc>)
 8003de4:	edd3 6a00 	vldr	s13, [r3]
 8003de8:	4b41      	ldr	r3, [pc, #260]	@ (8003ef0 <PID_cal+0x300>)
 8003dea:	edd3 7a00 	vldr	s15, [r3]
 8003dee:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003df2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	edc3 7a00 	vstr	s15, [r3]

			*PID_var = *PID_var + PID_FAC[1]*error_sum_yaw*looptime;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	ed93 7a00 	vldr	s14, [r3]
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	3304      	adds	r3, #4
 8003e06:	edd3 6a00 	vldr	s13, [r3]
 8003e0a:	4b3a      	ldr	r3, [pc, #232]	@ (8003ef4 <PID_cal+0x304>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	ee07 3a90 	vmov	s15, r3
 8003e12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e16:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003e1a:	4b2a      	ldr	r3, [pc, #168]	@ (8003ec4 <PID_cal+0x2d4>)
 8003e1c:	edd3 7a00 	vldr	s15, [r3]
 8003e20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	edc3 7a00 	vstr	s15, [r3]

			PID_FAC[3] = PID_FAC[2]*((wanted_yaw - now_yaw) - old_error_yaw);
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	3308      	adds	r3, #8
 8003e32:	ed93 7a00 	vldr	s14, [r3]
 8003e36:	4b2d      	ldr	r3, [pc, #180]	@ (8003eec <PID_cal+0x2fc>)
 8003e38:	edd3 6a00 	vldr	s13, [r3]
 8003e3c:	4b2c      	ldr	r3, [pc, #176]	@ (8003ef0 <PID_cal+0x300>)
 8003e3e:	edd3 7a00 	vldr	s15, [r3]
 8003e42:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003e46:	4b2c      	ldr	r3, [pc, #176]	@ (8003ef8 <PID_cal+0x308>)
 8003e48:	edd3 7a00 	vldr	s15, [r3]
 8003e4c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	330c      	adds	r3, #12
 8003e54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e58:	edc3 7a00 	vstr	s15, [r3]

			//FDP
			//PID_FAC[4] = (PID_FAC[4] * (FDP_D_Gain * looptime) / (1 + (FDP_D_Gain * looptime))) + (PID_FAC[5] * (1 / (1 + (FDP_D_Gain * looptime))));
			PID_FAC[4] = PID_FAC[3];//old d_fac
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	3310      	adds	r3, #16
 8003e60:	68ba      	ldr	r2, [r7, #8]
 8003e62:	68d2      	ldr	r2, [r2, #12]
 8003e64:	601a      	str	r2, [r3, #0]

			*PID_var = *PID_var + PID_FAC[3];
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	ed93 7a00 	vldr	s14, [r3]
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	330c      	adds	r3, #12
 8003e70:	edd3 7a00 	vldr	s15, [r3]
 8003e74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	edc3 7a00 	vstr	s15, [r3]

			if(*PID_var > 400){
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	edd3 7a00 	vldr	s15, [r3]
 8003e84:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8003ecc <PID_cal+0x2dc>
 8003e88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e90:	dd02      	ble.n	8003e98 <PID_cal+0x2a8>
				*PID_var = 400;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	4a0e      	ldr	r2, [pc, #56]	@ (8003ed0 <PID_cal+0x2e0>)
 8003e96:	601a      	str	r2, [r3, #0]
			}
			if(*PID_var < -400){
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	edd3 7a00 	vldr	s15, [r3]
 8003e9e:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8003ed4 <PID_cal+0x2e4>
 8003ea2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003eaa:	d400      	bmi.n	8003eae <PID_cal+0x2be>
				*PID_var = -400;
			}
			break;
 8003eac:	e11d      	b.n	80040ea <PID_cal+0x4fa>
				*PID_var = -400;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	4a09      	ldr	r2, [pc, #36]	@ (8003ed8 <PID_cal+0x2e8>)
 8003eb2:	601a      	str	r2, [r3, #0]
			break;
 8003eb4:	e119      	b.n	80040ea <PID_cal+0x4fa>
 8003eb6:	bf00      	nop
 8003eb8:	00004068 	.word	0x00004068
 8003ebc:	00004078 	.word	0x00004078
 8003ec0:	0000409c 	.word	0x0000409c
 8003ec4:	0801e58c 	.word	0x0801e58c
 8003ec8:	00004084 	.word	0x00004084
 8003ecc:	43c80000 	.word	0x43c80000
 8003ed0:	43c80000 	.word	0x43c80000
 8003ed4:	c3c80000 	.word	0xc3c80000
 8003ed8:	c3c80000 	.word	0xc3c80000
 8003edc:	0000406c 	.word	0x0000406c
 8003ee0:	0000407c 	.word	0x0000407c
 8003ee4:	000040a0 	.word	0x000040a0
 8003ee8:	00004088 	.word	0x00004088
 8003eec:	00004070 	.word	0x00004070
 8003ef0:	00004080 	.word	0x00004080
 8003ef4:	000040a4 	.word	0x000040a4
 8003ef8:	0000408c 	.word	0x0000408c

		case 4:// angular rates pitch

			*PID_var = PID_FAC[0]*(pid_pitch - gx);
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	ed93 7a00 	vldr	s14, [r3]
 8003f02:	4b7d      	ldr	r3, [pc, #500]	@ (80040f8 <PID_cal+0x508>)
 8003f04:	edd3 6a00 	vldr	s13, [r3]
 8003f08:	4b7c      	ldr	r3, [pc, #496]	@ (80040fc <PID_cal+0x50c>)
 8003f0a:	edd3 7a00 	vldr	s15, [r3]
 8003f0e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003f12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	edc3 7a00 	vstr	s15, [r3]

			*PID_var = *PID_var + PID_FAC[1]*error_sum_angular_rate_pitch*looptime;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	ed93 7a00 	vldr	s14, [r3]
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	3304      	adds	r3, #4
 8003f26:	edd3 6a00 	vldr	s13, [r3]
 8003f2a:	4b75      	ldr	r3, [pc, #468]	@ (8004100 <PID_cal+0x510>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	ee07 3a90 	vmov	s15, r3
 8003f32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f36:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003f3a:	4b72      	ldr	r3, [pc, #456]	@ (8004104 <PID_cal+0x514>)
 8003f3c:	edd3 7a00 	vldr	s15, [r3]
 8003f40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	edc3 7a00 	vstr	s15, [r3]


			PID_FAC[3] = PID_FAC[2]*((pid_pitch - gx) - old_error_angular_rate_pitch);//policzenie częsci D
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	3308      	adds	r3, #8
 8003f52:	ed93 7a00 	vldr	s14, [r3]
 8003f56:	4b68      	ldr	r3, [pc, #416]	@ (80040f8 <PID_cal+0x508>)
 8003f58:	edd3 6a00 	vldr	s13, [r3]
 8003f5c:	4b67      	ldr	r3, [pc, #412]	@ (80040fc <PID_cal+0x50c>)
 8003f5e:	edd3 7a00 	vldr	s15, [r3]
 8003f62:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003f66:	4b68      	ldr	r3, [pc, #416]	@ (8004108 <PID_cal+0x518>)
 8003f68:	edd3 7a00 	vldr	s15, [r3]
 8003f6c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	330c      	adds	r3, #12
 8003f74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f78:	edc3 7a00 	vstr	s15, [r3]

			//FDP
			//PID_FAC[4] = (PID_FAC[4] * (FDP_D_Gain_AR * looptime) / (1 + (FDP_D_Gain_AR * looptime))) + (PID_FAC[5] * (1 / (1 + (FDP_D_Gain_AR * looptime))));
			PID_FAC[4] = PID_FAC[3];//old d_fac
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	3310      	adds	r3, #16
 8003f80:	68ba      	ldr	r2, [r7, #8]
 8003f82:	68d2      	ldr	r2, [r2, #12]
 8003f84:	601a      	str	r2, [r3, #0]

			*PID_var = *PID_var + PID_FAC[3];
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	ed93 7a00 	vldr	s14, [r3]
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	330c      	adds	r3, #12
 8003f90:	edd3 7a00 	vldr	s15, [r3]
 8003f94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	edc3 7a00 	vstr	s15, [r3]

			break;
 8003f9e:	e0a4      	b.n	80040ea <PID_cal+0x4fa>

		case 5:// angular rates rool

			*PID_var = PID_FAC[0]*(pid_rool - gy);
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	ed93 7a00 	vldr	s14, [r3]
 8003fa6:	4b59      	ldr	r3, [pc, #356]	@ (800410c <PID_cal+0x51c>)
 8003fa8:	edd3 6a00 	vldr	s13, [r3]
 8003fac:	4b58      	ldr	r3, [pc, #352]	@ (8004110 <PID_cal+0x520>)
 8003fae:	edd3 7a00 	vldr	s15, [r3]
 8003fb2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003fb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	edc3 7a00 	vstr	s15, [r3]

			*PID_var = *PID_var + PID_FAC[1]*error_sum_angular_rate_rool*looptime;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	ed93 7a00 	vldr	s14, [r3]
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	3304      	adds	r3, #4
 8003fca:	edd3 6a00 	vldr	s13, [r3]
 8003fce:	4b51      	ldr	r3, [pc, #324]	@ (8004114 <PID_cal+0x524>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	ee07 3a90 	vmov	s15, r3
 8003fd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fda:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003fde:	4b49      	ldr	r3, [pc, #292]	@ (8004104 <PID_cal+0x514>)
 8003fe0:	edd3 7a00 	vldr	s15, [r3]
 8003fe4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003fe8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	edc3 7a00 	vstr	s15, [r3]

			PID_FAC[3] =  PID_FAC[2]*((pid_rool - gy) - old_error_angular_rate_rool);
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	3308      	adds	r3, #8
 8003ff6:	ed93 7a00 	vldr	s14, [r3]
 8003ffa:	4b44      	ldr	r3, [pc, #272]	@ (800410c <PID_cal+0x51c>)
 8003ffc:	edd3 6a00 	vldr	s13, [r3]
 8004000:	4b43      	ldr	r3, [pc, #268]	@ (8004110 <PID_cal+0x520>)
 8004002:	edd3 7a00 	vldr	s15, [r3]
 8004006:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800400a:	4b43      	ldr	r3, [pc, #268]	@ (8004118 <PID_cal+0x528>)
 800400c:	edd3 7a00 	vldr	s15, [r3]
 8004010:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	330c      	adds	r3, #12
 8004018:	ee67 7a27 	vmul.f32	s15, s14, s15
 800401c:	edc3 7a00 	vstr	s15, [r3]

			//FDP
			//PID_FAC[4] = (PID_FAC[4] * (FDP_D_Gain_AR * looptime) / (1 + (FDP_D_Gain_AR * looptime))) + (PID_FAC[5] * (1 / (1 + (FDP_D_Gain_AR * looptime))));
			PID_FAC[4] = PID_FAC[3];//old d_fac
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	3310      	adds	r3, #16
 8004024:	68ba      	ldr	r2, [r7, #8]
 8004026:	68d2      	ldr	r2, [r2, #12]
 8004028:	601a      	str	r2, [r3, #0]

			*PID_var = *PID_var + PID_FAC[3];
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	ed93 7a00 	vldr	s14, [r3]
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	330c      	adds	r3, #12
 8004034:	edd3 7a00 	vldr	s15, [r3]
 8004038:	ee77 7a27 	vadd.f32	s15, s14, s15
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	edc3 7a00 	vstr	s15, [r3]
			break;
 8004042:	e052      	b.n	80040ea <PID_cal+0x4fa>

		case 6:// angular rates yaw

			*PID_var = PID_FAC[0]*(pid_yaw - gz);
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	ed93 7a00 	vldr	s14, [r3]
 800404a:	4b34      	ldr	r3, [pc, #208]	@ (800411c <PID_cal+0x52c>)
 800404c:	edd3 6a00 	vldr	s13, [r3]
 8004050:	4b33      	ldr	r3, [pc, #204]	@ (8004120 <PID_cal+0x530>)
 8004052:	edd3 7a00 	vldr	s15, [r3]
 8004056:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800405a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	edc3 7a00 	vstr	s15, [r3]

			*PID_var = *PID_var + PID_FAC[1]*error_sum_angular_rate_yaw*looptime;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	ed93 7a00 	vldr	s14, [r3]
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	3304      	adds	r3, #4
 800406e:	edd3 6a00 	vldr	s13, [r3]
 8004072:	4b2c      	ldr	r3, [pc, #176]	@ (8004124 <PID_cal+0x534>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	ee07 3a90 	vmov	s15, r3
 800407a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800407e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004082:	4b20      	ldr	r3, [pc, #128]	@ (8004104 <PID_cal+0x514>)
 8004084:	edd3 7a00 	vldr	s15, [r3]
 8004088:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800408c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	edc3 7a00 	vstr	s15, [r3]

			PID_FAC[3] = PID_FAC[2]*((pid_yaw - gz) - old_error_angular_rate_yaw);
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	3308      	adds	r3, #8
 800409a:	ed93 7a00 	vldr	s14, [r3]
 800409e:	4b1f      	ldr	r3, [pc, #124]	@ (800411c <PID_cal+0x52c>)
 80040a0:	edd3 6a00 	vldr	s13, [r3]
 80040a4:	4b1e      	ldr	r3, [pc, #120]	@ (8004120 <PID_cal+0x530>)
 80040a6:	edd3 7a00 	vldr	s15, [r3]
 80040aa:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80040ae:	4b1e      	ldr	r3, [pc, #120]	@ (8004128 <PID_cal+0x538>)
 80040b0:	edd3 7a00 	vldr	s15, [r3]
 80040b4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	330c      	adds	r3, #12
 80040bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040c0:	edc3 7a00 	vstr	s15, [r3]

			//FDP
			//PID_FAC[4] = (PID_FAC[4] * (FDP_D_Gain_AR * looptime) / (1 + (FDP_D_Gain_AR * looptime))) + (PID_FAC[5] * (1 / (1 + (FDP_D_Gain_AR * looptime))));
			PID_FAC[4] = PID_FAC[3];//old d_fac
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	3310      	adds	r3, #16
 80040c8:	68ba      	ldr	r2, [r7, #8]
 80040ca:	68d2      	ldr	r2, [r2, #12]
 80040cc:	601a      	str	r2, [r3, #0]

			*PID_var = *PID_var + PID_FAC[3];
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	ed93 7a00 	vldr	s14, [r3]
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	330c      	adds	r3, #12
 80040d8:	edd3 7a00 	vldr	s15, [r3]
 80040dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	edc3 7a00 	vstr	s15, [r3]
			break;
 80040e6:	e000      	b.n	80040ea <PID_cal+0x4fa>
		default:
			break;
 80040e8:	bf00      	nop
	}
}
 80040ea:	bf00      	nop
 80040ec:	3714      	adds	r7, #20
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr
 80040f6:	bf00      	nop
 80040f8:	000040b4 	.word	0x000040b4
 80040fc:	0000000c 	.word	0x0000000c
 8004100:	000040a8 	.word	0x000040a8
 8004104:	0801e58c 	.word	0x0801e58c
 8004108:	00004090 	.word	0x00004090
 800410c:	000040bc 	.word	0x000040bc
 8004110:	00000010 	.word	0x00000010
 8004114:	000040ac 	.word	0x000040ac
 8004118:	00004094 	.word	0x00004094
 800411c:	000040b8 	.word	0x000040b8
 8004120:	00000014 	.word	0x00000014
 8004124:	000040b0 	.word	0x000040b0
 8004128:	00004098 	.word	0x00004098
 800412c:	00000000 	.word	0x00000000

08004130 <Get_batteryvalue>:

void Get_batteryvalue(void){
 8004130:	b480      	push	{r7}
 8004132:	af00      	add	r7, sp, #0
	 * 10V musi byc czyli 2,7027V
	 *	2,7027V to 3353
	 *	3400
	*/

	MYDRON.batterysize = (analogmess - 3353)/7.42;
 8004134:	4b1c      	ldr	r3, [pc, #112]	@ (80041a8 <Get_batteryvalue+0x78>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f6a3 5319 	subw	r3, r3, #3353	@ 0xd19
 800413c:	ee07 3a90 	vmov	s15, r3
 8004140:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8004144:	ed9f 5b16 	vldr	d5, [pc, #88]	@ 80041a0 <Get_batteryvalue+0x70>
 8004148:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800414c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8004150:	ee17 3a90 	vmov	r3, s15
 8004154:	b29a      	uxth	r2, r3
 8004156:	4b15      	ldr	r3, [pc, #84]	@ (80041ac <Get_batteryvalue+0x7c>)
 8004158:	801a      	strh	r2, [r3, #0]
	if(MYDRON.batterysize >= 100){
 800415a:	4b14      	ldr	r3, [pc, #80]	@ (80041ac <Get_batteryvalue+0x7c>)
 800415c:	881b      	ldrh	r3, [r3, #0]
 800415e:	2b63      	cmp	r3, #99	@ 0x63
 8004160:	d902      	bls.n	8004168 <Get_batteryvalue+0x38>
		MYDRON.batterysize = 100;
 8004162:	4b12      	ldr	r3, [pc, #72]	@ (80041ac <Get_batteryvalue+0x7c>)
 8004164:	2264      	movs	r2, #100	@ 0x64
 8004166:	801a      	strh	r2, [r3, #0]
	}

	if(MYDRON.batterysize < 25){
 8004168:	4b10      	ldr	r3, [pc, #64]	@ (80041ac <Get_batteryvalue+0x7c>)
 800416a:	881b      	ldrh	r3, [r3, #0]
 800416c:	2b18      	cmp	r3, #24
 800416e:	d802      	bhi.n	8004176 <Get_batteryvalue+0x46>
		MYDRON.dron_status.Battery = DRON_BATTERY_RUN_OUT;
 8004170:	4b0e      	ldr	r3, [pc, #56]	@ (80041ac <Get_batteryvalue+0x7c>)
 8004172:	2207      	movs	r2, #7
 8004174:	819a      	strh	r2, [r3, #12]
	}
	if(MYDRON.batterysize <= 10){
 8004176:	4b0d      	ldr	r3, [pc, #52]	@ (80041ac <Get_batteryvalue+0x7c>)
 8004178:	881b      	ldrh	r3, [r3, #0]
 800417a:	2b0a      	cmp	r3, #10
 800417c:	d802      	bhi.n	8004184 <Get_batteryvalue+0x54>
		MYDRON.dron_status.Battery = DRON_BATTERY_CRIT_VAL;
 800417e:	4b0b      	ldr	r3, [pc, #44]	@ (80041ac <Get_batteryvalue+0x7c>)
 8004180:	2209      	movs	r2, #9
 8004182:	819a      	strh	r2, [r3, #12]
	}
	if(MYDRON.batterysize >= 25){
 8004184:	4b09      	ldr	r3, [pc, #36]	@ (80041ac <Get_batteryvalue+0x7c>)
 8004186:	881b      	ldrh	r3, [r3, #0]
 8004188:	2b18      	cmp	r3, #24
 800418a:	d902      	bls.n	8004192 <Get_batteryvalue+0x62>
		MYDRON.dron_status.Battery = DRON_BATTERY_OK;
 800418c:	4b07      	ldr	r3, [pc, #28]	@ (80041ac <Get_batteryvalue+0x7c>)
 800418e:	2208      	movs	r2, #8
 8004190:	819a      	strh	r2, [r3, #12]
	}
}
 8004192:	bf00      	nop
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr
 800419c:	f3af 8000 	nop.w
 80041a0:	7ae147ae 	.word	0x7ae147ae
 80041a4:	401dae14 	.word	0x401dae14
 80041a8:	24000eb0 	.word	0x24000eb0
 80041ac:	00000180 	.word	0x00000180

080041b0 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80041b4:	2200      	movs	r2, #0
 80041b6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80041ba:	4802      	ldr	r0, [pc, #8]	@ (80041c4 <SELECT+0x14>)
 80041bc:	f00a f80c 	bl	800e1d8 <HAL_GPIO_WritePin>
	//HAL_Delay(1);
}
 80041c0:	bf00      	nop
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	58020c00 	.word	0x58020c00

080041c8 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80041cc:	2201      	movs	r2, #1
 80041ce:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80041d2:	4802      	ldr	r0, [pc, #8]	@ (80041dc <DESELECT+0x14>)
 80041d4:	f00a f800 	bl	800e1d8 <HAL_GPIO_WritePin>
	//HAL_Delay(1);
}
 80041d8:	bf00      	nop
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	58020c00 	.word	0x58020c00

080041e0 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b082      	sub	sp, #8
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	4603      	mov	r3, r0
 80041e8:	71fb      	strb	r3, [r7, #7]
	//while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
	while((DMA1_Stream0->FCR&0x38) != 32){}
 80041ea:	bf00      	nop
 80041ec:	4b07      	ldr	r3, [pc, #28]	@ (800420c <SPI_TxByte+0x2c>)
 80041ee:	695b      	ldr	r3, [r3, #20]
 80041f0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80041f4:	2b20      	cmp	r3, #32
 80041f6:	d1f9      	bne.n	80041ec <SPI_TxByte+0xc>


	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80041f8:	1df9      	adds	r1, r7, #7
 80041fa:	2364      	movs	r3, #100	@ 0x64
 80041fc:	2201      	movs	r2, #1
 80041fe:	4804      	ldr	r0, [pc, #16]	@ (8004210 <SPI_TxByte+0x30>)
 8004200:	f010 f946 	bl	8014490 <HAL_SPI_Transmit>
	//HAL_SPI_Transmit_DMA(HSPI_SDCARD, &data, 1);
}
 8004204:	bf00      	nop
 8004206:	3708      	adds	r7, #8
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}
 800420c:	40020010 	.word	0x40020010
 8004210:	240001ec 	.word	0x240001ec

08004214 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b082      	sub	sp, #8
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	460b      	mov	r3, r1
 800421e:	807b      	strh	r3, [r7, #2]
	//while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));//czekanie na zakonczenie tramnsmisji DMA?
	while((DMA1_Stream0->FCR&0x38) != 32){}
 8004220:	bf00      	nop
 8004222:	4b08      	ldr	r3, [pc, #32]	@ (8004244 <SPI_TxBuffer+0x30>)
 8004224:	695b      	ldr	r3, [r3, #20]
 8004226:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800422a:	2b20      	cmp	r3, #32
 800422c:	d1f9      	bne.n	8004222 <SPI_TxBuffer+0xe>
	//HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
	HAL_SPI_Transmit_DMA(HSPI_SDCARD, buffer, len);
 800422e:	887b      	ldrh	r3, [r7, #2]
 8004230:	461a      	mov	r2, r3
 8004232:	6879      	ldr	r1, [r7, #4]
 8004234:	4804      	ldr	r0, [pc, #16]	@ (8004248 <SPI_TxBuffer+0x34>)
 8004236:	f011 f8c5 	bl	80153c4 <HAL_SPI_Transmit_DMA>
}
 800423a:	bf00      	nop
 800423c:	3708      	adds	r7, #8
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
 8004242:	bf00      	nop
 8004244:	40020010 	.word	0x40020010
 8004248:	240001ec 	.word	0x240001ec

0800424c <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b084      	sub	sp, #16
 8004250:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8004252:	23ff      	movs	r3, #255	@ 0xff
 8004254:	71fb      	strb	r3, [r7, #7]

	//while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
	while((DMA1_Stream0->FCR&0x38) != 32){}
 8004256:	bf00      	nop
 8004258:	4b09      	ldr	r3, [pc, #36]	@ (8004280 <SPI_RxByte+0x34>)
 800425a:	695b      	ldr	r3, [r3, #20]
 800425c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004260:	2b20      	cmp	r3, #32
 8004262:	d1f9      	bne.n	8004258 <SPI_RxByte+0xc>

	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8004264:	1dba      	adds	r2, r7, #6
 8004266:	1df9      	adds	r1, r7, #7
 8004268:	2364      	movs	r3, #100	@ 0x64
 800426a:	9300      	str	r3, [sp, #0]
 800426c:	2301      	movs	r3, #1
 800426e:	4805      	ldr	r0, [pc, #20]	@ (8004284 <SPI_RxByte+0x38>)
 8004270:	f010 fd6e 	bl	8014d50 <HAL_SPI_TransmitReceive>

	return data;
 8004274:	79bb      	ldrb	r3, [r7, #6]
}
 8004276:	4618      	mov	r0, r3
 8004278:	3708      	adds	r7, #8
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	40020010 	.word	0x40020010
 8004284:	240001ec 	.word	0x240001ec

08004288 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b082      	sub	sp, #8
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8004290:	f7ff ffdc 	bl	800424c <SPI_RxByte>
 8004294:	4603      	mov	r3, r0
 8004296:	461a      	mov	r2, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	701a      	strb	r2, [r3, #0]
}
 800429c:	bf00      	nop
 800429e:	3708      	adds	r7, #8
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}

080042a4 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b082      	sub	sp, #8
 80042a8:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 80042aa:	4b0a      	ldr	r3, [pc, #40]	@ (80042d4 <SD_ReadyWait+0x30>)
 80042ac:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80042b0:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 80042b2:	f7ff ffcb 	bl	800424c <SPI_RxByte>
 80042b6:	4603      	mov	r3, r0
 80042b8:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 80042ba:	79fb      	ldrb	r3, [r7, #7]
 80042bc:	2bff      	cmp	r3, #255	@ 0xff
 80042be:	d004      	beq.n	80042ca <SD_ReadyWait+0x26>
 80042c0:	4b04      	ldr	r3, [pc, #16]	@ (80042d4 <SD_ReadyWait+0x30>)
 80042c2:	881b      	ldrh	r3, [r3, #0]
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d1f3      	bne.n	80042b2 <SD_ReadyWait+0xe>

	return res;
 80042ca:	79fb      	ldrb	r3, [r7, #7]
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3708      	adds	r7, #8
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	2400037c 	.word	0x2400037c

080042d8 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 80042de:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 80042e2:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 80042e4:	f7ff ff70 	bl	80041c8 <DESELECT>
	for(int i = 0; i < 10; i++)
 80042e8:	2300      	movs	r3, #0
 80042ea:	60bb      	str	r3, [r7, #8]
 80042ec:	e005      	b.n	80042fa <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 80042ee:	20ff      	movs	r0, #255	@ 0xff
 80042f0:	f7ff ff76 	bl	80041e0 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	3301      	adds	r3, #1
 80042f8:	60bb      	str	r3, [r7, #8]
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	2b09      	cmp	r3, #9
 80042fe:	ddf6      	ble.n	80042ee <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8004300:	f7ff ff56 	bl	80041b0 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8004304:	2340      	movs	r3, #64	@ 0x40
 8004306:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8004308:	2300      	movs	r3, #0
 800430a:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 800430c:	2300      	movs	r3, #0
 800430e:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8004310:	2300      	movs	r3, #0
 8004312:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8004314:	2300      	movs	r3, #0
 8004316:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8004318:	2395      	movs	r3, #149	@ 0x95
 800431a:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 800431c:	463b      	mov	r3, r7
 800431e:	2106      	movs	r1, #6
 8004320:	4618      	mov	r0, r3
 8004322:	f7ff ff77 	bl	8004214 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8004326:	e002      	b.n	800432e <SD_PowerOn+0x56>
	{
		cnt--;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	3b01      	subs	r3, #1
 800432c:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 800432e:	f7ff ff8d 	bl	800424c <SPI_RxByte>
 8004332:	4603      	mov	r3, r0
 8004334:	2b01      	cmp	r3, #1
 8004336:	d002      	beq.n	800433e <SD_PowerOn+0x66>
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d1f4      	bne.n	8004328 <SD_PowerOn+0x50>
	}

	DESELECT();
 800433e:	f7ff ff43 	bl	80041c8 <DESELECT>
	SPI_TxByte(0XFF);
 8004342:	20ff      	movs	r0, #255	@ 0xff
 8004344:	f7ff ff4c 	bl	80041e0 <SPI_TxByte>

	PowerFlag = 1;
 8004348:	4b03      	ldr	r3, [pc, #12]	@ (8004358 <SD_PowerOn+0x80>)
 800434a:	2201      	movs	r2, #1
 800434c:	701a      	strb	r2, [r3, #0]
}
 800434e:	bf00      	nop
 8004350:	3710      	adds	r7, #16
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	24000195 	.word	0x24000195

0800435c <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 800435c:	b480      	push	{r7}
 800435e:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8004360:	4b03      	ldr	r3, [pc, #12]	@ (8004370 <SD_PowerOff+0x14>)
 8004362:	2200      	movs	r2, #0
 8004364:	701a      	strb	r2, [r3, #0]
}
 8004366:	bf00      	nop
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr
 8004370:	24000195 	.word	0x24000195

08004374 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8004374:	b480      	push	{r7}
 8004376:	af00      	add	r7, sp, #0
	return PowerFlag;
 8004378:	4b03      	ldr	r3, [pc, #12]	@ (8004388 <SD_CheckPower+0x14>)
 800437a:	781b      	ldrb	r3, [r3, #0]
}
 800437c:	4618      	mov	r0, r3
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr
 8004386:	bf00      	nop
 8004388:	24000195 	.word	0x24000195

0800438c <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b084      	sub	sp, #16
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 10;
 8004396:	4b14      	ldr	r3, [pc, #80]	@ (80043e8 <SD_RxDataBlock+0x5c>)
 8004398:	220a      	movs	r2, #10
 800439a:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 800439c:	f7ff ff56 	bl	800424c <SPI_RxByte>
 80043a0:	4603      	mov	r3, r0
 80043a2:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 80043a4:	7bfb      	ldrb	r3, [r7, #15]
 80043a6:	2bff      	cmp	r3, #255	@ 0xff
 80043a8:	d104      	bne.n	80043b4 <SD_RxDataBlock+0x28>
 80043aa:	4b0f      	ldr	r3, [pc, #60]	@ (80043e8 <SD_RxDataBlock+0x5c>)
 80043ac:	881b      	ldrh	r3, [r3, #0]
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d1f3      	bne.n	800439c <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 80043b4:	7bfb      	ldrb	r3, [r7, #15]
 80043b6:	2bfe      	cmp	r3, #254	@ 0xfe
 80043b8:	d001      	beq.n	80043be <SD_RxDataBlock+0x32>
 80043ba:	2300      	movs	r3, #0
 80043bc:	e00f      	b.n	80043de <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	1c5a      	adds	r2, r3, #1
 80043c2:	607a      	str	r2, [r7, #4]
 80043c4:	4618      	mov	r0, r3
 80043c6:	f7ff ff5f 	bl	8004288 <SPI_RxBytePtr>
	} while(len--);
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	1e5a      	subs	r2, r3, #1
 80043ce:	603a      	str	r2, [r7, #0]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d1f4      	bne.n	80043be <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 80043d4:	f7ff ff3a 	bl	800424c <SPI_RxByte>
	SPI_RxByte();
 80043d8:	f7ff ff38 	bl	800424c <SPI_RxByte>

	return TRUE;
 80043dc:	2301      	movs	r3, #1
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3710      	adds	r7, #16
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	24000378 	.word	0x24000378

080043ec <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b084      	sub	sp, #16
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	460b      	mov	r3, r1
 80043f6:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 80043f8:	2300      	movs	r3, #0
 80043fa:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 80043fc:	f7ff ff52 	bl	80042a4 <SD_ReadyWait>
 8004400:	4603      	mov	r3, r0
 8004402:	2bff      	cmp	r3, #255	@ 0xff
 8004404:	d001      	beq.n	800440a <SD_TxDataBlock+0x1e>
 8004406:	2300      	movs	r3, #0
 8004408:	e02f      	b.n	800446a <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 800440a:	78fb      	ldrb	r3, [r7, #3]
 800440c:	4618      	mov	r0, r3
 800440e:	f7ff fee7 	bl	80041e0 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8004412:	78fb      	ldrb	r3, [r7, #3]
 8004414:	2bfd      	cmp	r3, #253	@ 0xfd
 8004416:	d020      	beq.n	800445a <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8004418:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f7ff fef9 	bl	8004214 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8004422:	f7ff ff13 	bl	800424c <SPI_RxByte>
		SPI_RxByte();
 8004426:	f7ff ff11 	bl	800424c <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 800442a:	e00b      	b.n	8004444 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 800442c:	f7ff ff0e 	bl	800424c <SPI_RxByte>
 8004430:	4603      	mov	r3, r0
 8004432:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8004434:	7bfb      	ldrb	r3, [r7, #15]
 8004436:	f003 031f 	and.w	r3, r3, #31
 800443a:	2b05      	cmp	r3, #5
 800443c:	d006      	beq.n	800444c <SD_TxDataBlock+0x60>
			i++;
 800443e:	7bbb      	ldrb	r3, [r7, #14]
 8004440:	3301      	adds	r3, #1
 8004442:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8004444:	7bbb      	ldrb	r3, [r7, #14]
 8004446:	2b40      	cmp	r3, #64	@ 0x40
 8004448:	d9f0      	bls.n	800442c <SD_TxDataBlock+0x40>
 800444a:	e000      	b.n	800444e <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 800444c:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 800444e:	bf00      	nop
 8004450:	f7ff fefc 	bl	800424c <SPI_RxByte>
 8004454:	4603      	mov	r3, r0
 8004456:	2b00      	cmp	r3, #0
 8004458:	d0fa      	beq.n	8004450 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 800445a:	7bfb      	ldrb	r3, [r7, #15]
 800445c:	f003 031f 	and.w	r3, r3, #31
 8004460:	2b05      	cmp	r3, #5
 8004462:	d101      	bne.n	8004468 <SD_TxDataBlock+0x7c>
 8004464:	2301      	movs	r3, #1
 8004466:	e000      	b.n	800446a <SD_TxDataBlock+0x7e>

	return FALSE;
 8004468:	2300      	movs	r3, #0
}
 800446a:	4618      	mov	r0, r3
 800446c:	3710      	adds	r7, #16
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}

08004472 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8004472:	b580      	push	{r7, lr}
 8004474:	b084      	sub	sp, #16
 8004476:	af00      	add	r7, sp, #0
 8004478:	4603      	mov	r3, r0
 800447a:	6039      	str	r1, [r7, #0]
 800447c:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 800447e:	f7ff ff11 	bl	80042a4 <SD_ReadyWait>
 8004482:	4603      	mov	r3, r0
 8004484:	2bff      	cmp	r3, #255	@ 0xff
 8004486:	d001      	beq.n	800448c <SD_SendCmd+0x1a>
 8004488:	23ff      	movs	r3, #255	@ 0xff
 800448a:	e042      	b.n	8004512 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 800448c:	79fb      	ldrb	r3, [r7, #7]
 800448e:	4618      	mov	r0, r3
 8004490:	f7ff fea6 	bl	80041e0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	0e1b      	lsrs	r3, r3, #24
 8004498:	b2db      	uxtb	r3, r3
 800449a:	4618      	mov	r0, r3
 800449c:	f7ff fea0 	bl	80041e0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	0c1b      	lsrs	r3, r3, #16
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	4618      	mov	r0, r3
 80044a8:	f7ff fe9a 	bl	80041e0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	0a1b      	lsrs	r3, r3, #8
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	4618      	mov	r0, r3
 80044b4:	f7ff fe94 	bl	80041e0 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	4618      	mov	r0, r3
 80044be:	f7ff fe8f 	bl	80041e0 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 80044c2:	79fb      	ldrb	r3, [r7, #7]
 80044c4:	2b40      	cmp	r3, #64	@ 0x40
 80044c6:	d102      	bne.n	80044ce <SD_SendCmd+0x5c>
 80044c8:	2395      	movs	r3, #149	@ 0x95
 80044ca:	73fb      	strb	r3, [r7, #15]
 80044cc:	e007      	b.n	80044de <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 80044ce:	79fb      	ldrb	r3, [r7, #7]
 80044d0:	2b48      	cmp	r3, #72	@ 0x48
 80044d2:	d102      	bne.n	80044da <SD_SendCmd+0x68>
 80044d4:	2387      	movs	r3, #135	@ 0x87
 80044d6:	73fb      	strb	r3, [r7, #15]
 80044d8:	e001      	b.n	80044de <SD_SendCmd+0x6c>
	else crc = 1;
 80044da:	2301      	movs	r3, #1
 80044dc:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 80044de:	7bfb      	ldrb	r3, [r7, #15]
 80044e0:	4618      	mov	r0, r3
 80044e2:	f7ff fe7d 	bl	80041e0 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 80044e6:	79fb      	ldrb	r3, [r7, #7]
 80044e8:	2b4c      	cmp	r3, #76	@ 0x4c
 80044ea:	d101      	bne.n	80044f0 <SD_SendCmd+0x7e>
 80044ec:	f7ff feae 	bl	800424c <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 80044f0:	230a      	movs	r3, #10
 80044f2:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 80044f4:	f7ff feaa 	bl	800424c <SPI_RxByte>
 80044f8:	4603      	mov	r3, r0
 80044fa:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 80044fc:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8004500:	2b00      	cmp	r3, #0
 8004502:	da05      	bge.n	8004510 <SD_SendCmd+0x9e>
 8004504:	7bbb      	ldrb	r3, [r7, #14]
 8004506:	3b01      	subs	r3, #1
 8004508:	73bb      	strb	r3, [r7, #14]
 800450a:	7bbb      	ldrb	r3, [r7, #14]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d1f1      	bne.n	80044f4 <SD_SendCmd+0x82>

	return res;
 8004510:	7b7b      	ldrb	r3, [r7, #13]
}
 8004512:	4618      	mov	r0, r3
 8004514:	3710      	adds	r7, #16
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
	...

0800451c <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 800451c:	b590      	push	{r4, r7, lr}
 800451e:	b085      	sub	sp, #20
 8004520:	af00      	add	r7, sp, #0
 8004522:	4603      	mov	r3, r0
 8004524:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8004526:	79fb      	ldrb	r3, [r7, #7]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d001      	beq.n	8004530 <SD_disk_initialize+0x14>
 800452c:	2301      	movs	r3, #1
 800452e:	e0d6      	b.n	80046de <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8004530:	4b6d      	ldr	r3, [pc, #436]	@ (80046e8 <SD_disk_initialize+0x1cc>)
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	b2db      	uxtb	r3, r3
 8004536:	f003 0302 	and.w	r3, r3, #2
 800453a:	2b00      	cmp	r3, #0
 800453c:	d003      	beq.n	8004546 <SD_disk_initialize+0x2a>
 800453e:	4b6a      	ldr	r3, [pc, #424]	@ (80046e8 <SD_disk_initialize+0x1cc>)
 8004540:	781b      	ldrb	r3, [r3, #0]
 8004542:	b2db      	uxtb	r3, r3
 8004544:	e0cb      	b.n	80046de <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 8004546:	f7ff fec7 	bl	80042d8 <SD_PowerOn>

	/* slave select */
	SELECT();
 800454a:	f7ff fe31 	bl	80041b0 <SELECT>

	/* check disk type */
	type = 0;
 800454e:	2300      	movs	r3, #0
 8004550:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8004552:	2100      	movs	r1, #0
 8004554:	2040      	movs	r0, #64	@ 0x40
 8004556:	f7ff ff8c 	bl	8004472 <SD_SendCmd>
 800455a:	4603      	mov	r3, r0
 800455c:	2b01      	cmp	r3, #1
 800455e:	f040 80a6 	bne.w	80046ae <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8004562:	4b62      	ldr	r3, [pc, #392]	@ (80046ec <SD_disk_initialize+0x1d0>)
 8004564:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004568:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800456a:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800456e:	2048      	movs	r0, #72	@ 0x48
 8004570:	f7ff ff7f 	bl	8004472 <SD_SendCmd>
 8004574:	4603      	mov	r3, r0
 8004576:	2b01      	cmp	r3, #1
 8004578:	d158      	bne.n	800462c <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 800457a:	2300      	movs	r3, #0
 800457c:	73fb      	strb	r3, [r7, #15]
 800457e:	e00c      	b.n	800459a <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8004580:	7bfc      	ldrb	r4, [r7, #15]
 8004582:	f7ff fe63 	bl	800424c <SPI_RxByte>
 8004586:	4603      	mov	r3, r0
 8004588:	461a      	mov	r2, r3
 800458a:	f104 0310 	add.w	r3, r4, #16
 800458e:	443b      	add	r3, r7
 8004590:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8004594:	7bfb      	ldrb	r3, [r7, #15]
 8004596:	3301      	adds	r3, #1
 8004598:	73fb      	strb	r3, [r7, #15]
 800459a:	7bfb      	ldrb	r3, [r7, #15]
 800459c:	2b03      	cmp	r3, #3
 800459e:	d9ef      	bls.n	8004580 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80045a0:	7abb      	ldrb	r3, [r7, #10]
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	f040 8083 	bne.w	80046ae <SD_disk_initialize+0x192>
 80045a8:	7afb      	ldrb	r3, [r7, #11]
 80045aa:	2baa      	cmp	r3, #170	@ 0xaa
 80045ac:	d17f      	bne.n	80046ae <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80045ae:	2100      	movs	r1, #0
 80045b0:	2077      	movs	r0, #119	@ 0x77
 80045b2:	f7ff ff5e 	bl	8004472 <SD_SendCmd>
 80045b6:	4603      	mov	r3, r0
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d807      	bhi.n	80045cc <SD_disk_initialize+0xb0>
 80045bc:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80045c0:	2069      	movs	r0, #105	@ 0x69
 80045c2:	f7ff ff56 	bl	8004472 <SD_SendCmd>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d005      	beq.n	80045d8 <SD_disk_initialize+0xbc>
				} while (Timer1);
 80045cc:	4b47      	ldr	r3, [pc, #284]	@ (80046ec <SD_disk_initialize+0x1d0>)
 80045ce:	881b      	ldrh	r3, [r3, #0]
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d1eb      	bne.n	80045ae <SD_disk_initialize+0x92>
 80045d6:	e000      	b.n	80045da <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80045d8:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80045da:	4b44      	ldr	r3, [pc, #272]	@ (80046ec <SD_disk_initialize+0x1d0>)
 80045dc:	881b      	ldrh	r3, [r3, #0]
 80045de:	b29b      	uxth	r3, r3
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d064      	beq.n	80046ae <SD_disk_initialize+0x192>
 80045e4:	2100      	movs	r1, #0
 80045e6:	207a      	movs	r0, #122	@ 0x7a
 80045e8:	f7ff ff43 	bl	8004472 <SD_SendCmd>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d15d      	bne.n	80046ae <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 80045f2:	2300      	movs	r3, #0
 80045f4:	73fb      	strb	r3, [r7, #15]
 80045f6:	e00c      	b.n	8004612 <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 80045f8:	7bfc      	ldrb	r4, [r7, #15]
 80045fa:	f7ff fe27 	bl	800424c <SPI_RxByte>
 80045fe:	4603      	mov	r3, r0
 8004600:	461a      	mov	r2, r3
 8004602:	f104 0310 	add.w	r3, r4, #16
 8004606:	443b      	add	r3, r7
 8004608:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 800460c:	7bfb      	ldrb	r3, [r7, #15]
 800460e:	3301      	adds	r3, #1
 8004610:	73fb      	strb	r3, [r7, #15]
 8004612:	7bfb      	ldrb	r3, [r7, #15]
 8004614:	2b03      	cmp	r3, #3
 8004616:	d9ef      	bls.n	80045f8 <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8004618:	7a3b      	ldrb	r3, [r7, #8]
 800461a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800461e:	2b00      	cmp	r3, #0
 8004620:	d001      	beq.n	8004626 <SD_disk_initialize+0x10a>
 8004622:	230c      	movs	r3, #12
 8004624:	e000      	b.n	8004628 <SD_disk_initialize+0x10c>
 8004626:	2304      	movs	r3, #4
 8004628:	73bb      	strb	r3, [r7, #14]
 800462a:	e040      	b.n	80046ae <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800462c:	2100      	movs	r1, #0
 800462e:	2077      	movs	r0, #119	@ 0x77
 8004630:	f7ff ff1f 	bl	8004472 <SD_SendCmd>
 8004634:	4603      	mov	r3, r0
 8004636:	2b01      	cmp	r3, #1
 8004638:	d808      	bhi.n	800464c <SD_disk_initialize+0x130>
 800463a:	2100      	movs	r1, #0
 800463c:	2069      	movs	r0, #105	@ 0x69
 800463e:	f7ff ff18 	bl	8004472 <SD_SendCmd>
 8004642:	4603      	mov	r3, r0
 8004644:	2b01      	cmp	r3, #1
 8004646:	d801      	bhi.n	800464c <SD_disk_initialize+0x130>
 8004648:	2302      	movs	r3, #2
 800464a:	e000      	b.n	800464e <SD_disk_initialize+0x132>
 800464c:	2301      	movs	r3, #1
 800464e:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8004650:	7bbb      	ldrb	r3, [r7, #14]
 8004652:	2b02      	cmp	r3, #2
 8004654:	d10e      	bne.n	8004674 <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8004656:	2100      	movs	r1, #0
 8004658:	2077      	movs	r0, #119	@ 0x77
 800465a:	f7ff ff0a 	bl	8004472 <SD_SendCmd>
 800465e:	4603      	mov	r3, r0
 8004660:	2b01      	cmp	r3, #1
 8004662:	d80e      	bhi.n	8004682 <SD_disk_initialize+0x166>
 8004664:	2100      	movs	r1, #0
 8004666:	2069      	movs	r0, #105	@ 0x69
 8004668:	f7ff ff03 	bl	8004472 <SD_SendCmd>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d107      	bne.n	8004682 <SD_disk_initialize+0x166>
 8004672:	e00d      	b.n	8004690 <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8004674:	2100      	movs	r1, #0
 8004676:	2041      	movs	r0, #65	@ 0x41
 8004678:	f7ff fefb 	bl	8004472 <SD_SendCmd>
 800467c:	4603      	mov	r3, r0
 800467e:	2b00      	cmp	r3, #0
 8004680:	d005      	beq.n	800468e <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 8004682:	4b1a      	ldr	r3, [pc, #104]	@ (80046ec <SD_disk_initialize+0x1d0>)
 8004684:	881b      	ldrh	r3, [r3, #0]
 8004686:	b29b      	uxth	r3, r3
 8004688:	2b00      	cmp	r3, #0
 800468a:	d1e1      	bne.n	8004650 <SD_disk_initialize+0x134>
 800468c:	e000      	b.n	8004690 <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800468e:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8004690:	4b16      	ldr	r3, [pc, #88]	@ (80046ec <SD_disk_initialize+0x1d0>)
 8004692:	881b      	ldrh	r3, [r3, #0]
 8004694:	b29b      	uxth	r3, r3
 8004696:	2b00      	cmp	r3, #0
 8004698:	d007      	beq.n	80046aa <SD_disk_initialize+0x18e>
 800469a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800469e:	2050      	movs	r0, #80	@ 0x50
 80046a0:	f7ff fee7 	bl	8004472 <SD_SendCmd>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d001      	beq.n	80046ae <SD_disk_initialize+0x192>
 80046aa:	2300      	movs	r3, #0
 80046ac:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 80046ae:	4a10      	ldr	r2, [pc, #64]	@ (80046f0 <SD_disk_initialize+0x1d4>)
 80046b0:	7bbb      	ldrb	r3, [r7, #14]
 80046b2:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 80046b4:	f7ff fd88 	bl	80041c8 <DESELECT>
	SPI_RxByte();
 80046b8:	f7ff fdc8 	bl	800424c <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 80046bc:	7bbb      	ldrb	r3, [r7, #14]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d008      	beq.n	80046d4 <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 80046c2:	4b09      	ldr	r3, [pc, #36]	@ (80046e8 <SD_disk_initialize+0x1cc>)
 80046c4:	781b      	ldrb	r3, [r3, #0]
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	f023 0301 	bic.w	r3, r3, #1
 80046cc:	b2da      	uxtb	r2, r3
 80046ce:	4b06      	ldr	r3, [pc, #24]	@ (80046e8 <SD_disk_initialize+0x1cc>)
 80046d0:	701a      	strb	r2, [r3, #0]
 80046d2:	e001      	b.n	80046d8 <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 80046d4:	f7ff fe42 	bl	800435c <SD_PowerOff>
	}

	return Stat;
 80046d8:	4b03      	ldr	r3, [pc, #12]	@ (80046e8 <SD_disk_initialize+0x1cc>)
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	b2db      	uxtb	r3, r3
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3714      	adds	r7, #20
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd90      	pop	{r4, r7, pc}
 80046e6:	bf00      	nop
 80046e8:	24000000 	.word	0x24000000
 80046ec:	24000378 	.word	0x24000378
 80046f0:	24000194 	.word	0x24000194

080046f4 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	4603      	mov	r3, r0
 80046fc:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 80046fe:	79fb      	ldrb	r3, [r7, #7]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d001      	beq.n	8004708 <SD_disk_status+0x14>
 8004704:	2301      	movs	r3, #1
 8004706:	e002      	b.n	800470e <SD_disk_status+0x1a>
	return Stat;
 8004708:	4b04      	ldr	r3, [pc, #16]	@ (800471c <SD_disk_status+0x28>)
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	b2db      	uxtb	r3, r3
}
 800470e:	4618      	mov	r0, r3
 8004710:	370c      	adds	r7, #12
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr
 800471a:	bf00      	nop
 800471c:	24000000 	.word	0x24000000

08004720 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	60b9      	str	r1, [r7, #8]
 8004728:	607a      	str	r2, [r7, #4]
 800472a:	603b      	str	r3, [r7, #0]
 800472c:	4603      	mov	r3, r0
 800472e:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8004730:	7bfb      	ldrb	r3, [r7, #15]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d102      	bne.n	800473c <SD_disk_read+0x1c>
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d101      	bne.n	8004740 <SD_disk_read+0x20>
 800473c:	2304      	movs	r3, #4
 800473e:	e051      	b.n	80047e4 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004740:	4b2a      	ldr	r3, [pc, #168]	@ (80047ec <SD_disk_read+0xcc>)
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	b2db      	uxtb	r3, r3
 8004746:	f003 0301 	and.w	r3, r3, #1
 800474a:	2b00      	cmp	r3, #0
 800474c:	d001      	beq.n	8004752 <SD_disk_read+0x32>
 800474e:	2303      	movs	r3, #3
 8004750:	e048      	b.n	80047e4 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8004752:	4b27      	ldr	r3, [pc, #156]	@ (80047f0 <SD_disk_read+0xd0>)
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	f003 0304 	and.w	r3, r3, #4
 800475a:	2b00      	cmp	r3, #0
 800475c:	d102      	bne.n	8004764 <SD_disk_read+0x44>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	025b      	lsls	r3, r3, #9
 8004762:	607b      	str	r3, [r7, #4]

	SELECT();
 8004764:	f7ff fd24 	bl	80041b0 <SELECT>

	if (count == 1)
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	2b01      	cmp	r3, #1
 800476c:	d111      	bne.n	8004792 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 800476e:	6879      	ldr	r1, [r7, #4]
 8004770:	2051      	movs	r0, #81	@ 0x51
 8004772:	f7ff fe7e 	bl	8004472 <SD_SendCmd>
 8004776:	4603      	mov	r3, r0
 8004778:	2b00      	cmp	r3, #0
 800477a:	d129      	bne.n	80047d0 <SD_disk_read+0xb0>
 800477c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004780:	68b8      	ldr	r0, [r7, #8]
 8004782:	f7ff fe03 	bl	800438c <SD_RxDataBlock>
 8004786:	4603      	mov	r3, r0
 8004788:	2b00      	cmp	r3, #0
 800478a:	d021      	beq.n	80047d0 <SD_disk_read+0xb0>
 800478c:	2300      	movs	r3, #0
 800478e:	603b      	str	r3, [r7, #0]
 8004790:	e01e      	b.n	80047d0 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8004792:	6879      	ldr	r1, [r7, #4]
 8004794:	2052      	movs	r0, #82	@ 0x52
 8004796:	f7ff fe6c 	bl	8004472 <SD_SendCmd>
 800479a:	4603      	mov	r3, r0
 800479c:	2b00      	cmp	r3, #0
 800479e:	d117      	bne.n	80047d0 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 80047a0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80047a4:	68b8      	ldr	r0, [r7, #8]
 80047a6:	f7ff fdf1 	bl	800438c <SD_RxDataBlock>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d00a      	beq.n	80047c6 <SD_disk_read+0xa6>
				buff += 512;
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80047b6:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	3b01      	subs	r3, #1
 80047bc:	603b      	str	r3, [r7, #0]
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d1ed      	bne.n	80047a0 <SD_disk_read+0x80>
 80047c4:	e000      	b.n	80047c8 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 80047c6:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 80047c8:	2100      	movs	r1, #0
 80047ca:	204c      	movs	r0, #76	@ 0x4c
 80047cc:	f7ff fe51 	bl	8004472 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 80047d0:	f7ff fcfa 	bl	80041c8 <DESELECT>
	SPI_RxByte();
 80047d4:	f7ff fd3a 	bl	800424c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	bf14      	ite	ne
 80047de:	2301      	movne	r3, #1
 80047e0:	2300      	moveq	r3, #0
 80047e2:	b2db      	uxtb	r3, r3
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3710      	adds	r7, #16
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}
 80047ec:	24000000 	.word	0x24000000
 80047f0:	24000194 	.word	0x24000194

080047f4 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b084      	sub	sp, #16
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	60b9      	str	r1, [r7, #8]
 80047fc:	607a      	str	r2, [r7, #4]
 80047fe:	603b      	str	r3, [r7, #0]
 8004800:	4603      	mov	r3, r0
 8004802:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8004804:	7bfb      	ldrb	r3, [r7, #15]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d102      	bne.n	8004810 <SD_disk_write+0x1c>
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d101      	bne.n	8004814 <SD_disk_write+0x20>
 8004810:	2304      	movs	r3, #4
 8004812:	e06b      	b.n	80048ec <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004814:	4b37      	ldr	r3, [pc, #220]	@ (80048f4 <SD_disk_write+0x100>)
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	b2db      	uxtb	r3, r3
 800481a:	f003 0301 	and.w	r3, r3, #1
 800481e:	2b00      	cmp	r3, #0
 8004820:	d001      	beq.n	8004826 <SD_disk_write+0x32>
 8004822:	2303      	movs	r3, #3
 8004824:	e062      	b.n	80048ec <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8004826:	4b33      	ldr	r3, [pc, #204]	@ (80048f4 <SD_disk_write+0x100>)
 8004828:	781b      	ldrb	r3, [r3, #0]
 800482a:	b2db      	uxtb	r3, r3
 800482c:	f003 0304 	and.w	r3, r3, #4
 8004830:	2b00      	cmp	r3, #0
 8004832:	d001      	beq.n	8004838 <SD_disk_write+0x44>
 8004834:	2302      	movs	r3, #2
 8004836:	e059      	b.n	80048ec <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8004838:	4b2f      	ldr	r3, [pc, #188]	@ (80048f8 <SD_disk_write+0x104>)
 800483a:	781b      	ldrb	r3, [r3, #0]
 800483c:	f003 0304 	and.w	r3, r3, #4
 8004840:	2b00      	cmp	r3, #0
 8004842:	d102      	bne.n	800484a <SD_disk_write+0x56>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	025b      	lsls	r3, r3, #9
 8004848:	607b      	str	r3, [r7, #4]

	SELECT();
 800484a:	f7ff fcb1 	bl	80041b0 <SELECT>

	if (count == 1)
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	2b01      	cmp	r3, #1
 8004852:	d110      	bne.n	8004876 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8004854:	6879      	ldr	r1, [r7, #4]
 8004856:	2058      	movs	r0, #88	@ 0x58
 8004858:	f7ff fe0b 	bl	8004472 <SD_SendCmd>
 800485c:	4603      	mov	r3, r0
 800485e:	2b00      	cmp	r3, #0
 8004860:	d13a      	bne.n	80048d8 <SD_disk_write+0xe4>
 8004862:	21fe      	movs	r1, #254	@ 0xfe
 8004864:	68b8      	ldr	r0, [r7, #8]
 8004866:	f7ff fdc1 	bl	80043ec <SD_TxDataBlock>
 800486a:	4603      	mov	r3, r0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d033      	beq.n	80048d8 <SD_disk_write+0xe4>
			count = 0;
 8004870:	2300      	movs	r3, #0
 8004872:	603b      	str	r3, [r7, #0]
 8004874:	e030      	b.n	80048d8 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8004876:	4b20      	ldr	r3, [pc, #128]	@ (80048f8 <SD_disk_write+0x104>)
 8004878:	781b      	ldrb	r3, [r3, #0]
 800487a:	f003 0302 	and.w	r3, r3, #2
 800487e:	2b00      	cmp	r3, #0
 8004880:	d007      	beq.n	8004892 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8004882:	2100      	movs	r1, #0
 8004884:	2077      	movs	r0, #119	@ 0x77
 8004886:	f7ff fdf4 	bl	8004472 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 800488a:	6839      	ldr	r1, [r7, #0]
 800488c:	2057      	movs	r0, #87	@ 0x57
 800488e:	f7ff fdf0 	bl	8004472 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8004892:	6879      	ldr	r1, [r7, #4]
 8004894:	2059      	movs	r0, #89	@ 0x59
 8004896:	f7ff fdec 	bl	8004472 <SD_SendCmd>
 800489a:	4603      	mov	r3, r0
 800489c:	2b00      	cmp	r3, #0
 800489e:	d11b      	bne.n	80048d8 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80048a0:	21fc      	movs	r1, #252	@ 0xfc
 80048a2:	68b8      	ldr	r0, [r7, #8]
 80048a4:	f7ff fda2 	bl	80043ec <SD_TxDataBlock>
 80048a8:	4603      	mov	r3, r0
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d00a      	beq.n	80048c4 <SD_disk_write+0xd0>
				buff += 512;
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80048b4:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	3b01      	subs	r3, #1
 80048ba:	603b      	str	r3, [r7, #0]
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d1ee      	bne.n	80048a0 <SD_disk_write+0xac>
 80048c2:	e000      	b.n	80048c6 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80048c4:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 80048c6:	21fd      	movs	r1, #253	@ 0xfd
 80048c8:	2000      	movs	r0, #0
 80048ca:	f7ff fd8f 	bl	80043ec <SD_TxDataBlock>
 80048ce:	4603      	mov	r3, r0
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d101      	bne.n	80048d8 <SD_disk_write+0xe4>
			{
				count = 1;
 80048d4:	2301      	movs	r3, #1
 80048d6:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 80048d8:	f7ff fc76 	bl	80041c8 <DESELECT>
	SPI_RxByte();
 80048dc:	f7ff fcb6 	bl	800424c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	bf14      	ite	ne
 80048e6:	2301      	movne	r3, #1
 80048e8:	2300      	moveq	r3, #0
 80048ea:	b2db      	uxtb	r3, r3
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3710      	adds	r7, #16
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}
 80048f4:	24000000 	.word	0x24000000
 80048f8:	24000194 	.word	0x24000194

080048fc <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 80048fc:	b590      	push	{r4, r7, lr}
 80048fe:	b08b      	sub	sp, #44	@ 0x2c
 8004900:	af00      	add	r7, sp, #0
 8004902:	4603      	mov	r3, r0
 8004904:	603a      	str	r2, [r7, #0]
 8004906:	71fb      	strb	r3, [r7, #7]
 8004908:	460b      	mov	r3, r1
 800490a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8004910:	79fb      	ldrb	r3, [r7, #7]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d001      	beq.n	800491a <SD_disk_ioctl+0x1e>
 8004916:	2304      	movs	r3, #4
 8004918:	e113      	b.n	8004b42 <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 8004920:	79bb      	ldrb	r3, [r7, #6]
 8004922:	2b05      	cmp	r3, #5
 8004924:	d124      	bne.n	8004970 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8004926:	6a3b      	ldr	r3, [r7, #32]
 8004928:	781b      	ldrb	r3, [r3, #0]
 800492a:	2b02      	cmp	r3, #2
 800492c:	d012      	beq.n	8004954 <SD_disk_ioctl+0x58>
 800492e:	2b02      	cmp	r3, #2
 8004930:	dc1a      	bgt.n	8004968 <SD_disk_ioctl+0x6c>
 8004932:	2b00      	cmp	r3, #0
 8004934:	d002      	beq.n	800493c <SD_disk_ioctl+0x40>
 8004936:	2b01      	cmp	r3, #1
 8004938:	d006      	beq.n	8004948 <SD_disk_ioctl+0x4c>
 800493a:	e015      	b.n	8004968 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 800493c:	f7ff fd0e 	bl	800435c <SD_PowerOff>
			res = RES_OK;
 8004940:	2300      	movs	r3, #0
 8004942:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8004946:	e0fa      	b.n	8004b3e <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 8004948:	f7ff fcc6 	bl	80042d8 <SD_PowerOn>
			res = RES_OK;
 800494c:	2300      	movs	r3, #0
 800494e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8004952:	e0f4      	b.n	8004b3e <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8004954:	6a3b      	ldr	r3, [r7, #32]
 8004956:	1c5c      	adds	r4, r3, #1
 8004958:	f7ff fd0c 	bl	8004374 <SD_CheckPower>
 800495c:	4603      	mov	r3, r0
 800495e:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8004960:	2300      	movs	r3, #0
 8004962:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8004966:	e0ea      	b.n	8004b3e <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 8004968:	2304      	movs	r3, #4
 800496a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800496e:	e0e6      	b.n	8004b3e <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004970:	4b76      	ldr	r3, [pc, #472]	@ (8004b4c <SD_disk_ioctl+0x250>)
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	b2db      	uxtb	r3, r3
 8004976:	f003 0301 	and.w	r3, r3, #1
 800497a:	2b00      	cmp	r3, #0
 800497c:	d001      	beq.n	8004982 <SD_disk_ioctl+0x86>
 800497e:	2303      	movs	r3, #3
 8004980:	e0df      	b.n	8004b42 <SD_disk_ioctl+0x246>

		SELECT();
 8004982:	f7ff fc15 	bl	80041b0 <SELECT>

		switch (ctrl)
 8004986:	79bb      	ldrb	r3, [r7, #6]
 8004988:	2b0d      	cmp	r3, #13
 800498a:	f200 80c9 	bhi.w	8004b20 <SD_disk_ioctl+0x224>
 800498e:	a201      	add	r2, pc, #4	@ (adr r2, 8004994 <SD_disk_ioctl+0x98>)
 8004990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004994:	08004a8b 	.word	0x08004a8b
 8004998:	080049cd 	.word	0x080049cd
 800499c:	08004a7b 	.word	0x08004a7b
 80049a0:	08004b21 	.word	0x08004b21
 80049a4:	08004b21 	.word	0x08004b21
 80049a8:	08004b21 	.word	0x08004b21
 80049ac:	08004b21 	.word	0x08004b21
 80049b0:	08004b21 	.word	0x08004b21
 80049b4:	08004b21 	.word	0x08004b21
 80049b8:	08004b21 	.word	0x08004b21
 80049bc:	08004b21 	.word	0x08004b21
 80049c0:	08004a9d 	.word	0x08004a9d
 80049c4:	08004ac1 	.word	0x08004ac1
 80049c8:	08004ae5 	.word	0x08004ae5
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80049cc:	2100      	movs	r1, #0
 80049ce:	2049      	movs	r0, #73	@ 0x49
 80049d0:	f7ff fd4f 	bl	8004472 <SD_SendCmd>
 80049d4:	4603      	mov	r3, r0
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	f040 80a6 	bne.w	8004b28 <SD_disk_ioctl+0x22c>
 80049dc:	f107 030c 	add.w	r3, r7, #12
 80049e0:	2110      	movs	r1, #16
 80049e2:	4618      	mov	r0, r3
 80049e4:	f7ff fcd2 	bl	800438c <SD_RxDataBlock>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	f000 809c 	beq.w	8004b28 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 80049f0:	7b3b      	ldrb	r3, [r7, #12]
 80049f2:	099b      	lsrs	r3, r3, #6
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d10d      	bne.n	8004a16 <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80049fa:	7d7b      	ldrb	r3, [r7, #21]
 80049fc:	461a      	mov	r2, r3
 80049fe:	7d3b      	ldrb	r3, [r7, #20]
 8004a00:	021b      	lsls	r3, r3, #8
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	4413      	add	r3, r2
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	3301      	adds	r3, #1
 8004a0a:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8004a0c:	8bfb      	ldrh	r3, [r7, #30]
 8004a0e:	029a      	lsls	r2, r3, #10
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	601a      	str	r2, [r3, #0]
 8004a14:	e02d      	b.n	8004a72 <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8004a16:	7c7b      	ldrb	r3, [r7, #17]
 8004a18:	f003 030f 	and.w	r3, r3, #15
 8004a1c:	b2da      	uxtb	r2, r3
 8004a1e:	7dbb      	ldrb	r3, [r7, #22]
 8004a20:	09db      	lsrs	r3, r3, #7
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	4413      	add	r3, r2
 8004a26:	b2da      	uxtb	r2, r3
 8004a28:	7d7b      	ldrb	r3, [r7, #21]
 8004a2a:	005b      	lsls	r3, r3, #1
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	f003 0306 	and.w	r3, r3, #6
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	4413      	add	r3, r2
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	3302      	adds	r3, #2
 8004a3a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8004a3e:	7d3b      	ldrb	r3, [r7, #20]
 8004a40:	099b      	lsrs	r3, r3, #6
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	461a      	mov	r2, r3
 8004a46:	7cfb      	ldrb	r3, [r7, #19]
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	4413      	add	r3, r2
 8004a4e:	b29a      	uxth	r2, r3
 8004a50:	7cbb      	ldrb	r3, [r7, #18]
 8004a52:	029b      	lsls	r3, r3, #10
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	4413      	add	r3, r2
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	3301      	adds	r3, #1
 8004a62:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8004a64:	8bfa      	ldrh	r2, [r7, #30]
 8004a66:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004a6a:	3b09      	subs	r3, #9
 8004a6c:	409a      	lsls	r2, r3
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8004a72:	2300      	movs	r3, #0
 8004a74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 8004a78:	e056      	b.n	8004b28 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a80:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8004a82:	2300      	movs	r3, #0
 8004a84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8004a88:	e055      	b.n	8004b36 <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8004a8a:	f7ff fc0b 	bl	80042a4 <SD_ReadyWait>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	2bff      	cmp	r3, #255	@ 0xff
 8004a92:	d14b      	bne.n	8004b2c <SD_disk_ioctl+0x230>
 8004a94:	2300      	movs	r3, #0
 8004a96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8004a9a:	e047      	b.n	8004b2c <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8004a9c:	2100      	movs	r1, #0
 8004a9e:	2049      	movs	r0, #73	@ 0x49
 8004aa0:	f7ff fce7 	bl	8004472 <SD_SendCmd>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d142      	bne.n	8004b30 <SD_disk_ioctl+0x234>
 8004aaa:	2110      	movs	r1, #16
 8004aac:	6a38      	ldr	r0, [r7, #32]
 8004aae:	f7ff fc6d 	bl	800438c <SD_RxDataBlock>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d03b      	beq.n	8004b30 <SD_disk_ioctl+0x234>
 8004ab8:	2300      	movs	r3, #0
 8004aba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8004abe:	e037      	b.n	8004b30 <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8004ac0:	2100      	movs	r1, #0
 8004ac2:	204a      	movs	r0, #74	@ 0x4a
 8004ac4:	f7ff fcd5 	bl	8004472 <SD_SendCmd>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d132      	bne.n	8004b34 <SD_disk_ioctl+0x238>
 8004ace:	2110      	movs	r1, #16
 8004ad0:	6a38      	ldr	r0, [r7, #32]
 8004ad2:	f7ff fc5b 	bl	800438c <SD_RxDataBlock>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d02b      	beq.n	8004b34 <SD_disk_ioctl+0x238>
 8004adc:	2300      	movs	r3, #0
 8004ade:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8004ae2:	e027      	b.n	8004b34 <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8004ae4:	2100      	movs	r1, #0
 8004ae6:	207a      	movs	r0, #122	@ 0x7a
 8004ae8:	f7ff fcc3 	bl	8004472 <SD_SendCmd>
 8004aec:	4603      	mov	r3, r0
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d116      	bne.n	8004b20 <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 8004af2:	2300      	movs	r3, #0
 8004af4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8004af8:	e00b      	b.n	8004b12 <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 8004afa:	6a3c      	ldr	r4, [r7, #32]
 8004afc:	1c63      	adds	r3, r4, #1
 8004afe:	623b      	str	r3, [r7, #32]
 8004b00:	f7ff fba4 	bl	800424c <SPI_RxByte>
 8004b04:	4603      	mov	r3, r0
 8004b06:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8004b08:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004b0c:	3301      	adds	r3, #1
 8004b0e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8004b12:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004b16:	2b03      	cmp	r3, #3
 8004b18:	d9ef      	bls.n	8004afa <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 8004b20:	2304      	movs	r3, #4
 8004b22:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004b26:	e006      	b.n	8004b36 <SD_disk_ioctl+0x23a>
			break;
 8004b28:	bf00      	nop
 8004b2a:	e004      	b.n	8004b36 <SD_disk_ioctl+0x23a>
			break;
 8004b2c:	bf00      	nop
 8004b2e:	e002      	b.n	8004b36 <SD_disk_ioctl+0x23a>
			break;
 8004b30:	bf00      	nop
 8004b32:	e000      	b.n	8004b36 <SD_disk_ioctl+0x23a>
			break;
 8004b34:	bf00      	nop
		}

		DESELECT();
 8004b36:	f7ff fb47 	bl	80041c8 <DESELECT>
		SPI_RxByte();
 8004b3a:	f7ff fb87 	bl	800424c <SPI_RxByte>
	}

	return res;
 8004b3e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	372c      	adds	r7, #44	@ 0x2c
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd90      	pop	{r4, r7, pc}
 8004b4a:	bf00      	nop
 8004b4c:	24000000 	.word	0x24000000

08004b50 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b08e      	sub	sp, #56	@ 0x38
 8004b54:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	601a      	str	r2, [r3, #0]
 8004b5e:	605a      	str	r2, [r3, #4]
 8004b60:	609a      	str	r2, [r3, #8]
 8004b62:	60da      	str	r2, [r3, #12]
 8004b64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004b66:	4b8b      	ldr	r3, [pc, #556]	@ (8004d94 <MX_GPIO_Init+0x244>)
 8004b68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b6c:	4a89      	ldr	r2, [pc, #548]	@ (8004d94 <MX_GPIO_Init+0x244>)
 8004b6e:	f043 0310 	orr.w	r3, r3, #16
 8004b72:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004b76:	4b87      	ldr	r3, [pc, #540]	@ (8004d94 <MX_GPIO_Init+0x244>)
 8004b78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b7c:	f003 0310 	and.w	r3, r3, #16
 8004b80:	623b      	str	r3, [r7, #32]
 8004b82:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004b84:	4b83      	ldr	r3, [pc, #524]	@ (8004d94 <MX_GPIO_Init+0x244>)
 8004b86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b8a:	4a82      	ldr	r2, [pc, #520]	@ (8004d94 <MX_GPIO_Init+0x244>)
 8004b8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b90:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004b94:	4b7f      	ldr	r3, [pc, #508]	@ (8004d94 <MX_GPIO_Init+0x244>)
 8004b96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b9e:	61fb      	str	r3, [r7, #28]
 8004ba0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ba2:	4b7c      	ldr	r3, [pc, #496]	@ (8004d94 <MX_GPIO_Init+0x244>)
 8004ba4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004ba8:	4a7a      	ldr	r2, [pc, #488]	@ (8004d94 <MX_GPIO_Init+0x244>)
 8004baa:	f043 0301 	orr.w	r3, r3, #1
 8004bae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004bb2:	4b78      	ldr	r3, [pc, #480]	@ (8004d94 <MX_GPIO_Init+0x244>)
 8004bb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004bb8:	f003 0301 	and.w	r3, r3, #1
 8004bbc:	61bb      	str	r3, [r7, #24]
 8004bbe:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004bc0:	4b74      	ldr	r3, [pc, #464]	@ (8004d94 <MX_GPIO_Init+0x244>)
 8004bc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004bc6:	4a73      	ldr	r2, [pc, #460]	@ (8004d94 <MX_GPIO_Init+0x244>)
 8004bc8:	f043 0320 	orr.w	r3, r3, #32
 8004bcc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004bd0:	4b70      	ldr	r3, [pc, #448]	@ (8004d94 <MX_GPIO_Init+0x244>)
 8004bd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004bd6:	f003 0320 	and.w	r3, r3, #32
 8004bda:	617b      	str	r3, [r7, #20]
 8004bdc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004bde:	4b6d      	ldr	r3, [pc, #436]	@ (8004d94 <MX_GPIO_Init+0x244>)
 8004be0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004be4:	4a6b      	ldr	r2, [pc, #428]	@ (8004d94 <MX_GPIO_Init+0x244>)
 8004be6:	f043 0302 	orr.w	r3, r3, #2
 8004bea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004bee:	4b69      	ldr	r3, [pc, #420]	@ (8004d94 <MX_GPIO_Init+0x244>)
 8004bf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004bf4:	f003 0302 	and.w	r3, r3, #2
 8004bf8:	613b      	str	r3, [r7, #16]
 8004bfa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004bfc:	4b65      	ldr	r3, [pc, #404]	@ (8004d94 <MX_GPIO_Init+0x244>)
 8004bfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c02:	4a64      	ldr	r2, [pc, #400]	@ (8004d94 <MX_GPIO_Init+0x244>)
 8004c04:	f043 0308 	orr.w	r3, r3, #8
 8004c08:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004c0c:	4b61      	ldr	r3, [pc, #388]	@ (8004d94 <MX_GPIO_Init+0x244>)
 8004c0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c12:	f003 0308 	and.w	r3, r3, #8
 8004c16:	60fb      	str	r3, [r7, #12]
 8004c18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004c1a:	4b5e      	ldr	r3, [pc, #376]	@ (8004d94 <MX_GPIO_Init+0x244>)
 8004c1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c20:	4a5c      	ldr	r2, [pc, #368]	@ (8004d94 <MX_GPIO_Init+0x244>)
 8004c22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c26:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004c2a:	4b5a      	ldr	r3, [pc, #360]	@ (8004d94 <MX_GPIO_Init+0x244>)
 8004c2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c34:	60bb      	str	r3, [r7, #8]
 8004c36:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c38:	4b56      	ldr	r3, [pc, #344]	@ (8004d94 <MX_GPIO_Init+0x244>)
 8004c3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c3e:	4a55      	ldr	r2, [pc, #340]	@ (8004d94 <MX_GPIO_Init+0x244>)
 8004c40:	f043 0304 	orr.w	r3, r3, #4
 8004c44:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004c48:	4b52      	ldr	r3, [pc, #328]	@ (8004d94 <MX_GPIO_Init+0x244>)
 8004c4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c4e:	f003 0304 	and.w	r3, r3, #4
 8004c52:	607b      	str	r3, [r7, #4]
 8004c54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_6_Pin|LED_G_Pin, GPIO_PIN_RESET);
 8004c56:	2200      	movs	r2, #0
 8004c58:	f248 0108 	movw	r1, #32776	@ 0x8008
 8004c5c:	484e      	ldr	r0, [pc, #312]	@ (8004d98 <MX_GPIO_Init+0x248>)
 8004c5e:	f009 fabb 	bl	800e1d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Y_Pin|LED_R_Pin|NRF24_CE_Pin|NRF24_CSN_Pin, GPIO_PIN_RESET);
 8004c62:	2200      	movs	r2, #0
 8004c64:	f44f 614c 	mov.w	r1, #3264	@ 0xcc0
 8004c68:	484c      	ldr	r0, [pc, #304]	@ (8004d9c <MX_GPIO_Init+0x24c>)
 8004c6a:	f009 fab5 	bl	800e1d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, uSD_LED_Pin|uSD_SC_Pin, GPIO_PIN_RESET);
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f44f 4108 	mov.w	r1, #34816	@ 0x8800
 8004c74:	484a      	ldr	r0, [pc, #296]	@ (8004da0 <MX_GPIO_Init+0x250>)
 8004c76:	f009 faaf 	bl	800e1d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESC_Power_GPIO_Port, ESC_Power_Pin, GPIO_PIN_RESET);
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004c80:	4848      	ldr	r0, [pc, #288]	@ (8004da4 <MX_GPIO_Init+0x254>)
 8004c82:	f009 faa9 	bl	800e1d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_7_Pin|LED_5_Pin, GPIO_PIN_RESET);
 8004c86:	2200      	movs	r2, #0
 8004c88:	f44f 4101 	mov.w	r1, #33024	@ 0x8100
 8004c8c:	4846      	ldr	r0, [pc, #280]	@ (8004da8 <MX_GPIO_Init+0x258>)
 8004c8e:	f009 faa3 	bl	800e1d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LED_6_Pin|LED_G_Pin;
 8004c92:	f248 0308 	movw	r3, #32776	@ 0x8008
 8004c96:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004ca4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004ca8:	4619      	mov	r1, r3
 8004caa:	483b      	ldr	r0, [pc, #236]	@ (8004d98 <MX_GPIO_Init+0x248>)
 8004cac:	f009 f8d4 	bl	800de58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_Y_Pin|LED_R_Pin|NRF24_CE_Pin|NRF24_CSN_Pin;
 8004cb0:	f44f 634c 	mov.w	r3, #3264	@ 0xcc0
 8004cb4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004cc2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004cc6:	4619      	mov	r1, r3
 8004cc8:	4834      	ldr	r0, [pc, #208]	@ (8004d9c <MX_GPIO_Init+0x24c>)
 8004cca:	f009 f8c5 	bl	800de58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detection_Pin;
 8004cce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004cd2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(uSD_Detection_GPIO_Port, &GPIO_InitStruct);
 8004cdc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004ce0:	4619      	mov	r1, r3
 8004ce2:	482e      	ldr	r0, [pc, #184]	@ (8004d9c <MX_GPIO_Init+0x24c>)
 8004ce4:	f009 f8b8 	bl	800de58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_LED_Pin;
 8004ce8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004cec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(uSD_LED_GPIO_Port, &GPIO_InitStruct);
 8004cfa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004cfe:	4619      	mov	r1, r3
 8004d00:	4827      	ldr	r0, [pc, #156]	@ (8004da0 <MX_GPIO_Init+0x250>)
 8004d02:	f009 f8a9 	bl	800de58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_SC_Pin;
 8004d06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d0a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d10:	2300      	movs	r3, #0
 8004d12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8004d14:	2301      	movs	r3, #1
 8004d16:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(uSD_SC_GPIO_Port, &GPIO_InitStruct);
 8004d18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004d1c:	4619      	mov	r1, r3
 8004d1e:	4820      	ldr	r0, [pc, #128]	@ (8004da0 <MX_GPIO_Init+0x250>)
 8004d20:	f009 f89a 	bl	800de58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESC_Power_Pin;
 8004d24:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004d28:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d32:	2300      	movs	r3, #0
 8004d34:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ESC_Power_GPIO_Port, &GPIO_InitStruct);
 8004d36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004d3a:	4619      	mov	r1, r3
 8004d3c:	4819      	ldr	r0, [pc, #100]	@ (8004da4 <MX_GPIO_Init+0x254>)
 8004d3e:	f009 f88b 	bl	800de58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LED_7_Pin|LED_5_Pin;
 8004d42:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 8004d46:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d50:	2300      	movs	r3, #0
 8004d52:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004d58:	4619      	mov	r1, r3
 8004d5a:	4813      	ldr	r0, [pc, #76]	@ (8004da8 <MX_GPIO_Init+0x258>)
 8004d5c:	f009 f87c 	bl	800de58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF24_IRQ_Pin;
 8004d60:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d64:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004d66:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8004d6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(NRF24_IRQ_GPIO_Port, &GPIO_InitStruct);
 8004d70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004d74:	4619      	mov	r1, r3
 8004d76:	480b      	ldr	r0, [pc, #44]	@ (8004da4 <MX_GPIO_Init+0x254>)
 8004d78:	f009 f86e 	bl	800de58 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	2100      	movs	r1, #0
 8004d80:	2028      	movs	r0, #40	@ 0x28
 8004d82:	f006 f96a 	bl	800b05a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004d86:	2028      	movs	r0, #40	@ 0x28
 8004d88:	f006 f981 	bl	800b08e <HAL_NVIC_EnableIRQ>

}
 8004d8c:	bf00      	nop
 8004d8e:	3738      	adds	r7, #56	@ 0x38
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}
 8004d94:	58024400 	.word	0x58024400
 8004d98:	58021000 	.word	0x58021000
 8004d9c:	58020400 	.word	0x58020400
 8004da0:	58020c00 	.word	0x58020c00
 8004da4:	58021800 	.word	0x58021800
 8004da8:	58020000 	.word	0x58020000

08004dac <MX_I2C5_Init>:

I2C_HandleTypeDef hi2c5;

/* I2C5 init function */
void MX_I2C5_Init(void)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C5_Init 0 */

  /* USER CODE BEGIN I2C5_Init 1 */

  /* USER CODE END I2C5_Init 1 */
  hi2c5.Instance = I2C5;
 8004db0:	4b1d      	ldr	r3, [pc, #116]	@ (8004e28 <MX_I2C5_Init+0x7c>)
 8004db2:	4a1e      	ldr	r2, [pc, #120]	@ (8004e2c <MX_I2C5_Init+0x80>)
 8004db4:	601a      	str	r2, [r3, #0]
  hi2c5.Init.Timing = 0x00000000;
 8004db6:	4b1c      	ldr	r3, [pc, #112]	@ (8004e28 <MX_I2C5_Init+0x7c>)
 8004db8:	2200      	movs	r2, #0
 8004dba:	605a      	str	r2, [r3, #4]
  hi2c5.Init.OwnAddress1 = 0;
 8004dbc:	4b1a      	ldr	r3, [pc, #104]	@ (8004e28 <MX_I2C5_Init+0x7c>)
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	609a      	str	r2, [r3, #8]
  hi2c5.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004dc2:	4b19      	ldr	r3, [pc, #100]	@ (8004e28 <MX_I2C5_Init+0x7c>)
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	60da      	str	r2, [r3, #12]
  hi2c5.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004dc8:	4b17      	ldr	r3, [pc, #92]	@ (8004e28 <MX_I2C5_Init+0x7c>)
 8004dca:	2200      	movs	r2, #0
 8004dcc:	611a      	str	r2, [r3, #16]
  hi2c5.Init.OwnAddress2 = 0;
 8004dce:	4b16      	ldr	r3, [pc, #88]	@ (8004e28 <MX_I2C5_Init+0x7c>)
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	615a      	str	r2, [r3, #20]
  hi2c5.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004dd4:	4b14      	ldr	r3, [pc, #80]	@ (8004e28 <MX_I2C5_Init+0x7c>)
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	619a      	str	r2, [r3, #24]
  hi2c5.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004dda:	4b13      	ldr	r3, [pc, #76]	@ (8004e28 <MX_I2C5_Init+0x7c>)
 8004ddc:	2200      	movs	r2, #0
 8004dde:	61da      	str	r2, [r3, #28]
  hi2c5.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004de0:	4b11      	ldr	r3, [pc, #68]	@ (8004e28 <MX_I2C5_Init+0x7c>)
 8004de2:	2200      	movs	r2, #0
 8004de4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c5) != HAL_OK)
 8004de6:	4810      	ldr	r0, [pc, #64]	@ (8004e28 <MX_I2C5_Init+0x7c>)
 8004de8:	f009 fa2a 	bl	800e240 <HAL_I2C_Init>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d001      	beq.n	8004df6 <MX_I2C5_Init+0x4a>
  {
    Error_Handler();
 8004df2:	f002 fd29 	bl	8007848 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c5, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004df6:	2100      	movs	r1, #0
 8004df8:	480b      	ldr	r0, [pc, #44]	@ (8004e28 <MX_I2C5_Init+0x7c>)
 8004dfa:	f00b fde3 	bl	80109c4 <HAL_I2CEx_ConfigAnalogFilter>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d001      	beq.n	8004e08 <MX_I2C5_Init+0x5c>
  {
    Error_Handler();
 8004e04:	f002 fd20 	bl	8007848 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c5, 0) != HAL_OK)
 8004e08:	2100      	movs	r1, #0
 8004e0a:	4807      	ldr	r0, [pc, #28]	@ (8004e28 <MX_I2C5_Init+0x7c>)
 8004e0c:	f00b fe25 	bl	8010a5a <HAL_I2CEx_ConfigDigitalFilter>
 8004e10:	4603      	mov	r3, r0
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d001      	beq.n	8004e1a <MX_I2C5_Init+0x6e>
  {
    Error_Handler();
 8004e16:	f002 fd17 	bl	8007848 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C5);
 8004e1a:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8004e1e:	f00b fe69 	bl	8010af4 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C5_Init 2 */

  /* USER CODE END I2C5_Init 2 */

}
 8004e22:	bf00      	nop
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	24000198 	.word	0x24000198
 8004e2c:	40006400 	.word	0x40006400

08004e30 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b0b8      	sub	sp, #224	@ 0xe0
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e38:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	601a      	str	r2, [r3, #0]
 8004e40:	605a      	str	r2, [r3, #4]
 8004e42:	609a      	str	r2, [r3, #8]
 8004e44:	60da      	str	r2, [r3, #12]
 8004e46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004e48:	f107 0310 	add.w	r3, r7, #16
 8004e4c:	22b8      	movs	r2, #184	@ 0xb8
 8004e4e:	2100      	movs	r1, #0
 8004e50:	4618      	mov	r0, r3
 8004e52:	f018 fe3b 	bl	801dacc <memset>
  if(i2cHandle->Instance==I2C5)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a2b      	ldr	r2, [pc, #172]	@ (8004f08 <HAL_I2C_MspInit+0xd8>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d14f      	bne.n	8004f00 <HAL_I2C_MspInit+0xd0>

  /* USER CODE END I2C5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C5;
 8004e60:	f04f 0208 	mov.w	r2, #8
 8004e64:	f04f 0300 	mov.w	r3, #0
 8004e68:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_CSI;
 8004e6c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8004e70:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004e74:	f107 0310 	add.w	r3, r7, #16
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f00c fdff 	bl	8011a7c <HAL_RCCEx_PeriphCLKConfig>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d001      	beq.n	8004e88 <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 8004e84:	f002 fce0 	bl	8007848 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004e88:	4b20      	ldr	r3, [pc, #128]	@ (8004f0c <HAL_I2C_MspInit+0xdc>)
 8004e8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e8e:	4a1f      	ldr	r2, [pc, #124]	@ (8004f0c <HAL_I2C_MspInit+0xdc>)
 8004e90:	f043 0304 	orr.w	r3, r3, #4
 8004e94:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004e98:	4b1c      	ldr	r3, [pc, #112]	@ (8004f0c <HAL_I2C_MspInit+0xdc>)
 8004e9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e9e:	f003 0304 	and.w	r3, r3, #4
 8004ea2:	60fb      	str	r3, [r7, #12]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
    /**I2C5 GPIO Configuration
    PC10     ------> I2C5_SDA
    PC11     ------> I2C5_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004ea6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004eaa:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004eae:	2312      	movs	r3, #18
 8004eb0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C5;
 8004ec0:	2304      	movs	r3, #4
 8004ec2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004ec6:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8004eca:	4619      	mov	r1, r3
 8004ecc:	4810      	ldr	r0, [pc, #64]	@ (8004f10 <HAL_I2C_MspInit+0xe0>)
 8004ece:	f008 ffc3 	bl	800de58 <HAL_GPIO_Init>

    /* I2C5 clock enable */
    __HAL_RCC_I2C5_CLK_ENABLE();
 8004ed2:	4b0e      	ldr	r3, [pc, #56]	@ (8004f0c <HAL_I2C_MspInit+0xdc>)
 8004ed4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004ed8:	4a0c      	ldr	r2, [pc, #48]	@ (8004f0c <HAL_I2C_MspInit+0xdc>)
 8004eda:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004ede:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004ee2:	4b0a      	ldr	r3, [pc, #40]	@ (8004f0c <HAL_I2C_MspInit+0xdc>)
 8004ee4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004ee8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004eec:	60bb      	str	r3, [r7, #8]
 8004eee:	68bb      	ldr	r3, [r7, #8]

    /* I2C5 interrupt Init */
    HAL_NVIC_SetPriority(I2C5_EV_IRQn, 1, 0);
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	2101      	movs	r1, #1
 8004ef4:	209d      	movs	r0, #157	@ 0x9d
 8004ef6:	f006 f8b0 	bl	800b05a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C5_EV_IRQn);
 8004efa:	209d      	movs	r0, #157	@ 0x9d
 8004efc:	f006 f8c7 	bl	800b08e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C5_MspInit 1 */

  /* USER CODE END I2C5_MspInit 1 */
  }
}
 8004f00:	bf00      	nop
 8004f02:	37e0      	adds	r7, #224	@ 0xe0
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}
 8004f08:	40006400 	.word	0x40006400
 8004f0c:	58024400 	.word	0x58024400
 8004f10:	58020800 	.word	0x58020800

08004f14 <__NVIC_SystemReset>:
{
 8004f14:	b480      	push	{r7}
 8004f16:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8004f18:	f3bf 8f4f 	dsb	sy
}
 8004f1c:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004f1e:	4b06      	ldr	r3, [pc, #24]	@ (8004f38 <__NVIC_SystemReset+0x24>)
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004f26:	4904      	ldr	r1, [pc, #16]	@ (8004f38 <__NVIC_SystemReset+0x24>)
 8004f28:	4b04      	ldr	r3, [pc, #16]	@ (8004f3c <__NVIC_SystemReset+0x28>)
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004f2e:	f3bf 8f4f 	dsb	sy
}
 8004f32:	bf00      	nop
    __NOP();
 8004f34:	bf00      	nop
 8004f36:	e7fd      	b.n	8004f34 <__NVIC_SystemReset+0x20>
 8004f38:	e000ed00 	.word	0xe000ed00
 8004f3c:	05fa0004 	.word	0x05fa0004

08004f40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b08a      	sub	sp, #40	@ 0x28
 8004f44:	af02      	add	r7, sp, #8
//		//oczekiwanie az napiecia na zasilaczu narosnie
//	}
  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8004f46:	f002 fc53 	bl	80077f0 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004f4a:	f003 ff55 	bl	8008df8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004f4e:	f000 feef 	bl	8005d30 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8004f52:	f000 ff5f 	bl	8005e14 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004f56:	f7ff fdfb 	bl	8004b50 <MX_GPIO_Init>
  MX_DMA_Init();
 8004f5a:	f7fe fc03 	bl	8003764 <MX_DMA_Init>
  MX_I2C5_Init();
 8004f5e:	f7ff ff25 	bl	8004dac <MX_I2C5_Init>
  MX_SPI6_Init();
 8004f62:	f002 fccd 	bl	8007900 <MX_SPI6_Init>
  MX_ADC2_Init();
 8004f66:	f7fe fb0f 	bl	8003588 <MX_ADC2_Init>
  MX_SPI2_Init();
 8004f6a:	f002 fc73 	bl	8007854 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8004f6e:	f003 fe5b 	bl	8008c28 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8004f72:	f003 fb79 	bl	8008668 <MX_TIM1_Init>
  MX_TIM8_Init();
 8004f76:	f003 fcef 	bl	8008958 <MX_TIM8_Init>
  MX_TIM3_Init();
 8004f7a:	f003 fc71 	bl	8008860 <MX_TIM3_Init>
  MX_FATFS_Init();
 8004f7e:	f015 fbf1 	bl	801a764 <MX_FATFS_Init>
  MX_TIM2_Init();
 8004f82:	f003 fc19 	bl	80087b8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  	STARTUP = 1;
 8004f86:	4b9a      	ldr	r3, [pc, #616]	@ (80051f0 <main+0x2b0>)
 8004f88:	2201      	movs	r2, #1
 8004f8a:	701a      	strb	r2, [r3, #0]
  	ESC_POWER_1;
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004f92:	4898      	ldr	r0, [pc, #608]	@ (80051f4 <main+0x2b4>)
 8004f94:	f009 f920 	bl	800e1d8 <HAL_GPIO_WritePin>
  	DRON_ON_GRUND = 1;
 8004f98:	4b97      	ldr	r3, [pc, #604]	@ (80051f8 <main+0x2b8>)
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	701a      	strb	r2, [r3, #0]

  	PID_FAC_Pitch[0] = p_pitchfactor;
 8004f9e:	4b97      	ldr	r3, [pc, #604]	@ (80051fc <main+0x2bc>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a97      	ldr	r2, [pc, #604]	@ (8005200 <main+0x2c0>)
 8004fa4:	6013      	str	r3, [r2, #0]
  	PID_FAC_Pitch[1] = i_pitchfactor;
 8004fa6:	4b97      	ldr	r3, [pc, #604]	@ (8005204 <main+0x2c4>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a95      	ldr	r2, [pc, #596]	@ (8005200 <main+0x2c0>)
 8004fac:	6053      	str	r3, [r2, #4]
  	PID_FAC_Pitch[2] = d_pitchfactor;
 8004fae:	4b96      	ldr	r3, [pc, #600]	@ (8005208 <main+0x2c8>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a93      	ldr	r2, [pc, #588]	@ (8005200 <main+0x2c0>)
 8004fb4:	6093      	str	r3, [r2, #8]
  	PID_FAC_Pitch[4] = 0;
 8004fb6:	4b92      	ldr	r3, [pc, #584]	@ (8005200 <main+0x2c0>)
 8004fb8:	f04f 0200 	mov.w	r2, #0
 8004fbc:	611a      	str	r2, [r3, #16]

  	PID_FAC_Rool[0] = p_roolfactor;
 8004fbe:	4b93      	ldr	r3, [pc, #588]	@ (800520c <main+0x2cc>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a93      	ldr	r2, [pc, #588]	@ (8005210 <main+0x2d0>)
 8004fc4:	6013      	str	r3, [r2, #0]
  	PID_FAC_Rool[1] = i_roolfactor;
 8004fc6:	4b93      	ldr	r3, [pc, #588]	@ (8005214 <main+0x2d4>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a91      	ldr	r2, [pc, #580]	@ (8005210 <main+0x2d0>)
 8004fcc:	6053      	str	r3, [r2, #4]
  	PID_FAC_Rool[2] = d_roolfactor;
 8004fce:	4b92      	ldr	r3, [pc, #584]	@ (8005218 <main+0x2d8>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a8f      	ldr	r2, [pc, #572]	@ (8005210 <main+0x2d0>)
 8004fd4:	6093      	str	r3, [r2, #8]
  	PID_FAC_Rool[4] = 0;
 8004fd6:	4b8e      	ldr	r3, [pc, #568]	@ (8005210 <main+0x2d0>)
 8004fd8:	f04f 0200 	mov.w	r2, #0
 8004fdc:	611a      	str	r2, [r3, #16]

  	PID_FAC_Yaw[0] = p_yawfactor;
 8004fde:	4b8f      	ldr	r3, [pc, #572]	@ (800521c <main+0x2dc>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a8f      	ldr	r2, [pc, #572]	@ (8005220 <main+0x2e0>)
 8004fe4:	6013      	str	r3, [r2, #0]
  	PID_FAC_Yaw[1] = i_yawfactor;
 8004fe6:	4b8f      	ldr	r3, [pc, #572]	@ (8005224 <main+0x2e4>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a8d      	ldr	r2, [pc, #564]	@ (8005220 <main+0x2e0>)
 8004fec:	6053      	str	r3, [r2, #4]
  	PID_FAC_Yaw[2] = d_yawfactor;
 8004fee:	4b8e      	ldr	r3, [pc, #568]	@ (8005228 <main+0x2e8>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a8b      	ldr	r2, [pc, #556]	@ (8005220 <main+0x2e0>)
 8004ff4:	6093      	str	r3, [r2, #8]
  	PID_FAC_Yaw[4] = 0;
 8004ff6:	4b8a      	ldr	r3, [pc, #552]	@ (8005220 <main+0x2e0>)
 8004ff8:	f04f 0200 	mov.w	r2, #0
 8004ffc:	611a      	str	r2, [r3, #16]


  	ax_ang =0,ay_ang = 0,az_ang = 0, gx_ang = 0, gy_ang = 0, gz_ang = 0;
 8004ffe:	4b8b      	ldr	r3, [pc, #556]	@ (800522c <main+0x2ec>)
 8005000:	f04f 0200 	mov.w	r2, #0
 8005004:	601a      	str	r2, [r3, #0]
 8005006:	4b8a      	ldr	r3, [pc, #552]	@ (8005230 <main+0x2f0>)
 8005008:	f04f 0200 	mov.w	r2, #0
 800500c:	601a      	str	r2, [r3, #0]
 800500e:	4b89      	ldr	r3, [pc, #548]	@ (8005234 <main+0x2f4>)
 8005010:	f04f 0200 	mov.w	r2, #0
 8005014:	601a      	str	r2, [r3, #0]
 8005016:	4b88      	ldr	r3, [pc, #544]	@ (8005238 <main+0x2f8>)
 8005018:	f04f 0200 	mov.w	r2, #0
 800501c:	601a      	str	r2, [r3, #0]
 800501e:	4b87      	ldr	r3, [pc, #540]	@ (800523c <main+0x2fc>)
 8005020:	f04f 0200 	mov.w	r2, #0
 8005024:	601a      	str	r2, [r3, #0]
 8005026:	4b86      	ldr	r3, [pc, #536]	@ (8005240 <main+0x300>)
 8005028:	f04f 0200 	mov.w	r2, #0
 800502c:	601a      	str	r2, [r3, #0]
  	Mag_Z = 0;
 800502e:	4b85      	ldr	r3, [pc, #532]	@ (8005244 <main+0x304>)
 8005030:	f04f 0200 	mov.w	r2, #0
 8005034:	601a      	str	r2, [r3, #0]
  	TIM_inte_SD = 0, TIM_inte = 0;
 8005036:	4b84      	ldr	r3, [pc, #528]	@ (8005248 <main+0x308>)
 8005038:	2200      	movs	r2, #0
 800503a:	601a      	str	r2, [r3, #0]
 800503c:	4b83      	ldr	r3, [pc, #524]	@ (800524c <main+0x30c>)
 800503e:	2200      	movs	r2, #0
 8005040:	601a      	str	r2, [r3, #0]
  	NRF_TIM_Inte = 0;
 8005042:	4b83      	ldr	r3, [pc, #524]	@ (8005250 <main+0x310>)
 8005044:	2200      	movs	r2, #0
 8005046:	601a      	str	r2, [r3, #0]
  	temp = 0, pres = 0, startpres = 0, ampritude = 0;
 8005048:	4b82      	ldr	r3, [pc, #520]	@ (8005254 <main+0x314>)
 800504a:	f04f 0200 	mov.w	r2, #0
 800504e:	601a      	str	r2, [r3, #0]
 8005050:	4b81      	ldr	r3, [pc, #516]	@ (8005258 <main+0x318>)
 8005052:	f04f 0200 	mov.w	r2, #0
 8005056:	601a      	str	r2, [r3, #0]
 8005058:	4b80      	ldr	r3, [pc, #512]	@ (800525c <main+0x31c>)
 800505a:	f04f 0200 	mov.w	r2, #0
 800505e:	601a      	str	r2, [r3, #0]
 8005060:	4b7f      	ldr	r3, [pc, #508]	@ (8005260 <main+0x320>)
 8005062:	f04f 0200 	mov.w	r2, #0
 8005066:	601a      	str	r2, [r3, #0]
  	last_wanted_pitch_rx = 0;
 8005068:	4b7e      	ldr	r3, [pc, #504]	@ (8005264 <main+0x324>)
 800506a:	f04f 0200 	mov.w	r2, #0
 800506e:	601a      	str	r2, [r3, #0]
  	last_wanted_rool_rx = 0;
 8005070:	4b7d      	ldr	r3, [pc, #500]	@ (8005268 <main+0x328>)
 8005072:	f04f 0200 	mov.w	r2, #0
 8005076:	601a      	str	r2, [r3, #0]
  	last_wanted_yaw_rx = 0;
 8005078:	4b7c      	ldr	r3, [pc, #496]	@ (800526c <main+0x32c>)
 800507a:	f04f 0200 	mov.w	r2, #0
 800507e:	601a      	str	r2, [r3, #0]
  	wanted_thrust = 0;
 8005080:	4b7b      	ldr	r3, [pc, #492]	@ (8005270 <main+0x330>)
 8005082:	2200      	movs	r2, #0
 8005084:	801a      	strh	r2, [r3, #0]
  	thrust_limit = 10000;
 8005086:	4b7b      	ldr	r3, [pc, #492]	@ (8005274 <main+0x334>)
 8005088:	f242 7210 	movw	r2, #10000	@ 0x2710
 800508c:	801a      	strh	r2, [r3, #0]
  	FDP_D_Gain_AR = 100;
 800508e:	4b7a      	ldr	r3, [pc, #488]	@ (8005278 <main+0x338>)
 8005090:	2264      	movs	r2, #100	@ 0x64
 8005092:	801a      	strh	r2, [r3, #0]
  	FDP_D_Gain = 100;
 8005094:	4b79      	ldr	r3, [pc, #484]	@ (800527c <main+0x33c>)
 8005096:	2264      	movs	r2, #100	@ 0x64
 8005098:	801a      	strh	r2, [r3, #0]
  	old_error_pitch = 0;// ruznica
 800509a:	4b79      	ldr	r3, [pc, #484]	@ (8005280 <main+0x340>)
 800509c:	f04f 0200 	mov.w	r2, #0
 80050a0:	601a      	str	r2, [r3, #0]
  	old_error_rool = 0;
 80050a2:	4b78      	ldr	r3, [pc, #480]	@ (8005284 <main+0x344>)
 80050a4:	f04f 0200 	mov.w	r2, #0
 80050a8:	601a      	str	r2, [r3, #0]
  	old_error_yaw = 0;
 80050aa:	4b77      	ldr	r3, [pc, #476]	@ (8005288 <main+0x348>)
 80050ac:	f04f 0200 	mov.w	r2, #0
 80050b0:	601a      	str	r2, [r3, #0]
  	old_error_angular_rate_pitch = 0;// ruznica
 80050b2:	4b76      	ldr	r3, [pc, #472]	@ (800528c <main+0x34c>)
 80050b4:	f04f 0200 	mov.w	r2, #0
 80050b8:	601a      	str	r2, [r3, #0]
  	old_error_angular_rate_rool = 0;
 80050ba:	4b75      	ldr	r3, [pc, #468]	@ (8005290 <main+0x350>)
 80050bc:	f04f 0200 	mov.w	r2, #0
 80050c0:	601a      	str	r2, [r3, #0]
  	old_error_angular_rate_yaw = 0;
 80050c2:	4b74      	ldr	r3, [pc, #464]	@ (8005294 <main+0x354>)
 80050c4:	f04f 0200 	mov.w	r2, #0
 80050c8:	601a      	str	r2, [r3, #0]
  	error_sum_pitch = 0;//todo zmiezycz startowy error, by start nastepowal szybciej
 80050ca:	4b73      	ldr	r3, [pc, #460]	@ (8005298 <main+0x358>)
 80050cc:	2200      	movs	r2, #0
 80050ce:	601a      	str	r2, [r3, #0]
  	error_sum_rool = 0;
 80050d0:	4b72      	ldr	r3, [pc, #456]	@ (800529c <main+0x35c>)
 80050d2:	2200      	movs	r2, #0
 80050d4:	601a      	str	r2, [r3, #0]
  	error_sum_yaw = 0;
 80050d6:	4b72      	ldr	r3, [pc, #456]	@ (80052a0 <main+0x360>)
 80050d8:	2200      	movs	r2, #0
 80050da:	601a      	str	r2, [r3, #0]
  	error_sum_angular_rate_pitch = 0;
 80050dc:	4b71      	ldr	r3, [pc, #452]	@ (80052a4 <main+0x364>)
 80050de:	2200      	movs	r2, #0
 80050e0:	601a      	str	r2, [r3, #0]
  	error_sum_angular_rate_rool = 0;
 80050e2:	4b71      	ldr	r3, [pc, #452]	@ (80052a8 <main+0x368>)
 80050e4:	2200      	movs	r2, #0
 80050e6:	601a      	str	r2, [r3, #0]
  	error_sum_angular_rate_yaw = 0;
 80050e8:	4b70      	ldr	r3, [pc, #448]	@ (80052ac <main+0x36c>)
 80050ea:	2200      	movs	r2, #0
 80050ec:	601a      	str	r2, [r3, #0]
  	SPEED1 = min_speed;
 80050ee:	4b70      	ldr	r3, [pc, #448]	@ (80052b0 <main+0x370>)
 80050f0:	f642 1204 	movw	r2, #10500	@ 0x2904
 80050f4:	801a      	strh	r2, [r3, #0]
  	SPEED2 = min_speed;
 80050f6:	4b6f      	ldr	r3, [pc, #444]	@ (80052b4 <main+0x374>)
 80050f8:	f642 1204 	movw	r2, #10500	@ 0x2904
 80050fc:	801a      	strh	r2, [r3, #0]
  	SPEED3 = min_speed;
 80050fe:	4b6e      	ldr	r3, [pc, #440]	@ (80052b8 <main+0x378>)
 8005100:	f642 1204 	movw	r2, #10500	@ 0x2904
 8005104:	801a      	strh	r2, [r3, #0]
  	SPEED4 = min_speed;
 8005106:	4b6d      	ldr	r3, [pc, #436]	@ (80052bc <main+0x37c>)
 8005108:	f642 1204 	movw	r2, #10500	@ 0x2904
 800510c:	801a      	strh	r2, [r3, #0]
  	OLD_SPEED1 = min_speed;
 800510e:	4b6c      	ldr	r3, [pc, #432]	@ (80052c0 <main+0x380>)
 8005110:	f642 1204 	movw	r2, #10500	@ 0x2904
 8005114:	801a      	strh	r2, [r3, #0]
  	OLD_SPEED2 = min_speed;
 8005116:	4b6b      	ldr	r3, [pc, #428]	@ (80052c4 <main+0x384>)
 8005118:	f642 1204 	movw	r2, #10500	@ 0x2904
 800511c:	801a      	strh	r2, [r3, #0]
  	OLD_SPEED3 = min_speed;
 800511e:	4b6a      	ldr	r3, [pc, #424]	@ (80052c8 <main+0x388>)
 8005120:	f642 1204 	movw	r2, #10500	@ 0x2904
 8005124:	801a      	strh	r2, [r3, #0]
  	OLD_SPEED4 = min_speed;
 8005126:	4b69      	ldr	r3, [pc, #420]	@ (80052cc <main+0x38c>)
 8005128:	f642 1204 	movw	r2, #10500	@ 0x2904
 800512c:	801a      	strh	r2, [r3, #0]
  	commandready = 0;
 800512e:	4b68      	ldr	r3, [pc, #416]	@ (80052d0 <main+0x390>)
 8005130:	2200      	movs	r2, #0
 8005132:	701a      	strb	r2, [r3, #0]
  	command_ch_num = 0;
 8005134:	4b67      	ldr	r3, [pc, #412]	@ (80052d4 <main+0x394>)
 8005136:	2200      	movs	r2, #0
 8005138:	701a      	strb	r2, [r3, #0]
  	Mainloop_Number = 0;
 800513a:	4b67      	ldr	r3, [pc, #412]	@ (80052d8 <main+0x398>)
 800513c:	2200      	movs	r2, #0
 800513e:	601a      	str	r2, [r3, #0]
  	SD_In_Use = 0;
 8005140:	4b66      	ldr	r3, [pc, #408]	@ (80052dc <main+0x39c>)
 8005142:	2200      	movs	r2, #0
 8005144:	601a      	str	r2, [r3, #0]
  	wobble_strenght = 1;
 8005146:	4b66      	ldr	r3, [pc, #408]	@ (80052e0 <main+0x3a0>)
 8005148:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800514c:	601a      	str	r2, [r3, #0]
  	MPU6050_IRQ = 0, HMC583L_IRQ = 0, BMP180_IRQ = 0;
 800514e:	4b65      	ldr	r3, [pc, #404]	@ (80052e4 <main+0x3a4>)
 8005150:	2200      	movs	r2, #0
 8005152:	701a      	strb	r2, [r3, #0]
 8005154:	4b64      	ldr	r3, [pc, #400]	@ (80052e8 <main+0x3a8>)
 8005156:	2200      	movs	r2, #0
 8005158:	701a      	strb	r2, [r3, #0]
 800515a:	4b64      	ldr	r3, [pc, #400]	@ (80052ec <main+0x3ac>)
 800515c:	2200      	movs	r2, #0
 800515e:	701a      	strb	r2, [r3, #0]
  	i = 0, loopnum = 0;
 8005160:	4b63      	ldr	r3, [pc, #396]	@ (80052f0 <main+0x3b0>)
 8005162:	2200      	movs	r2, #0
 8005164:	601a      	str	r2, [r3, #0]
 8005166:	4b63      	ldr	r3, [pc, #396]	@ (80052f4 <main+0x3b4>)
 8005168:	2200      	movs	r2, #0
 800516a:	601a      	str	r2, [r3, #0]


	  p_angular_rate_pitchfactor = 14;
 800516c:	4b62      	ldr	r3, [pc, #392]	@ (80052f8 <main+0x3b8>)
 800516e:	4a63      	ldr	r2, [pc, #396]	@ (80052fc <main+0x3bc>)
 8005170:	601a      	str	r2, [r3, #0]
	  p_angular_rate_roolfactor = 12;
 8005172:	4b63      	ldr	r3, [pc, #396]	@ (8005300 <main+0x3c0>)
 8005174:	4a63      	ldr	r2, [pc, #396]	@ (8005304 <main+0x3c4>)
 8005176:	601a      	str	r2, [r3, #0]
	  p_angular_rate_yawfactor = 5;// -> 10
 8005178:	4b63      	ldr	r3, [pc, #396]	@ (8005308 <main+0x3c8>)
 800517a:	4a64      	ldr	r2, [pc, #400]	@ (800530c <main+0x3cc>)
 800517c:	601a      	str	r2, [r3, #0]
	///////////////////////////////////////////////////////////////////////////
	  i_angular_rate_pitchfactor = 10;
 800517e:	4b64      	ldr	r3, [pc, #400]	@ (8005310 <main+0x3d0>)
 8005180:	4a64      	ldr	r2, [pc, #400]	@ (8005314 <main+0x3d4>)
 8005182:	601a      	str	r2, [r3, #0]
	  i_angular_rate_roolfactor = 10;
 8005184:	4b64      	ldr	r3, [pc, #400]	@ (8005318 <main+0x3d8>)
 8005186:	4a63      	ldr	r2, [pc, #396]	@ (8005314 <main+0x3d4>)
 8005188:	601a      	str	r2, [r3, #0]
	  i_angular_rate_yawfactor = 0;
 800518a:	4b64      	ldr	r3, [pc, #400]	@ (800531c <main+0x3dc>)
 800518c:	f04f 0200 	mov.w	r2, #0
 8005190:	601a      	str	r2, [r3, #0]
	///////////////////////////////////////////////////////////////////////////
	  d_angular_rate_pitchfactor = 30;
 8005192:	4b63      	ldr	r3, [pc, #396]	@ (8005320 <main+0x3e0>)
 8005194:	4a63      	ldr	r2, [pc, #396]	@ (8005324 <main+0x3e4>)
 8005196:	601a      	str	r2, [r3, #0]
	  d_angular_rate_roolfactor = 20;
 8005198:	4b63      	ldr	r3, [pc, #396]	@ (8005328 <main+0x3e8>)
 800519a:	4a64      	ldr	r2, [pc, #400]	@ (800532c <main+0x3ec>)
 800519c:	601a      	str	r2, [r3, #0]
	  d_angular_rate_yawfactor = 5;
 800519e:	4b64      	ldr	r3, [pc, #400]	@ (8005330 <main+0x3f0>)
 80051a0:	4a5a      	ldr	r2, [pc, #360]	@ (800530c <main+0x3cc>)
 80051a2:	601a      	str	r2, [r3, #0]

	  p_pitchfactor = 5.5;
 80051a4:	4b15      	ldr	r3, [pc, #84]	@ (80051fc <main+0x2bc>)
 80051a6:	4a63      	ldr	r2, [pc, #396]	@ (8005334 <main+0x3f4>)
 80051a8:	601a      	str	r2, [r3, #0]
	  p_roolfactor = 6;//5
 80051aa:	4b18      	ldr	r3, [pc, #96]	@ (800520c <main+0x2cc>)
 80051ac:	4a62      	ldr	r2, [pc, #392]	@ (8005338 <main+0x3f8>)
 80051ae:	601a      	str	r2, [r3, #0]
	  p_yawfactor = 5;
 80051b0:	4b1a      	ldr	r3, [pc, #104]	@ (800521c <main+0x2dc>)
 80051b2:	4a56      	ldr	r2, [pc, #344]	@ (800530c <main+0x3cc>)
 80051b4:	601a      	str	r2, [r3, #0]
	///////////////////////////////////////////////////////////////////////////
	  i_pitchfactor = 9;//8
 80051b6:	4b13      	ldr	r3, [pc, #76]	@ (8005204 <main+0x2c4>)
 80051b8:	4a60      	ldr	r2, [pc, #384]	@ (800533c <main+0x3fc>)
 80051ba:	601a      	str	r2, [r3, #0]
	  i_roolfactor = 8;//10
 80051bc:	4b15      	ldr	r3, [pc, #84]	@ (8005214 <main+0x2d4>)
 80051be:	f04f 4282 	mov.w	r2, #1090519040	@ 0x41000000
 80051c2:	601a      	str	r2, [r3, #0]
	  i_yawfactor = 0;
 80051c4:	4b17      	ldr	r3, [pc, #92]	@ (8005224 <main+0x2e4>)
 80051c6:	f04f 0200 	mov.w	r2, #0
 80051ca:	601a      	str	r2, [r3, #0]
	///////////////////////////////////////////////////////////////////////////
	  d_pitchfactor = 30;//25
 80051cc:	4b0e      	ldr	r3, [pc, #56]	@ (8005208 <main+0x2c8>)
 80051ce:	4a55      	ldr	r2, [pc, #340]	@ (8005324 <main+0x3e4>)
 80051d0:	601a      	str	r2, [r3, #0]
	  d_roolfactor = 20;
 80051d2:	4b11      	ldr	r3, [pc, #68]	@ (8005218 <main+0x2d8>)
 80051d4:	4a55      	ldr	r2, [pc, #340]	@ (800532c <main+0x3ec>)
 80051d6:	601a      	str	r2, [r3, #0]
	  d_yawfactor = 0;
 80051d8:	4b13      	ldr	r3, [pc, #76]	@ (8005228 <main+0x2e8>)
 80051da:	f04f 0200 	mov.w	r2, #0
 80051de:	601a      	str	r2, [r3, #0]

  	  PID_FAC_Angular_Rate_Pitch[0] = p_angular_rate_pitchfactor;
 80051e0:	4b45      	ldr	r3, [pc, #276]	@ (80052f8 <main+0x3b8>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a56      	ldr	r2, [pc, #344]	@ (8005340 <main+0x400>)
 80051e6:	6013      	str	r3, [r2, #0]
  	  PID_FAC_Angular_Rate_Pitch[1] = i_angular_rate_pitchfactor;
 80051e8:	4b49      	ldr	r3, [pc, #292]	@ (8005310 <main+0x3d0>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	e0aa      	b.n	8005344 <main+0x404>
 80051ee:	bf00      	nop
 80051f0:	00000074 	.word	0x00000074
 80051f4:	58021800 	.word	0x58021800
 80051f8:	0000419c 	.word	0x0000419c
 80051fc:	000040cc 	.word	0x000040cc
 8005200:	000040f0 	.word	0x000040f0
 8005204:	000040d8 	.word	0x000040d8
 8005208:	000040e4 	.word	0x000040e4
 800520c:	000040d0 	.word	0x000040d0
 8005210:	00004104 	.word	0x00004104
 8005214:	000040dc 	.word	0x000040dc
 8005218:	000040e8 	.word	0x000040e8
 800521c:	000040d4 	.word	0x000040d4
 8005220:	00004118 	.word	0x00004118
 8005224:	000040e0 	.word	0x000040e0
 8005228:	000040ec 	.word	0x000040ec
 800522c:	00000018 	.word	0x00000018
 8005230:	0000001c 	.word	0x0000001c
 8005234:	00000020 	.word	0x00000020
 8005238:	00000024 	.word	0x00000024
 800523c:	00000028 	.word	0x00000028
 8005240:	0000002c 	.word	0x0000002c
 8005244:	00000058 	.word	0x00000058
 8005248:	0000006c 	.word	0x0000006c
 800524c:	00000070 	.word	0x00000070
 8005250:	00000078 	.word	0x00000078
 8005254:	000000dc 	.word	0x000000dc
 8005258:	000000e0 	.word	0x000000e0
 800525c:	000000e4 	.word	0x000000e4
 8005260:	000000e8 	.word	0x000000e8
 8005264:	00004050 	.word	0x00004050
 8005268:	00004054 	.word	0x00004054
 800526c:	00004058 	.word	0x00004058
 8005270:	0000405c 	.word	0x0000405c
 8005274:	0000405e 	.word	0x0000405e
 8005278:	00004074 	.word	0x00004074
 800527c:	00004076 	.word	0x00004076
 8005280:	00004084 	.word	0x00004084
 8005284:	00004088 	.word	0x00004088
 8005288:	0000408c 	.word	0x0000408c
 800528c:	00004090 	.word	0x00004090
 8005290:	00004094 	.word	0x00004094
 8005294:	00004098 	.word	0x00004098
 8005298:	0000409c 	.word	0x0000409c
 800529c:	000040a0 	.word	0x000040a0
 80052a0:	000040a4 	.word	0x000040a4
 80052a4:	000040a8 	.word	0x000040a8
 80052a8:	000040ac 	.word	0x000040ac
 80052ac:	000040b0 	.word	0x000040b0
 80052b0:	0000418c 	.word	0x0000418c
 80052b4:	0000418e 	.word	0x0000418e
 80052b8:	00004190 	.word	0x00004190
 80052bc:	00004192 	.word	0x00004192
 80052c0:	00004194 	.word	0x00004194
 80052c4:	00004196 	.word	0x00004196
 80052c8:	00004198 	.word	0x00004198
 80052cc:	0000419a 	.word	0x0000419a
 80052d0:	000041be 	.word	0x000041be
 80052d4:	000041bf 	.word	0x000041bf
 80052d8:	000041c4 	.word	0x000041c4
 80052dc:	000041c8 	.word	0x000041c8
 80052e0:	000041d0 	.word	0x000041d0
 80052e4:	000041d4 	.word	0x000041d4
 80052e8:	000041d5 	.word	0x000041d5
 80052ec:	000041d6 	.word	0x000041d6
 80052f0:	000041d8 	.word	0x000041d8
 80052f4:	000041dc 	.word	0x000041dc
 80052f8:	0000412c 	.word	0x0000412c
 80052fc:	41600000 	.word	0x41600000
 8005300:	00004130 	.word	0x00004130
 8005304:	41400000 	.word	0x41400000
 8005308:	00004134 	.word	0x00004134
 800530c:	40a00000 	.word	0x40a00000
 8005310:	00004138 	.word	0x00004138
 8005314:	41200000 	.word	0x41200000
 8005318:	0000413c 	.word	0x0000413c
 800531c:	00004140 	.word	0x00004140
 8005320:	00004144 	.word	0x00004144
 8005324:	41f00000 	.word	0x41f00000
 8005328:	00004148 	.word	0x00004148
 800532c:	41a00000 	.word	0x41a00000
 8005330:	0000414c 	.word	0x0000414c
 8005334:	40b00000 	.word	0x40b00000
 8005338:	40c00000 	.word	0x40c00000
 800533c:	41100000 	.word	0x41100000
 8005340:	00004150 	.word	0x00004150
 8005344:	4aa7      	ldr	r2, [pc, #668]	@ (80055e4 <main+0x6a4>)
 8005346:	6053      	str	r3, [r2, #4]
  	  PID_FAC_Angular_Rate_Pitch[2] = d_angular_rate_pitchfactor;
 8005348:	4ba7      	ldr	r3, [pc, #668]	@ (80055e8 <main+0x6a8>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4aa5      	ldr	r2, [pc, #660]	@ (80055e4 <main+0x6a4>)
 800534e:	6093      	str	r3, [r2, #8]
  	  PID_FAC_Angular_Rate_Rool[0] = p_angular_rate_roolfactor;//
 8005350:	4ba6      	ldr	r3, [pc, #664]	@ (80055ec <main+0x6ac>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4aa6      	ldr	r2, [pc, #664]	@ (80055f0 <main+0x6b0>)
 8005356:	6013      	str	r3, [r2, #0]
  	  PID_FAC_Angular_Rate_Rool[1] = i_angular_rate_roolfactor;
 8005358:	4ba6      	ldr	r3, [pc, #664]	@ (80055f4 <main+0x6b4>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4aa4      	ldr	r2, [pc, #656]	@ (80055f0 <main+0x6b0>)
 800535e:	6053      	str	r3, [r2, #4]
  	  PID_FAC_Angular_Rate_Rool[2] = d_angular_rate_roolfactor;
 8005360:	4ba5      	ldr	r3, [pc, #660]	@ (80055f8 <main+0x6b8>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4aa2      	ldr	r2, [pc, #648]	@ (80055f0 <main+0x6b0>)
 8005366:	6093      	str	r3, [r2, #8]
  	  PID_FAC_Angular_Rate_Yaw[0] = p_angular_rate_yawfactor;//
 8005368:	4ba4      	ldr	r3, [pc, #656]	@ (80055fc <main+0x6bc>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4aa4      	ldr	r2, [pc, #656]	@ (8005600 <main+0x6c0>)
 800536e:	6013      	str	r3, [r2, #0]
  	  PID_FAC_Angular_Rate_Yaw[1] = i_angular_rate_yawfactor;
 8005370:	4ba4      	ldr	r3, [pc, #656]	@ (8005604 <main+0x6c4>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4aa2      	ldr	r2, [pc, #648]	@ (8005600 <main+0x6c0>)
 8005376:	6053      	str	r3, [r2, #4]
  	  PID_FAC_Angular_Rate_Yaw[2] = d_angular_rate_yawfactor;
 8005378:	4ba3      	ldr	r3, [pc, #652]	@ (8005608 <main+0x6c8>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4aa0      	ldr	r2, [pc, #640]	@ (8005600 <main+0x6c0>)
 800537e:	6093      	str	r3, [r2, #8]
  	  PID_FAC_Pitch[0] = p_pitchfactor;
 8005380:	4ba2      	ldr	r3, [pc, #648]	@ (800560c <main+0x6cc>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4aa2      	ldr	r2, [pc, #648]	@ (8005610 <main+0x6d0>)
 8005386:	6013      	str	r3, [r2, #0]
  	  PID_FAC_Pitch[1] = i_pitchfactor;
 8005388:	4ba2      	ldr	r3, [pc, #648]	@ (8005614 <main+0x6d4>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4aa0      	ldr	r2, [pc, #640]	@ (8005610 <main+0x6d0>)
 800538e:	6053      	str	r3, [r2, #4]
  	  PID_FAC_Pitch[2] = d_pitchfactor;
 8005390:	4ba1      	ldr	r3, [pc, #644]	@ (8005618 <main+0x6d8>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a9e      	ldr	r2, [pc, #632]	@ (8005610 <main+0x6d0>)
 8005396:	6093      	str	r3, [r2, #8]
  	  PID_FAC_Rool[0] = p_roolfactor;//
 8005398:	4ba0      	ldr	r3, [pc, #640]	@ (800561c <main+0x6dc>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4aa0      	ldr	r2, [pc, #640]	@ (8005620 <main+0x6e0>)
 800539e:	6013      	str	r3, [r2, #0]
  	  PID_FAC_Rool[1] = i_roolfactor;
 80053a0:	4ba0      	ldr	r3, [pc, #640]	@ (8005624 <main+0x6e4>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a9e      	ldr	r2, [pc, #632]	@ (8005620 <main+0x6e0>)
 80053a6:	6053      	str	r3, [r2, #4]
  	  PID_FAC_Rool[2] = d_roolfactor;
 80053a8:	4b9f      	ldr	r3, [pc, #636]	@ (8005628 <main+0x6e8>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a9c      	ldr	r2, [pc, #624]	@ (8005620 <main+0x6e0>)
 80053ae:	6093      	str	r3, [r2, #8]
  	  PID_FAC_Yaw[0] = p_yawfactor;//
 80053b0:	4b9e      	ldr	r3, [pc, #632]	@ (800562c <main+0x6ec>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a9e      	ldr	r2, [pc, #632]	@ (8005630 <main+0x6f0>)
 80053b6:	6013      	str	r3, [r2, #0]
  	  PID_FAC_Yaw[1] = i_yawfactor;
 80053b8:	4b9e      	ldr	r3, [pc, #632]	@ (8005634 <main+0x6f4>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a9c      	ldr	r2, [pc, #624]	@ (8005630 <main+0x6f0>)
 80053be:	6053      	str	r3, [r2, #4]
  	  PID_FAC_Yaw[2] = d_yawfactor;
 80053c0:	4b9d      	ldr	r3, [pc, #628]	@ (8005638 <main+0x6f8>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a9a      	ldr	r2, [pc, #616]	@ (8005630 <main+0x6f0>)
 80053c6:	6093      	str	r3, [r2, #8]


  	data.ox = 0;
 80053c8:	4b9c      	ldr	r3, [pc, #624]	@ (800563c <main+0x6fc>)
 80053ca:	f04f 0200 	mov.w	r2, #0
 80053ce:	60da      	str	r2, [r3, #12]
  	data.x = 0;
 80053d0:	4b9a      	ldr	r3, [pc, #616]	@ (800563c <main+0x6fc>)
 80053d2:	f04f 0200 	mov.w	r2, #0
 80053d6:	601a      	str	r2, [r3, #0]
  	data.oy = 0;
 80053d8:	4b98      	ldr	r3, [pc, #608]	@ (800563c <main+0x6fc>)
 80053da:	f04f 0200 	mov.w	r2, #0
 80053de:	611a      	str	r2, [r3, #16]
  	data.y = 0;
 80053e0:	4b96      	ldr	r3, [pc, #600]	@ (800563c <main+0x6fc>)
 80053e2:	f04f 0200 	mov.w	r2, #0
 80053e6:	605a      	str	r2, [r3, #4]
  	data.oz = 0;
 80053e8:	4b94      	ldr	r3, [pc, #592]	@ (800563c <main+0x6fc>)
 80053ea:	f04f 0200 	mov.w	r2, #0
 80053ee:	615a      	str	r2, [r3, #20]
  	data.z = 0;
 80053f0:	4b92      	ldr	r3, [pc, #584]	@ (800563c <main+0x6fc>)
 80053f2:	f04f 0200 	mov.w	r2, #0
 80053f6:	609a      	str	r2, [r3, #8]


  	pid_pitch = 0;
 80053f8:	4b91      	ldr	r3, [pc, #580]	@ (8005640 <main+0x700>)
 80053fa:	f04f 0200 	mov.w	r2, #0
 80053fe:	601a      	str	r2, [r3, #0]
  	pid_yaw = 0;
 8005400:	4b90      	ldr	r3, [pc, #576]	@ (8005644 <main+0x704>)
 8005402:	f04f 0200 	mov.w	r2, #0
 8005406:	601a      	str	r2, [r3, #0]
  	pid_rool = 0;
 8005408:	4b8f      	ldr	r3, [pc, #572]	@ (8005648 <main+0x708>)
 800540a:	f04f 0200 	mov.w	r2, #0
 800540e:	601a      	str	r2, [r3, #0]

  	pid_angular_rate_pitch = 0;
 8005410:	4b8e      	ldr	r3, [pc, #568]	@ (800564c <main+0x70c>)
 8005412:	f04f 0200 	mov.w	r2, #0
 8005416:	601a      	str	r2, [r3, #0]
  	pid_angular_rate_yaw = 0;
 8005418:	4b8d      	ldr	r3, [pc, #564]	@ (8005650 <main+0x710>)
 800541a:	f04f 0200 	mov.w	r2, #0
 800541e:	601a      	str	r2, [r3, #0]
  	pid_angular_rate_rool = 0;
 8005420:	4b8c      	ldr	r3, [pc, #560]	@ (8005654 <main+0x714>)
 8005422:	f04f 0200 	mov.w	r2, #0
 8005426:	601a      	str	r2, [r3, #0]


  	uint8_t o[3] = "Odb";
 8005428:	4a8b      	ldr	r2, [pc, #556]	@ (8005658 <main+0x718>)
 800542a:	f107 0308 	add.w	r3, r7, #8
 800542e:	6812      	ldr	r2, [r2, #0]
 8005430:	4611      	mov	r1, r2
 8005432:	8019      	strh	r1, [r3, #0]
 8005434:	3302      	adds	r3, #2
 8005436:	0c12      	lsrs	r2, r2, #16
 8005438:	701a      	strb	r2, [r3, #0]
  	uint8_t n[3] = "Nad";
 800543a:	4a88      	ldr	r2, [pc, #544]	@ (800565c <main+0x71c>)
 800543c:	1d3b      	adds	r3, r7, #4
 800543e:	6812      	ldr	r2, [r2, #0]
 8005440:	4611      	mov	r1, r2
 8005442:	8019      	strh	r1, [r3, #0]
 8005444:	3302      	adds	r3, #2
 8005446:	0c12      	lsrs	r2, r2, #16
 8005448:	701a      	strb	r2, [r3, #0]


  	LED_5_1;
 800544a:	2201      	movs	r2, #1
 800544c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005450:	4883      	ldr	r0, [pc, #524]	@ (8005660 <main+0x720>)
 8005452:	f008 fec1 	bl	800e1d8 <HAL_GPIO_WritePin>
  	LED_6_1;
 8005456:	2201      	movs	r2, #1
 8005458:	2108      	movs	r1, #8
 800545a:	4882      	ldr	r0, [pc, #520]	@ (8005664 <main+0x724>)
 800545c:	f008 febc 	bl	800e1d8 <HAL_GPIO_WritePin>
  	LED_7_1;
 8005460:	2201      	movs	r2, #1
 8005462:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005466:	487e      	ldr	r0, [pc, #504]	@ (8005660 <main+0x720>)
 8005468:	f008 feb6 	bl	800e1d8 <HAL_GPIO_WritePin>
  	LED_uSD_1;
 800546c:	2201      	movs	r2, #1
 800546e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005472:	487d      	ldr	r0, [pc, #500]	@ (8005668 <main+0x728>)
 8005474:	f008 feb0 	bl	800e1d8 <HAL_GPIO_WritePin>
  	LED_G_1;
 8005478:	2201      	movs	r2, #1
 800547a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800547e:	4879      	ldr	r0, [pc, #484]	@ (8005664 <main+0x724>)
 8005480:	f008 feaa 	bl	800e1d8 <HAL_GPIO_WritePin>
  	LED_Y_1;
 8005484:	2201      	movs	r2, #1
 8005486:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800548a:	4878      	ldr	r0, [pc, #480]	@ (800566c <main+0x72c>)
 800548c:	f008 fea4 	bl	800e1d8 <HAL_GPIO_WritePin>
  	LED_R_1;
 8005490:	2201      	movs	r2, #1
 8005492:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005496:	4875      	ldr	r0, [pc, #468]	@ (800566c <main+0x72c>)
 8005498:	f008 fe9e 	bl	800e1d8 <HAL_GPIO_WritePin>
  	HAL_Delay(1000);
 800549c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80054a0:	f003 fd3c 	bl	8008f1c <HAL_Delay>
  	LED_G_0;
 80054a4:	2200      	movs	r2, #0
 80054a6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80054aa:	486e      	ldr	r0, [pc, #440]	@ (8005664 <main+0x724>)
 80054ac:	f008 fe94 	bl	800e1d8 <HAL_GPIO_WritePin>
  	LED_Y_0;
 80054b0:	2200      	movs	r2, #0
 80054b2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80054b6:	486d      	ldr	r0, [pc, #436]	@ (800566c <main+0x72c>)
 80054b8:	f008 fe8e 	bl	800e1d8 <HAL_GPIO_WritePin>
  	LED_R_0;
 80054bc:	2200      	movs	r2, #0
 80054be:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80054c2:	486a      	ldr	r0, [pc, #424]	@ (800566c <main+0x72c>)
 80054c4:	f008 fe88 	bl	800e1d8 <HAL_GPIO_WritePin>
  	LED_5_0;
 80054c8:	2200      	movs	r2, #0
 80054ca:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80054ce:	4864      	ldr	r0, [pc, #400]	@ (8005660 <main+0x720>)
 80054d0:	f008 fe82 	bl	800e1d8 <HAL_GPIO_WritePin>
  	LED_6_0;
 80054d4:	2200      	movs	r2, #0
 80054d6:	2108      	movs	r1, #8
 80054d8:	4862      	ldr	r0, [pc, #392]	@ (8005664 <main+0x724>)
 80054da:	f008 fe7d 	bl	800e1d8 <HAL_GPIO_WritePin>
  	LED_7_0;
 80054de:	2200      	movs	r2, #0
 80054e0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80054e4:	485e      	ldr	r0, [pc, #376]	@ (8005660 <main+0x720>)
 80054e6:	f008 fe77 	bl	800e1d8 <HAL_GPIO_WritePin>
  	LED_uSD_0;
 80054ea:	2200      	movs	r2, #0
 80054ec:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80054f0:	485d      	ldr	r0, [pc, #372]	@ (8005668 <main+0x728>)
 80054f2:	f008 fe71 	bl	800e1d8 <HAL_GPIO_WritePin>




  	for(int i = 0; i < 4000; i++){
 80054f6:	2300      	movs	r3, #0
 80054f8:	61fb      	str	r3, [r7, #28]
 80054fa:	e009      	b.n	8005510 <main+0x5d0>
  		Old_Data_stack.olddata[i] = 0;
 80054fc:	4a5c      	ldr	r2, [pc, #368]	@ (8005670 <main+0x730>)
 80054fe:	69fb      	ldr	r3, [r7, #28]
 8005500:	009b      	lsls	r3, r3, #2
 8005502:	4413      	add	r3, r2
 8005504:	f04f 0200 	mov.w	r2, #0
 8005508:	601a      	str	r2, [r3, #0]
  	for(int i = 0; i < 4000; i++){
 800550a:	69fb      	ldr	r3, [r7, #28]
 800550c:	3301      	adds	r3, #1
 800550e:	61fb      	str	r3, [r7, #28]
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8005516:	dbf1      	blt.n	80054fc <main+0x5bc>
  	}
  	Old_Data_stack.start_pointer = 0;
 8005518:	4b55      	ldr	r3, [pc, #340]	@ (8005670 <main+0x730>)
 800551a:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800551e:	2200      	movs	r2, #0
 8005520:	f8a3 2ea8 	strh.w	r2, [r3, #3752]	@ 0xea8
  	Old_Data_stack.end_pointer = 4000;
 8005524:	4b52      	ldr	r3, [pc, #328]	@ (8005670 <main+0x730>)
 8005526:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800552a:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 800552e:	f8a3 2eaa 	strh.w	r2, [r3, #3754]	@ 0xeaa

  	analogmess = 0;
 8005532:	4b50      	ldr	r3, [pc, #320]	@ (8005674 <main+0x734>)
 8005534:	2200      	movs	r2, #0
 8005536:	601a      	str	r2, [r3, #0]


  	HAL_TIM_Base_Start(&htim8);
 8005538:	484f      	ldr	r0, [pc, #316]	@ (8005678 <main+0x738>)
 800553a:	f010 fc3d 	bl	8015db8 <HAL_TIM_Base_Start>
  	HAL_ADC_Start_DMA(&hadc2, &analogmess, 1);//todo psuje program
 800553e:	2201      	movs	r2, #1
 8005540:	494c      	ldr	r1, [pc, #304]	@ (8005674 <main+0x734>)
 8005542:	484e      	ldr	r0, [pc, #312]	@ (800567c <main+0x73c>)
 8005544:	f004 fa02 	bl	800994c <HAL_ADC_Start_DMA>
  	LED_R_1;
 8005548:	2201      	movs	r2, #1
 800554a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800554e:	4847      	ldr	r0, [pc, #284]	@ (800566c <main+0x72c>)
 8005550:	f008 fe42 	bl	800e1d8 <HAL_GPIO_WritePin>
  	while(analogmess == 0){
 8005554:	bf00      	nop
 8005556:	4b47      	ldr	r3, [pc, #284]	@ (8005674 <main+0x734>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d0fb      	beq.n	8005556 <main+0x616>

  	}
  	LED_R_0;
 800555e:	2200      	movs	r2, #0
 8005560:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005564:	4841      	ldr	r0, [pc, #260]	@ (800566c <main+0x72c>)
 8005566:	f008 fe37 	bl	800e1d8 <HAL_GPIO_WritePin>

  	Get_batteryvalue();
 800556a:	f7fe fde1 	bl	8004130 <Get_batteryvalue>

  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);//pwm do diodt RGB
 800556e:	2104      	movs	r1, #4
 8005570:	4843      	ldr	r0, [pc, #268]	@ (8005680 <main+0x740>)
 8005572:	f010 fd7d 	bl	8016070 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8005576:	2108      	movs	r1, #8
 8005578:	4841      	ldr	r0, [pc, #260]	@ (8005680 <main+0x740>)
 800557a:	f010 fd79 	bl	8016070 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800557e:	210c      	movs	r1, #12
 8005580:	483f      	ldr	r0, [pc, #252]	@ (8005680 <main+0x740>)
 8005582:	f010 fd75 	bl	8016070 <HAL_TIM_PWM_Start>


  	RGB_LED_For_BAT(MYDRON.batterysize);
 8005586:	4b3f      	ldr	r3, [pc, #252]	@ (8005684 <main+0x744>)
 8005588:	881b      	ldrh	r3, [r3, #0]
 800558a:	b2db      	uxtb	r3, r3
 800558c:	4618      	mov	r0, r3
 800558e:	f001 fd77 	bl	8007080 <RGB_LED_For_BAT>
  	if(MYDRON.dron_status.Battery == DRON_BATTERY_RUN_OUT)
 8005592:	4b3c      	ldr	r3, [pc, #240]	@ (8005684 <main+0x744>)
 8005594:	899b      	ldrh	r3, [r3, #12]
 8005596:	2b07      	cmp	r3, #7
 8005598:	d107      	bne.n	80055aa <main+0x66a>
  	{
  		LED_R_1;
 800559a:	2201      	movs	r2, #1
 800559c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80055a0:	4832      	ldr	r0, [pc, #200]	@ (800566c <main+0x72c>)
 80055a2:	f008 fe19 	bl	800e1d8 <HAL_GPIO_WritePin>
  		while(1){
 80055a6:	bf00      	nop
 80055a8:	e7fd      	b.n	80055a6 <main+0x666>

  		}
  	}
  	if(MYDRON.dron_status.Battery == DRON_BATTERY_CRIT_VAL){
 80055aa:	4b36      	ldr	r3, [pc, #216]	@ (8005684 <main+0x744>)
 80055ac:	899b      	ldrh	r3, [r3, #12]
 80055ae:	2b09      	cmp	r3, #9
 80055b0:	d107      	bne.n	80055c2 <main+0x682>
  		LED_R_1;
 80055b2:	2201      	movs	r2, #1
 80055b4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80055b8:	482c      	ldr	r0, [pc, #176]	@ (800566c <main+0x72c>)
 80055ba:	f008 fe0d 	bl	800e1d8 <HAL_GPIO_WritePin>
  		while(1){
 80055be:	bf00      	nop
 80055c0:	e7fd      	b.n	80055be <main+0x67e>
  		}
  	}


  /////////////////////////////// uSD
	SD_enable_Flag = HAL_GPIO_ReadPin(uSD_Detection_GPIO_Port, uSD_Detection_Pin);// jezeli karta SD jest wlozona, pin CardDetect jest zwierany do masy
 80055c2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80055c6:	4829      	ldr	r0, [pc, #164]	@ (800566c <main+0x72c>)
 80055c8:	f008 fdee 	bl	800e1a8 <HAL_GPIO_ReadPin>
 80055cc:	4603      	mov	r3, r0
 80055ce:	461a      	mov	r2, r3
 80055d0:	4b2d      	ldr	r3, [pc, #180]	@ (8005688 <main+0x748>)
 80055d2:	701a      	strb	r2, [r3, #0]

	if(SD_enable_Flag == 1){
 80055d4:	4b2c      	ldr	r3, [pc, #176]	@ (8005688 <main+0x748>)
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d157      	bne.n	800568c <main+0x74c>
		SD_enable_Flag = 0;
 80055dc:	4b2a      	ldr	r3, [pc, #168]	@ (8005688 <main+0x748>)
 80055de:	2200      	movs	r2, #0
 80055e0:	701a      	strb	r2, [r3, #0]
 80055e2:	e056      	b.n	8005692 <main+0x752>
 80055e4:	00004150 	.word	0x00004150
 80055e8:	00004144 	.word	0x00004144
 80055ec:	00004130 	.word	0x00004130
 80055f0:	00004164 	.word	0x00004164
 80055f4:	0000413c 	.word	0x0000413c
 80055f8:	00004148 	.word	0x00004148
 80055fc:	00004134 	.word	0x00004134
 8005600:	00004178 	.word	0x00004178
 8005604:	00004140 	.word	0x00004140
 8005608:	0000414c 	.word	0x0000414c
 800560c:	000040cc 	.word	0x000040cc
 8005610:	000040f0 	.word	0x000040f0
 8005614:	000040d8 	.word	0x000040d8
 8005618:	000040e4 	.word	0x000040e4
 800561c:	000040d0 	.word	0x000040d0
 8005620:	00004104 	.word	0x00004104
 8005624:	000040dc 	.word	0x000040dc
 8005628:	000040e8 	.word	0x000040e8
 800562c:	000040d4 	.word	0x000040d4
 8005630:	00004118 	.word	0x00004118
 8005634:	000040e0 	.word	0x000040e0
 8005638:	000040ec 	.word	0x000040ec
 800563c:	0000007c 	.word	0x0000007c
 8005640:	000040b4 	.word	0x000040b4
 8005644:	000040b8 	.word	0x000040b8
 8005648:	000040bc 	.word	0x000040bc
 800564c:	000040c0 	.word	0x000040c0
 8005650:	000040c4 	.word	0x000040c4
 8005654:	000040c8 	.word	0x000040c8
 8005658:	0801e534 	.word	0x0801e534
 800565c:	0801e538 	.word	0x0801e538
 8005660:	58020000 	.word	0x58020000
 8005664:	58021000 	.word	0x58021000
 8005668:	58020c00 	.word	0x58020c00
 800566c:	58020400 	.word	0x58020400
 8005670:	0000019c 	.word	0x0000019c
 8005674:	24000eb0 	.word	0x24000eb0
 8005678:	24000464 	.word	0x24000464
 800567c:	240000ac 	.word	0x240000ac
 8005680:	24000380 	.word	0x24000380
 8005684:	00000180 	.word	0x00000180
 8005688:	000041cc 	.word	0x000041cc
	}
	else{
		SD_enable_Flag = 1;
 800568c:	4bb2      	ldr	r3, [pc, #712]	@ (8005958 <main+0xa18>)
 800568e:	2201      	movs	r2, #1
 8005690:	701a      	strb	r2, [r3, #0]
	}

	if(SD_enable_Flag == 1){
 8005692:	4bb1      	ldr	r3, [pc, #708]	@ (8005958 <main+0xa18>)
 8005694:	781b      	ldrb	r3, [r3, #0]
 8005696:	2b01      	cmp	r3, #1
 8005698:	d15f      	bne.n	800575a <main+0x81a>
		LED_uSD_1;
 800569a:	2201      	movs	r2, #1
 800569c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80056a0:	48ae      	ldr	r0, [pc, #696]	@ (800595c <main+0xa1c>)
 80056a2:	f008 fd99 	bl	800e1d8 <HAL_GPIO_WritePin>
		fresult = f_mount(&fs, "/", 1);
 80056a6:	2201      	movs	r2, #1
 80056a8:	49ad      	ldr	r1, [pc, #692]	@ (8005960 <main+0xa20>)
 80056aa:	48ae      	ldr	r0, [pc, #696]	@ (8005964 <main+0xa24>)
 80056ac:	f017 fbf6 	bl	801ce9c <f_mount>
 80056b0:	4603      	mov	r3, r0
 80056b2:	461a      	mov	r2, r3
 80056b4:	4bac      	ldr	r3, [pc, #688]	@ (8005968 <main+0xa28>)
 80056b6:	701a      	strb	r2, [r3, #0]
		fresult = f_unlink("/file.txt");//skasowanie poprzedniego pliku
 80056b8:	48ac      	ldr	r0, [pc, #688]	@ (800596c <main+0xa2c>)
 80056ba:	f018 f839 	bl	801d730 <f_unlink>
 80056be:	4603      	mov	r3, r0
 80056c0:	461a      	mov	r2, r3
 80056c2:	4ba9      	ldr	r3, [pc, #676]	@ (8005968 <main+0xa28>)
 80056c4:	701a      	strb	r2, [r3, #0]
		fresult = f_mount(&fs, "/", 1);
 80056c6:	2201      	movs	r2, #1
 80056c8:	49a5      	ldr	r1, [pc, #660]	@ (8005960 <main+0xa20>)
 80056ca:	48a6      	ldr	r0, [pc, #664]	@ (8005964 <main+0xa24>)
 80056cc:	f017 fbe6 	bl	801ce9c <f_mount>
 80056d0:	4603      	mov	r3, r0
 80056d2:	461a      	mov	r2, r3
 80056d4:	4ba4      	ldr	r3, [pc, #656]	@ (8005968 <main+0xa28>)
 80056d6:	701a      	strb	r2, [r3, #0]
		fresult = f_open(&fil, "file.txt", FA_CREATE_ALWAYS | FA_WRITE);// utwozenie nowego pliku
 80056d8:	220a      	movs	r2, #10
 80056da:	49a5      	ldr	r1, [pc, #660]	@ (8005970 <main+0xa30>)
 80056dc:	48a5      	ldr	r0, [pc, #660]	@ (8005974 <main+0xa34>)
 80056de:	f017 fc23 	bl	801cf28 <f_open>
 80056e2:	4603      	mov	r3, r0
 80056e4:	461a      	mov	r2, r3
 80056e6:	4ba0      	ldr	r3, [pc, #640]	@ (8005968 <main+0xa28>)
 80056e8:	701a      	strb	r2, [r3, #0]
		LED_uSD_0;
 80056ea:	2200      	movs	r2, #0
 80056ec:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80056f0:	489a      	ldr	r0, [pc, #616]	@ (800595c <main+0xa1c>)
 80056f2:	f008 fd71 	bl	800e1d8 <HAL_GPIO_WritePin>

		LED_uSD_1;
 80056f6:	2201      	movs	r2, #1
 80056f8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80056fc:	4897      	ldr	r0, [pc, #604]	@ (800595c <main+0xa1c>)
 80056fe:	f008 fd6b 	bl	800e1d8 <HAL_GPIO_WritePin>
		for(int i = 0; i < 129000; i++){
 8005702:	2300      	movs	r3, #0
 8005704:	61bb      	str	r3, [r7, #24]
 8005706:	e007      	b.n	8005718 <main+0x7d8>
			DataToSendBuffer[i] = 49;
 8005708:	4a9b      	ldr	r2, [pc, #620]	@ (8005978 <main+0xa38>)
 800570a:	69bb      	ldr	r3, [r7, #24]
 800570c:	4413      	add	r3, r2
 800570e:	2231      	movs	r2, #49	@ 0x31
 8005710:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 129000; i++){
 8005712:	69bb      	ldr	r3, [r7, #24]
 8005714:	3301      	adds	r3, #1
 8005716:	61bb      	str	r3, [r7, #24]
 8005718:	69bb      	ldr	r3, [r7, #24]
 800571a:	4a98      	ldr	r2, [pc, #608]	@ (800597c <main+0xa3c>)
 800571c:	4293      	cmp	r3, r2
 800571e:	ddf3      	ble.n	8005708 <main+0x7c8>
		}
		fresult = f_write(&fil, DataToSendBuffer, 129, &bw);//64000
 8005720:	4b97      	ldr	r3, [pc, #604]	@ (8005980 <main+0xa40>)
 8005722:	2281      	movs	r2, #129	@ 0x81
 8005724:	4994      	ldr	r1, [pc, #592]	@ (8005978 <main+0xa38>)
 8005726:	4893      	ldr	r0, [pc, #588]	@ (8005974 <main+0xa34>)
 8005728:	f017 fdc6 	bl	801d2b8 <f_write>
 800572c:	4603      	mov	r3, r0
 800572e:	461a      	mov	r2, r3
 8005730:	4b8d      	ldr	r3, [pc, #564]	@ (8005968 <main+0xa28>)
 8005732:	701a      	strb	r2, [r3, #0]
		fresult = f_close(&fil);
 8005734:	488f      	ldr	r0, [pc, #572]	@ (8005974 <main+0xa34>)
 8005736:	f017 ffd1 	bl	801d6dc <f_close>
 800573a:	4603      	mov	r3, r0
 800573c:	461a      	mov	r2, r3
 800573e:	4b8a      	ldr	r3, [pc, #552]	@ (8005968 <main+0xa28>)
 8005740:	701a      	strb	r2, [r3, #0]

		if(fresult != FR_OK){
 8005742:	4b89      	ldr	r3, [pc, #548]	@ (8005968 <main+0xa28>)
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d001      	beq.n	800574e <main+0x80e>
			while(1){
 800574a:	bf00      	nop
 800574c:	e7fd      	b.n	800574a <main+0x80a>

			}
		}
		LED_uSD_0;
 800574e:	2200      	movs	r2, #0
 8005750:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005754:	4881      	ldr	r0, [pc, #516]	@ (800595c <main+0xa1c>)
 8005756:	f008 fd3f 	bl	800e1d8 <HAL_GPIO_WritePin>
	}

	/////////////////////////////// MPU6050
		LED_5_1;
 800575a:	2201      	movs	r2, #1
 800575c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005760:	4888      	ldr	r0, [pc, #544]	@ (8005984 <main+0xa44>)
 8005762:	f008 fd39 	bl	800e1d8 <HAL_GPIO_WritePin>
		if(MPU6050_INIT(&hi2c5) == 0){
 8005766:	4888      	ldr	r0, [pc, #544]	@ (8005988 <main+0xa48>)
 8005768:	f7fb fd1c 	bl	80011a4 <MPU6050_INIT>
 800576c:	4603      	mov	r3, r0
 800576e:	2b00      	cmp	r3, #0
 8005770:	d107      	bne.n	8005782 <main+0x842>
			LED_R_1;
 8005772:	2201      	movs	r2, #1
 8005774:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005778:	4884      	ldr	r0, [pc, #528]	@ (800598c <main+0xa4c>)
 800577a:	f008 fd2d 	bl	800e1d8 <HAL_GPIO_WritePin>
			while(1){
 800577e:	bf00      	nop
 8005780:	e7fd      	b.n	800577e <main+0x83e>
			}
		}
		LED_Y_1;
 8005782:	2201      	movs	r2, #1
 8005784:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005788:	4880      	ldr	r0, [pc, #512]	@ (800598c <main+0xa4c>)
 800578a:	f008 fd25 	bl	800e1d8 <HAL_GPIO_WritePin>
		MPU6050_CALIBRATION(&accelx_cal, &accely_cal, &accelz_cal, &gyrox_cal, &gyroy_cal, &gyroz_cal, Gyr_Scale, Acc_Scale);
 800578e:	eddf 7a80 	vldr	s15, [pc, #512]	@ 8005990 <main+0xa50>
 8005792:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8005994 <main+0xa54>
 8005796:	4b80      	ldr	r3, [pc, #512]	@ (8005998 <main+0xa58>)
 8005798:	9301      	str	r3, [sp, #4]
 800579a:	4b80      	ldr	r3, [pc, #512]	@ (800599c <main+0xa5c>)
 800579c:	9300      	str	r3, [sp, #0]
 800579e:	eef0 0a47 	vmov.f32	s1, s14
 80057a2:	eeb0 0a67 	vmov.f32	s0, s15
 80057a6:	4b7e      	ldr	r3, [pc, #504]	@ (80059a0 <main+0xa60>)
 80057a8:	4a7e      	ldr	r2, [pc, #504]	@ (80059a4 <main+0xa64>)
 80057aa:	497f      	ldr	r1, [pc, #508]	@ (80059a8 <main+0xa68>)
 80057ac:	487f      	ldr	r0, [pc, #508]	@ (80059ac <main+0xa6c>)
 80057ae:	f7fb fdc3 	bl	8001338 <MPU6050_CALIBRATION>
		LED_Y_0;
 80057b2:	2200      	movs	r2, #0
 80057b4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80057b8:	4874      	ldr	r0, [pc, #464]	@ (800598c <main+0xa4c>)
 80057ba:	f008 fd0d 	bl	800e1d8 <HAL_GPIO_WritePin>

	/////////////////////////////// BMP180
		if(BMP180_init(&hi2c5) == 0){
 80057be:	4872      	ldr	r0, [pc, #456]	@ (8005988 <main+0xa48>)
 80057c0:	f7fa ff86 	bl	80006d0 <BMP180_init>
 80057c4:	4603      	mov	r3, r0
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d107      	bne.n	80057da <main+0x89a>
			LED_R_1;
 80057ca:	2201      	movs	r2, #1
 80057cc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80057d0:	486e      	ldr	r0, [pc, #440]	@ (800598c <main+0xa4c>)
 80057d2:	f008 fd01 	bl	800e1d8 <HAL_GPIO_WritePin>
			while(1){
 80057d6:	bf00      	nop
 80057d8:	e7fd      	b.n	80057d6 <main+0x896>
			}
		}
		LED_Y_1;
 80057da:	2201      	movs	r2, #1
 80057dc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80057e0:	486a      	ldr	r0, [pc, #424]	@ (800598c <main+0xa4c>)
 80057e2:	f008 fcf9 	bl	800e1d8 <HAL_GPIO_WritePin>
		BMP180_CALIBRATION(&startpres);
 80057e6:	4872      	ldr	r0, [pc, #456]	@ (80059b0 <main+0xa70>)
 80057e8:	f7fb fac4 	bl	8000d74 <BMP180_CALIBRATION>
		LED_Y_0;
 80057ec:	2200      	movs	r2, #0
 80057ee:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80057f2:	4866      	ldr	r0, [pc, #408]	@ (800598c <main+0xa4c>)
 80057f4:	f008 fcf0 	bl	800e1d8 <HAL_GPIO_WritePin>
	/////////////////////////////// HMC5883L
		if(HMC5883L_Init(&hi2c5) == 0){
 80057f8:	4863      	ldr	r0, [pc, #396]	@ (8005988 <main+0xa48>)
 80057fa:	f7fb fbed 	bl	8000fd8 <HMC5883L_Init>
 80057fe:	4603      	mov	r3, r0
 8005800:	2b00      	cmp	r3, #0
 8005802:	d107      	bne.n	8005814 <main+0x8d4>
			LED_R_1;
 8005804:	2201      	movs	r2, #1
 8005806:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800580a:	4860      	ldr	r0, [pc, #384]	@ (800598c <main+0xa4c>)
 800580c:	f008 fce4 	bl	800e1d8 <HAL_GPIO_WritePin>
			while(1){
 8005810:	bf00      	nop
 8005812:	e7fd      	b.n	8005810 <main+0x8d0>
			}
		}
		LED_Y_1;
 8005814:	2201      	movs	r2, #1
 8005816:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800581a:	485c      	ldr	r0, [pc, #368]	@ (800598c <main+0xa4c>)
 800581c:	f008 fcdc 	bl	800e1d8 <HAL_GPIO_WritePin>
		Mag_Offset_val = HMC5883L_Calibration();
 8005820:	f7fb fc8a 	bl	8001138 <HMC5883L_Calibration>
 8005824:	4603      	mov	r3, r0
 8005826:	461a      	mov	r2, r3
 8005828:	4b62      	ldr	r3, [pc, #392]	@ (80059b4 <main+0xa74>)
 800582a:	801a      	strh	r2, [r3, #0]
		LED_Y_0;
 800582c:	2200      	movs	r2, #0
 800582e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005832:	4856      	ldr	r0, [pc, #344]	@ (800598c <main+0xa4c>)
 8005834:	f008 fcd0 	bl	800e1d8 <HAL_GPIO_WritePin>

		LED_5_0;
 8005838:	2200      	movs	r2, #0
 800583a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800583e:	4851      	ldr	r0, [pc, #324]	@ (8005984 <main+0xa44>)
 8005840:	f008 fcca 	bl	800e1d8 <HAL_GPIO_WritePin>



		MYDRON.dron_status.Connection = DRON_CONNECTED;
 8005844:	4b5c      	ldr	r3, [pc, #368]	@ (80059b8 <main+0xa78>)
 8005846:	2201      	movs	r2, #1
 8005848:	815a      	strh	r2, [r3, #10]
		MYDRON.dron_status.position = DRON_POSITION_OK;
 800584a:	4b5b      	ldr	r3, [pc, #364]	@ (80059b8 <main+0xa78>)
 800584c:	220c      	movs	r2, #12
 800584e:	825a      	strh	r2, [r3, #18]


		MYDRON.THRUST = 0;
 8005850:	4b59      	ldr	r3, [pc, #356]	@ (80059b8 <main+0xa78>)
 8005852:	2200      	movs	r2, #0
 8005854:	805a      	strh	r2, [r3, #2]




	/////////////////////////////// nRF24
		LED_6_1;
 8005856:	2201      	movs	r2, #1
 8005858:	2108      	movs	r1, #8
 800585a:	4858      	ldr	r0, [pc, #352]	@ (80059bc <main+0xa7c>)
 800585c:	f008 fcbc 	bl	800e1d8 <HAL_GPIO_WritePin>
		nRF24_Init(&hspi6);
 8005860:	4857      	ldr	r0, [pc, #348]	@ (80059c0 <main+0xa80>)
 8005862:	f7fc fea9 	bl	80025b8 <nRF24_Init>
		nRF24_SetRXAddress(0, o);
 8005866:	f107 0308 	add.w	r3, r7, #8
 800586a:	4619      	mov	r1, r3
 800586c:	2000      	movs	r0, #0
 800586e:	f7fc fd48 	bl	8002302 <nRF24_SetRXAddress>
		nRF24_SetTXAddress(n);
 8005872:	1d3b      	adds	r3, r7, #4
 8005874:	4618      	mov	r0, r3
 8005876:	f7fc fd7d 	bl	8002374 <nRF24_SetTXAddress>
		nRF24_Inittest();
 800587a:	f7fc fef1 	bl	8002660 <nRF24_Inittest>
		nRF24_TX_Mode();
 800587e:	f7fc fb6b 	bl	8001f58 <nRF24_TX_Mode>


		for(int i = 0; i < 32; i++){
 8005882:	2300      	movs	r3, #0
 8005884:	617b      	str	r3, [r7, #20]
 8005886:	e007      	b.n	8005898 <main+0x958>
			Txcode[i] = 0;
 8005888:	4a4e      	ldr	r2, [pc, #312]	@ (80059c4 <main+0xa84>)
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	4413      	add	r3, r2
 800588e:	2200      	movs	r2, #0
 8005890:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 32; i++){
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	3301      	adds	r3, #1
 8005896:	617b      	str	r3, [r7, #20]
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	2b1f      	cmp	r3, #31
 800589c:	ddf4      	ble.n	8005888 <main+0x948>
		}
		Txcode[22] = 'd';
 800589e:	4b49      	ldr	r3, [pc, #292]	@ (80059c4 <main+0xa84>)
 80058a0:	2264      	movs	r2, #100	@ 0x64
 80058a2:	759a      	strb	r2, [r3, #22]
		Txcode[23] = 'r';
 80058a4:	4b47      	ldr	r3, [pc, #284]	@ (80059c4 <main+0xa84>)
 80058a6:	2272      	movs	r2, #114	@ 0x72
 80058a8:	75da      	strb	r2, [r3, #23]
		Txcode[24] = 'o';
 80058aa:	4b46      	ldr	r3, [pc, #280]	@ (80059c4 <main+0xa84>)
 80058ac:	226f      	movs	r2, #111	@ 0x6f
 80058ae:	761a      	strb	r2, [r3, #24]
		Txcode[25] = 'n';
 80058b0:	4b44      	ldr	r3, [pc, #272]	@ (80059c4 <main+0xa84>)
 80058b2:	226e      	movs	r2, #110	@ 0x6e
 80058b4:	765a      	strb	r2, [r3, #25]
		Txcode[26] = '2';
 80058b6:	4b43      	ldr	r3, [pc, #268]	@ (80059c4 <main+0xa84>)
 80058b8:	2232      	movs	r2, #50	@ 0x32
 80058ba:	769a      	strb	r2, [r3, #26]
		Txcode[27] = 'c';
 80058bc:	4b41      	ldr	r3, [pc, #260]	@ (80059c4 <main+0xa84>)
 80058be:	2263      	movs	r2, #99	@ 0x63
 80058c0:	76da      	strb	r2, [r3, #27]
		Txcode[28] = '1';
 80058c2:	4b40      	ldr	r3, [pc, #256]	@ (80059c4 <main+0xa84>)
 80058c4:	2231      	movs	r2, #49	@ 0x31
 80058c6:	771a      	strb	r2, [r3, #28]
		Txcode[29] = 'z';
 80058c8:	4b3e      	ldr	r3, [pc, #248]	@ (80059c4 <main+0xa84>)
 80058ca:	227a      	movs	r2, #122	@ 0x7a
 80058cc:	775a      	strb	r2, [r3, #29]
		Txcode[30] = 'a';
 80058ce:	4b3d      	ldr	r3, [pc, #244]	@ (80059c4 <main+0xa84>)
 80058d0:	2261      	movs	r2, #97	@ 0x61
 80058d2:	779a      	strb	r2, [r3, #30]
		Txcode[31] = '7';
 80058d4:	4b3b      	ldr	r3, [pc, #236]	@ (80059c4 <main+0xa84>)
 80058d6:	2237      	movs	r2, #55	@ 0x37
 80058d8:	77da      	strb	r2, [r3, #31]



		nRF24_WriteTXPayload(Txcode);
 80058da:	483a      	ldr	r0, [pc, #232]	@ (80059c4 <main+0xa84>)
 80058dc:	f7fc fdfa 	bl	80024d4 <nRF24_WriteTXPayload>
		nRF24_WaitTX();
 80058e0:	f7fc fe06 	bl	80024f0 <nRF24_WaitTX>
		nRF24_RX_Mode();
 80058e4:	f7fc fb0c 	bl	8001f00 <nRF24_RX_Mode>

		uint8_t cunter = 0;
 80058e8:	2300      	movs	r3, #0
 80058ea:	74fb      	strb	r3, [r7, #19]

		while(nRF24_IsBitSetInFifoStatus(NRF24_RX_EMPTY) == 1){
 80058ec:	e022      	b.n	8005934 <main+0x9f4>
			LED_G_1;
 80058ee:	2201      	movs	r2, #1
 80058f0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80058f4:	4831      	ldr	r0, [pc, #196]	@ (80059bc <main+0xa7c>)
 80058f6:	f008 fc6f 	bl	800e1d8 <HAL_GPIO_WritePin>
			LED_Y_1;
 80058fa:	2201      	movs	r2, #1
 80058fc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005900:	4822      	ldr	r0, [pc, #136]	@ (800598c <main+0xa4c>)
 8005902:	f008 fc69 	bl	800e1d8 <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8005906:	2001      	movs	r0, #1
 8005908:	f003 fb08 	bl	8008f1c <HAL_Delay>
			LED_G_0;
 800590c:	2200      	movs	r2, #0
 800590e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005912:	482a      	ldr	r0, [pc, #168]	@ (80059bc <main+0xa7c>)
 8005914:	f008 fc60 	bl	800e1d8 <HAL_GPIO_WritePin>
			LED_Y_0;
 8005918:	2200      	movs	r2, #0
 800591a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800591e:	481b      	ldr	r0, [pc, #108]	@ (800598c <main+0xa4c>)
 8005920:	f008 fc5a 	bl	800e1d8 <HAL_GPIO_WritePin>

			cunter++;
 8005924:	7cfb      	ldrb	r3, [r7, #19]
 8005926:	3301      	adds	r3, #1
 8005928:	74fb      	strb	r3, [r7, #19]
			if(cunter == 100){
 800592a:	7cfb      	ldrb	r3, [r7, #19]
 800592c:	2b64      	cmp	r3, #100	@ 0x64
 800592e:	d101      	bne.n	8005934 <main+0x9f4>
				NVIC_SystemReset();
 8005930:	f7ff faf0 	bl	8004f14 <__NVIC_SystemReset>
		while(nRF24_IsBitSetInFifoStatus(NRF24_RX_EMPTY) == 1){
 8005934:	2000      	movs	r0, #0
 8005936:	f7fc fe1f 	bl	8002578 <nRF24_IsBitSetInFifoStatus>
 800593a:	4603      	mov	r3, r0
 800593c:	2b01      	cmp	r3, #1
 800593e:	d0d6      	beq.n	80058ee <main+0x9ae>
			}
		}

		nRF24_ReadRXPaylaod(RxData);
 8005940:	4821      	ldr	r0, [pc, #132]	@ (80059c8 <main+0xa88>)
 8005942:	f7fc fdfd 	bl	8002540 <nRF24_ReadRXPaylaod>
		LED_6_0;
 8005946:	2200      	movs	r2, #0
 8005948:	2108      	movs	r1, #8
 800594a:	481c      	ldr	r0, [pc, #112]	@ (80059bc <main+0xa7c>)
 800594c:	f008 fc44 	bl	800e1d8 <HAL_GPIO_WritePin>
		for(int i = 12; i < 22; i++){
 8005950:	230c      	movs	r3, #12
 8005952:	60fb      	str	r3, [r7, #12]
 8005954:	e046      	b.n	80059e4 <main+0xaa4>
 8005956:	bf00      	nop
 8005958:	000041cc 	.word	0x000041cc
 800595c:	58020c00 	.word	0x58020c00
 8005960:	0801e518 	.word	0x0801e518
 8005964:	24000eb4 	.word	0x24000eb4
 8005968:	24001eec 	.word	0x24001eec
 800596c:	0801e51c 	.word	0x0801e51c
 8005970:	0801e528 	.word	0x0801e528
 8005974:	24001ef0 	.word	0x24001ef0
 8005978:	24002f28 	.word	0x24002f28
 800597c:	0001f7e7 	.word	0x0001f7e7
 8005980:	24002f24 	.word	0x24002f24
 8005984:	58020000 	.word	0x58020000
 8005988:	24000198 	.word	0x24000198
 800598c:	58020400 	.word	0x58020400
 8005990:	42830000 	.word	0x42830000
 8005994:	46000000 	.word	0x46000000
 8005998:	00000044 	.word	0x00000044
 800599c:	00000040 	.word	0x00000040
 80059a0:	0000003c 	.word	0x0000003c
 80059a4:	00000038 	.word	0x00000038
 80059a8:	00000034 	.word	0x00000034
 80059ac:	00000030 	.word	0x00000030
 80059b0:	000000e4 	.word	0x000000e4
 80059b4:	00000060 	.word	0x00000060
 80059b8:	00000180 	.word	0x00000180
 80059bc:	58021000 	.word	0x58021000
 80059c0:	24000274 	.word	0x24000274
 80059c4:	00000114 	.word	0x00000114
 80059c8:	000000f4 	.word	0x000000f4
			Rxcode[i] = RxData[i];
 80059cc:	4a96      	ldr	r2, [pc, #600]	@ (8005c28 <main+0xce8>)
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	4413      	add	r3, r2
 80059d2:	7819      	ldrb	r1, [r3, #0]
 80059d4:	4a95      	ldr	r2, [pc, #596]	@ (8005c2c <main+0xcec>)
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	4413      	add	r3, r2
 80059da:	460a      	mov	r2, r1
 80059dc:	701a      	strb	r2, [r3, #0]
		for(int i = 12; i < 22; i++){
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	3301      	adds	r3, #1
 80059e2:	60fb      	str	r3, [r7, #12]
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2b15      	cmp	r3, #21
 80059e8:	ddf0      	ble.n	80059cc <main+0xa8c>
		}
	///////////////////////////////////////////////////////////////////////
		ESC_INT(&htim3);
 80059ea:	4891      	ldr	r0, [pc, #580]	@ (8005c30 <main+0xcf0>)
 80059ec:	f7fb faaa 	bl	8000f44 <ESC_INT>

		LED_7_1;
 80059f0:	2201      	movs	r2, #1
 80059f2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80059f6:	488f      	ldr	r0, [pc, #572]	@ (8005c34 <main+0xcf4>)
 80059f8:	f008 fbee 	bl	800e1d8 <HAL_GPIO_WritePin>
		HAL_UART_Receive_IT(&huart1, &Received, 1);
 80059fc:	2201      	movs	r2, #1
 80059fe:	498e      	ldr	r1, [pc, #568]	@ (8005c38 <main+0xcf8>)
 8005a00:	488e      	ldr	r0, [pc, #568]	@ (8005c3c <main+0xcfc>)
 8005a02:	f012 f8b9 	bl	8017b78 <HAL_UART_Receive_IT>
		LED_7_0;
 8005a06:	2200      	movs	r2, #0
 8005a08:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005a0c:	4889      	ldr	r0, [pc, #548]	@ (8005c34 <main+0xcf4>)
 8005a0e:	f008 fbe3 	bl	800e1d8 <HAL_GPIO_WritePin>

		HAL_TIM_Base_Start_IT(&htim2); // przerwanie co 1 ms
 8005a12:	488b      	ldr	r0, [pc, #556]	@ (8005c40 <main+0xd00>)
 8005a14:	f010 fa4e 	bl	8015eb4 <HAL_TIM_Base_Start_IT>



	  	RGB_LED_For_BAT(MYDRON.batterysize);
 8005a18:	4b8a      	ldr	r3, [pc, #552]	@ (8005c44 <main+0xd04>)
 8005a1a:	881b      	ldrh	r3, [r3, #0]
 8005a1c:	b2db      	uxtb	r3, r3
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f001 fb2e 	bl	8007080 <RGB_LED_For_BAT>


	  	if(MYDRON.dron_status.Battery == DRON_BATTERY_RUN_OUT)
 8005a24:	4b87      	ldr	r3, [pc, #540]	@ (8005c44 <main+0xd04>)
 8005a26:	899b      	ldrh	r3, [r3, #12]
 8005a28:	2b07      	cmp	r3, #7
 8005a2a:	d107      	bne.n	8005a3c <main+0xafc>
	  	{
	  		LED_R_1;
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005a32:	4885      	ldr	r0, [pc, #532]	@ (8005c48 <main+0xd08>)
 8005a34:	f008 fbd0 	bl	800e1d8 <HAL_GPIO_WritePin>
	  		while(1){
 8005a38:	bf00      	nop
 8005a3a:	e7fd      	b.n	8005a38 <main+0xaf8>
	  		}
	  	}



	  	if(MYDRON.dron_status.Battery == DRON_BATTERY_CRIT_VAL){
 8005a3c:	4b81      	ldr	r3, [pc, #516]	@ (8005c44 <main+0xd04>)
 8005a3e:	899b      	ldrh	r3, [r3, #12]
 8005a40:	2b09      	cmp	r3, #9
 8005a42:	d107      	bne.n	8005a54 <main+0xb14>
	  		LED_R_1;
 8005a44:	2201      	movs	r2, #1
 8005a46:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005a4a:	487f      	ldr	r0, [pc, #508]	@ (8005c48 <main+0xd08>)
 8005a4c:	f008 fbc4 	bl	800e1d8 <HAL_GPIO_WritePin>
	  		while(1){
 8005a50:	bf00      	nop
 8005a52:	e7fd      	b.n	8005a50 <main+0xb10>
	  		}
	  	}



		STARTUP = 0;
 8005a54:	4b7d      	ldr	r3, [pc, #500]	@ (8005c4c <main+0xd0c>)
 8005a56:	2200      	movs	r2, #0
 8005a58:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(MYDRON.dron_status.Battery == DRON_BATTERY_RUN_OUT){
 8005a5a:	4b7a      	ldr	r3, [pc, #488]	@ (8005c44 <main+0xd04>)
 8005a5c:	899b      	ldrh	r3, [r3, #12]
 8005a5e:	2b07      	cmp	r3, #7
 8005a60:	d10a      	bne.n	8005a78 <main+0xb38>
	  			LED_R_1;
 8005a62:	2201      	movs	r2, #1
 8005a64:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005a68:	4877      	ldr	r0, [pc, #476]	@ (8005c48 <main+0xd08>)
 8005a6a:	f008 fbb5 	bl	800e1d8 <HAL_GPIO_WritePin>
	  			thrust_limit = MYDRON.THRUST;
 8005a6e:	4b75      	ldr	r3, [pc, #468]	@ (8005c44 <main+0xd04>)
 8005a70:	885b      	ldrh	r3, [r3, #2]
 8005a72:	b21a      	sxth	r2, r3
 8005a74:	4b76      	ldr	r3, [pc, #472]	@ (8005c50 <main+0xd10>)
 8005a76:	801a      	strh	r2, [r3, #0]
	  		}
	  		if(MYDRON.dron_status.Battery == DRON_BATTERY_OK){
 8005a78:	4b72      	ldr	r3, [pc, #456]	@ (8005c44 <main+0xd04>)
 8005a7a:	899b      	ldrh	r3, [r3, #12]
 8005a7c:	2b08      	cmp	r3, #8
 8005a7e:	d103      	bne.n	8005a88 <main+0xb48>
	  			thrust_limit = 10000;
 8005a80:	4b73      	ldr	r3, [pc, #460]	@ (8005c50 <main+0xd10>)
 8005a82:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005a86:	801a      	strh	r2, [r3, #0]
	  		}
	  		if(MYDRON.dron_status.Battery == DRON_BATTERY_CRIT_VAL){
 8005a88:	4b6e      	ldr	r3, [pc, #440]	@ (8005c44 <main+0xd04>)
 8005a8a:	899b      	ldrh	r3, [r3, #12]
 8005a8c:	2b09      	cmp	r3, #9
 8005a8e:	d118      	bne.n	8005ac2 <main+0xb82>
	  			ESC_POWER_1;
 8005a90:	2201      	movs	r2, #1
 8005a92:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005a96:	486f      	ldr	r0, [pc, #444]	@ (8005c54 <main+0xd14>)
 8005a98:	f008 fb9e 	bl	800e1d8 <HAL_GPIO_WritePin>
	  			LED_R_1;
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005aa2:	4869      	ldr	r0, [pc, #420]	@ (8005c48 <main+0xd08>)
 8005aa4:	f008 fb98 	bl	800e1d8 <HAL_GPIO_WritePin>
	  			f_close(&fil);
 8005aa8:	486b      	ldr	r0, [pc, #428]	@ (8005c58 <main+0xd18>)
 8005aaa:	f017 fe17 	bl	801d6dc <f_close>
	  			while(MYDRON.dron_status.Battery == DRON_BATTERY_CRIT_VAL){
 8005aae:	e004      	b.n	8005aba <main+0xb7a>
	  				HAL_Delay(10);
 8005ab0:	200a      	movs	r0, #10
 8005ab2:	f003 fa33 	bl	8008f1c <HAL_Delay>
	  				Get_batteryvalue();
 8005ab6:	f7fe fb3b 	bl	8004130 <Get_batteryvalue>
	  			while(MYDRON.dron_status.Battery == DRON_BATTERY_CRIT_VAL){
 8005aba:	4b62      	ldr	r3, [pc, #392]	@ (8005c44 <main+0xd04>)
 8005abc:	899b      	ldrh	r3, [r3, #12]
 8005abe:	2b09      	cmp	r3, #9
 8005ac0:	d0f6      	beq.n	8005ab0 <main+0xb70>
	  			}
	  		}

	  		if(commandready == 1){
 8005ac2:	4b66      	ldr	r3, [pc, #408]	@ (8005c5c <main+0xd1c>)
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d159      	bne.n	8005b7e <main+0xc3e>
	  			LED_7_1;
 8005aca:	2201      	movs	r2, #1
 8005acc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005ad0:	4858      	ldr	r0, [pc, #352]	@ (8005c34 <main+0xcf4>)
 8005ad2:	f008 fb81 	bl	800e1d8 <HAL_GPIO_WritePin>
	  			interpretcommand();
 8005ad6:	f7fc fe1d 	bl	8002714 <interpretcommand>
	  			executecommand(command, UASRT_PID_VAL);
 8005ada:	4961      	ldr	r1, [pc, #388]	@ (8005c60 <main+0xd20>)
 8005adc:	4861      	ldr	r0, [pc, #388]	@ (8005c64 <main+0xd24>)
 8005ade:	f7fc fe67 	bl	80027b0 <executecommand>
	  			LED_7_0;
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005ae8:	4852      	ldr	r0, [pc, #328]	@ (8005c34 <main+0xcf4>)
 8005aea:	f008 fb75 	bl	800e1d8 <HAL_GPIO_WritePin>

	  			PID_FAC_Pitch[0] = p_pitchfactor;
 8005aee:	4b5e      	ldr	r3, [pc, #376]	@ (8005c68 <main+0xd28>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a5e      	ldr	r2, [pc, #376]	@ (8005c6c <main+0xd2c>)
 8005af4:	6013      	str	r3, [r2, #0]
	  			PID_FAC_Pitch[1] = i_pitchfactor;
 8005af6:	4b5e      	ldr	r3, [pc, #376]	@ (8005c70 <main+0xd30>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a5c      	ldr	r2, [pc, #368]	@ (8005c6c <main+0xd2c>)
 8005afc:	6053      	str	r3, [r2, #4]
	  			PID_FAC_Pitch[2] = d_pitchfactor;
 8005afe:	4b5d      	ldr	r3, [pc, #372]	@ (8005c74 <main+0xd34>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a5a      	ldr	r2, [pc, #360]	@ (8005c6c <main+0xd2c>)
 8005b04:	6093      	str	r3, [r2, #8]

	  			PID_FAC_Angular_Rate_Pitch[0] = p_angular_rate_pitchfactor;
 8005b06:	4b5c      	ldr	r3, [pc, #368]	@ (8005c78 <main+0xd38>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a5c      	ldr	r2, [pc, #368]	@ (8005c7c <main+0xd3c>)
 8005b0c:	6013      	str	r3, [r2, #0]
	  			PID_FAC_Angular_Rate_Pitch[1] = i_angular_rate_pitchfactor;
 8005b0e:	4b5c      	ldr	r3, [pc, #368]	@ (8005c80 <main+0xd40>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a5a      	ldr	r2, [pc, #360]	@ (8005c7c <main+0xd3c>)
 8005b14:	6053      	str	r3, [r2, #4]
	  			PID_FAC_Angular_Rate_Pitch[2] = d_angular_rate_pitchfactor;
 8005b16:	4b5b      	ldr	r3, [pc, #364]	@ (8005c84 <main+0xd44>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a58      	ldr	r2, [pc, #352]	@ (8005c7c <main+0xd3c>)
 8005b1c:	6093      	str	r3, [r2, #8]

	  			PID_FAC_Rool[0] = p_roolfactor;
 8005b1e:	4b5a      	ldr	r3, [pc, #360]	@ (8005c88 <main+0xd48>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a5a      	ldr	r2, [pc, #360]	@ (8005c8c <main+0xd4c>)
 8005b24:	6013      	str	r3, [r2, #0]
	  			PID_FAC_Rool[1] = i_roolfactor;
 8005b26:	4b5a      	ldr	r3, [pc, #360]	@ (8005c90 <main+0xd50>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a58      	ldr	r2, [pc, #352]	@ (8005c8c <main+0xd4c>)
 8005b2c:	6053      	str	r3, [r2, #4]
	  			PID_FAC_Rool[2] = d_roolfactor;
 8005b2e:	4b59      	ldr	r3, [pc, #356]	@ (8005c94 <main+0xd54>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a56      	ldr	r2, [pc, #344]	@ (8005c8c <main+0xd4c>)
 8005b34:	6093      	str	r3, [r2, #8]

	  			PID_FAC_Angular_Rate_Rool[0] = p_angular_rate_roolfactor;
 8005b36:	4b58      	ldr	r3, [pc, #352]	@ (8005c98 <main+0xd58>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a58      	ldr	r2, [pc, #352]	@ (8005c9c <main+0xd5c>)
 8005b3c:	6013      	str	r3, [r2, #0]
	  			PID_FAC_Angular_Rate_Rool[1] = i_angular_rate_roolfactor;
 8005b3e:	4b58      	ldr	r3, [pc, #352]	@ (8005ca0 <main+0xd60>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a56      	ldr	r2, [pc, #344]	@ (8005c9c <main+0xd5c>)
 8005b44:	6053      	str	r3, [r2, #4]
	  			PID_FAC_Angular_Rate_Rool[2] = d_angular_rate_roolfactor;
 8005b46:	4b57      	ldr	r3, [pc, #348]	@ (8005ca4 <main+0xd64>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a54      	ldr	r2, [pc, #336]	@ (8005c9c <main+0xd5c>)
 8005b4c:	6093      	str	r3, [r2, #8]

	  			PID_FAC_Yaw[0] = p_yawfactor;
 8005b4e:	4b56      	ldr	r3, [pc, #344]	@ (8005ca8 <main+0xd68>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a56      	ldr	r2, [pc, #344]	@ (8005cac <main+0xd6c>)
 8005b54:	6013      	str	r3, [r2, #0]
	  			PID_FAC_Yaw[1] = i_yawfactor;
 8005b56:	4b56      	ldr	r3, [pc, #344]	@ (8005cb0 <main+0xd70>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a54      	ldr	r2, [pc, #336]	@ (8005cac <main+0xd6c>)
 8005b5c:	6053      	str	r3, [r2, #4]
	  			PID_FAC_Yaw[2] = d_yawfactor;
 8005b5e:	4b55      	ldr	r3, [pc, #340]	@ (8005cb4 <main+0xd74>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a52      	ldr	r2, [pc, #328]	@ (8005cac <main+0xd6c>)
 8005b64:	6093      	str	r3, [r2, #8]

	  			PID_FAC_Angular_Rate_Yaw[0] = p_angular_rate_yawfactor;
 8005b66:	4b54      	ldr	r3, [pc, #336]	@ (8005cb8 <main+0xd78>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a54      	ldr	r2, [pc, #336]	@ (8005cbc <main+0xd7c>)
 8005b6c:	6013      	str	r3, [r2, #0]
	  			PID_FAC_Angular_Rate_Yaw[1] = i_angular_rate_yawfactor;
 8005b6e:	4b54      	ldr	r3, [pc, #336]	@ (8005cc0 <main+0xd80>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a52      	ldr	r2, [pc, #328]	@ (8005cbc <main+0xd7c>)
 8005b74:	6053      	str	r3, [r2, #4]
	  			PID_FAC_Angular_Rate_Yaw[2] = d_angular_rate_yawfactor;
 8005b76:	4b53      	ldr	r3, [pc, #332]	@ (8005cc4 <main+0xd84>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a50      	ldr	r2, [pc, #320]	@ (8005cbc <main+0xd7c>)
 8005b7c:	6093      	str	r3, [r2, #8]
	  		}

	  		if((TIM_inte_SD == 1) && (fresult == FR_OK) && (SD_enable_Flag == 1)){// 1ms, 1KHz
 8005b7e:	4b52      	ldr	r3, [pc, #328]	@ (8005cc8 <main+0xd88>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	f040 80b7 	bne.w	8005cf6 <main+0xdb6>
 8005b88:	4b50      	ldr	r3, [pc, #320]	@ (8005ccc <main+0xd8c>)
 8005b8a:	781b      	ldrb	r3, [r3, #0]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	f040 80b2 	bne.w	8005cf6 <main+0xdb6>
 8005b92:	4b4f      	ldr	r3, [pc, #316]	@ (8005cd0 <main+0xd90>)
 8005b94:	781b      	ldrb	r3, [r3, #0]
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	f040 80ad 	bne.w	8005cf6 <main+0xdb6>
	  			TIM_inte_SD = 0;
 8005b9c:	4b4a      	ldr	r3, [pc, #296]	@ (8005cc8 <main+0xd88>)
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	601a      	str	r2, [r3, #0]

	  			uSD_Card_SendData_To_Buffer(Mainloop_Number);//todo blokuje pentle główną po ponownym uruchomieniu gdzy napięcie zsotanie odlonczone
 8005ba2:	4b4c      	ldr	r3, [pc, #304]	@ (8005cd4 <main+0xd94>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f001 fc00 	bl	80073ac <uSD_Card_SendData_To_Buffer>

	  			if(Mainloop_Number == 999){//zapisywanie karty raz na 1 sec
 8005bac:	4b49      	ldr	r3, [pc, #292]	@ (8005cd4 <main+0xd94>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d12b      	bne.n	8005c10 <main+0xcd0>
	  				SD_In_Use = 1;
 8005bb8:	4b47      	ldr	r3, [pc, #284]	@ (8005cd8 <main+0xd98>)
 8005bba:	2201      	movs	r2, #1
 8005bbc:	601a      	str	r2, [r3, #0]
	  				LED_uSD_1;
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005bc4:	4845      	ldr	r0, [pc, #276]	@ (8005cdc <main+0xd9c>)
 8005bc6:	f008 fb07 	bl	800e1d8 <HAL_GPIO_WritePin>
	  				fresult = f_open(&fil, "file.txt", FA_OPEN_APPEND | FA_WRITE);
 8005bca:	2232      	movs	r2, #50	@ 0x32
 8005bcc:	4944      	ldr	r1, [pc, #272]	@ (8005ce0 <main+0xda0>)
 8005bce:	4822      	ldr	r0, [pc, #136]	@ (8005c58 <main+0xd18>)
 8005bd0:	f017 f9aa 	bl	801cf28 <f_open>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	461a      	mov	r2, r3
 8005bd8:	4b3c      	ldr	r3, [pc, #240]	@ (8005ccc <main+0xd8c>)
 8005bda:	701a      	strb	r2, [r3, #0]
	  				fresult = f_write(&fil, DataToSendBuffer, 129000, &bw);
 8005bdc:	4b41      	ldr	r3, [pc, #260]	@ (8005ce4 <main+0xda4>)
 8005bde:	4a42      	ldr	r2, [pc, #264]	@ (8005ce8 <main+0xda8>)
 8005be0:	4942      	ldr	r1, [pc, #264]	@ (8005cec <main+0xdac>)
 8005be2:	481d      	ldr	r0, [pc, #116]	@ (8005c58 <main+0xd18>)
 8005be4:	f017 fb68 	bl	801d2b8 <f_write>
 8005be8:	4603      	mov	r3, r0
 8005bea:	461a      	mov	r2, r3
 8005bec:	4b37      	ldr	r3, [pc, #220]	@ (8005ccc <main+0xd8c>)
 8005bee:	701a      	strb	r2, [r3, #0]
	  				fresult = f_close(&fil);
 8005bf0:	4819      	ldr	r0, [pc, #100]	@ (8005c58 <main+0xd18>)
 8005bf2:	f017 fd73 	bl	801d6dc <f_close>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	4b34      	ldr	r3, [pc, #208]	@ (8005ccc <main+0xd8c>)
 8005bfc:	701a      	strb	r2, [r3, #0]
	  				LED_uSD_0;
 8005bfe:	2200      	movs	r2, #0
 8005c00:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005c04:	4835      	ldr	r0, [pc, #212]	@ (8005cdc <main+0xd9c>)
 8005c06:	f008 fae7 	bl	800e1d8 <HAL_GPIO_WritePin>
	  				SD_In_Use = 0;
 8005c0a:	4b33      	ldr	r3, [pc, #204]	@ (8005cd8 <main+0xd98>)
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	601a      	str	r2, [r3, #0]
	  				}
	  			if(Mainloop_Number < 1000){
 8005c10:	4b30      	ldr	r3, [pc, #192]	@ (8005cd4 <main+0xd94>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005c18:	d26a      	bcs.n	8005cf0 <main+0xdb0>
	  				Mainloop_Number++;
 8005c1a:	4b2e      	ldr	r3, [pc, #184]	@ (8005cd4 <main+0xd94>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	3301      	adds	r3, #1
 8005c20:	4a2c      	ldr	r2, [pc, #176]	@ (8005cd4 <main+0xd94>)
 8005c22:	6013      	str	r3, [r2, #0]
 8005c24:	e067      	b.n	8005cf6 <main+0xdb6>
 8005c26:	bf00      	nop
 8005c28:	000000f4 	.word	0x000000f4
 8005c2c:	00000154 	.word	0x00000154
 8005c30:	24000418 	.word	0x24000418
 8005c34:	58020000 	.word	0x58020000
 8005c38:	000041c0 	.word	0x000041c0
 8005c3c:	240004b0 	.word	0x240004b0
 8005c40:	240003cc 	.word	0x240003cc
 8005c44:	00000180 	.word	0x00000180
 8005c48:	58020400 	.word	0x58020400
 8005c4c:	00000074 	.word	0x00000074
 8005c50:	0000405e 	.word	0x0000405e
 8005c54:	58021800 	.word	0x58021800
 8005c58:	24001ef0 	.word	0x24001ef0
 8005c5c:	000041be 	.word	0x000041be
 8005c60:	000041a0 	.word	0x000041a0
 8005c64:	000041b0 	.word	0x000041b0
 8005c68:	000040cc 	.word	0x000040cc
 8005c6c:	000040f0 	.word	0x000040f0
 8005c70:	000040d8 	.word	0x000040d8
 8005c74:	000040e4 	.word	0x000040e4
 8005c78:	0000412c 	.word	0x0000412c
 8005c7c:	00004150 	.word	0x00004150
 8005c80:	00004138 	.word	0x00004138
 8005c84:	00004144 	.word	0x00004144
 8005c88:	000040d0 	.word	0x000040d0
 8005c8c:	00004104 	.word	0x00004104
 8005c90:	000040dc 	.word	0x000040dc
 8005c94:	000040e8 	.word	0x000040e8
 8005c98:	00004130 	.word	0x00004130
 8005c9c:	00004164 	.word	0x00004164
 8005ca0:	0000413c 	.word	0x0000413c
 8005ca4:	00004148 	.word	0x00004148
 8005ca8:	000040d4 	.word	0x000040d4
 8005cac:	00004118 	.word	0x00004118
 8005cb0:	000040e0 	.word	0x000040e0
 8005cb4:	000040ec 	.word	0x000040ec
 8005cb8:	00004134 	.word	0x00004134
 8005cbc:	00004178 	.word	0x00004178
 8005cc0:	00004140 	.word	0x00004140
 8005cc4:	0000414c 	.word	0x0000414c
 8005cc8:	0000006c 	.word	0x0000006c
 8005ccc:	24001eec 	.word	0x24001eec
 8005cd0:	000041cc 	.word	0x000041cc
 8005cd4:	000041c4 	.word	0x000041c4
 8005cd8:	000041c8 	.word	0x000041c8
 8005cdc:	58020c00 	.word	0x58020c00
 8005ce0:	0801e528 	.word	0x0801e528
 8005ce4:	24002f24 	.word	0x24002f24
 8005ce8:	0001f7e8 	.word	0x0001f7e8
 8005cec:	24002f28 	.word	0x24002f28
	  			}
	  			else{
	  				Mainloop_Number = 0;
 8005cf0:	4b0b      	ldr	r3, [pc, #44]	@ (8005d20 <main+0xde0>)
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	601a      	str	r2, [r3, #0]
	  			}
	  		}

	  		if(TIM_inte == 1){
 8005cf6:	4b0b      	ldr	r3, [pc, #44]	@ (8005d24 <main+0xde4>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	f47f aead 	bne.w	8005a5a <main+0xb1a>
	  			LED_R_0;
 8005d00:	2200      	movs	r2, #0
 8005d02:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005d06:	4808      	ldr	r0, [pc, #32]	@ (8005d28 <main+0xde8>)
 8005d08:	f008 fa66 	bl	800e1d8 <HAL_GPIO_WritePin>
	  			RGB_LED_For_BAT(MYDRON.batterysize);
 8005d0c:	4b07      	ldr	r3, [pc, #28]	@ (8005d2c <main+0xdec>)
 8005d0e:	881b      	ldrh	r3, [r3, #0]
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	4618      	mov	r0, r3
 8005d14:	f001 f9b4 	bl	8007080 <RGB_LED_For_BAT>
	  			TIM_inte = 0;
 8005d18:	4b02      	ldr	r3, [pc, #8]	@ (8005d24 <main+0xde4>)
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	601a      	str	r2, [r3, #0]
	  if(MYDRON.dron_status.Battery == DRON_BATTERY_RUN_OUT){
 8005d1e:	e69c      	b.n	8005a5a <main+0xb1a>
 8005d20:	000041c4 	.word	0x000041c4
 8005d24:	00000070 	.word	0x00000070
 8005d28:	58020400 	.word	0x58020400
 8005d2c:	00000180 	.word	0x00000180

08005d30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b09c      	sub	sp, #112	@ 0x70
 8005d34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005d36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005d3a:	224c      	movs	r2, #76	@ 0x4c
 8005d3c:	2100      	movs	r1, #0
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f017 fec4 	bl	801dacc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005d44:	1d3b      	adds	r3, r7, #4
 8005d46:	2220      	movs	r2, #32
 8005d48:	2100      	movs	r1, #0
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f017 febe 	bl	801dacc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8005d50:	2002      	movs	r0, #2
 8005d52:	f00a fef3 	bl	8010b3c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8005d56:	2300      	movs	r3, #0
 8005d58:	603b      	str	r3, [r7, #0]
 8005d5a:	4b2d      	ldr	r3, [pc, #180]	@ (8005e10 <SystemClock_Config+0xe0>)
 8005d5c:	699b      	ldr	r3, [r3, #24]
 8005d5e:	4a2c      	ldr	r2, [pc, #176]	@ (8005e10 <SystemClock_Config+0xe0>)
 8005d60:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8005d64:	6193      	str	r3, [r2, #24]
 8005d66:	4b2a      	ldr	r3, [pc, #168]	@ (8005e10 <SystemClock_Config+0xe0>)
 8005d68:	699b      	ldr	r3, [r3, #24]
 8005d6a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005d6e:	603b      	str	r3, [r7, #0]
 8005d70:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8005d72:	bf00      	nop
 8005d74:	4b26      	ldr	r3, [pc, #152]	@ (8005e10 <SystemClock_Config+0xe0>)
 8005d76:	699b      	ldr	r3, [r3, #24]
 8005d78:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005d7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d80:	d1f8      	bne.n	8005d74 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI|RCC_OSCILLATORTYPE_HSE;
 8005d82:	2311      	movs	r3, #17
 8005d84:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005d86:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005d8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8005d8c:	2380      	movs	r3, #128	@ 0x80
 8005d8e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.CSICalibrationValue = 16;
 8005d90:	2310      	movs	r3, #16
 8005d92:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005d94:	2302      	movs	r3, #2
 8005d96:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005d98:	2302      	movs	r3, #2
 8005d9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 3;
 8005d9c:	2303      	movs	r3, #3
 8005d9e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 68;
 8005da0:	2344      	movs	r3, #68	@ 0x44
 8005da2:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8005da4:	2301      	movs	r3, #1
 8005da6:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8005da8:	2302      	movs	r3, #2
 8005daa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8005dac:	2302      	movs	r3, #2
 8005dae:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8005db0:	230c      	movs	r3, #12
 8005db2:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8005db4:	2300      	movs	r3, #0
 8005db6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8005db8:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8005dbc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005dbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f00a fef4 	bl	8010bb0 <HAL_RCC_OscConfig>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d001      	beq.n	8005dd2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8005dce:	f001 fd3b 	bl	8007848 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005dd2:	233f      	movs	r3, #63	@ 0x3f
 8005dd4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005dd6:	2303      	movs	r3, #3
 8005dd8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8005dde:	2308      	movs	r3, #8
 8005de0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8005de2:	2340      	movs	r3, #64	@ 0x40
 8005de4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8005de6:	2340      	movs	r3, #64	@ 0x40
 8005de8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8005dea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005dee:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8005df0:	2340      	movs	r3, #64	@ 0x40
 8005df2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8005df4:	1d3b      	adds	r3, r7, #4
 8005df6:	2103      	movs	r1, #3
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f00b fab3 	bl	8011364 <HAL_RCC_ClockConfig>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d001      	beq.n	8005e08 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8005e04:	f001 fd20 	bl	8007848 <Error_Handler>
  }
}
 8005e08:	bf00      	nop
 8005e0a:	3770      	adds	r7, #112	@ 0x70
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}
 8005e10:	58024800 	.word	0x58024800

08005e14 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b0ae      	sub	sp, #184	@ 0xb8
 8005e18:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005e1a:	463b      	mov	r3, r7
 8005e1c:	22b8      	movs	r2, #184	@ 0xb8
 8005e1e:	2100      	movs	r1, #0
 8005e20:	4618      	mov	r0, r3
 8005e22:	f017 fe53 	bl	801dacc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI2;
 8005e26:	f44f 2201 	mov.w	r2, #528384	@ 0x81000
 8005e2a:	f04f 0300 	mov.w	r3, #0
 8005e2e:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 22;
 8005e32:	2316      	movs	r3, #22
 8005e34:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 192;
 8005e36:	23c0      	movs	r3, #192	@ 0xc0
 8005e38:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 3;
 8005e3a:	2303      	movs	r3, #3
 8005e3c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8005e3e:	2302      	movs	r3, #2
 8005e40:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8005e42:	2302      	movs	r3, #2
 8005e44:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 8005e46:	2300      	movs	r3, #0
 8005e48:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8005e4a:	2320      	movs	r3, #32
 8005e4c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8005e52:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005e56:	65fb      	str	r3, [r7, #92]	@ 0x5c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005e5e:	463b      	mov	r3, r7
 8005e60:	4618      	mov	r0, r3
 8005e62:	f00b fe0b 	bl	8011a7c <HAL_RCCEx_PeriphCLKConfig>
 8005e66:	4603      	mov	r3, r0
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d001      	beq.n	8005e70 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8005e6c:	f001 fcec 	bl	8007848 <Error_Handler>
  }
}
 8005e70:	bf00      	nop
 8005e72:	37b8      	adds	r7, #184	@ 0xb8
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}

08005e78 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b084      	sub	sp, #16
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
	if(htim == &htim2)// 1 ms
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	4a87      	ldr	r2, [pc, #540]	@ (80060a0 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	f040 8107 	bne.w	8006098 <HAL_TIM_PeriodElapsedCallback+0x220>
	{
		TIM_inte_SD = 1;
 8005e8a:	4b86      	ldr	r3, [pc, #536]	@ (80060a4 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	601a      	str	r2, [r3, #0]
		TIM_inte = 1;
 8005e90:	4b85      	ldr	r3, [pc, #532]	@ (80060a8 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8005e92:	2201      	movs	r2, #1
 8005e94:	601a      	str	r2, [r3, #0]
		NRF_TIM_Inte++;
 8005e96:	4b85      	ldr	r3, [pc, #532]	@ (80060ac <HAL_TIM_PeriodElapsedCallback+0x234>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	3301      	adds	r3, #1
 8005e9c:	4a83      	ldr	r2, [pc, #524]	@ (80060ac <HAL_TIM_PeriodElapsedCallback+0x234>)
 8005e9e:	6013      	str	r3, [r2, #0]


		if(i == 0){// na calosc 50ms
 8005ea0:	4b83      	ldr	r3, [pc, #524]	@ (80060b0 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d10d      	bne.n	8005ec4 <HAL_TIM_PeriodElapsedCallback+0x4c>
			LED_5_1;
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005eae:	4881      	ldr	r0, [pc, #516]	@ (80060b4 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8005eb0:	f008 f992 	bl	800e1d8 <HAL_GPIO_WritePin>
			BMP180_start_measurment_temp_IT();
 8005eb4:	f7fa fcdc 	bl	8000870 <BMP180_start_measurment_temp_IT>
			LED_5_0;
 8005eb8:	2200      	movs	r2, #0
 8005eba:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005ebe:	487d      	ldr	r0, [pc, #500]	@ (80060b4 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8005ec0:	f008 f98a 	bl	800e1d8 <HAL_GPIO_WritePin>
		}

		if(i == 10){//2
 8005ec4:	4b7a      	ldr	r3, [pc, #488]	@ (80060b0 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	2b0a      	cmp	r3, #10
 8005eca:	d10d      	bne.n	8005ee8 <HAL_TIM_PeriodElapsedCallback+0x70>
			LED_5_1;
 8005ecc:	2201      	movs	r2, #1
 8005ece:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005ed2:	4878      	ldr	r0, [pc, #480]	@ (80060b4 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8005ed4:	f008 f980 	bl	800e1d8 <HAL_GPIO_WritePin>
			BMP180_start_measurment_pres_IT();
 8005ed8:	f7fa fcb4 	bl	8000844 <BMP180_start_measurment_pres_IT>
			LED_5_0;
 8005edc:	2200      	movs	r2, #0
 8005ede:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005ee2:	4874      	ldr	r0, [pc, #464]	@ (80060b4 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8005ee4:	f008 f978 	bl	800e1d8 <HAL_GPIO_WritePin>
		}

		if(i == 36){
 8005ee8:	4b71      	ldr	r3, [pc, #452]	@ (80060b0 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	2b24      	cmp	r3, #36	@ 0x24
 8005eee:	d10d      	bne.n	8005f0c <HAL_TIM_PeriodElapsedCallback+0x94>
			LED_5_1;
 8005ef0:	2201      	movs	r2, #1
 8005ef2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005ef6:	486f      	ldr	r0, [pc, #444]	@ (80060b4 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8005ef8:	f008 f96e 	bl	800e1d8 <HAL_GPIO_WritePin>
			HMC5883L_Get_Z_Start_IT();
 8005efc:	f7fb f8ea 	bl	80010d4 <HMC5883L_Get_Z_Start_IT>
			LED_5_0;
 8005f00:	2200      	movs	r2, #0
 8005f02:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005f06:	486b      	ldr	r0, [pc, #428]	@ (80060b4 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8005f08:	f008 f966 	bl	800e1d8 <HAL_GPIO_WritePin>
		}

		if(i == 38){
 8005f0c:	4b68      	ldr	r3, [pc, #416]	@ (80060b0 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	2b26      	cmp	r3, #38	@ 0x26
 8005f12:	d10e      	bne.n	8005f32 <HAL_TIM_PeriodElapsedCallback+0xba>
			LED_6_1;
 8005f14:	2201      	movs	r2, #1
 8005f16:	2108      	movs	r1, #8
 8005f18:	4867      	ldr	r0, [pc, #412]	@ (80060b8 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8005f1a:	f008 f95d 	bl	800e1d8 <HAL_GPIO_WritePin>
			nRF24_TX_Mode();
 8005f1e:	f7fc f81b 	bl	8001f58 <nRF24_TX_Mode>
			nRF24_Rx_Mode = 0;
 8005f22:	4b66      	ldr	r3, [pc, #408]	@ (80060bc <HAL_TIM_PeriodElapsedCallback+0x244>)
 8005f24:	2200      	movs	r2, #0
 8005f26:	701a      	strb	r2, [r3, #0]
			LED_6_0;
 8005f28:	2200      	movs	r2, #0
 8005f2a:	2108      	movs	r1, #8
 8005f2c:	4862      	ldr	r0, [pc, #392]	@ (80060b8 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8005f2e:	f008 f953 	bl	800e1d8 <HAL_GPIO_WritePin>
		}
		if(i == 40){//5
 8005f32:	4b5f      	ldr	r3, [pc, #380]	@ (80060b0 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	2b28      	cmp	r3, #40	@ 0x28
 8005f38:	d14c      	bne.n	8005fd4 <HAL_TIM_PeriodElapsedCallback+0x15c>
			ampritude = startpres - pres;
 8005f3a:	4b61      	ldr	r3, [pc, #388]	@ (80060c0 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8005f3c:	ed93 7a00 	vldr	s14, [r3]
 8005f40:	4b60      	ldr	r3, [pc, #384]	@ (80060c4 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8005f42:	edd3 7a00 	vldr	s15, [r3]
 8005f46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005f4a:	4b5f      	ldr	r3, [pc, #380]	@ (80060c8 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8005f4c:	edc3 7a00 	vstr	s15, [r3]

			MYDRON.dronheight = (uint16_t)BMP180_GET_height();
 8005f50:	f7fa ff50 	bl	8000df4 <BMP180_GET_height>
 8005f54:	eef0 7a40 	vmov.f32	s15, s0
 8005f58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f5c:	ee17 3a90 	vmov	r3, s15
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	b21a      	sxth	r2, r3
 8005f64:	4b59      	ldr	r3, [pc, #356]	@ (80060cc <HAL_TIM_PeriodElapsedCallback+0x254>)
 8005f66:	82da      	strh	r2, [r3, #22]
			convert_value_to_array(MYDRON.dronheight, TxData, 0, 3);
 8005f68:	4b58      	ldr	r3, [pc, #352]	@ (80060cc <HAL_TIM_PeriodElapsedCallback+0x254>)
 8005f6a:	f9b3 0016 	ldrsh.w	r0, [r3, #22]
 8005f6e:	2303      	movs	r3, #3
 8005f70:	2200      	movs	r2, #0
 8005f72:	4957      	ldr	r1, [pc, #348]	@ (80060d0 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8005f74:	f000 ffab 	bl	8006ece <convert_value_to_array>

			Get_batteryvalue();
 8005f78:	f7fe f8da 	bl	8004130 <Get_batteryvalue>

			convert_value_to_array(MYDRON.batterysize, TxData, 3, 6);
 8005f7c:	4b53      	ldr	r3, [pc, #332]	@ (80060cc <HAL_TIM_PeriodElapsedCallback+0x254>)
 8005f7e:	881b      	ldrh	r3, [r3, #0]
 8005f80:	b218      	sxth	r0, r3
 8005f82:	2306      	movs	r3, #6
 8005f84:	2203      	movs	r2, #3
 8005f86:	4952      	ldr	r1, [pc, #328]	@ (80060d0 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8005f88:	f000 ffa1 	bl	8006ece <convert_value_to_array>

			for(int i = 0; i < 10; i++){
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	60fb      	str	r3, [r7, #12]
 8005f90:	e00b      	b.n	8005faa <HAL_TIM_PeriodElapsedCallback+0x132>
				TxData[22+i] = Txcode[22+i];
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	f103 0216 	add.w	r2, r3, #22
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	3316      	adds	r3, #22
 8005f9c:	494d      	ldr	r1, [pc, #308]	@ (80060d4 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8005f9e:	5c89      	ldrb	r1, [r1, r2]
 8005fa0:	4a4b      	ldr	r2, [pc, #300]	@ (80060d0 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8005fa2:	54d1      	strb	r1, [r2, r3]
			for(int i = 0; i < 10; i++){
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	3301      	adds	r3, #1
 8005fa8:	60fb      	str	r3, [r7, #12]
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2b09      	cmp	r3, #9
 8005fae:	ddf0      	ble.n	8005f92 <HAL_TIM_PeriodElapsedCallback+0x11a>
			}
			LED_6_1;
 8005fb0:	2201      	movs	r2, #1
 8005fb2:	2108      	movs	r1, #8
 8005fb4:	4840      	ldr	r0, [pc, #256]	@ (80060b8 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8005fb6:	f008 f90f 	bl	800e1d8 <HAL_GPIO_WritePin>
			nRF24_WriteTXPayload(TxData);
 8005fba:	4845      	ldr	r0, [pc, #276]	@ (80060d0 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8005fbc:	f7fc fa8a 	bl	80024d4 <nRF24_WriteTXPayload>
			NRF24_CE_HIGH;
 8005fc0:	2201      	movs	r2, #1
 8005fc2:	2140      	movs	r1, #64	@ 0x40
 8005fc4:	4844      	ldr	r0, [pc, #272]	@ (80060d8 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8005fc6:	f008 f907 	bl	800e1d8 <HAL_GPIO_WritePin>
			LED_6_0;
 8005fca:	2200      	movs	r2, #0
 8005fcc:	2108      	movs	r1, #8
 8005fce:	483a      	ldr	r0, [pc, #232]	@ (80060b8 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8005fd0:	f008 f902 	bl	800e1d8 <HAL_GPIO_WritePin>
		}
		if(i == 41){
 8005fd4:	4b36      	ldr	r3, [pc, #216]	@ (80060b0 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	2b29      	cmp	r3, #41	@ 0x29
 8005fda:	d104      	bne.n	8005fe6 <HAL_TIM_PeriodElapsedCallback+0x16e>
			NRF24_CE_LOW;
 8005fdc:	2200      	movs	r2, #0
 8005fde:	2140      	movs	r1, #64	@ 0x40
 8005fe0:	483d      	ldr	r0, [pc, #244]	@ (80060d8 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8005fe2:	f008 f8f9 	bl	800e1d8 <HAL_GPIO_WritePin>
		}
		if(i >= 42){
 8005fe6:	4b32      	ldr	r3, [pc, #200]	@ (80060b0 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	2b29      	cmp	r3, #41	@ 0x29
 8005fec:	dd16      	ble.n	800601c <HAL_TIM_PeriodElapsedCallback+0x1a4>
			if(nRF24_Rx_Mode != 1){
 8005fee:	4b33      	ldr	r3, [pc, #204]	@ (80060bc <HAL_TIM_PeriodElapsedCallback+0x244>)
 8005ff0:	781b      	ldrb	r3, [r3, #0]
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d012      	beq.n	800601c <HAL_TIM_PeriodElapsedCallback+0x1a4>
				if(((nRF24_ReadStatus() & (1<<NRF24_MAX_RT)) || (nRF24_ReadStatus() & (1<<NRF24_TX_DS)))){
 8005ff6:	f7fc f830 	bl	800205a <nRF24_ReadStatus>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	f003 0310 	and.w	r3, r3, #16
 8006000:	2b00      	cmp	r3, #0
 8006002:	d106      	bne.n	8006012 <HAL_TIM_PeriodElapsedCallback+0x19a>
 8006004:	f7fc f829 	bl	800205a <nRF24_ReadStatus>
 8006008:	4603      	mov	r3, r0
 800600a:	f003 0320 	and.w	r3, r3, #32
 800600e:	2b00      	cmp	r3, #0
 8006010:	d004      	beq.n	800601c <HAL_TIM_PeriodElapsedCallback+0x1a4>
					nRF24_RX_Mode();
 8006012:	f7fb ff75 	bl	8001f00 <nRF24_RX_Mode>
					nRF24_Rx_Mode = 1;
 8006016:	4b29      	ldr	r3, [pc, #164]	@ (80060bc <HAL_TIM_PeriodElapsedCallback+0x244>)
 8006018:	2201      	movs	r2, #1
 800601a:	701a      	strb	r2, [r3, #0]
				}
			}
		}

		LED_5_1;
 800601c:	2201      	movs	r2, #1
 800601e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006022:	4824      	ldr	r0, [pc, #144]	@ (80060b4 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8006024:	f008 f8d8 	bl	800e1d8 <HAL_GPIO_WritePin>
		MPU6050_GET_ACCANDGYR_CALANDSCL_IT();
 8006028:	f7fb fb92 	bl	8001750 <MPU6050_GET_ACCANDGYR_CALANDSCL_IT>
		LED_5_0;
 800602c:	2200      	movs	r2, #0
 800602e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006032:	4820      	ldr	r0, [pc, #128]	@ (80060b4 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8006034:	f008 f8d0 	bl	800e1d8 <HAL_GPIO_WritePin>

		if(i == 100){
 8006038:	4b1d      	ldr	r3, [pc, #116]	@ (80060b0 <HAL_TIM_PeriodElapsedCallback+0x238>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	2b64      	cmp	r3, #100	@ 0x64
 800603e:	d103      	bne.n	8006048 <HAL_TIM_PeriodElapsedCallback+0x1d0>
			i = 0;
 8006040:	4b1b      	ldr	r3, [pc, #108]	@ (80060b0 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8006042:	2200      	movs	r2, #0
 8006044:	601a      	str	r2, [r3, #0]
 8006046:	e004      	b.n	8006052 <HAL_TIM_PeriodElapsedCallback+0x1da>
		}
		else{
			i++;
 8006048:	4b19      	ldr	r3, [pc, #100]	@ (80060b0 <HAL_TIM_PeriodElapsedCallback+0x238>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	3301      	adds	r3, #1
 800604e:	4a18      	ldr	r2, [pc, #96]	@ (80060b0 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8006050:	6013      	str	r3, [r2, #0]
		}
		if(NRF_TIM_Inte >= 1000){
 8006052:	4b16      	ldr	r3, [pc, #88]	@ (80060ac <HAL_TIM_PeriodElapsedCallback+0x234>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800605a:	d308      	bcc.n	800606e <HAL_TIM_PeriodElapsedCallback+0x1f6>
			LED_R_1;
 800605c:	2201      	movs	r2, #1
 800605e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8006062:	481d      	ldr	r0, [pc, #116]	@ (80060d8 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8006064:	f008 f8b8 	bl	800e1d8 <HAL_GPIO_WritePin>
			MYDRON.dron_status.Connection = DRON_DISCONNECTED;
 8006068:	4b18      	ldr	r3, [pc, #96]	@ (80060cc <HAL_TIM_PeriodElapsedCallback+0x254>)
 800606a:	2202      	movs	r2, #2
 800606c:	815a      	strh	r2, [r3, #10]
		}
		if(MYDRON.dron_status.Connection == DRON_DISCONNECTED){
 800606e:	4b17      	ldr	r3, [pc, #92]	@ (80060cc <HAL_TIM_PeriodElapsedCallback+0x254>)
 8006070:	895b      	ldrh	r3, [r3, #10]
 8006072:	2b02      	cmp	r3, #2
 8006074:	d110      	bne.n	8006098 <HAL_TIM_PeriodElapsedCallback+0x220>
			wanted_rool = 0;
 8006076:	4b19      	ldr	r3, [pc, #100]	@ (80060dc <HAL_TIM_PeriodElapsedCallback+0x264>)
 8006078:	f04f 0200 	mov.w	r2, #0
 800607c:	601a      	str	r2, [r3, #0]
			wanted_pitch = 0;
 800607e:	4b18      	ldr	r3, [pc, #96]	@ (80060e0 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8006080:	f04f 0200 	mov.w	r2, #0
 8006084:	601a      	str	r2, [r3, #0]
			wanted_yaw = 0;
 8006086:	4b17      	ldr	r3, [pc, #92]	@ (80060e4 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8006088:	f04f 0200 	mov.w	r2, #0
 800608c:	601a      	str	r2, [r3, #0]
			wanted_thrust = DRON_SLOWFALING;
 800608e:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8006092:	b21a      	sxth	r2, r3
 8006094:	4b14      	ldr	r3, [pc, #80]	@ (80060e8 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8006096:	801a      	strh	r2, [r3, #0]
		}
	}
}
 8006098:	bf00      	nop
 800609a:	3710      	adds	r7, #16
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}
 80060a0:	240003cc 	.word	0x240003cc
 80060a4:	0000006c 	.word	0x0000006c
 80060a8:	00000070 	.word	0x00000070
 80060ac:	00000078 	.word	0x00000078
 80060b0:	000041d8 	.word	0x000041d8
 80060b4:	58020000 	.word	0x58020000
 80060b8:	58021000 	.word	0x58021000
 80060bc:	0000017d 	.word	0x0000017d
 80060c0:	000000e4 	.word	0x000000e4
 80060c4:	000000e0 	.word	0x000000e0
 80060c8:	000000e8 	.word	0x000000e8
 80060cc:	00000180 	.word	0x00000180
 80060d0:	00000134 	.word	0x00000134
 80060d4:	00000114 	.word	0x00000114
 80060d8:	58020400 	.word	0x58020400
 80060dc:	0000406c 	.word	0x0000406c
 80060e0:	00004068 	.word	0x00004068
 80060e4:	00004070 	.word	0x00004070
 80060e8:	0000405c 	.word	0x0000405c

080060ec <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b084      	sub	sp, #16
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	4603      	mov	r3, r0
 80060f4:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == GPIO_PIN_15)
 80060f6:	88fb      	ldrh	r3, [r7, #6]
 80060f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80060fc:	f040 812b 	bne.w	8006356 <HAL_GPIO_EXTI_Callback+0x26a>
	{
		if(STARTUP == 0){
 8006100:	4b97      	ldr	r3, [pc, #604]	@ (8006360 <HAL_GPIO_EXTI_Callback+0x274>)
 8006102:	781b      	ldrb	r3, [r3, #0]
 8006104:	2b00      	cmp	r3, #0
 8006106:	f040 8126 	bne.w	8006356 <HAL_GPIO_EXTI_Callback+0x26a>
			LED_6_1;
 800610a:	2201      	movs	r2, #1
 800610c:	2108      	movs	r1, #8
 800610e:	4895      	ldr	r0, [pc, #596]	@ (8006364 <HAL_GPIO_EXTI_Callback+0x278>)
 8006110:	f008 f862 	bl	800e1d8 <HAL_GPIO_WritePin>
			nRF24_ReadRXPaylaod(RxData);
 8006114:	4894      	ldr	r0, [pc, #592]	@ (8006368 <HAL_GPIO_EXTI_Callback+0x27c>)
 8006116:	f7fc fa13 	bl	8002540 <nRF24_ReadRXPaylaod>
			LED_6_0;
 800611a:	2200      	movs	r2, #0
 800611c:	2108      	movs	r1, #8
 800611e:	4891      	ldr	r0, [pc, #580]	@ (8006364 <HAL_GPIO_EXTI_Callback+0x278>)
 8006120:	f008 f85a 	bl	800e1d8 <HAL_GPIO_WritePin>


			LED_Y_1;
 8006124:	2201      	movs	r2, #1
 8006126:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800612a:	4890      	ldr	r0, [pc, #576]	@ (800636c <HAL_GPIO_EXTI_Callback+0x280>)
 800612c:	f008 f854 	bl	800e1d8 <HAL_GPIO_WritePin>

			loopnum = 0;
 8006130:	4b8f      	ldr	r3, [pc, #572]	@ (8006370 <HAL_GPIO_EXTI_Callback+0x284>)
 8006132:	2200      	movs	r2, #0
 8006134:	601a      	str	r2, [r3, #0]
			for(int abc = 0; abc < 10; abc++){//sprawdzenia poprawnosci kodu nadanego
 8006136:	2300      	movs	r3, #0
 8006138:	60fb      	str	r3, [r7, #12]
 800613a:	e011      	b.n	8006160 <HAL_GPIO_EXTI_Callback+0x74>
				if(RxData[12+abc] == Rxcode[abc+12]){
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	330c      	adds	r3, #12
 8006140:	4a89      	ldr	r2, [pc, #548]	@ (8006368 <HAL_GPIO_EXTI_Callback+0x27c>)
 8006142:	5cd2      	ldrb	r2, [r2, r3]
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	330c      	adds	r3, #12
 8006148:	498a      	ldr	r1, [pc, #552]	@ (8006374 <HAL_GPIO_EXTI_Callback+0x288>)
 800614a:	5ccb      	ldrb	r3, [r1, r3]
 800614c:	429a      	cmp	r2, r3
 800614e:	d104      	bne.n	800615a <HAL_GPIO_EXTI_Callback+0x6e>
					loopnum++;
 8006150:	4b87      	ldr	r3, [pc, #540]	@ (8006370 <HAL_GPIO_EXTI_Callback+0x284>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	3301      	adds	r3, #1
 8006156:	4a86      	ldr	r2, [pc, #536]	@ (8006370 <HAL_GPIO_EXTI_Callback+0x284>)
 8006158:	6013      	str	r3, [r2, #0]
			for(int abc = 0; abc < 10; abc++){//sprawdzenia poprawnosci kodu nadanego
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	3301      	adds	r3, #1
 800615e:	60fb      	str	r3, [r7, #12]
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2b09      	cmp	r3, #9
 8006164:	ddea      	ble.n	800613c <HAL_GPIO_EXTI_Callback+0x50>
				}
			}

			if(loopnum == 10){
 8006166:	4b82      	ldr	r3, [pc, #520]	@ (8006370 <HAL_GPIO_EXTI_Callback+0x284>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	2b0a      	cmp	r3, #10
 800616c:	f040 80e2 	bne.w	8006334 <HAL_GPIO_EXTI_Callback+0x248>
				convert_array_to_value(RxData, &wanted_pitch_v, 0, 2);//pitch
 8006170:	2302      	movs	r3, #2
 8006172:	2200      	movs	r2, #0
 8006174:	4980      	ldr	r1, [pc, #512]	@ (8006378 <HAL_GPIO_EXTI_Callback+0x28c>)
 8006176:	487c      	ldr	r0, [pc, #496]	@ (8006368 <HAL_GPIO_EXTI_Callback+0x27c>)
 8006178:	f000 fe58 	bl	8006e2c <convert_array_to_value>
				convert_array_to_value(RxData, &wanted_roll_v, 3, 5);// pid_angular_rate_rool wanted_roll_v
 800617c:	2305      	movs	r3, #5
 800617e:	2203      	movs	r2, #3
 8006180:	497e      	ldr	r1, [pc, #504]	@ (800637c <HAL_GPIO_EXTI_Callback+0x290>)
 8006182:	4879      	ldr	r0, [pc, #484]	@ (8006368 <HAL_GPIO_EXTI_Callback+0x27c>)
 8006184:	f000 fe52 	bl	8006e2c <convert_array_to_value>
				if(wobble_strenght == 1){
 8006188:	4b7d      	ldr	r3, [pc, #500]	@ (8006380 <HAL_GPIO_EXTI_Callback+0x294>)
 800618a:	edd3 7a00 	vldr	s15, [r3]
 800618e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006192:	eef4 7a47 	vcmp.f32	s15, s14
 8006196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800619a:	d105      	bne.n	80061a8 <HAL_GPIO_EXTI_Callback+0xbc>
					convert_array_to_value(RxData, &wanted_thrust, 6, 8);//
 800619c:	2308      	movs	r3, #8
 800619e:	2206      	movs	r2, #6
 80061a0:	4978      	ldr	r1, [pc, #480]	@ (8006384 <HAL_GPIO_EXTI_Callback+0x298>)
 80061a2:	4871      	ldr	r0, [pc, #452]	@ (8006368 <HAL_GPIO_EXTI_Callback+0x27c>)
 80061a4:	f000 fe42 	bl	8006e2c <convert_array_to_value>
				}
				convert_array_to_value(RxData, &wanted_yaw_v, 9, 11);//
 80061a8:	230b      	movs	r3, #11
 80061aa:	2209      	movs	r2, #9
 80061ac:	4976      	ldr	r1, [pc, #472]	@ (8006388 <HAL_GPIO_EXTI_Callback+0x29c>)
 80061ae:	486e      	ldr	r0, [pc, #440]	@ (8006368 <HAL_GPIO_EXTI_Callback+0x27c>)
 80061b0:	f000 fe3c 	bl	8006e2c <convert_array_to_value>
				MYDRON.dron_status.Connection = DRON_CONNECTED;
 80061b4:	4b75      	ldr	r3, [pc, #468]	@ (800638c <HAL_GPIO_EXTI_Callback+0x2a0>)
 80061b6:	2201      	movs	r2, #1
 80061b8:	815a      	strh	r2, [r3, #10]

				if(RxData[23] == 1){
 80061ba:	4b6b      	ldr	r3, [pc, #428]	@ (8006368 <HAL_GPIO_EXTI_Callback+0x27c>)
 80061bc:	7ddb      	ldrb	r3, [r3, #23]
 80061be:	2b01      	cmp	r3, #1
 80061c0:	d11b      	bne.n	80061fa <HAL_GPIO_EXTI_Callback+0x10e>
					ESC_POWER_1;
 80061c2:	2201      	movs	r2, #1
 80061c4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80061c8:	4871      	ldr	r0, [pc, #452]	@ (8006390 <HAL_GPIO_EXTI_Callback+0x2a4>)
 80061ca:	f008 f805 	bl	800e1d8 <HAL_GPIO_WritePin>
					LED_R_1;
 80061ce:	2201      	movs	r2, #1
 80061d0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80061d4:	4865      	ldr	r0, [pc, #404]	@ (800636c <HAL_GPIO_EXTI_Callback+0x280>)
 80061d6:	f007 ffff 	bl	800e1d8 <HAL_GPIO_WritePin>
					if(SD_enable_Flag == 1){
 80061da:	4b6e      	ldr	r3, [pc, #440]	@ (8006394 <HAL_GPIO_EXTI_Callback+0x2a8>)
 80061dc:	781b      	ldrb	r3, [r3, #0]
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d10b      	bne.n	80061fa <HAL_GPIO_EXTI_Callback+0x10e>
						f_close(&fil);
 80061e2:	486d      	ldr	r0, [pc, #436]	@ (8006398 <HAL_GPIO_EXTI_Callback+0x2ac>)
 80061e4:	f017 fa7a 	bl	801d6dc <f_close>
						fresult = f_mount(NULL, "/", 1);
 80061e8:	2201      	movs	r2, #1
 80061ea:	496c      	ldr	r1, [pc, #432]	@ (800639c <HAL_GPIO_EXTI_Callback+0x2b0>)
 80061ec:	2000      	movs	r0, #0
 80061ee:	f016 fe55 	bl	801ce9c <f_mount>
 80061f2:	4603      	mov	r3, r0
 80061f4:	461a      	mov	r2, r3
 80061f6:	4b6a      	ldr	r3, [pc, #424]	@ (80063a0 <HAL_GPIO_EXTI_Callback+0x2b4>)
 80061f8:	701a      	strb	r2, [r3, #0]
					}

				}

				if(wanted_thrust == 9999){
 80061fa:	4b62      	ldr	r3, [pc, #392]	@ (8006384 <HAL_GPIO_EXTI_Callback+0x298>)
 80061fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006200:	f242 720f 	movw	r2, #9999	@ 0x270f
 8006204:	4293      	cmp	r3, r2
 8006206:	d102      	bne.n	800620e <HAL_GPIO_EXTI_Callback+0x122>
					MYDRON.THRUST_flag = THRUST_MAX;
 8006208:	4b60      	ldr	r3, [pc, #384]	@ (800638c <HAL_GPIO_EXTI_Callback+0x2a0>)
 800620a:	2210      	movs	r2, #16
 800620c:	761a      	strb	r2, [r3, #24]
	  			}
				wanted_thrust = wanted_thrust * 20;
 800620e:	4b5d      	ldr	r3, [pc, #372]	@ (8006384 <HAL_GPIO_EXTI_Callback+0x298>)
 8006210:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006214:	b29b      	uxth	r3, r3
 8006216:	461a      	mov	r2, r3
 8006218:	0092      	lsls	r2, r2, #2
 800621a:	4413      	add	r3, r2
 800621c:	009b      	lsls	r3, r3, #2
 800621e:	b29b      	uxth	r3, r3
 8006220:	b21a      	sxth	r2, r3
 8006222:	4b58      	ldr	r3, [pc, #352]	@ (8006384 <HAL_GPIO_EXTI_Callback+0x298>)
 8006224:	801a      	strh	r2, [r3, #0]
				wanted_thrust = wanted_thrust - 10000;
 8006226:	4b57      	ldr	r3, [pc, #348]	@ (8006384 <HAL_GPIO_EXTI_Callback+0x298>)
 8006228:	f9b3 3000 	ldrsh.w	r3, [r3]
 800622c:	b29a      	uxth	r2, r3
 800622e:	4b5d      	ldr	r3, [pc, #372]	@ (80063a4 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8006230:	4413      	add	r3, r2
 8006232:	b29b      	uxth	r3, r3
 8006234:	b21a      	sxth	r2, r3
 8006236:	4b53      	ldr	r3, [pc, #332]	@ (8006384 <HAL_GPIO_EXTI_Callback+0x298>)
 8006238:	801a      	strh	r2, [r3, #0]
				if(wanted_thrust < 0){
 800623a:	4b52      	ldr	r3, [pc, #328]	@ (8006384 <HAL_GPIO_EXTI_Callback+0x298>)
 800623c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006240:	2b00      	cmp	r3, #0
 8006242:	da02      	bge.n	800624a <HAL_GPIO_EXTI_Callback+0x15e>
					wanted_thrust = 0;
 8006244:	4b4f      	ldr	r3, [pc, #316]	@ (8006384 <HAL_GPIO_EXTI_Callback+0x298>)
 8006246:	2200      	movs	r2, #0
 8006248:	801a      	strh	r2, [r3, #0]
	  			}

				wanted_rool_rx = (wanted_roll_v - 500)*wanted_rool_factro;//wanted_rool_rx (-90 <-> 90)
 800624a:	4b4c      	ldr	r3, [pc, #304]	@ (800637c <HAL_GPIO_EXTI_Callback+0x290>)
 800624c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006250:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8006254:	ee07 3a90 	vmov	s15, r3
 8006258:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800625c:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 80063a8 <HAL_GPIO_EXTI_Callback+0x2bc>
 8006260:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006264:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006268:	ee17 3a90 	vmov	r3, s15
 800626c:	b21a      	sxth	r2, r3
 800626e:	4b4f      	ldr	r3, [pc, #316]	@ (80063ac <HAL_GPIO_EXTI_Callback+0x2c0>)
 8006270:	801a      	strh	r2, [r3, #0]
				wanted_pitch_rx = (wanted_pitch_v - 500)*wanted_pitch_factro;// (-450 <-> 450)
 8006272:	4b41      	ldr	r3, [pc, #260]	@ (8006378 <HAL_GPIO_EXTI_Callback+0x28c>)
 8006274:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006278:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 800627c:	ee07 3a90 	vmov	s15, r3
 8006280:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006284:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 80063b0 <HAL_GPIO_EXTI_Callback+0x2c4>
 8006288:	ee67 7a87 	vmul.f32	s15, s15, s14
 800628c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006290:	ee17 3a90 	vmov	r3, s15
 8006294:	b21a      	sxth	r2, r3
 8006296:	4b47      	ldr	r3, [pc, #284]	@ (80063b4 <HAL_GPIO_EXTI_Callback+0x2c8>)
 8006298:	801a      	strh	r2, [r3, #0]
				wanted_yaw_rx = (wanted_yaw_v - 500)*wanted_yaw_factro;
 800629a:	4b3b      	ldr	r3, [pc, #236]	@ (8006388 <HAL_GPIO_EXTI_Callback+0x29c>)
 800629c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80062a0:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80062a4:	ee07 3a90 	vmov	s15, r3
 80062a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80062ac:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 80063b8 <HAL_GPIO_EXTI_Callback+0x2cc>
 80062b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80062b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80062b8:	ee17 3a90 	vmov	r3, s15
 80062bc:	b21a      	sxth	r2, r3
 80062be:	4b3f      	ldr	r3, [pc, #252]	@ (80063bc <HAL_GPIO_EXTI_Callback+0x2d0>)
 80062c0:	801a      	strh	r2, [r3, #0]

				if(wanted_rool_rx >= 30){
 80062c2:	4b3a      	ldr	r3, [pc, #232]	@ (80063ac <HAL_GPIO_EXTI_Callback+0x2c0>)
 80062c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80062c8:	2b1d      	cmp	r3, #29
 80062ca:	dd02      	ble.n	80062d2 <HAL_GPIO_EXTI_Callback+0x1e6>
					wanted_rool_rx = 30;
 80062cc:	4b37      	ldr	r3, [pc, #220]	@ (80063ac <HAL_GPIO_EXTI_Callback+0x2c0>)
 80062ce:	221e      	movs	r2, #30
 80062d0:	801a      	strh	r2, [r3, #0]
				}
				if(wanted_rool_rx <= -30){
 80062d2:	4b36      	ldr	r3, [pc, #216]	@ (80063ac <HAL_GPIO_EXTI_Callback+0x2c0>)
 80062d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80062d8:	f113 0f1d 	cmn.w	r3, #29
 80062dc:	da03      	bge.n	80062e6 <HAL_GPIO_EXTI_Callback+0x1fa>
					wanted_rool_rx = -30;
 80062de:	4b33      	ldr	r3, [pc, #204]	@ (80063ac <HAL_GPIO_EXTI_Callback+0x2c0>)
 80062e0:	f64f 72e2 	movw	r2, #65506	@ 0xffe2
 80062e4:	801a      	strh	r2, [r3, #0]
				}
				if(wanted_pitch_rx >= 30){
 80062e6:	4b33      	ldr	r3, [pc, #204]	@ (80063b4 <HAL_GPIO_EXTI_Callback+0x2c8>)
 80062e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80062ec:	2b1d      	cmp	r3, #29
 80062ee:	dd02      	ble.n	80062f6 <HAL_GPIO_EXTI_Callback+0x20a>
					wanted_pitch_rx = 30;
 80062f0:	4b30      	ldr	r3, [pc, #192]	@ (80063b4 <HAL_GPIO_EXTI_Callback+0x2c8>)
 80062f2:	221e      	movs	r2, #30
 80062f4:	801a      	strh	r2, [r3, #0]
				}
				if(wanted_pitch_rx <= -30){
 80062f6:	4b2f      	ldr	r3, [pc, #188]	@ (80063b4 <HAL_GPIO_EXTI_Callback+0x2c8>)
 80062f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80062fc:	f113 0f1d 	cmn.w	r3, #29
 8006300:	da03      	bge.n	800630a <HAL_GPIO_EXTI_Callback+0x21e>
					wanted_pitch_rx = -30;
 8006302:	4b2c      	ldr	r3, [pc, #176]	@ (80063b4 <HAL_GPIO_EXTI_Callback+0x2c8>)
 8006304:	f64f 72e2 	movw	r2, #65506	@ 0xffe2
 8006308:	801a      	strh	r2, [r3, #0]
				}
				if(wanted_yaw_rx >= 30){
 800630a:	4b2c      	ldr	r3, [pc, #176]	@ (80063bc <HAL_GPIO_EXTI_Callback+0x2d0>)
 800630c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006310:	2b1d      	cmp	r3, #29
 8006312:	dd02      	ble.n	800631a <HAL_GPIO_EXTI_Callback+0x22e>
					wanted_yaw_rx = 30;
 8006314:	4b29      	ldr	r3, [pc, #164]	@ (80063bc <HAL_GPIO_EXTI_Callback+0x2d0>)
 8006316:	221e      	movs	r2, #30
 8006318:	801a      	strh	r2, [r3, #0]
				}
				if(wanted_yaw_rx <= -30){
 800631a:	4b28      	ldr	r3, [pc, #160]	@ (80063bc <HAL_GPIO_EXTI_Callback+0x2d0>)
 800631c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006320:	f113 0f1d 	cmn.w	r3, #29
 8006324:	da03      	bge.n	800632e <HAL_GPIO_EXTI_Callback+0x242>
					wanted_yaw_rx = -30;
 8006326:	4b25      	ldr	r3, [pc, #148]	@ (80063bc <HAL_GPIO_EXTI_Callback+0x2d0>)
 8006328:	f64f 72e2 	movw	r2, #65506	@ 0xffe2
 800632c:	801a      	strh	r2, [r3, #0]
				}


				NRF_TIM_Inte = 0;
 800632e:	4b24      	ldr	r3, [pc, #144]	@ (80063c0 <HAL_GPIO_EXTI_Callback+0x2d4>)
 8006330:	2200      	movs	r2, #0
 8006332:	601a      	str	r2, [r3, #0]
	  		}

	  			if(loopnum > 0 && loopnum < 10){
 8006334:	4b0e      	ldr	r3, [pc, #56]	@ (8006370 <HAL_GPIO_EXTI_Callback+0x284>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	2b00      	cmp	r3, #0
 800633a:	dd06      	ble.n	800634a <HAL_GPIO_EXTI_Callback+0x25e>
 800633c:	4b0c      	ldr	r3, [pc, #48]	@ (8006370 <HAL_GPIO_EXTI_Callback+0x284>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	2b09      	cmp	r3, #9
 8006342:	dc02      	bgt.n	800634a <HAL_GPIO_EXTI_Callback+0x25e>
	  				MYDRON.dron_status.Connection = DRON_CONNECTION_ERROR;
 8006344:	4b11      	ldr	r3, [pc, #68]	@ (800638c <HAL_GPIO_EXTI_Callback+0x2a0>)
 8006346:	2203      	movs	r2, #3
 8006348:	815a      	strh	r2, [r3, #10]
	  			}


	  			LED_Y_0;
 800634a:	2200      	movs	r2, #0
 800634c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006350:	4806      	ldr	r0, [pc, #24]	@ (800636c <HAL_GPIO_EXTI_Callback+0x280>)
 8006352:	f007 ff41 	bl	800e1d8 <HAL_GPIO_WritePin>
		}
	}
}
 8006356:	bf00      	nop
 8006358:	3710      	adds	r7, #16
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}
 800635e:	bf00      	nop
 8006360:	00000074 	.word	0x00000074
 8006364:	58021000 	.word	0x58021000
 8006368:	000000f4 	.word	0x000000f4
 800636c:	58020400 	.word	0x58020400
 8006370:	000041dc 	.word	0x000041dc
 8006374:	00000154 	.word	0x00000154
 8006378:	000041e2 	.word	0x000041e2
 800637c:	000041e0 	.word	0x000041e0
 8006380:	000041d0 	.word	0x000041d0
 8006384:	0000405c 	.word	0x0000405c
 8006388:	000041e4 	.word	0x000041e4
 800638c:	00000180 	.word	0x00000180
 8006390:	58021800 	.word	0x58021800
 8006394:	000041cc 	.word	0x000041cc
 8006398:	24001ef0 	.word	0x24001ef0
 800639c:	0801e518 	.word	0x0801e518
 80063a0:	24001eec 	.word	0x24001eec
 80063a4:	ffffd8f0 	.word	0xffffd8f0
 80063a8:	3f266666 	.word	0x3f266666
 80063ac:	0000404a 	.word	0x0000404a
 80063b0:	3f28f5c3 	.word	0x3f28f5c3
 80063b4:	00004048 	.word	0x00004048
 80063b8:	3f19999a 	.word	0x3f19999a
 80063bc:	0000404c 	.word	0x0000404c
 80063c0:	00000078 	.word	0x00000078

080063c4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)//pobieranie znakw z uart
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b084      	sub	sp, #16
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
	words[command_ch_num] = Received;
 80063cc:	4b24      	ldr	r3, [pc, #144]	@ (8006460 <HAL_UART_RxCpltCallback+0x9c>)
 80063ce:	781b      	ldrb	r3, [r3, #0]
 80063d0:	461a      	mov	r2, r3
 80063d2:	4b24      	ldr	r3, [pc, #144]	@ (8006464 <HAL_UART_RxCpltCallback+0xa0>)
 80063d4:	7819      	ldrb	r1, [r3, #0]
 80063d6:	4b24      	ldr	r3, [pc, #144]	@ (8006468 <HAL_UART_RxCpltCallback+0xa4>)
 80063d8:	5499      	strb	r1, [r3, r2]

	if(words[command_ch_num] == '\r')
 80063da:	4b21      	ldr	r3, [pc, #132]	@ (8006460 <HAL_UART_RxCpltCallback+0x9c>)
 80063dc:	781b      	ldrb	r3, [r3, #0]
 80063de:	461a      	mov	r2, r3
 80063e0:	4b21      	ldr	r3, [pc, #132]	@ (8006468 <HAL_UART_RxCpltCallback+0xa4>)
 80063e2:	5c9b      	ldrb	r3, [r3, r2]
 80063e4:	2b0d      	cmp	r3, #13
 80063e6:	d11a      	bne.n	800641e <HAL_UART_RxCpltCallback+0x5a>
	{
		char Y = '\n';
 80063e8:	230a      	movs	r3, #10
 80063ea:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart1, (uint8_t *)&Y, 1, 100);
 80063ec:	f107 010f 	add.w	r1, r7, #15
 80063f0:	2364      	movs	r3, #100	@ 0x64
 80063f2:	2201      	movs	r2, #1
 80063f4:	481d      	ldr	r0, [pc, #116]	@ (800646c <HAL_UART_RxCpltCallback+0xa8>)
 80063f6:	f011 fa9d 	bl	8017934 <HAL_UART_Transmit>
		Y = '\r';
 80063fa:	230d      	movs	r3, #13
 80063fc:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart1, (uint8_t *)&Y, 1, 100);
 80063fe:	f107 010f 	add.w	r1, r7, #15
 8006402:	2364      	movs	r3, #100	@ 0x64
 8006404:	2201      	movs	r2, #1
 8006406:	4819      	ldr	r0, [pc, #100]	@ (800646c <HAL_UART_RxCpltCallback+0xa8>)
 8006408:	f011 fa94 	bl	8017934 <HAL_UART_Transmit>
		words[command_ch_num] = 0;
 800640c:	4b14      	ldr	r3, [pc, #80]	@ (8006460 <HAL_UART_RxCpltCallback+0x9c>)
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	461a      	mov	r2, r3
 8006412:	4b15      	ldr	r3, [pc, #84]	@ (8006468 <HAL_UART_RxCpltCallback+0xa4>)
 8006414:	2100      	movs	r1, #0
 8006416:	5499      	strb	r1, [r3, r2]
		commandready = 1;
 8006418:	4b15      	ldr	r3, [pc, #84]	@ (8006470 <HAL_UART_RxCpltCallback+0xac>)
 800641a:	2201      	movs	r2, #1
 800641c:	701a      	strb	r2, [r3, #0]
	}

	HAL_UART_Transmit_IT(&huart1, (uint8_t *)&words[command_ch_num], 1);
 800641e:	4b10      	ldr	r3, [pc, #64]	@ (8006460 <HAL_UART_RxCpltCallback+0x9c>)
 8006420:	781b      	ldrb	r3, [r3, #0]
 8006422:	461a      	mov	r2, r3
 8006424:	4b10      	ldr	r3, [pc, #64]	@ (8006468 <HAL_UART_RxCpltCallback+0xa4>)
 8006426:	4413      	add	r3, r2
 8006428:	2201      	movs	r2, #1
 800642a:	4619      	mov	r1, r3
 800642c:	480f      	ldr	r0, [pc, #60]	@ (800646c <HAL_UART_RxCpltCallback+0xa8>)
 800642e:	f011 fb0f 	bl	8017a50 <HAL_UART_Transmit_IT>
	HAL_UART_Receive_IT(&huart1, &Received, 1);
 8006432:	2201      	movs	r2, #1
 8006434:	490b      	ldr	r1, [pc, #44]	@ (8006464 <HAL_UART_RxCpltCallback+0xa0>)
 8006436:	480d      	ldr	r0, [pc, #52]	@ (800646c <HAL_UART_RxCpltCallback+0xa8>)
 8006438:	f011 fb9e 	bl	8017b78 <HAL_UART_Receive_IT>
	command_ch_num++;
 800643c:	4b08      	ldr	r3, [pc, #32]	@ (8006460 <HAL_UART_RxCpltCallback+0x9c>)
 800643e:	781b      	ldrb	r3, [r3, #0]
 8006440:	3301      	adds	r3, #1
 8006442:	b2da      	uxtb	r2, r3
 8006444:	4b06      	ldr	r3, [pc, #24]	@ (8006460 <HAL_UART_RxCpltCallback+0x9c>)
 8006446:	701a      	strb	r2, [r3, #0]

	if(commandready == 1)
 8006448:	4b09      	ldr	r3, [pc, #36]	@ (8006470 <HAL_UART_RxCpltCallback+0xac>)
 800644a:	781b      	ldrb	r3, [r3, #0]
 800644c:	2b01      	cmp	r3, #1
 800644e:	d102      	bne.n	8006456 <HAL_UART_RxCpltCallback+0x92>
	{
		command_ch_num = 0;
 8006450:	4b03      	ldr	r3, [pc, #12]	@ (8006460 <HAL_UART_RxCpltCallback+0x9c>)
 8006452:	2200      	movs	r2, #0
 8006454:	701a      	strb	r2, [r3, #0]
	}
}
 8006456:	bf00      	nop
 8006458:	3710      	adds	r7, #16
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
 800645e:	bf00      	nop
 8006460:	000041bf 	.word	0x000041bf
 8006464:	000041c0 	.word	0x000041c0
 8006468:	000041b4 	.word	0x000041b4
 800646c:	240004b0 	.word	0x240004b0
 8006470:	000041be 	.word	0x000041be
 8006474:	00000000 	.word	0x00000000

08006478 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
 8006478:	b580      	push	{r7, lr}
 800647a:	b084      	sub	sp, #16
 800647c:	af02      	add	r7, sp, #8
 800647e:	6078      	str	r0, [r7, #4]
	if(MPU6050_IRQ == 1){
 8006480:	4bc9      	ldr	r3, [pc, #804]	@ (80067a8 <HAL_I2C_MemRxCpltCallback+0x330>)
 8006482:	781b      	ldrb	r3, [r3, #0]
 8006484:	2b01      	cmp	r3, #1
 8006486:	f040 8429 	bne.w	8006cdc <HAL_I2C_MemRxCpltCallback+0x864>
			MPU6050_IRQ = 0;
 800648a:	4bc7      	ldr	r3, [pc, #796]	@ (80067a8 <HAL_I2C_MemRxCpltCallback+0x330>)
 800648c:	2200      	movs	r2, #0
 800648e:	701a      	strb	r2, [r3, #0]
			LED_G_1;
 8006490:	2201      	movs	r2, #1
 8006492:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006496:	48c5      	ldr	r0, [pc, #788]	@ (80067ac <HAL_I2C_MemRxCpltCallback+0x334>)
 8006498:	f007 fe9e 	bl	800e1d8 <HAL_GPIO_WritePin>

			MPU6050_GET_CALANDSCL_IT(&ax, &ay, &az, &gx, &gy, &gz, accelx_cal, accely_cal, accelz_cal, gyrox_cal, gyroy_cal, gyroz_cal, Gyr_Scale, Acc_Scale);
 800649c:	4bc4      	ldr	r3, [pc, #784]	@ (80067b0 <HAL_I2C_MemRxCpltCallback+0x338>)
 800649e:	edd3 7a00 	vldr	s15, [r3]
 80064a2:	4bc4      	ldr	r3, [pc, #784]	@ (80067b4 <HAL_I2C_MemRxCpltCallback+0x33c>)
 80064a4:	ed93 7a00 	vldr	s14, [r3]
 80064a8:	4bc3      	ldr	r3, [pc, #780]	@ (80067b8 <HAL_I2C_MemRxCpltCallback+0x340>)
 80064aa:	edd3 6a00 	vldr	s13, [r3]
 80064ae:	4bc3      	ldr	r3, [pc, #780]	@ (80067bc <HAL_I2C_MemRxCpltCallback+0x344>)
 80064b0:	ed93 6a00 	vldr	s12, [r3]
 80064b4:	4bc2      	ldr	r3, [pc, #776]	@ (80067c0 <HAL_I2C_MemRxCpltCallback+0x348>)
 80064b6:	edd3 5a00 	vldr	s11, [r3]
 80064ba:	4bc2      	ldr	r3, [pc, #776]	@ (80067c4 <HAL_I2C_MemRxCpltCallback+0x34c>)
 80064bc:	ed93 5a00 	vldr	s10, [r3]
 80064c0:	eddf 4ac1 	vldr	s9, [pc, #772]	@ 80067c8 <HAL_I2C_MemRxCpltCallback+0x350>
 80064c4:	ed9f 4ac1 	vldr	s8, [pc, #772]	@ 80067cc <HAL_I2C_MemRxCpltCallback+0x354>
 80064c8:	4bc1      	ldr	r3, [pc, #772]	@ (80067d0 <HAL_I2C_MemRxCpltCallback+0x358>)
 80064ca:	9301      	str	r3, [sp, #4]
 80064cc:	4bc1      	ldr	r3, [pc, #772]	@ (80067d4 <HAL_I2C_MemRxCpltCallback+0x35c>)
 80064ce:	9300      	str	r3, [sp, #0]
 80064d0:	eef0 3a44 	vmov.f32	s7, s8
 80064d4:	eeb0 3a64 	vmov.f32	s6, s9
 80064d8:	eef0 2a45 	vmov.f32	s5, s10
 80064dc:	eeb0 2a65 	vmov.f32	s4, s11
 80064e0:	eef0 1a46 	vmov.f32	s3, s12
 80064e4:	eeb0 1a66 	vmov.f32	s2, s13
 80064e8:	eef0 0a47 	vmov.f32	s1, s14
 80064ec:	eeb0 0a67 	vmov.f32	s0, s15
 80064f0:	4bb9      	ldr	r3, [pc, #740]	@ (80067d8 <HAL_I2C_MemRxCpltCallback+0x360>)
 80064f2:	4aba      	ldr	r2, [pc, #744]	@ (80067dc <HAL_I2C_MemRxCpltCallback+0x364>)
 80064f4:	49ba      	ldr	r1, [pc, #744]	@ (80067e0 <HAL_I2C_MemRxCpltCallback+0x368>)
 80064f6:	48bb      	ldr	r0, [pc, #748]	@ (80067e4 <HAL_I2C_MemRxCpltCallback+0x36c>)
 80064f8:	f7fb f944 	bl	8001784 <MPU6050_GET_CALANDSCL_IT>
			MPU6050_GET_ACCEL_TO_ANGLE(ax, ay, az, &ax_ang, &ay_ang/*, &az_ang*/);
 80064fc:	4bb9      	ldr	r3, [pc, #740]	@ (80067e4 <HAL_I2C_MemRxCpltCallback+0x36c>)
 80064fe:	edd3 7a00 	vldr	s15, [r3]
 8006502:	4bb7      	ldr	r3, [pc, #732]	@ (80067e0 <HAL_I2C_MemRxCpltCallback+0x368>)
 8006504:	ed93 7a00 	vldr	s14, [r3]
 8006508:	4bb4      	ldr	r3, [pc, #720]	@ (80067dc <HAL_I2C_MemRxCpltCallback+0x364>)
 800650a:	edd3 6a00 	vldr	s13, [r3]
 800650e:	49b6      	ldr	r1, [pc, #728]	@ (80067e8 <HAL_I2C_MemRxCpltCallback+0x370>)
 8006510:	48b6      	ldr	r0, [pc, #728]	@ (80067ec <HAL_I2C_MemRxCpltCallback+0x374>)
 8006512:	eeb0 1a66 	vmov.f32	s2, s13
 8006516:	eef0 0a47 	vmov.f32	s1, s14
 800651a:	eeb0 0a67 	vmov.f32	s0, s15
 800651e:	f7fa ffe3 	bl	80014e8 <MPU6050_GET_ACCEL_TO_ANGLE>
			MPU6050_GET_ACCANDGYR_FILTRED(&data, ax_ang, ay_ang, Mag_Z, gx, gy, gz);
 8006522:	4bb2      	ldr	r3, [pc, #712]	@ (80067ec <HAL_I2C_MemRxCpltCallback+0x374>)
 8006524:	edd3 7a00 	vldr	s15, [r3]
 8006528:	4baf      	ldr	r3, [pc, #700]	@ (80067e8 <HAL_I2C_MemRxCpltCallback+0x370>)
 800652a:	ed93 7a00 	vldr	s14, [r3]
 800652e:	4bb0      	ldr	r3, [pc, #704]	@ (80067f0 <HAL_I2C_MemRxCpltCallback+0x378>)
 8006530:	edd3 6a00 	vldr	s13, [r3]
 8006534:	4ba8      	ldr	r3, [pc, #672]	@ (80067d8 <HAL_I2C_MemRxCpltCallback+0x360>)
 8006536:	ed93 6a00 	vldr	s12, [r3]
 800653a:	4ba6      	ldr	r3, [pc, #664]	@ (80067d4 <HAL_I2C_MemRxCpltCallback+0x35c>)
 800653c:	edd3 5a00 	vldr	s11, [r3]
 8006540:	4ba3      	ldr	r3, [pc, #652]	@ (80067d0 <HAL_I2C_MemRxCpltCallback+0x358>)
 8006542:	ed93 5a00 	vldr	s10, [r3]
 8006546:	eef0 2a45 	vmov.f32	s5, s10
 800654a:	eeb0 2a65 	vmov.f32	s4, s11
 800654e:	eef0 1a46 	vmov.f32	s3, s12
 8006552:	eeb0 1a66 	vmov.f32	s2, s13
 8006556:	eef0 0a47 	vmov.f32	s1, s14
 800655a:	eeb0 0a67 	vmov.f32	s0, s15
 800655e:	48a5      	ldr	r0, [pc, #660]	@ (80067f4 <HAL_I2C_MemRxCpltCallback+0x37c>)
 8006560:	f7fb f9ba 	bl	80018d8 <MPU6050_GET_ACCANDGYR_FILTRED>


			now_pitch = data.x;
 8006564:	4ba3      	ldr	r3, [pc, #652]	@ (80067f4 <HAL_I2C_MemRxCpltCallback+0x37c>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4aa3      	ldr	r2, [pc, #652]	@ (80067f8 <HAL_I2C_MemRxCpltCallback+0x380>)
 800656a:	6013      	str	r3, [r2, #0]
			now_rool = data.y;
 800656c:	4ba1      	ldr	r3, [pc, #644]	@ (80067f4 <HAL_I2C_MemRxCpltCallback+0x37c>)
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	4aa2      	ldr	r2, [pc, #648]	@ (80067fc <HAL_I2C_MemRxCpltCallback+0x384>)
 8006572:	6013      	str	r3, [r2, #0]
			now_yaw = data.z;
 8006574:	4b9f      	ldr	r3, [pc, #636]	@ (80067f4 <HAL_I2C_MemRxCpltCallback+0x37c>)
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	4aa1      	ldr	r2, [pc, #644]	@ (8006800 <HAL_I2C_MemRxCpltCallback+0x388>)
 800657a:	6013      	str	r3, [r2, #0]


			wanted_rool = (float)wanted_rool_rx/10;
 800657c:	4ba1      	ldr	r3, [pc, #644]	@ (8006804 <HAL_I2C_MemRxCpltCallback+0x38c>)
 800657e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006582:	ee07 3a90 	vmov	s15, r3
 8006586:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800658a:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800658e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006592:	4b9d      	ldr	r3, [pc, #628]	@ (8006808 <HAL_I2C_MemRxCpltCallback+0x390>)
 8006594:	edc3 7a00 	vstr	s15, [r3]
			wanted_pitch = (float)wanted_pitch_rx/10;
 8006598:	4b9c      	ldr	r3, [pc, #624]	@ (800680c <HAL_I2C_MemRxCpltCallback+0x394>)
 800659a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800659e:	ee07 3a90 	vmov	s15, r3
 80065a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80065a6:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80065aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80065ae:	4b98      	ldr	r3, [pc, #608]	@ (8006810 <HAL_I2C_MemRxCpltCallback+0x398>)
 80065b0:	edc3 7a00 	vstr	s15, [r3]
			wanted_yaw = 0;//(float)wanted_yaw_rx/10;
 80065b4:	4b97      	ldr	r3, [pc, #604]	@ (8006814 <HAL_I2C_MemRxCpltCallback+0x39c>)
 80065b6:	f04f 0200 	mov.w	r2, #0
 80065ba:	601a      	str	r2, [r3, #0]
				  			/*
				  				 * FDP
				  				 */
			wanted_rool = (wanted_rool * (FDP_FQ * looptime) / (1 + (FDP_FQ * looptime))) + (last_wanted_rool_rx * (1 / (1 + (FDP_FQ * looptime))));
 80065bc:	eddf 7a96 	vldr	s15, [pc, #600]	@ 8006818 <HAL_I2C_MemRxCpltCallback+0x3a0>
 80065c0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80065c4:	4b90      	ldr	r3, [pc, #576]	@ (8006808 <HAL_I2C_MemRxCpltCallback+0x390>)
 80065c6:	edd3 7a00 	vldr	s15, [r3]
 80065ca:	ee67 6a27 	vmul.f32	s13, s14, s15
 80065ce:	eddf 7a92 	vldr	s15, [pc, #584]	@ 8006818 <HAL_I2C_MemRxCpltCallback+0x3a0>
 80065d2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80065d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80065da:	ee77 7a87 	vadd.f32	s15, s15, s14
 80065de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065e2:	eddf 7a8d 	vldr	s15, [pc, #564]	@ 8006818 <HAL_I2C_MemRxCpltCallback+0x3a0>
 80065e6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80065ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80065ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065f2:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 80065f6:	eec6 6a27 	vdiv.f32	s13, s12, s15
 80065fa:	4b88      	ldr	r3, [pc, #544]	@ (800681c <HAL_I2C_MemRxCpltCallback+0x3a4>)
 80065fc:	edd3 7a00 	vldr	s15, [r3]
 8006600:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006604:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006608:	4b7f      	ldr	r3, [pc, #508]	@ (8006808 <HAL_I2C_MemRxCpltCallback+0x390>)
 800660a:	edc3 7a00 	vstr	s15, [r3]
			wanted_pitch = (wanted_pitch * (FDP_FQ * looptime) / (1 + (FDP_FQ * looptime))) + (last_wanted_pitch_rx * (1 / (1 + (FDP_FQ * looptime))));
 800660e:	eddf 7a82 	vldr	s15, [pc, #520]	@ 8006818 <HAL_I2C_MemRxCpltCallback+0x3a0>
 8006612:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8006616:	4b7e      	ldr	r3, [pc, #504]	@ (8006810 <HAL_I2C_MemRxCpltCallback+0x398>)
 8006618:	edd3 7a00 	vldr	s15, [r3]
 800661c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8006620:	eddf 7a7d 	vldr	s15, [pc, #500]	@ 8006818 <HAL_I2C_MemRxCpltCallback+0x3a0>
 8006624:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006628:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800662c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006630:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006634:	eddf 7a78 	vldr	s15, [pc, #480]	@ 8006818 <HAL_I2C_MemRxCpltCallback+0x3a0>
 8006638:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800663c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006640:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006644:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8006648:	eec6 6a27 	vdiv.f32	s13, s12, s15
 800664c:	4b74      	ldr	r3, [pc, #464]	@ (8006820 <HAL_I2C_MemRxCpltCallback+0x3a8>)
 800664e:	edd3 7a00 	vldr	s15, [r3]
 8006652:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006656:	ee77 7a27 	vadd.f32	s15, s14, s15
 800665a:	4b6d      	ldr	r3, [pc, #436]	@ (8006810 <HAL_I2C_MemRxCpltCallback+0x398>)
 800665c:	edc3 7a00 	vstr	s15, [r3]
			wanted_yaw = (wanted_yaw * (FDP_FQ * looptime) / (1 + (FDP_FQ * looptime))) + (last_wanted_yaw_rx * (1 / (1 + (FDP_FQ * looptime))));
 8006660:	eddf 7a6d 	vldr	s15, [pc, #436]	@ 8006818 <HAL_I2C_MemRxCpltCallback+0x3a0>
 8006664:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8006668:	4b6a      	ldr	r3, [pc, #424]	@ (8006814 <HAL_I2C_MemRxCpltCallback+0x39c>)
 800666a:	edd3 7a00 	vldr	s15, [r3]
 800666e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8006672:	eddf 7a69 	vldr	s15, [pc, #420]	@ 8006818 <HAL_I2C_MemRxCpltCallback+0x3a0>
 8006676:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800667a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800667e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006682:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006686:	eddf 7a64 	vldr	s15, [pc, #400]	@ 8006818 <HAL_I2C_MemRxCpltCallback+0x3a0>
 800668a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800668e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006692:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006696:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800669a:	eec6 6a27 	vdiv.f32	s13, s12, s15
 800669e:	4b61      	ldr	r3, [pc, #388]	@ (8006824 <HAL_I2C_MemRxCpltCallback+0x3ac>)
 80066a0:	edd3 7a00 	vldr	s15, [r3]
 80066a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80066a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80066ac:	4b59      	ldr	r3, [pc, #356]	@ (8006814 <HAL_I2C_MemRxCpltCallback+0x39c>)
 80066ae:	edc3 7a00 	vstr	s15, [r3]


			last_wanted_rool_rx = wanted_rool;
 80066b2:	4b55      	ldr	r3, [pc, #340]	@ (8006808 <HAL_I2C_MemRxCpltCallback+0x390>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a59      	ldr	r2, [pc, #356]	@ (800681c <HAL_I2C_MemRxCpltCallback+0x3a4>)
 80066b8:	6013      	str	r3, [r2, #0]
			last_wanted_pitch_rx = wanted_pitch;
 80066ba:	4b55      	ldr	r3, [pc, #340]	@ (8006810 <HAL_I2C_MemRxCpltCallback+0x398>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a58      	ldr	r2, [pc, #352]	@ (8006820 <HAL_I2C_MemRxCpltCallback+0x3a8>)
 80066c0:	6013      	str	r3, [r2, #0]
			last_wanted_yaw_rx = wanted_yaw;
 80066c2:	4b54      	ldr	r3, [pc, #336]	@ (8006814 <HAL_I2C_MemRxCpltCallback+0x39c>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a57      	ldr	r2, [pc, #348]	@ (8006824 <HAL_I2C_MemRxCpltCallback+0x3ac>)
 80066c8:	6013      	str	r3, [r2, #0]


			error_sum_pitch = error_sum_pitch + (wanted_pitch - now_pitch);
 80066ca:	4b57      	ldr	r3, [pc, #348]	@ (8006828 <HAL_I2C_MemRxCpltCallback+0x3b0>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	ee07 3a90 	vmov	s15, r3
 80066d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80066d6:	4b4e      	ldr	r3, [pc, #312]	@ (8006810 <HAL_I2C_MemRxCpltCallback+0x398>)
 80066d8:	edd3 6a00 	vldr	s13, [r3]
 80066dc:	4b46      	ldr	r3, [pc, #280]	@ (80067f8 <HAL_I2C_MemRxCpltCallback+0x380>)
 80066de:	edd3 7a00 	vldr	s15, [r3]
 80066e2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80066e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80066ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80066ee:	ee17 2a90 	vmov	r2, s15
 80066f2:	4b4d      	ldr	r3, [pc, #308]	@ (8006828 <HAL_I2C_MemRxCpltCallback+0x3b0>)
 80066f4:	601a      	str	r2, [r3, #0]
			error_sum_rool = error_sum_rool + (wanted_rool - now_rool);
 80066f6:	4b4d      	ldr	r3, [pc, #308]	@ (800682c <HAL_I2C_MemRxCpltCallback+0x3b4>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	ee07 3a90 	vmov	s15, r3
 80066fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006702:	4b41      	ldr	r3, [pc, #260]	@ (8006808 <HAL_I2C_MemRxCpltCallback+0x390>)
 8006704:	edd3 6a00 	vldr	s13, [r3]
 8006708:	4b3c      	ldr	r3, [pc, #240]	@ (80067fc <HAL_I2C_MemRxCpltCallback+0x384>)
 800670a:	edd3 7a00 	vldr	s15, [r3]
 800670e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006712:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006716:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800671a:	ee17 2a90 	vmov	r2, s15
 800671e:	4b43      	ldr	r3, [pc, #268]	@ (800682c <HAL_I2C_MemRxCpltCallback+0x3b4>)
 8006720:	601a      	str	r2, [r3, #0]
			error_sum_yaw = error_sum_yaw + (wanted_yaw - now_yaw);
 8006722:	4b43      	ldr	r3, [pc, #268]	@ (8006830 <HAL_I2C_MemRxCpltCallback+0x3b8>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	ee07 3a90 	vmov	s15, r3
 800672a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800672e:	4b39      	ldr	r3, [pc, #228]	@ (8006814 <HAL_I2C_MemRxCpltCallback+0x39c>)
 8006730:	edd3 6a00 	vldr	s13, [r3]
 8006734:	4b32      	ldr	r3, [pc, #200]	@ (8006800 <HAL_I2C_MemRxCpltCallback+0x388>)
 8006736:	edd3 7a00 	vldr	s15, [r3]
 800673a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800673e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006742:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006746:	ee17 2a90 	vmov	r2, s15
 800674a:	4b39      	ldr	r3, [pc, #228]	@ (8006830 <HAL_I2C_MemRxCpltCallback+0x3b8>)
 800674c:	601a      	str	r2, [r3, #0]

			error_sum_angular_rate_pitch = error_sum_angular_rate_pitch + (pid_pitch - gx);
 800674e:	4b39      	ldr	r3, [pc, #228]	@ (8006834 <HAL_I2C_MemRxCpltCallback+0x3bc>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	ee07 3a90 	vmov	s15, r3
 8006756:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800675a:	4b37      	ldr	r3, [pc, #220]	@ (8006838 <HAL_I2C_MemRxCpltCallback+0x3c0>)
 800675c:	edd3 6a00 	vldr	s13, [r3]
 8006760:	4b1d      	ldr	r3, [pc, #116]	@ (80067d8 <HAL_I2C_MemRxCpltCallback+0x360>)
 8006762:	edd3 7a00 	vldr	s15, [r3]
 8006766:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800676a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800676e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006772:	ee17 2a90 	vmov	r2, s15
 8006776:	4b2f      	ldr	r3, [pc, #188]	@ (8006834 <HAL_I2C_MemRxCpltCallback+0x3bc>)
 8006778:	601a      	str	r2, [r3, #0]
			error_sum_angular_rate_rool = error_sum_angular_rate_rool + (pid_rool - gy);
 800677a:	4b30      	ldr	r3, [pc, #192]	@ (800683c <HAL_I2C_MemRxCpltCallback+0x3c4>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	ee07 3a90 	vmov	s15, r3
 8006782:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006786:	4b2e      	ldr	r3, [pc, #184]	@ (8006840 <HAL_I2C_MemRxCpltCallback+0x3c8>)
 8006788:	edd3 6a00 	vldr	s13, [r3]
 800678c:	4b11      	ldr	r3, [pc, #68]	@ (80067d4 <HAL_I2C_MemRxCpltCallback+0x35c>)
 800678e:	edd3 7a00 	vldr	s15, [r3]
 8006792:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006796:	ee77 7a27 	vadd.f32	s15, s14, s15
 800679a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800679e:	ee17 2a90 	vmov	r2, s15
 80067a2:	4b26      	ldr	r3, [pc, #152]	@ (800683c <HAL_I2C_MemRxCpltCallback+0x3c4>)
 80067a4:	601a      	str	r2, [r3, #0]
 80067a6:	e04d      	b.n	8006844 <HAL_I2C_MemRxCpltCallback+0x3cc>
 80067a8:	000041d4 	.word	0x000041d4
 80067ac:	58021000 	.word	0x58021000
 80067b0:	00000030 	.word	0x00000030
 80067b4:	00000034 	.word	0x00000034
 80067b8:	00000038 	.word	0x00000038
 80067bc:	0000003c 	.word	0x0000003c
 80067c0:	00000040 	.word	0x00000040
 80067c4:	00000044 	.word	0x00000044
 80067c8:	42830000 	.word	0x42830000
 80067cc:	46000000 	.word	0x46000000
 80067d0:	00000014 	.word	0x00000014
 80067d4:	00000010 	.word	0x00000010
 80067d8:	0000000c 	.word	0x0000000c
 80067dc:	00000008 	.word	0x00000008
 80067e0:	00000004 	.word	0x00000004
 80067e4:	00000000 	.word	0x00000000
 80067e8:	0000001c 	.word	0x0000001c
 80067ec:	00000018 	.word	0x00000018
 80067f0:	00000058 	.word	0x00000058
 80067f4:	0000007c 	.word	0x0000007c
 80067f8:	00004078 	.word	0x00004078
 80067fc:	0000407c 	.word	0x0000407c
 8006800:	00004080 	.word	0x00004080
 8006804:	0000404a 	.word	0x0000404a
 8006808:	0000406c 	.word	0x0000406c
 800680c:	00004048 	.word	0x00004048
 8006810:	00004068 	.word	0x00004068
 8006814:	00004070 	.word	0x00004070
 8006818:	3a83126f 	.word	0x3a83126f
 800681c:	00004054 	.word	0x00004054
 8006820:	00004050 	.word	0x00004050
 8006824:	00004058 	.word	0x00004058
 8006828:	0000409c 	.word	0x0000409c
 800682c:	000040a0 	.word	0x000040a0
 8006830:	000040a4 	.word	0x000040a4
 8006834:	000040a8 	.word	0x000040a8
 8006838:	000040b4 	.word	0x000040b4
 800683c:	000040ac 	.word	0x000040ac
 8006840:	000040bc 	.word	0x000040bc
			error_sum_angular_rate_yaw = error_sum_angular_rate_yaw + (pid_yaw - gz);
 8006844:	4bce      	ldr	r3, [pc, #824]	@ (8006b80 <HAL_I2C_MemRxCpltCallback+0x708>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	ee07 3a90 	vmov	s15, r3
 800684c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006850:	4bcc      	ldr	r3, [pc, #816]	@ (8006b84 <HAL_I2C_MemRxCpltCallback+0x70c>)
 8006852:	edd3 6a00 	vldr	s13, [r3]
 8006856:	4bcc      	ldr	r3, [pc, #816]	@ (8006b88 <HAL_I2C_MemRxCpltCallback+0x710>)
 8006858:	edd3 7a00 	vldr	s15, [r3]
 800685c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006860:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006864:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006868:	ee17 2a90 	vmov	r2, s15
 800686c:	4bc4      	ldr	r3, [pc, #784]	@ (8006b80 <HAL_I2C_MemRxCpltCallback+0x708>)
 800686e:	601a      	str	r2, [r3, #0]


			PID_cal(&pid_pitch, PID_FAC_Pitch, 1);// angle control
 8006870:	2201      	movs	r2, #1
 8006872:	49c6      	ldr	r1, [pc, #792]	@ (8006b8c <HAL_I2C_MemRxCpltCallback+0x714>)
 8006874:	48c6      	ldr	r0, [pc, #792]	@ (8006b90 <HAL_I2C_MemRxCpltCallback+0x718>)
 8006876:	f7fd f9bb 	bl	8003bf0 <PID_cal>
			PID_cal(&pid_rool, PID_FAC_Rool, 2);
 800687a:	2202      	movs	r2, #2
 800687c:	49c5      	ldr	r1, [pc, #788]	@ (8006b94 <HAL_I2C_MemRxCpltCallback+0x71c>)
 800687e:	48c6      	ldr	r0, [pc, #792]	@ (8006b98 <HAL_I2C_MemRxCpltCallback+0x720>)
 8006880:	f7fd f9b6 	bl	8003bf0 <PID_cal>
			PID_cal(&pid_yaw, PID_FAC_Yaw, 3);
 8006884:	2203      	movs	r2, #3
 8006886:	49c5      	ldr	r1, [pc, #788]	@ (8006b9c <HAL_I2C_MemRxCpltCallback+0x724>)
 8006888:	48be      	ldr	r0, [pc, #760]	@ (8006b84 <HAL_I2C_MemRxCpltCallback+0x70c>)
 800688a:	f7fd f9b1 	bl	8003bf0 <PID_cal>

			PID_cal(&pid_angular_rate_pitch, PID_FAC_Angular_Rate_Pitch, 4);// angle rate control
 800688e:	2204      	movs	r2, #4
 8006890:	49c3      	ldr	r1, [pc, #780]	@ (8006ba0 <HAL_I2C_MemRxCpltCallback+0x728>)
 8006892:	48c4      	ldr	r0, [pc, #784]	@ (8006ba4 <HAL_I2C_MemRxCpltCallback+0x72c>)
 8006894:	f7fd f9ac 	bl	8003bf0 <PID_cal>
			PID_cal(&pid_angular_rate_rool, PID_FAC_Angular_Rate_Rool, 5);
 8006898:	2205      	movs	r2, #5
 800689a:	49c3      	ldr	r1, [pc, #780]	@ (8006ba8 <HAL_I2C_MemRxCpltCallback+0x730>)
 800689c:	48c3      	ldr	r0, [pc, #780]	@ (8006bac <HAL_I2C_MemRxCpltCallback+0x734>)
 800689e:	f7fd f9a7 	bl	8003bf0 <PID_cal>
			PID_cal(&pid_angular_rate_yaw, PID_FAC_Angular_Rate_Yaw, 6);
 80068a2:	2206      	movs	r2, #6
 80068a4:	49c2      	ldr	r1, [pc, #776]	@ (8006bb0 <HAL_I2C_MemRxCpltCallback+0x738>)
 80068a6:	48c3      	ldr	r0, [pc, #780]	@ (8006bb4 <HAL_I2C_MemRxCpltCallback+0x73c>)
 80068a8:	f7fd f9a2 	bl	8003bf0 <PID_cal>


			old_error_pitch = wanted_pitch - now_pitch;
 80068ac:	4bc2      	ldr	r3, [pc, #776]	@ (8006bb8 <HAL_I2C_MemRxCpltCallback+0x740>)
 80068ae:	ed93 7a00 	vldr	s14, [r3]
 80068b2:	4bc2      	ldr	r3, [pc, #776]	@ (8006bbc <HAL_I2C_MemRxCpltCallback+0x744>)
 80068b4:	edd3 7a00 	vldr	s15, [r3]
 80068b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80068bc:	4bc0      	ldr	r3, [pc, #768]	@ (8006bc0 <HAL_I2C_MemRxCpltCallback+0x748>)
 80068be:	edc3 7a00 	vstr	s15, [r3]
			old_error_rool = wanted_rool - now_rool;
 80068c2:	4bc0      	ldr	r3, [pc, #768]	@ (8006bc4 <HAL_I2C_MemRxCpltCallback+0x74c>)
 80068c4:	ed93 7a00 	vldr	s14, [r3]
 80068c8:	4bbf      	ldr	r3, [pc, #764]	@ (8006bc8 <HAL_I2C_MemRxCpltCallback+0x750>)
 80068ca:	edd3 7a00 	vldr	s15, [r3]
 80068ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80068d2:	4bbe      	ldr	r3, [pc, #760]	@ (8006bcc <HAL_I2C_MemRxCpltCallback+0x754>)
 80068d4:	edc3 7a00 	vstr	s15, [r3]

			old_error_angular_rate_pitch = pid_pitch - gx;
 80068d8:	4bad      	ldr	r3, [pc, #692]	@ (8006b90 <HAL_I2C_MemRxCpltCallback+0x718>)
 80068da:	ed93 7a00 	vldr	s14, [r3]
 80068de:	4bbc      	ldr	r3, [pc, #752]	@ (8006bd0 <HAL_I2C_MemRxCpltCallback+0x758>)
 80068e0:	edd3 7a00 	vldr	s15, [r3]
 80068e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80068e8:	4bba      	ldr	r3, [pc, #744]	@ (8006bd4 <HAL_I2C_MemRxCpltCallback+0x75c>)
 80068ea:	edc3 7a00 	vstr	s15, [r3]
			old_error_angular_rate_rool = pid_rool - gy;
 80068ee:	4baa      	ldr	r3, [pc, #680]	@ (8006b98 <HAL_I2C_MemRxCpltCallback+0x720>)
 80068f0:	ed93 7a00 	vldr	s14, [r3]
 80068f4:	4bb8      	ldr	r3, [pc, #736]	@ (8006bd8 <HAL_I2C_MemRxCpltCallback+0x760>)
 80068f6:	edd3 7a00 	vldr	s15, [r3]
 80068fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80068fe:	4bb7      	ldr	r3, [pc, #732]	@ (8006bdc <HAL_I2C_MemRxCpltCallback+0x764>)
 8006900:	edc3 7a00 	vstr	s15, [r3]
			old_error_angular_rate_yaw = wanted_yaw - gz;
 8006904:	4bb6      	ldr	r3, [pc, #728]	@ (8006be0 <HAL_I2C_MemRxCpltCallback+0x768>)
 8006906:	ed93 7a00 	vldr	s14, [r3]
 800690a:	4b9f      	ldr	r3, [pc, #636]	@ (8006b88 <HAL_I2C_MemRxCpltCallback+0x710>)
 800690c:	edd3 7a00 	vldr	s15, [r3]
 8006910:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006914:	4bb3      	ldr	r3, [pc, #716]	@ (8006be4 <HAL_I2C_MemRxCpltCallback+0x76c>)
 8006916:	edc3 7a00 	vstr	s15, [r3]


			MYDRON.ROOL = pid_angular_rate_rool;
 800691a:	4ba4      	ldr	r3, [pc, #656]	@ (8006bac <HAL_I2C_MemRxCpltCallback+0x734>)
 800691c:	edd3 7a00 	vldr	s15, [r3]
 8006920:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006924:	ee17 3a90 	vmov	r3, s15
 8006928:	b21a      	sxth	r2, r3
 800692a:	4baf      	ldr	r3, [pc, #700]	@ (8006be8 <HAL_I2C_MemRxCpltCallback+0x770>)
 800692c:	80da      	strh	r2, [r3, #6]
			MYDRON.PITCH = pid_angular_rate_pitch;
 800692e:	4b9d      	ldr	r3, [pc, #628]	@ (8006ba4 <HAL_I2C_MemRxCpltCallback+0x72c>)
 8006930:	edd3 7a00 	vldr	s15, [r3]
 8006934:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006938:	ee17 3a90 	vmov	r3, s15
 800693c:	b21a      	sxth	r2, r3
 800693e:	4baa      	ldr	r3, [pc, #680]	@ (8006be8 <HAL_I2C_MemRxCpltCallback+0x770>)
 8006940:	809a      	strh	r2, [r3, #4]
			MYDRON.YAW = pid_angular_rate_yaw;
 8006942:	4b9c      	ldr	r3, [pc, #624]	@ (8006bb4 <HAL_I2C_MemRxCpltCallback+0x73c>)
 8006944:	edd3 7a00 	vldr	s15, [r3]
 8006948:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800694c:	ee17 3a90 	vmov	r3, s15
 8006950:	b21a      	sxth	r2, r3
 8006952:	4ba5      	ldr	r3, [pc, #660]	@ (8006be8 <HAL_I2C_MemRxCpltCallback+0x770>)
 8006954:	811a      	strh	r2, [r3, #8]
			//			else{
			//				MYDRON.YAW = pid_angular_rate_yaw;
			//			}


			wobble_strenght = Wobble_Detect();
 8006956:	f7fd f875 	bl	8003a44 <Wobble_Detect>
 800695a:	eef0 7a40 	vmov.f32	s15, s0
 800695e:	4ba3      	ldr	r3, [pc, #652]	@ (8006bec <HAL_I2C_MemRxCpltCallback+0x774>)
 8006960:	edc3 7a00 	vstr	s15, [r3]
			if(wobble_strenght > 1){
 8006964:	4ba1      	ldr	r3, [pc, #644]	@ (8006bec <HAL_I2C_MemRxCpltCallback+0x774>)
 8006966:	edd3 7a00 	vldr	s15, [r3]
 800696a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800696e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006976:	dd13      	ble.n	80069a0 <HAL_I2C_MemRxCpltCallback+0x528>
				wanted_thrust = MYDRON.THRUST/wobble_strenght;
 8006978:	4b9b      	ldr	r3, [pc, #620]	@ (8006be8 <HAL_I2C_MemRxCpltCallback+0x770>)
 800697a:	885b      	ldrh	r3, [r3, #2]
 800697c:	ee07 3a90 	vmov	s15, r3
 8006980:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006984:	4b99      	ldr	r3, [pc, #612]	@ (8006bec <HAL_I2C_MemRxCpltCallback+0x774>)
 8006986:	ed93 7a00 	vldr	s14, [r3]
 800698a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800698e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006992:	ee17 3a90 	vmov	r3, s15
 8006996:	b21a      	sxth	r2, r3
 8006998:	4b95      	ldr	r3, [pc, #596]	@ (8006bf0 <HAL_I2C_MemRxCpltCallback+0x778>)
 800699a:	801a      	strh	r2, [r3, #0]
				Wobble_handler();
 800699c:	f7fd f920 	bl	8003be0 <Wobble_handler>
			}


			Thrust_filter(1);
 80069a0:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 80069a4:	f7fc ff18 	bl	80037d8 <Thrust_filter>
			if(MYDRON.THRUST > thrust_limit){
 80069a8:	4b8f      	ldr	r3, [pc, #572]	@ (8006be8 <HAL_I2C_MemRxCpltCallback+0x770>)
 80069aa:	885b      	ldrh	r3, [r3, #2]
 80069ac:	461a      	mov	r2, r3
 80069ae:	4b91      	ldr	r3, [pc, #580]	@ (8006bf4 <HAL_I2C_MemRxCpltCallback+0x77c>)
 80069b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80069b4:	429a      	cmp	r2, r3
 80069b6:	dd05      	ble.n	80069c4 <HAL_I2C_MemRxCpltCallback+0x54c>
				MYDRON.THRUST = thrust_limit;
 80069b8:	4b8e      	ldr	r3, [pc, #568]	@ (8006bf4 <HAL_I2C_MemRxCpltCallback+0x77c>)
 80069ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80069be:	b29a      	uxth	r2, r3
 80069c0:	4b89      	ldr	r3, [pc, #548]	@ (8006be8 <HAL_I2C_MemRxCpltCallback+0x770>)
 80069c2:	805a      	strh	r2, [r3, #2]
			}


			Stack_Push(WartoscBezwgledna(PID_FAC_Pitch[4]));
 80069c4:	4b71      	ldr	r3, [pc, #452]	@ (8006b8c <HAL_I2C_MemRxCpltCallback+0x714>)
 80069c6:	edd3 7a04 	vldr	s15, [r3, #16]
 80069ca:	eeb0 0a67 	vmov.f32	s0, s15
 80069ce:	f000 fb1d 	bl	800700c <WartoscBezwgledna>
 80069d2:	eef0 7a40 	vmov.f32	s15, s0
 80069d6:	eeb0 0a67 	vmov.f32	s0, s15
 80069da:	f000 febd 	bl	8007758 <Stack_Push>
			Stack_Push(WartoscBezwgledna(PID_FAC_Rool[4]));
 80069de:	4b6d      	ldr	r3, [pc, #436]	@ (8006b94 <HAL_I2C_MemRxCpltCallback+0x71c>)
 80069e0:	edd3 7a04 	vldr	s15, [r3, #16]
 80069e4:	eeb0 0a67 	vmov.f32	s0, s15
 80069e8:	f000 fb10 	bl	800700c <WartoscBezwgledna>
 80069ec:	eef0 7a40 	vmov.f32	s15, s0
 80069f0:	eeb0 0a67 	vmov.f32	s0, s15
 80069f4:	f000 feb0 	bl	8007758 <Stack_Push>
			Stack_Push(now_pitch);
 80069f8:	4b70      	ldr	r3, [pc, #448]	@ (8006bbc <HAL_I2C_MemRxCpltCallback+0x744>)
 80069fa:	edd3 7a00 	vldr	s15, [r3]
 80069fe:	eeb0 0a67 	vmov.f32	s0, s15
 8006a02:	f000 fea9 	bl	8007758 <Stack_Push>
			Stack_Push(now_rool);
 8006a06:	4b70      	ldr	r3, [pc, #448]	@ (8006bc8 <HAL_I2C_MemRxCpltCallback+0x750>)
 8006a08:	edd3 7a00 	vldr	s15, [r3]
 8006a0c:	eeb0 0a67 	vmov.f32	s0, s15
 8006a10:	f000 fea2 	bl	8007758 <Stack_Push>


			SPEED1 = (MYDRON.THRUST*0.7)+ MYDRON.ROOL - MYDRON.PITCH + MYDRON.YAW + min_speed + 500;//trust 7000 max
 8006a14:	4b74      	ldr	r3, [pc, #464]	@ (8006be8 <HAL_I2C_MemRxCpltCallback+0x770>)
 8006a16:	885b      	ldrh	r3, [r3, #2]
 8006a18:	ee07 3a90 	vmov	s15, r3
 8006a1c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006a20:	ed9f 6b51 	vldr	d6, [pc, #324]	@ 8006b68 <HAL_I2C_MemRxCpltCallback+0x6f0>
 8006a24:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006a28:	4b6f      	ldr	r3, [pc, #444]	@ (8006be8 <HAL_I2C_MemRxCpltCallback+0x770>)
 8006a2a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006a2e:	ee07 3a90 	vmov	s15, r3
 8006a32:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006a36:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006a3a:	4b6b      	ldr	r3, [pc, #428]	@ (8006be8 <HAL_I2C_MemRxCpltCallback+0x770>)
 8006a3c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006a40:	ee07 3a90 	vmov	s15, r3
 8006a44:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006a48:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006a4c:	4b66      	ldr	r3, [pc, #408]	@ (8006be8 <HAL_I2C_MemRxCpltCallback+0x770>)
 8006a4e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006a52:	ee07 3a90 	vmov	s15, r3
 8006a56:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006a5a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006a5e:	ed9f 6b44 	vldr	d6, [pc, #272]	@ 8006b70 <HAL_I2C_MemRxCpltCallback+0x6f8>
 8006a62:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006a66:	ed9f 6b44 	vldr	d6, [pc, #272]	@ 8006b78 <HAL_I2C_MemRxCpltCallback+0x700>
 8006a6a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006a6e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006a72:	ee17 3a90 	vmov	r3, s15
 8006a76:	b29a      	uxth	r2, r3
 8006a78:	4b5f      	ldr	r3, [pc, #380]	@ (8006bf8 <HAL_I2C_MemRxCpltCallback+0x780>)
 8006a7a:	801a      	strh	r2, [r3, #0]
			SPEED2 = (MYDRON.THRUST*0.7)- MYDRON.ROOL - MYDRON.PITCH - MYDRON.YAW + min_speed + 500;//
 8006a7c:	4b5a      	ldr	r3, [pc, #360]	@ (8006be8 <HAL_I2C_MemRxCpltCallback+0x770>)
 8006a7e:	885b      	ldrh	r3, [r3, #2]
 8006a80:	ee07 3a90 	vmov	s15, r3
 8006a84:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006a88:	ed9f 6b37 	vldr	d6, [pc, #220]	@ 8006b68 <HAL_I2C_MemRxCpltCallback+0x6f0>
 8006a8c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006a90:	4b55      	ldr	r3, [pc, #340]	@ (8006be8 <HAL_I2C_MemRxCpltCallback+0x770>)
 8006a92:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006a96:	ee07 3a90 	vmov	s15, r3
 8006a9a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006a9e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006aa2:	4b51      	ldr	r3, [pc, #324]	@ (8006be8 <HAL_I2C_MemRxCpltCallback+0x770>)
 8006aa4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006aa8:	ee07 3a90 	vmov	s15, r3
 8006aac:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006ab0:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006ab4:	4b4c      	ldr	r3, [pc, #304]	@ (8006be8 <HAL_I2C_MemRxCpltCallback+0x770>)
 8006ab6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006aba:	ee07 3a90 	vmov	s15, r3
 8006abe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006ac2:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006ac6:	ed9f 6b2a 	vldr	d6, [pc, #168]	@ 8006b70 <HAL_I2C_MemRxCpltCallback+0x6f8>
 8006aca:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006ace:	ed9f 6b2a 	vldr	d6, [pc, #168]	@ 8006b78 <HAL_I2C_MemRxCpltCallback+0x700>
 8006ad2:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006ad6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006ada:	ee17 3a90 	vmov	r3, s15
 8006ade:	b29a      	uxth	r2, r3
 8006ae0:	4b46      	ldr	r3, [pc, #280]	@ (8006bfc <HAL_I2C_MemRxCpltCallback+0x784>)
 8006ae2:	801a      	strh	r2, [r3, #0]
			SPEED3 = (MYDRON.THRUST*0.7)+ MYDRON.ROOL + MYDRON.PITCH - MYDRON.YAW + min_speed + 500;//
 8006ae4:	4b40      	ldr	r3, [pc, #256]	@ (8006be8 <HAL_I2C_MemRxCpltCallback+0x770>)
 8006ae6:	885b      	ldrh	r3, [r3, #2]
 8006ae8:	ee07 3a90 	vmov	s15, r3
 8006aec:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006af0:	ed9f 6b1d 	vldr	d6, [pc, #116]	@ 8006b68 <HAL_I2C_MemRxCpltCallback+0x6f0>
 8006af4:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006af8:	4b3b      	ldr	r3, [pc, #236]	@ (8006be8 <HAL_I2C_MemRxCpltCallback+0x770>)
 8006afa:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006afe:	ee07 3a90 	vmov	s15, r3
 8006b02:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006b06:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006b0a:	4b37      	ldr	r3, [pc, #220]	@ (8006be8 <HAL_I2C_MemRxCpltCallback+0x770>)
 8006b0c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006b10:	ee07 3a90 	vmov	s15, r3
 8006b14:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006b18:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006b1c:	4b32      	ldr	r3, [pc, #200]	@ (8006be8 <HAL_I2C_MemRxCpltCallback+0x770>)
 8006b1e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006b22:	ee07 3a90 	vmov	s15, r3
 8006b26:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006b2a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006b2e:	ed9f 6b10 	vldr	d6, [pc, #64]	@ 8006b70 <HAL_I2C_MemRxCpltCallback+0x6f8>
 8006b32:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006b36:	ed9f 6b10 	vldr	d6, [pc, #64]	@ 8006b78 <HAL_I2C_MemRxCpltCallback+0x700>
 8006b3a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006b3e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006b42:	ee17 3a90 	vmov	r3, s15
 8006b46:	b29a      	uxth	r2, r3
 8006b48:	4b2d      	ldr	r3, [pc, #180]	@ (8006c00 <HAL_I2C_MemRxCpltCallback+0x788>)
 8006b4a:	801a      	strh	r2, [r3, #0]
			SPEED4 = (MYDRON.THRUST*0.7)- MYDRON.ROOL + MYDRON.PITCH + MYDRON.YAW + min_speed + 500;//
 8006b4c:	4b26      	ldr	r3, [pc, #152]	@ (8006be8 <HAL_I2C_MemRxCpltCallback+0x770>)
 8006b4e:	885b      	ldrh	r3, [r3, #2]
 8006b50:	ee07 3a90 	vmov	s15, r3
 8006b54:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006b58:	ed9f 6b03 	vldr	d6, [pc, #12]	@ 8006b68 <HAL_I2C_MemRxCpltCallback+0x6f0>
 8006b5c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006b60:	e050      	b.n	8006c04 <HAL_I2C_MemRxCpltCallback+0x78c>
 8006b62:	bf00      	nop
 8006b64:	f3af 8000 	nop.w
 8006b68:	66666666 	.word	0x66666666
 8006b6c:	3fe66666 	.word	0x3fe66666
 8006b70:	00000000 	.word	0x00000000
 8006b74:	40c48200 	.word	0x40c48200
 8006b78:	00000000 	.word	0x00000000
 8006b7c:	407f4000 	.word	0x407f4000
 8006b80:	000040b0 	.word	0x000040b0
 8006b84:	000040b8 	.word	0x000040b8
 8006b88:	00000014 	.word	0x00000014
 8006b8c:	000040f0 	.word	0x000040f0
 8006b90:	000040b4 	.word	0x000040b4
 8006b94:	00004104 	.word	0x00004104
 8006b98:	000040bc 	.word	0x000040bc
 8006b9c:	00004118 	.word	0x00004118
 8006ba0:	00004150 	.word	0x00004150
 8006ba4:	000040c0 	.word	0x000040c0
 8006ba8:	00004164 	.word	0x00004164
 8006bac:	000040c8 	.word	0x000040c8
 8006bb0:	00004178 	.word	0x00004178
 8006bb4:	000040c4 	.word	0x000040c4
 8006bb8:	00004068 	.word	0x00004068
 8006bbc:	00004078 	.word	0x00004078
 8006bc0:	00004084 	.word	0x00004084
 8006bc4:	0000406c 	.word	0x0000406c
 8006bc8:	0000407c 	.word	0x0000407c
 8006bcc:	00004088 	.word	0x00004088
 8006bd0:	0000000c 	.word	0x0000000c
 8006bd4:	00004090 	.word	0x00004090
 8006bd8:	00000010 	.word	0x00000010
 8006bdc:	00004094 	.word	0x00004094
 8006be0:	00004070 	.word	0x00004070
 8006be4:	00004098 	.word	0x00004098
 8006be8:	00000180 	.word	0x00000180
 8006bec:	000041d0 	.word	0x000041d0
 8006bf0:	0000405c 	.word	0x0000405c
 8006bf4:	0000405e 	.word	0x0000405e
 8006bf8:	0000418c 	.word	0x0000418c
 8006bfc:	0000418e 	.word	0x0000418e
 8006c00:	00004190 	.word	0x00004190
 8006c04:	4b76      	ldr	r3, [pc, #472]	@ (8006de0 <HAL_I2C_MemRxCpltCallback+0x968>)
 8006c06:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006c0a:	ee07 3a90 	vmov	s15, r3
 8006c0e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006c12:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006c16:	4b72      	ldr	r3, [pc, #456]	@ (8006de0 <HAL_I2C_MemRxCpltCallback+0x968>)
 8006c18:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006c1c:	ee07 3a90 	vmov	s15, r3
 8006c20:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006c24:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006c28:	4b6d      	ldr	r3, [pc, #436]	@ (8006de0 <HAL_I2C_MemRxCpltCallback+0x968>)
 8006c2a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006c2e:	ee07 3a90 	vmov	s15, r3
 8006c32:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006c36:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006c3a:	ed9f 6b5f 	vldr	d6, [pc, #380]	@ 8006db8 <HAL_I2C_MemRxCpltCallback+0x940>
 8006c3e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006c42:	ed9f 6b5f 	vldr	d6, [pc, #380]	@ 8006dc0 <HAL_I2C_MemRxCpltCallback+0x948>
 8006c46:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006c4a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006c4e:	ee17 3a90 	vmov	r3, s15
 8006c52:	b29a      	uxth	r2, r3
 8006c54:	4b63      	ldr	r3, [pc, #396]	@ (8006de4 <HAL_I2C_MemRxCpltCallback+0x96c>)
 8006c56:	801a      	strh	r2, [r3, #0]

			if(SPEED1 != OLD_SPEED1){
 8006c58:	4b63      	ldr	r3, [pc, #396]	@ (8006de8 <HAL_I2C_MemRxCpltCallback+0x970>)
 8006c5a:	881a      	ldrh	r2, [r3, #0]
 8006c5c:	4b63      	ldr	r3, [pc, #396]	@ (8006dec <HAL_I2C_MemRxCpltCallback+0x974>)
 8006c5e:	881b      	ldrh	r3, [r3, #0]
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d004      	beq.n	8006c6e <HAL_I2C_MemRxCpltCallback+0x7f6>
				ESC_1_SPEED(SPEED1);
 8006c64:	4b60      	ldr	r3, [pc, #384]	@ (8006de8 <HAL_I2C_MemRxCpltCallback+0x970>)
 8006c66:	881b      	ldrh	r3, [r3, #0]
 8006c68:	4618      	mov	r0, r3
 8006c6a:	f7fa f8e3 	bl	8000e34 <ESC_1_SPEED>
			}
			if(SPEED2 != OLD_SPEED2){
 8006c6e:	4b60      	ldr	r3, [pc, #384]	@ (8006df0 <HAL_I2C_MemRxCpltCallback+0x978>)
 8006c70:	881a      	ldrh	r2, [r3, #0]
 8006c72:	4b60      	ldr	r3, [pc, #384]	@ (8006df4 <HAL_I2C_MemRxCpltCallback+0x97c>)
 8006c74:	881b      	ldrh	r3, [r3, #0]
 8006c76:	429a      	cmp	r2, r3
 8006c78:	d004      	beq.n	8006c84 <HAL_I2C_MemRxCpltCallback+0x80c>
				ESC_2_SPEED(SPEED2);
 8006c7a:	4b5d      	ldr	r3, [pc, #372]	@ (8006df0 <HAL_I2C_MemRxCpltCallback+0x978>)
 8006c7c:	881b      	ldrh	r3, [r3, #0]
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f7fa f8fa 	bl	8000e78 <ESC_2_SPEED>
			}
			if(SPEED3 != OLD_SPEED3){
 8006c84:	4b5c      	ldr	r3, [pc, #368]	@ (8006df8 <HAL_I2C_MemRxCpltCallback+0x980>)
 8006c86:	881a      	ldrh	r2, [r3, #0]
 8006c88:	4b5c      	ldr	r3, [pc, #368]	@ (8006dfc <HAL_I2C_MemRxCpltCallback+0x984>)
 8006c8a:	881b      	ldrh	r3, [r3, #0]
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d004      	beq.n	8006c9a <HAL_I2C_MemRxCpltCallback+0x822>
				ESC_3_SPEED(SPEED3);
 8006c90:	4b59      	ldr	r3, [pc, #356]	@ (8006df8 <HAL_I2C_MemRxCpltCallback+0x980>)
 8006c92:	881b      	ldrh	r3, [r3, #0]
 8006c94:	4618      	mov	r0, r3
 8006c96:	f7fa f911 	bl	8000ebc <ESC_3_SPEED>
			}
			if(SPEED4 != OLD_SPEED4){
 8006c9a:	4b52      	ldr	r3, [pc, #328]	@ (8006de4 <HAL_I2C_MemRxCpltCallback+0x96c>)
 8006c9c:	881a      	ldrh	r2, [r3, #0]
 8006c9e:	4b58      	ldr	r3, [pc, #352]	@ (8006e00 <HAL_I2C_MemRxCpltCallback+0x988>)
 8006ca0:	881b      	ldrh	r3, [r3, #0]
 8006ca2:	429a      	cmp	r2, r3
 8006ca4:	d004      	beq.n	8006cb0 <HAL_I2C_MemRxCpltCallback+0x838>
				ESC_4_SPEED(SPEED4);
 8006ca6:	4b4f      	ldr	r3, [pc, #316]	@ (8006de4 <HAL_I2C_MemRxCpltCallback+0x96c>)
 8006ca8:	881b      	ldrh	r3, [r3, #0]
 8006caa:	4618      	mov	r0, r3
 8006cac:	f7fa f928 	bl	8000f00 <ESC_4_SPEED>
			}

			OLD_SPEED1 = SPEED1;
 8006cb0:	4b4d      	ldr	r3, [pc, #308]	@ (8006de8 <HAL_I2C_MemRxCpltCallback+0x970>)
 8006cb2:	881a      	ldrh	r2, [r3, #0]
 8006cb4:	4b4d      	ldr	r3, [pc, #308]	@ (8006dec <HAL_I2C_MemRxCpltCallback+0x974>)
 8006cb6:	801a      	strh	r2, [r3, #0]
			OLD_SPEED2 = SPEED2;
 8006cb8:	4b4d      	ldr	r3, [pc, #308]	@ (8006df0 <HAL_I2C_MemRxCpltCallback+0x978>)
 8006cba:	881a      	ldrh	r2, [r3, #0]
 8006cbc:	4b4d      	ldr	r3, [pc, #308]	@ (8006df4 <HAL_I2C_MemRxCpltCallback+0x97c>)
 8006cbe:	801a      	strh	r2, [r3, #0]
			OLD_SPEED3 = SPEED3;
 8006cc0:	4b4d      	ldr	r3, [pc, #308]	@ (8006df8 <HAL_I2C_MemRxCpltCallback+0x980>)
 8006cc2:	881a      	ldrh	r2, [r3, #0]
 8006cc4:	4b4d      	ldr	r3, [pc, #308]	@ (8006dfc <HAL_I2C_MemRxCpltCallback+0x984>)
 8006cc6:	801a      	strh	r2, [r3, #0]
			OLD_SPEED4 = SPEED4;
 8006cc8:	4b46      	ldr	r3, [pc, #280]	@ (8006de4 <HAL_I2C_MemRxCpltCallback+0x96c>)
 8006cca:	881a      	ldrh	r2, [r3, #0]
 8006ccc:	4b4c      	ldr	r3, [pc, #304]	@ (8006e00 <HAL_I2C_MemRxCpltCallback+0x988>)
 8006cce:	801a      	strh	r2, [r3, #0]

			LED_G_0;
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006cd6:	484b      	ldr	r0, [pc, #300]	@ (8006e04 <HAL_I2C_MemRxCpltCallback+0x98c>)
 8006cd8:	f007 fa7e 	bl	800e1d8 <HAL_GPIO_WritePin>
	}
	if(HMC583L_IRQ == 1){
 8006cdc:	4b4a      	ldr	r3, [pc, #296]	@ (8006e08 <HAL_I2C_MemRxCpltCallback+0x990>)
 8006cde:	781b      	ldrb	r3, [r3, #0]
 8006ce0:	2b01      	cmp	r3, #1
 8006ce2:	d132      	bne.n	8006d4a <HAL_I2C_MemRxCpltCallback+0x8d2>
		HMC583L_IRQ = 0;
 8006ce4:	4b48      	ldr	r3, [pc, #288]	@ (8006e08 <HAL_I2C_MemRxCpltCallback+0x990>)
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	701a      	strb	r2, [r3, #0]
		Mag_Z = (float)(HMC5883L_Get_Z_End_IT() - Mag_Offset_val);
 8006cea:	f7fa fa0d 	bl	8001108 <HMC5883L_Get_Z_End_IT>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	461a      	mov	r2, r3
 8006cf2:	4b46      	ldr	r3, [pc, #280]	@ (8006e0c <HAL_I2C_MemRxCpltCallback+0x994>)
 8006cf4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006cf8:	1ad3      	subs	r3, r2, r3
 8006cfa:	ee07 3a90 	vmov	s15, r3
 8006cfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006d02:	4b43      	ldr	r3, [pc, #268]	@ (8006e10 <HAL_I2C_MemRxCpltCallback+0x998>)
 8006d04:	edc3 7a00 	vstr	s15, [r3]
		Mag_Z = (Mag_Z * (FDP_Mag_Z_FQ * 0.1) / (1 + (FDP_Mag_Z_FQ * 0.1))) + (Old_Mag_Z * (1 / (1 + (FDP_Mag_Z_FQ * 0.1)))); // 0.1 to looptime, co 100ms odczyt
 8006d08:	4b41      	ldr	r3, [pc, #260]	@ (8006e10 <HAL_I2C_MemRxCpltCallback+0x998>)
 8006d0a:	edd3 7a00 	vldr	s15, [r3]
 8006d0e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8006d12:	ed9f 6b2d 	vldr	d6, [pc, #180]	@ 8006dc8 <HAL_I2C_MemRxCpltCallback+0x950>
 8006d16:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006d1a:	ed9f 5b2d 	vldr	d5, [pc, #180]	@ 8006dd0 <HAL_I2C_MemRxCpltCallback+0x958>
 8006d1e:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8006d22:	4b3c      	ldr	r3, [pc, #240]	@ (8006e14 <HAL_I2C_MemRxCpltCallback+0x99c>)
 8006d24:	edd3 7a00 	vldr	s15, [r3]
 8006d28:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8006d2c:	ed9f 5b2a 	vldr	d5, [pc, #168]	@ 8006dd8 <HAL_I2C_MemRxCpltCallback+0x960>
 8006d30:	ee27 7b05 	vmul.f64	d7, d7, d5
 8006d34:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006d38:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8006d3c:	4b34      	ldr	r3, [pc, #208]	@ (8006e10 <HAL_I2C_MemRxCpltCallback+0x998>)
 8006d3e:	edc3 7a00 	vstr	s15, [r3]
		Old_Mag_Z = Mag_Z;
 8006d42:	4b33      	ldr	r3, [pc, #204]	@ (8006e10 <HAL_I2C_MemRxCpltCallback+0x998>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a33      	ldr	r2, [pc, #204]	@ (8006e14 <HAL_I2C_MemRxCpltCallback+0x99c>)
 8006d48:	6013      	str	r3, [r2, #0]
	}
	if(BMP180_IRQ == 1){
 8006d4a:	4b33      	ldr	r3, [pc, #204]	@ (8006e18 <HAL_I2C_MemRxCpltCallback+0x9a0>)
 8006d4c:	781b      	ldrb	r3, [r3, #0]
 8006d4e:	2b01      	cmp	r3, #1
 8006d50:	d113      	bne.n	8006d7a <HAL_I2C_MemRxCpltCallback+0x902>
		temperature = BMP180_GET_temp_IT();
 8006d52:	f7f9 fd1d 	bl	8000790 <BMP180_GET_temp_IT>
 8006d56:	4603      	mov	r3, r0
 8006d58:	461a      	mov	r2, r3
 8006d5a:	4b30      	ldr	r3, [pc, #192]	@ (8006e1c <HAL_I2C_MemRxCpltCallback+0x9a4>)
 8006d5c:	601a      	str	r2, [r3, #0]
		temp = BMP180_GET_temp(temperature);
 8006d5e:	4b2f      	ldr	r3, [pc, #188]	@ (8006e1c <HAL_I2C_MemRxCpltCallback+0x9a4>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	b29b      	uxth	r3, r3
 8006d64:	4618      	mov	r0, r3
 8006d66:	f7f9 fe37 	bl	80009d8 <BMP180_GET_temp>
 8006d6a:	eef0 7a40 	vmov.f32	s15, s0
 8006d6e:	4b2c      	ldr	r3, [pc, #176]	@ (8006e20 <HAL_I2C_MemRxCpltCallback+0x9a8>)
 8006d70:	edc3 7a00 	vstr	s15, [r3]
		BMP180_IRQ = 0;
 8006d74:	4b28      	ldr	r3, [pc, #160]	@ (8006e18 <HAL_I2C_MemRxCpltCallback+0x9a0>)
 8006d76:	2200      	movs	r2, #0
 8006d78:	701a      	strb	r2, [r3, #0]
	}
	if(BMP180_IRQ == 2){
 8006d7a:	4b27      	ldr	r3, [pc, #156]	@ (8006e18 <HAL_I2C_MemRxCpltCallback+0x9a0>)
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	2b02      	cmp	r3, #2
 8006d80:	d113      	bne.n	8006daa <HAL_I2C_MemRxCpltCallback+0x932>
		pressure = BMP180_GET_pres_IT();
 8006d82:	f7f9 fd1b 	bl	80007bc <BMP180_GET_pres_IT>
 8006d86:	4603      	mov	r3, r0
 8006d88:	461a      	mov	r2, r3
 8006d8a:	4b26      	ldr	r3, [pc, #152]	@ (8006e24 <HAL_I2C_MemRxCpltCallback+0x9ac>)
 8006d8c:	601a      	str	r2, [r3, #0]
		pres = BMP180_GET_pres(pressure);
 8006d8e:	4b25      	ldr	r3, [pc, #148]	@ (8006e24 <HAL_I2C_MemRxCpltCallback+0x9ac>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	4618      	mov	r0, r3
 8006d96:	f7f9 fe7b 	bl	8000a90 <BMP180_GET_pres>
 8006d9a:	eef0 7a40 	vmov.f32	s15, s0
 8006d9e:	4b22      	ldr	r3, [pc, #136]	@ (8006e28 <HAL_I2C_MemRxCpltCallback+0x9b0>)
 8006da0:	edc3 7a00 	vstr	s15, [r3]
		BMP180_IRQ = 0;
 8006da4:	4b1c      	ldr	r3, [pc, #112]	@ (8006e18 <HAL_I2C_MemRxCpltCallback+0x9a0>)
 8006da6:	2200      	movs	r2, #0
 8006da8:	701a      	strb	r2, [r3, #0]
	}
}
 8006daa:	bf00      	nop
 8006dac:	3708      	adds	r7, #8
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}
 8006db2:	bf00      	nop
 8006db4:	f3af 8000 	nop.w
 8006db8:	00000000 	.word	0x00000000
 8006dbc:	40c48200 	.word	0x40c48200
 8006dc0:	00000000 	.word	0x00000000
 8006dc4:	407f4000 	.word	0x407f4000
 8006dc8:	9999999a 	.word	0x9999999a
 8006dcc:	3fc99999 	.word	0x3fc99999
 8006dd0:	33333333 	.word	0x33333333
 8006dd4:	3ff33333 	.word	0x3ff33333
 8006dd8:	aaaaaaab 	.word	0xaaaaaaab
 8006ddc:	3feaaaaa 	.word	0x3feaaaaa
 8006de0:	00000180 	.word	0x00000180
 8006de4:	00004192 	.word	0x00004192
 8006de8:	0000418c 	.word	0x0000418c
 8006dec:	00004194 	.word	0x00004194
 8006df0:	0000418e 	.word	0x0000418e
 8006df4:	00004196 	.word	0x00004196
 8006df8:	00004190 	.word	0x00004190
 8006dfc:	00004198 	.word	0x00004198
 8006e00:	0000419a 	.word	0x0000419a
 8006e04:	58021000 	.word	0x58021000
 8006e08:	000041d5 	.word	0x000041d5
 8006e0c:	00000060 	.word	0x00000060
 8006e10:	00000058 	.word	0x00000058
 8006e14:	0000005c 	.word	0x0000005c
 8006e18:	000041d6 	.word	0x000041d6
 8006e1c:	000000b8 	.word	0x000000b8
 8006e20:	000000dc 	.word	0x000000dc
 8006e24:	000000bc 	.word	0x000000bc
 8006e28:	000000e0 	.word	0x000000e0

08006e2c <convert_array_to_value>:


void convert_array_to_value(uint8_t arrayfrom[], int16_t *value , uint8_t rangebegin, uint8_t rangeend){
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	ed2d 8b04 	vpush	{d8-d9}
 8006e32:	b086      	sub	sp, #24
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	60f8      	str	r0, [r7, #12]
 8006e38:	60b9      	str	r1, [r7, #8]
 8006e3a:	4611      	mov	r1, r2
 8006e3c:	461a      	mov	r2, r3
 8006e3e:	460b      	mov	r3, r1
 8006e40:	71fb      	strb	r3, [r7, #7]
 8006e42:	4613      	mov	r3, r2
 8006e44:	71bb      	strb	r3, [r7, #6]
	*value = 0;
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	801a      	strh	r2, [r3, #0]
	int range = rangeend - rangebegin;
 8006e4c:	79ba      	ldrb	r2, [r7, #6]
 8006e4e:	79fb      	ldrb	r3, [r7, #7]
 8006e50:	1ad3      	subs	r3, r2, r3
 8006e52:	613b      	str	r3, [r7, #16]

	for(int y = 0; y < range+1; y++){
 8006e54:	2300      	movs	r3, #0
 8006e56:	617b      	str	r3, [r7, #20]
 8006e58:	e02e      	b.n	8006eb8 <convert_array_to_value+0x8c>
		*value = *value + arrayfrom[rangebegin+y]*pow(10, range - y);
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006e60:	ee07 3a90 	vmov	s15, r3
 8006e64:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8006e68:	79fa      	ldrb	r2, [r7, #7]
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	4413      	add	r3, r2
 8006e6e:	461a      	mov	r2, r3
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	4413      	add	r3, r2
 8006e74:	781b      	ldrb	r3, [r3, #0]
 8006e76:	ee07 3a90 	vmov	s15, r3
 8006e7a:	eeb8 9be7 	vcvt.f64.s32	d9, s15
 8006e7e:	693a      	ldr	r2, [r7, #16]
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	1ad3      	subs	r3, r2, r3
 8006e84:	ee07 3a90 	vmov	s15, r3
 8006e88:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006e8c:	eeb0 1b47 	vmov.f64	d1, d7
 8006e90:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 8006e94:	f016 fea4 	bl	801dbe0 <pow>
 8006e98:	eeb0 7b40 	vmov.f64	d7, d0
 8006e9c:	ee29 7b07 	vmul.f64	d7, d9, d7
 8006ea0:	ee38 7b07 	vadd.f64	d7, d8, d7
 8006ea4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8006ea8:	ee17 3a90 	vmov	r3, s15
 8006eac:	b21a      	sxth	r2, r3
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	801a      	strh	r2, [r3, #0]
	for(int y = 0; y < range+1; y++){
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	3301      	adds	r3, #1
 8006eb6:	617b      	str	r3, [r7, #20]
 8006eb8:	693a      	ldr	r2, [r7, #16]
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	dacc      	bge.n	8006e5a <convert_array_to_value+0x2e>
	}

}
 8006ec0:	bf00      	nop
 8006ec2:	bf00      	nop
 8006ec4:	3718      	adds	r7, #24
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	ecbd 8b04 	vpop	{d8-d9}
 8006ecc:	bd80      	pop	{r7, pc}

08006ece <convert_value_to_array>:


void convert_value_to_array(int16_t value, uint8_t *arraytoputin, uint8_t rangebegin, uint8_t rangeend){
 8006ece:	b590      	push	{r4, r7, lr}
 8006ed0:	b087      	sub	sp, #28
 8006ed2:	af00      	add	r7, sp, #0
 8006ed4:	6039      	str	r1, [r7, #0]
 8006ed6:	4611      	mov	r1, r2
 8006ed8:	461a      	mov	r2, r3
 8006eda:	4603      	mov	r3, r0
 8006edc:	80fb      	strh	r3, [r7, #6]
 8006ede:	460b      	mov	r3, r1
 8006ee0:	717b      	strb	r3, [r7, #5]
 8006ee2:	4613      	mov	r3, r2
 8006ee4:	713b      	strb	r3, [r7, #4]
	int x = 0;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	617b      	str	r3, [r7, #20]
	int loopnum = 0;
 8006eea:	2300      	movs	r3, #0
 8006eec:	613b      	str	r3, [r7, #16]
	int range = rangeend - rangebegin;
 8006eee:	793a      	ldrb	r2, [r7, #4]
 8006ef0:	797b      	ldrb	r3, [r7, #5]
 8006ef2:	1ad3      	subs	r3, r2, r3
 8006ef4:	60bb      	str	r3, [r7, #8]
	for(int i = 0; i < range+1; i++){// 3
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	60fb      	str	r3, [r7, #12]
 8006efa:	e03e      	b.n	8006f7a <convert_value_to_array+0xac>
		while(value >= (uint16_t)pow(10,range - i)){
			if(value == 0){
 8006efc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d028      	beq.n	8006f56 <convert_value_to_array+0x88>
				break;
			}
			value -= (uint16_t)potenga(10,range - i);
 8006f04:	68ba      	ldr	r2, [r7, #8]
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	1ad3      	subs	r3, r2, r3
 8006f0a:	4619      	mov	r1, r3
 8006f0c:	200a      	movs	r0, #10
 8006f0e:	f000 f83d 	bl	8006f8c <potenga>
 8006f12:	4603      	mov	r3, r0
 8006f14:	b29b      	uxth	r3, r3
 8006f16:	88fa      	ldrh	r2, [r7, #6]
 8006f18:	1ad3      	subs	r3, r2, r3
 8006f1a:	b29b      	uxth	r3, r3
 8006f1c:	80fb      	strh	r3, [r7, #6]
			x++;
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	3301      	adds	r3, #1
 8006f22:	617b      	str	r3, [r7, #20]
		while(value >= (uint16_t)pow(10,range - i)){
 8006f24:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 8006f28:	68ba      	ldr	r2, [r7, #8]
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	1ad3      	subs	r3, r2, r3
 8006f2e:	ee07 3a90 	vmov	s15, r3
 8006f32:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006f36:	eeb0 1b47 	vmov.f64	d1, d7
 8006f3a:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 8006f3e:	f016 fe4f 	bl	801dbe0 <pow>
 8006f42:	eeb0 7b40 	vmov.f64	d7, d0
 8006f46:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006f4a:	ee17 3a90 	vmov	r3, s15
 8006f4e:	b29b      	uxth	r3, r3
 8006f50:	429c      	cmp	r4, r3
 8006f52:	dad3      	bge.n	8006efc <convert_value_to_array+0x2e>
 8006f54:	e000      	b.n	8006f58 <convert_value_to_array+0x8a>
				break;
 8006f56:	bf00      	nop
		}
		arraytoputin[rangebegin+loopnum] = (uint8_t)x;
 8006f58:	797a      	ldrb	r2, [r7, #5]
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	4413      	add	r3, r2
 8006f5e:	461a      	mov	r2, r3
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	4413      	add	r3, r2
 8006f64:	697a      	ldr	r2, [r7, #20]
 8006f66:	b2d2      	uxtb	r2, r2
 8006f68:	701a      	strb	r2, [r3, #0]
		loopnum++;
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	3301      	adds	r3, #1
 8006f6e:	613b      	str	r3, [r7, #16]
		x = 0;
 8006f70:	2300      	movs	r3, #0
 8006f72:	617b      	str	r3, [r7, #20]
	for(int i = 0; i < range+1; i++){// 3
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	3301      	adds	r3, #1
 8006f78:	60fb      	str	r3, [r7, #12]
 8006f7a:	68ba      	ldr	r2, [r7, #8]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	429a      	cmp	r2, r3
 8006f80:	dad0      	bge.n	8006f24 <convert_value_to_array+0x56>
	}
}
 8006f82:	bf00      	nop
 8006f84:	bf00      	nop
 8006f86:	371c      	adds	r7, #28
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd90      	pop	{r4, r7, pc}

08006f8c <potenga>:
uint32_t potenga(int a, int b){
 8006f8c:	b480      	push	{r7}
 8006f8e:	b087      	sub	sp, #28
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
 8006f94:	6039      	str	r1, [r7, #0]
	int32_t c = a;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	60fb      	str	r3, [r7, #12]
	if(b == 0){
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d101      	bne.n	8006fa4 <potenga+0x18>
		return 1;
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	e02d      	b.n	8007000 <potenga+0x74>
	}
	if(b == 1){
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	2b01      	cmp	r3, #1
 8006fa8:	d101      	bne.n	8006fae <potenga+0x22>
		return a;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	e028      	b.n	8007000 <potenga+0x74>
	}
	if(b > 1){
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	dd10      	ble.n	8006fd6 <potenga+0x4a>
			for(int i = 1; i < b; i++){
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	617b      	str	r3, [r7, #20]
 8006fb8:	e007      	b.n	8006fca <potenga+0x3e>
			a = a*c;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	68fa      	ldr	r2, [r7, #12]
 8006fbe:	fb02 f303 	mul.w	r3, r2, r3
 8006fc2:	607b      	str	r3, [r7, #4]
			for(int i = 1; i < b; i++){
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	3301      	adds	r3, #1
 8006fc8:	617b      	str	r3, [r7, #20]
 8006fca:	697a      	ldr	r2, [r7, #20]
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	429a      	cmp	r2, r3
 8006fd0:	dbf3      	blt.n	8006fba <potenga+0x2e>
		}
		return a;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	e014      	b.n	8007000 <potenga+0x74>
	}
	if(b < 0){
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	da10      	bge.n	8006ffe <potenga+0x72>
		for(int i = 0; i < b; i++){
 8006fdc:	2300      	movs	r3, #0
 8006fde:	613b      	str	r3, [r7, #16]
 8006fe0:	e007      	b.n	8006ff2 <potenga+0x66>
			a = a/c;
 8006fe2:	687a      	ldr	r2, [r7, #4]
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	fb92 f3f3 	sdiv	r3, r2, r3
 8006fea:	607b      	str	r3, [r7, #4]
		for(int i = 0; i < b; i++){
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	3301      	adds	r3, #1
 8006ff0:	613b      	str	r3, [r7, #16]
 8006ff2:	693a      	ldr	r2, [r7, #16]
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	429a      	cmp	r2, r3
 8006ff8:	dbf3      	blt.n	8006fe2 <potenga+0x56>
		}
		return a;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	e000      	b.n	8007000 <potenga+0x74>
	}
	return a;
 8006ffe:	687b      	ldr	r3, [r7, #4]
}
 8007000:	4618      	mov	r0, r3
 8007002:	371c      	adds	r7, #28
 8007004:	46bd      	mov	sp, r7
 8007006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700a:	4770      	bx	lr

0800700c <WartoscBezwgledna>:
void valswitch(uint8_t x){
	if(x == 2){
		x = 0;
	}
}
float WartoscBezwgledna(float a){
 800700c:	b480      	push	{r7}
 800700e:	b083      	sub	sp, #12
 8007010:	af00      	add	r7, sp, #0
 8007012:	ed87 0a01 	vstr	s0, [r7, #4]
	if(a < 0){
 8007016:	edd7 7a01 	vldr	s15, [r7, #4]
 800701a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800701e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007022:	d504      	bpl.n	800702e <WartoscBezwgledna+0x22>
		return a*(-1);
 8007024:	edd7 7a01 	vldr	s15, [r7, #4]
 8007028:	eef1 7a67 	vneg.f32	s15, s15
 800702c:	e001      	b.n	8007032 <WartoscBezwgledna+0x26>
	}
	else{
		return a;
 800702e:	edd7 7a01 	vldr	s15, [r7, #4]
	}
}
 8007032:	eeb0 0a67 	vmov.f32	s0, s15
 8007036:	370c      	adds	r7, #12
 8007038:	46bd      	mov	sp, r7
 800703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703e:	4770      	bx	lr

08007040 <RGB_LED_Set_color>:
    ITM_SendChar(*ptr++);
  }
  return len;
}

void RGB_LED_Set_color(uint8_t R, uint8_t G, uint8_t B){
 8007040:	b480      	push	{r7}
 8007042:	b083      	sub	sp, #12
 8007044:	af00      	add	r7, sp, #0
 8007046:	4603      	mov	r3, r0
 8007048:	71fb      	strb	r3, [r7, #7]
 800704a:	460b      	mov	r3, r1
 800704c:	71bb      	strb	r3, [r7, #6]
 800704e:	4613      	mov	r3, r2
 8007050:	717b      	strb	r3, [r7, #5]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, B);
 8007052:	4b09      	ldr	r3, [pc, #36]	@ (8007078 <RGB_LED_Set_color+0x38>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	797a      	ldrb	r2, [r7, #5]
 8007058:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, R);
 800705a:	4b07      	ldr	r3, [pc, #28]	@ (8007078 <RGB_LED_Set_color+0x38>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	79fa      	ldrb	r2, [r7, #7]
 8007060:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, G);
 8007062:	4b05      	ldr	r3, [pc, #20]	@ (8007078 <RGB_LED_Set_color+0x38>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	79ba      	ldrb	r2, [r7, #6]
 8007068:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800706a:	bf00      	nop
 800706c:	370c      	adds	r7, #12
 800706e:	46bd      	mov	sp, r7
 8007070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007074:	4770      	bx	lr
 8007076:	bf00      	nop
 8007078:	24000380 	.word	0x24000380
 800707c:	00000000 	.word	0x00000000

08007080 <RGB_LED_For_BAT>:

void RGB_LED_For_BAT(uint8_t batval){
 8007080:	b580      	push	{r7, lr}
 8007082:	b082      	sub	sp, #8
 8007084:	af00      	add	r7, sp, #0
 8007086:	4603      	mov	r3, r0
 8007088:	71fb      	strb	r3, [r7, #7]
 * batval == 75	  r = 128 g = 128 b = 0
 * batval == 0    r = 255 g = 0 b = 0
 *
 *   r + g = 255
 */
	RGB_LED_Set_color((255 - ((float)batval*2.55)), ((float)batval*2.55), 0);
 800708a:	79fb      	ldrb	r3, [r7, #7]
 800708c:	ee07 3a90 	vmov	s15, r3
 8007090:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007094:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8007098:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 80070e8 <RGB_LED_For_BAT+0x68>
 800709c:	ee27 7b06 	vmul.f64	d7, d7, d6
 80070a0:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 80070f0 <RGB_LED_For_BAT+0x70>
 80070a4:	ee36 7b47 	vsub.f64	d7, d6, d7
 80070a8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80070ac:	edc7 7a00 	vstr	s15, [r7]
 80070b0:	783b      	ldrb	r3, [r7, #0]
 80070b2:	b2db      	uxtb	r3, r3
 80070b4:	79fa      	ldrb	r2, [r7, #7]
 80070b6:	ee07 2a90 	vmov	s15, r2
 80070ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070be:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80070c2:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 80070e8 <RGB_LED_For_BAT+0x68>
 80070c6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80070ca:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80070ce:	edc7 7a00 	vstr	s15, [r7]
 80070d2:	783a      	ldrb	r2, [r7, #0]
 80070d4:	b2d1      	uxtb	r1, r2
 80070d6:	2200      	movs	r2, #0
 80070d8:	4618      	mov	r0, r3
 80070da:	f7ff ffb1 	bl	8007040 <RGB_LED_Set_color>
}
 80070de:	bf00      	nop
 80070e0:	3708      	adds	r7, #8
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}
 80070e6:	bf00      	nop
 80070e8:	66666666 	.word	0x66666666
 80070ec:	40046666 	.word	0x40046666
 80070f0:	00000000 	.word	0x00000000
 80070f4:	406fe000 	.word	0x406fe000

080070f8 <convert_value_to_array2>:
 *	[0] -
 *	[1] 2
 *	[2] 2
 */

void convert_value_to_array2(int16_t value, uint8_t *arraytoputin, uint8_t rangebegin, uint8_t rangeend){
 80070f8:	b590      	push	{r4, r7, lr}
 80070fa:	b087      	sub	sp, #28
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6039      	str	r1, [r7, #0]
 8007100:	4611      	mov	r1, r2
 8007102:	461a      	mov	r2, r3
 8007104:	4603      	mov	r3, r0
 8007106:	80fb      	strh	r3, [r7, #6]
 8007108:	460b      	mov	r3, r1
 800710a:	717b      	strb	r3, [r7, #5]
 800710c:	4613      	mov	r3, r2
 800710e:	713b      	strb	r3, [r7, #4]
	int x = 0;
 8007110:	2300      	movs	r3, #0
 8007112:	617b      	str	r3, [r7, #20]
	int loopnum = 0;
 8007114:	2300      	movs	r3, #0
 8007116:	613b      	str	r3, [r7, #16]
	int range = rangeend - rangebegin;
 8007118:	793a      	ldrb	r2, [r7, #4]
 800711a:	797b      	ldrb	r3, [r7, #5]
 800711c:	1ad3      	subs	r3, r2, r3
 800711e:	60bb      	str	r3, [r7, #8]

	if(value < 0){
 8007120:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007124:	2b00      	cmp	r3, #0
 8007126:	da04      	bge.n	8007132 <convert_value_to_array2+0x3a>
		arraytoputin[rangebegin] = '-';
 8007128:	797b      	ldrb	r3, [r7, #5]
 800712a:	683a      	ldr	r2, [r7, #0]
 800712c:	4413      	add	r3, r2
 800712e:	222d      	movs	r2, #45	@ 0x2d
 8007130:	701a      	strb	r2, [r3, #0]
	}

	for(int i = 1; i < range+1; i++){// 3
 8007132:	2301      	movs	r3, #1
 8007134:	60fb      	str	r3, [r7, #12]
 8007136:	e035      	b.n	80071a4 <convert_value_to_array2+0xac>
		while(value >= (uint16_t)potenga(10,range - i)){
			if(value == 0){
 8007138:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d01d      	beq.n	800717c <convert_value_to_array2+0x84>
				break;
			}
			value -= (uint16_t)potenga(10,range - i);
 8007140:	68ba      	ldr	r2, [r7, #8]
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	1ad3      	subs	r3, r2, r3
 8007146:	4619      	mov	r1, r3
 8007148:	200a      	movs	r0, #10
 800714a:	f7ff ff1f 	bl	8006f8c <potenga>
 800714e:	4603      	mov	r3, r0
 8007150:	b29b      	uxth	r3, r3
 8007152:	88fa      	ldrh	r2, [r7, #6]
 8007154:	1ad3      	subs	r3, r2, r3
 8007156:	b29b      	uxth	r3, r3
 8007158:	80fb      	strh	r3, [r7, #6]
			x++;
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	3301      	adds	r3, #1
 800715e:	617b      	str	r3, [r7, #20]
		while(value >= (uint16_t)potenga(10,range - i)){
 8007160:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 8007164:	68ba      	ldr	r2, [r7, #8]
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	1ad3      	subs	r3, r2, r3
 800716a:	4619      	mov	r1, r3
 800716c:	200a      	movs	r0, #10
 800716e:	f7ff ff0d 	bl	8006f8c <potenga>
 8007172:	4603      	mov	r3, r0
 8007174:	b29b      	uxth	r3, r3
 8007176:	429c      	cmp	r4, r3
 8007178:	dade      	bge.n	8007138 <convert_value_to_array2+0x40>
 800717a:	e000      	b.n	800717e <convert_value_to_array2+0x86>
				break;
 800717c:	bf00      	nop
		}
		arraytoputin[rangebegin + loopnum] = (uint8_t)x + 48;//zamiana na ASCII
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	b2da      	uxtb	r2, r3
 8007182:	7979      	ldrb	r1, [r7, #5]
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	440b      	add	r3, r1
 8007188:	4619      	mov	r1, r3
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	440b      	add	r3, r1
 800718e:	3230      	adds	r2, #48	@ 0x30
 8007190:	b2d2      	uxtb	r2, r2
 8007192:	701a      	strb	r2, [r3, #0]
		loopnum++;
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	3301      	adds	r3, #1
 8007198:	613b      	str	r3, [r7, #16]
		x = 0;
 800719a:	2300      	movs	r3, #0
 800719c:	617b      	str	r3, [r7, #20]
	for(int i = 1; i < range+1; i++){// 3
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	3301      	adds	r3, #1
 80071a2:	60fb      	str	r3, [r7, #12]
 80071a4:	68ba      	ldr	r2, [r7, #8]
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	429a      	cmp	r2, r3
 80071aa:	dad9      	bge.n	8007160 <convert_value_to_array2+0x68>
	}
}
 80071ac:	bf00      	nop
 80071ae:	bf00      	nop
 80071b0:	371c      	adds	r7, #28
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd90      	pop	{r4, r7, pc}

080071b6 <convert_value_to_array3>:
 *	1000.1
 *
 *	range = 5
 *
 */
void convert_value_to_array3(float value, uint8_t *arraytoputin, uint8_t rangebegin, uint8_t rangeend){
 80071b6:	b580      	push	{r7, lr}
 80071b8:	ed2d 8b02 	vpush	{d8}
 80071bc:	b08c      	sub	sp, #48	@ 0x30
 80071be:	af00      	add	r7, sp, #0
 80071c0:	ed87 0a03 	vstr	s0, [r7, #12]
 80071c4:	60b8      	str	r0, [r7, #8]
 80071c6:	460b      	mov	r3, r1
 80071c8:	71fb      	strb	r3, [r7, #7]
 80071ca:	4613      	mov	r3, r2
 80071cc:	71bb      	strb	r3, [r7, #6]
	int x = 0;
 80071ce:	2300      	movs	r3, #0
 80071d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int loopnum = 0;
 80071d2:	2300      	movs	r3, #0
 80071d4:	62bb      	str	r3, [r7, #40]	@ 0x28
	int range = rangeend - rangebegin;
 80071d6:	79ba      	ldrb	r2, [r7, #6]
 80071d8:	79fb      	ldrb	r3, [r7, #7]
 80071da:	1ad3      	subs	r3, r2, r3
 80071dc:	617b      	str	r3, [r7, #20]
	int power_of_value = 0;
 80071de:	2300      	movs	r3, #0
 80071e0:	627b      	str	r3, [r7, #36]	@ 0x24
	float a;
	int kropka;


	if(value < 0){
 80071e2:	edd7 7a03 	vldr	s15, [r7, #12]
 80071e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80071ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071ee:	d50a      	bpl.n	8007206 <convert_value_to_array3+0x50>
		arraytoputin[rangebegin] = '-';
 80071f0:	79fb      	ldrb	r3, [r7, #7]
 80071f2:	68ba      	ldr	r2, [r7, #8]
 80071f4:	4413      	add	r3, r2
 80071f6:	222d      	movs	r2, #45	@ 0x2d
 80071f8:	701a      	strb	r2, [r3, #0]
		value = value * -1;
 80071fa:	edd7 7a03 	vldr	s15, [r7, #12]
 80071fe:	eef1 7a67 	vneg.f32	s15, s15
 8007202:	edc7 7a03 	vstr	s15, [r7, #12]
	}

	//sprawdzenie wagi pierwsazej liczby znaczącej
	//potrzebne do dzielenia
	for(int i = 1; i < range*2; i++){
 8007206:	2301      	movs	r3, #1
 8007208:	61fb      	str	r3, [r7, #28]
 800720a:	e021      	b.n	8007250 <convert_value_to_array3+0x9a>
		a = pow(10,range - i);
 800720c:	697a      	ldr	r2, [r7, #20]
 800720e:	69fb      	ldr	r3, [r7, #28]
 8007210:	1ad3      	subs	r3, r2, r3
 8007212:	ee07 3a90 	vmov	s15, r3
 8007216:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800721a:	eeb0 1b47 	vmov.f64	d1, d7
 800721e:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 8007222:	f016 fcdd 	bl	801dbe0 <pow>
 8007226:	eeb0 7b40 	vmov.f64	d7, d0
 800722a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800722e:	edc7 7a04 	vstr	s15, [r7, #16]
		if(value >= a){
 8007232:	ed97 7a03 	vldr	s14, [r7, #12]
 8007236:	edd7 7a04 	vldr	s15, [r7, #16]
 800723a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800723e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007242:	da0b      	bge.n	800725c <convert_value_to_array3+0xa6>
			break;
		}
		power_of_value++;
 8007244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007246:	3301      	adds	r3, #1
 8007248:	627b      	str	r3, [r7, #36]	@ 0x24
	for(int i = 1; i < range*2; i++){
 800724a:	69fb      	ldr	r3, [r7, #28]
 800724c:	3301      	adds	r3, #1
 800724e:	61fb      	str	r3, [r7, #28]
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	005b      	lsls	r3, r3, #1
 8007254:	69fa      	ldr	r2, [r7, #28]
 8007256:	429a      	cmp	r2, r3
 8007258:	dbd8      	blt.n	800720c <convert_value_to_array3+0x56>
 800725a:	e000      	b.n	800725e <convert_value_to_array3+0xa8>
			break;
 800725c:	bf00      	nop
	}

	power_of_value = range - power_of_value - 1;
 800725e:	697a      	ldr	r2, [r7, #20]
 8007260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007262:	1ad3      	subs	r3, r2, r3
 8007264:	3b01      	subs	r3, #1
 8007266:	627b      	str	r3, [r7, #36]	@ 0x24

	//		Sprawdzic gdzie jest kropka 0.00123 123.01 12.12
	if(power_of_value <= 0){
 8007268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800726a:	2b00      	cmp	r3, #0
 800726c:	dc07      	bgt.n	800727e <convert_value_to_array3+0xc8>
		arraytoputin[rangebegin + 1] = '.';
 800726e:	79fb      	ldrb	r3, [r7, #7]
 8007270:	3301      	adds	r3, #1
 8007272:	68ba      	ldr	r2, [r7, #8]
 8007274:	4413      	add	r3, r2
 8007276:	222e      	movs	r2, #46	@ 0x2e
 8007278:	701a      	strb	r2, [r3, #0]
		kropka = 1;
 800727a:	2301      	movs	r3, #1
 800727c:	623b      	str	r3, [r7, #32]
	}
	if(power_of_value > 0){
 800727e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007280:	2b00      	cmp	r3, #0
 8007282:	dd0a      	ble.n	800729a <convert_value_to_array3+0xe4>
		arraytoputin[rangebegin + power_of_value + 1] = '.';
 8007284:	79fa      	ldrb	r2, [r7, #7]
 8007286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007288:	4413      	add	r3, r2
 800728a:	3301      	adds	r3, #1
 800728c:	68ba      	ldr	r2, [r7, #8]
 800728e:	4413      	add	r3, r2
 8007290:	222e      	movs	r2, #46	@ 0x2e
 8007292:	701a      	strb	r2, [r3, #0]
		kropka = power_of_value + 1;
 8007294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007296:	3301      	adds	r3, #1
 8007298:	623b      	str	r3, [r7, #32]
	}


	value = value*pow(10,(range-1) - power_of_value);
 800729a:	edd7 7a03 	vldr	s15, [r7, #12]
 800729e:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	1e5a      	subs	r2, r3, #1
 80072a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072a8:	1ad3      	subs	r3, r2, r3
 80072aa:	ee07 3a90 	vmov	s15, r3
 80072ae:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80072b2:	eeb0 1b47 	vmov.f64	d1, d7
 80072b6:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 80072ba:	f016 fc91 	bl	801dbe0 <pow>
 80072be:	eeb0 7b40 	vmov.f64	d7, d0
 80072c2:	ee28 7b07 	vmul.f64	d7, d8, d7
 80072c6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80072ca:	edc7 7a03 	vstr	s15, [r7, #12]


	for(int i = 0; i < range-2; i++){// range-2 poniewaz jest znak kropki i ewentualny znak minusa na początku
 80072ce:	2300      	movs	r3, #0
 80072d0:	61bb      	str	r3, [r7, #24]
 80072d2:	e05f      	b.n	8007394 <convert_value_to_array3+0x1de>
		while(value >= (uint16_t)pow(10,(range-1) - i)){
			if(value <= 0){
 80072d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80072d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80072dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072e0:	d93d      	bls.n	800735e <convert_value_to_array3+0x1a8>
				break;
			}
			value = value - pow(10,(range-1) - i);
 80072e2:	edd7 7a03 	vldr	s15, [r7, #12]
 80072e6:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	1e5a      	subs	r2, r3, #1
 80072ee:	69bb      	ldr	r3, [r7, #24]
 80072f0:	1ad3      	subs	r3, r2, r3
 80072f2:	ee07 3a90 	vmov	s15, r3
 80072f6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80072fa:	eeb0 1b47 	vmov.f64	d1, d7
 80072fe:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 8007302:	f016 fc6d 	bl	801dbe0 <pow>
 8007306:	eeb0 7b40 	vmov.f64	d7, d0
 800730a:	ee38 7b47 	vsub.f64	d7, d8, d7
 800730e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8007312:	edc7 7a03 	vstr	s15, [r7, #12]
			x++;
 8007316:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007318:	3301      	adds	r3, #1
 800731a:	62fb      	str	r3, [r7, #44]	@ 0x2c
		while(value >= (uint16_t)pow(10,(range-1) - i)){
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	1e5a      	subs	r2, r3, #1
 8007320:	69bb      	ldr	r3, [r7, #24]
 8007322:	1ad3      	subs	r3, r2, r3
 8007324:	ee07 3a90 	vmov	s15, r3
 8007328:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800732c:	eeb0 1b47 	vmov.f64	d1, d7
 8007330:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 8007334:	f016 fc54 	bl	801dbe0 <pow>
 8007338:	eeb0 7b40 	vmov.f64	d7, d0
 800733c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8007340:	ee17 3a90 	vmov	r3, s15
 8007344:	b29b      	uxth	r3, r3
 8007346:	ee07 3a90 	vmov	s15, r3
 800734a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800734e:	ed97 7a03 	vldr	s14, [r7, #12]
 8007352:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800735a:	dabb      	bge.n	80072d4 <convert_value_to_array3+0x11e>
 800735c:	e000      	b.n	8007360 <convert_value_to_array3+0x1aa>
				break;
 800735e:	bf00      	nop
		}

        if(loopnum == kropka){
 8007360:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007362:	6a3b      	ldr	r3, [r7, #32]
 8007364:	429a      	cmp	r2, r3
 8007366:	d102      	bne.n	800736e <convert_value_to_array3+0x1b8>
            loopnum++;
 8007368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800736a:	3301      	adds	r3, #1
 800736c:	62bb      	str	r3, [r7, #40]	@ 0x28
        }
		arraytoputin[rangebegin + loopnum] = (uint8_t)x + 48;//zamiana na ASCII
 800736e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007370:	b2da      	uxtb	r2, r3
 8007372:	79f9      	ldrb	r1, [r7, #7]
 8007374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007376:	440b      	add	r3, r1
 8007378:	4619      	mov	r1, r3
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	440b      	add	r3, r1
 800737e:	3230      	adds	r2, #48	@ 0x30
 8007380:	b2d2      	uxtb	r2, r2
 8007382:	701a      	strb	r2, [r3, #0]
		loopnum++;
 8007384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007386:	3301      	adds	r3, #1
 8007388:	62bb      	str	r3, [r7, #40]	@ 0x28
		x = 0;
 800738a:	2300      	movs	r3, #0
 800738c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	for(int i = 0; i < range-2; i++){// range-2 poniewaz jest znak kropki i ewentualny znak minusa na początku
 800738e:	69bb      	ldr	r3, [r7, #24]
 8007390:	3301      	adds	r3, #1
 8007392:	61bb      	str	r3, [r7, #24]
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	3b02      	subs	r3, #2
 8007398:	69ba      	ldr	r2, [r7, #24]
 800739a:	429a      	cmp	r2, r3
 800739c:	dbbe      	blt.n	800731c <convert_value_to_array3+0x166>
	}
}
 800739e:	bf00      	nop
 80073a0:	bf00      	nop
 80073a2:	3730      	adds	r7, #48	@ 0x30
 80073a4:	46bd      	mov	sp, r7
 80073a6:	ecbd 8b02 	vpop	{d8}
 80073aa:	bd80      	pop	{r7, pc}

080073ac <uSD_Card_SendData_To_Buffer>:
 *
 * Numer pentli 7 8
 *
 * Mag_Z 3
 */
void uSD_Card_SendData_To_Buffer(uint32_t a){
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b082      	sub	sp, #8
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
	convert_value_to_array2(Mainloop_Number, DataToSendBuffer, (0 + (128*a)), (8 + (128*a)));
 80073b4:	4ba6      	ldr	r3, [pc, #664]	@ (8007650 <uSD_Card_SendData_To_Buffer+0x2a4>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	b218      	sxth	r0, r3
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	b2db      	uxtb	r3, r3
 80073be:	01db      	lsls	r3, r3, #7
 80073c0:	b2da      	uxtb	r2, r3
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	b2db      	uxtb	r3, r3
 80073c6:	01db      	lsls	r3, r3, #7
 80073c8:	b2db      	uxtb	r3, r3
 80073ca:	3308      	adds	r3, #8
 80073cc:	b2db      	uxtb	r3, r3
 80073ce:	49a1      	ldr	r1, [pc, #644]	@ (8007654 <uSD_Card_SendData_To_Buffer+0x2a8>)
 80073d0:	f7ff fe92 	bl	80070f8 <convert_value_to_array2>
	 DataToSendBuffer[(8 + (128*a))] = ' ';
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	01db      	lsls	r3, r3, #7
 80073d8:	3308      	adds	r3, #8
 80073da:	4a9e      	ldr	r2, [pc, #632]	@ (8007654 <uSD_Card_SendData_To_Buffer+0x2a8>)
 80073dc:	2120      	movs	r1, #32
 80073de:	54d1      	strb	r1, [r2, r3]


	convert_value_to_array2(SPEED1, DataToSendBuffer, (9 + (128*a)), (15 + (128*a)));
 80073e0:	4b9d      	ldr	r3, [pc, #628]	@ (8007658 <uSD_Card_SendData_To_Buffer+0x2ac>)
 80073e2:	881b      	ldrh	r3, [r3, #0]
 80073e4:	b218      	sxth	r0, r3
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	b2db      	uxtb	r3, r3
 80073ea:	01db      	lsls	r3, r3, #7
 80073ec:	b2db      	uxtb	r3, r3
 80073ee:	3309      	adds	r3, #9
 80073f0:	b2da      	uxtb	r2, r3
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	b2db      	uxtb	r3, r3
 80073f6:	01db      	lsls	r3, r3, #7
 80073f8:	b2db      	uxtb	r3, r3
 80073fa:	330f      	adds	r3, #15
 80073fc:	b2db      	uxtb	r3, r3
 80073fe:	4995      	ldr	r1, [pc, #596]	@ (8007654 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007400:	f7ff fe7a 	bl	80070f8 <convert_value_to_array2>
	 DataToSendBuffer[(15 + (128*a))] = ' ';
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	01db      	lsls	r3, r3, #7
 8007408:	330f      	adds	r3, #15
 800740a:	4a92      	ldr	r2, [pc, #584]	@ (8007654 <uSD_Card_SendData_To_Buffer+0x2a8>)
 800740c:	2120      	movs	r1, #32
 800740e:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(SPEED2, DataToSendBuffer, (16 + (128*a)), (22 + (128*a)));
 8007410:	4b92      	ldr	r3, [pc, #584]	@ (800765c <uSD_Card_SendData_To_Buffer+0x2b0>)
 8007412:	881b      	ldrh	r3, [r3, #0]
 8007414:	b218      	sxth	r0, r3
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	b2db      	uxtb	r3, r3
 800741a:	01db      	lsls	r3, r3, #7
 800741c:	b2db      	uxtb	r3, r3
 800741e:	3310      	adds	r3, #16
 8007420:	b2da      	uxtb	r2, r3
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	b2db      	uxtb	r3, r3
 8007426:	01db      	lsls	r3, r3, #7
 8007428:	b2db      	uxtb	r3, r3
 800742a:	3316      	adds	r3, #22
 800742c:	b2db      	uxtb	r3, r3
 800742e:	4989      	ldr	r1, [pc, #548]	@ (8007654 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007430:	f7ff fe62 	bl	80070f8 <convert_value_to_array2>
	 DataToSendBuffer[(22 + (128*a))] = ' ';
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	01db      	lsls	r3, r3, #7
 8007438:	3316      	adds	r3, #22
 800743a:	4a86      	ldr	r2, [pc, #536]	@ (8007654 <uSD_Card_SendData_To_Buffer+0x2a8>)
 800743c:	2120      	movs	r1, #32
 800743e:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(SPEED3, DataToSendBuffer, (23 + (128*a)), (29 + (128*a)));
 8007440:	4b87      	ldr	r3, [pc, #540]	@ (8007660 <uSD_Card_SendData_To_Buffer+0x2b4>)
 8007442:	881b      	ldrh	r3, [r3, #0]
 8007444:	b218      	sxth	r0, r3
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	b2db      	uxtb	r3, r3
 800744a:	01db      	lsls	r3, r3, #7
 800744c:	b2db      	uxtb	r3, r3
 800744e:	3317      	adds	r3, #23
 8007450:	b2da      	uxtb	r2, r3
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	b2db      	uxtb	r3, r3
 8007456:	01db      	lsls	r3, r3, #7
 8007458:	b2db      	uxtb	r3, r3
 800745a:	331d      	adds	r3, #29
 800745c:	b2db      	uxtb	r3, r3
 800745e:	497d      	ldr	r1, [pc, #500]	@ (8007654 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007460:	f7ff fe4a 	bl	80070f8 <convert_value_to_array2>
	 DataToSendBuffer[(29 + (128*a))] = ' ';
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	01db      	lsls	r3, r3, #7
 8007468:	331d      	adds	r3, #29
 800746a:	4a7a      	ldr	r2, [pc, #488]	@ (8007654 <uSD_Card_SendData_To_Buffer+0x2a8>)
 800746c:	2120      	movs	r1, #32
 800746e:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(SPEED4, DataToSendBuffer, (30 + (128*a)), (36 + (128*a)));
 8007470:	4b7c      	ldr	r3, [pc, #496]	@ (8007664 <uSD_Card_SendData_To_Buffer+0x2b8>)
 8007472:	881b      	ldrh	r3, [r3, #0]
 8007474:	b218      	sxth	r0, r3
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	b2db      	uxtb	r3, r3
 800747a:	01db      	lsls	r3, r3, #7
 800747c:	b2db      	uxtb	r3, r3
 800747e:	331e      	adds	r3, #30
 8007480:	b2da      	uxtb	r2, r3
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	b2db      	uxtb	r3, r3
 8007486:	01db      	lsls	r3, r3, #7
 8007488:	b2db      	uxtb	r3, r3
 800748a:	3324      	adds	r3, #36	@ 0x24
 800748c:	b2db      	uxtb	r3, r3
 800748e:	4971      	ldr	r1, [pc, #452]	@ (8007654 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007490:	f7ff fe32 	bl	80070f8 <convert_value_to_array2>
	 DataToSendBuffer[(36 + (128*a))] = ' ';
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	01db      	lsls	r3, r3, #7
 8007498:	3324      	adds	r3, #36	@ 0x24
 800749a:	4a6e      	ldr	r2, [pc, #440]	@ (8007654 <uSD_Card_SendData_To_Buffer+0x2a8>)
 800749c:	2120      	movs	r1, #32
 800749e:	54d1      	strb	r1, [r2, r3]

	convert_value_to_array3(wanted_rool, DataToSendBuffer, (37 + (128*a)), (45 + (128*a)));
 80074a0:	4b71      	ldr	r3, [pc, #452]	@ (8007668 <uSD_Card_SendData_To_Buffer+0x2bc>)
 80074a2:	edd3 7a00 	vldr	s15, [r3]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	b2db      	uxtb	r3, r3
 80074aa:	01db      	lsls	r3, r3, #7
 80074ac:	b2db      	uxtb	r3, r3
 80074ae:	3325      	adds	r3, #37	@ 0x25
 80074b0:	b2d9      	uxtb	r1, r3
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	b2db      	uxtb	r3, r3
 80074b6:	01db      	lsls	r3, r3, #7
 80074b8:	b2db      	uxtb	r3, r3
 80074ba:	332d      	adds	r3, #45	@ 0x2d
 80074bc:	b2db      	uxtb	r3, r3
 80074be:	461a      	mov	r2, r3
 80074c0:	4864      	ldr	r0, [pc, #400]	@ (8007654 <uSD_Card_SendData_To_Buffer+0x2a8>)
 80074c2:	eeb0 0a67 	vmov.f32	s0, s15
 80074c6:	f7ff fe76 	bl	80071b6 <convert_value_to_array3>
	 DataToSendBuffer[(45 + (128*a))] = ' ';
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	01db      	lsls	r3, r3, #7
 80074ce:	332d      	adds	r3, #45	@ 0x2d
 80074d0:	4a60      	ldr	r2, [pc, #384]	@ (8007654 <uSD_Card_SendData_To_Buffer+0x2a8>)
 80074d2:	2120      	movs	r1, #32
 80074d4:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array3(wanted_pitch, DataToSendBuffer, (46 + (128*a)), (54 + (128*a)));
 80074d6:	4b65      	ldr	r3, [pc, #404]	@ (800766c <uSD_Card_SendData_To_Buffer+0x2c0>)
 80074d8:	edd3 7a00 	vldr	s15, [r3]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	b2db      	uxtb	r3, r3
 80074e0:	01db      	lsls	r3, r3, #7
 80074e2:	b2db      	uxtb	r3, r3
 80074e4:	332e      	adds	r3, #46	@ 0x2e
 80074e6:	b2d9      	uxtb	r1, r3
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	b2db      	uxtb	r3, r3
 80074ec:	01db      	lsls	r3, r3, #7
 80074ee:	b2db      	uxtb	r3, r3
 80074f0:	3336      	adds	r3, #54	@ 0x36
 80074f2:	b2db      	uxtb	r3, r3
 80074f4:	461a      	mov	r2, r3
 80074f6:	4857      	ldr	r0, [pc, #348]	@ (8007654 <uSD_Card_SendData_To_Buffer+0x2a8>)
 80074f8:	eeb0 0a67 	vmov.f32	s0, s15
 80074fc:	f7ff fe5b 	bl	80071b6 <convert_value_to_array3>
	 DataToSendBuffer[(54 + (128*a))] = ' ';
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	01db      	lsls	r3, r3, #7
 8007504:	3336      	adds	r3, #54	@ 0x36
 8007506:	4a53      	ldr	r2, [pc, #332]	@ (8007654 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007508:	2120      	movs	r1, #32
 800750a:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array3(wanted_yaw, DataToSendBuffer, (55 + (128*a)), (63 + (128*a)));
 800750c:	4b58      	ldr	r3, [pc, #352]	@ (8007670 <uSD_Card_SendData_To_Buffer+0x2c4>)
 800750e:	edd3 7a00 	vldr	s15, [r3]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	b2db      	uxtb	r3, r3
 8007516:	01db      	lsls	r3, r3, #7
 8007518:	b2db      	uxtb	r3, r3
 800751a:	3337      	adds	r3, #55	@ 0x37
 800751c:	b2d9      	uxtb	r1, r3
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	b2db      	uxtb	r3, r3
 8007522:	01db      	lsls	r3, r3, #7
 8007524:	b2db      	uxtb	r3, r3
 8007526:	333f      	adds	r3, #63	@ 0x3f
 8007528:	b2db      	uxtb	r3, r3
 800752a:	461a      	mov	r2, r3
 800752c:	4849      	ldr	r0, [pc, #292]	@ (8007654 <uSD_Card_SendData_To_Buffer+0x2a8>)
 800752e:	eeb0 0a67 	vmov.f32	s0, s15
 8007532:	f7ff fe40 	bl	80071b6 <convert_value_to_array3>
	 DataToSendBuffer[(63 + (128*a))] = ' ';
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	01db      	lsls	r3, r3, #7
 800753a:	333f      	adds	r3, #63	@ 0x3f
 800753c:	4a45      	ldr	r2, [pc, #276]	@ (8007654 <uSD_Card_SendData_To_Buffer+0x2a8>)
 800753e:	2120      	movs	r1, #32
 8007540:	54d1      	strb	r1, [r2, r3]

	convert_value_to_array2(error_sum_pitch, DataToSendBuffer, (64 + (128*a)), (72 + (128*a)));
 8007542:	4b4c      	ldr	r3, [pc, #304]	@ (8007674 <uSD_Card_SendData_To_Buffer+0x2c8>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	b218      	sxth	r0, r3
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	b2db      	uxtb	r3, r3
 800754c:	01db      	lsls	r3, r3, #7
 800754e:	b2db      	uxtb	r3, r3
 8007550:	3340      	adds	r3, #64	@ 0x40
 8007552:	b2da      	uxtb	r2, r3
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	b2db      	uxtb	r3, r3
 8007558:	01db      	lsls	r3, r3, #7
 800755a:	b2db      	uxtb	r3, r3
 800755c:	3348      	adds	r3, #72	@ 0x48
 800755e:	b2db      	uxtb	r3, r3
 8007560:	493c      	ldr	r1, [pc, #240]	@ (8007654 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007562:	f7ff fdc9 	bl	80070f8 <convert_value_to_array2>
	 DataToSendBuffer[(72 + (128*a))] = ' ';
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	01db      	lsls	r3, r3, #7
 800756a:	3348      	adds	r3, #72	@ 0x48
 800756c:	4a39      	ldr	r2, [pc, #228]	@ (8007654 <uSD_Card_SendData_To_Buffer+0x2a8>)
 800756e:	2120      	movs	r1, #32
 8007570:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(error_sum_rool, DataToSendBuffer, (73 + (128*a)), (81 + (128*a)));
 8007572:	4b41      	ldr	r3, [pc, #260]	@ (8007678 <uSD_Card_SendData_To_Buffer+0x2cc>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	b218      	sxth	r0, r3
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	b2db      	uxtb	r3, r3
 800757c:	01db      	lsls	r3, r3, #7
 800757e:	b2db      	uxtb	r3, r3
 8007580:	3349      	adds	r3, #73	@ 0x49
 8007582:	b2da      	uxtb	r2, r3
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	b2db      	uxtb	r3, r3
 8007588:	01db      	lsls	r3, r3, #7
 800758a:	b2db      	uxtb	r3, r3
 800758c:	3351      	adds	r3, #81	@ 0x51
 800758e:	b2db      	uxtb	r3, r3
 8007590:	4930      	ldr	r1, [pc, #192]	@ (8007654 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007592:	f7ff fdb1 	bl	80070f8 <convert_value_to_array2>
	 DataToSendBuffer[(81 + (128*a))] = ' ';
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	01db      	lsls	r3, r3, #7
 800759a:	3351      	adds	r3, #81	@ 0x51
 800759c:	4a2d      	ldr	r2, [pc, #180]	@ (8007654 <uSD_Card_SendData_To_Buffer+0x2a8>)
 800759e:	2120      	movs	r1, #32
 80075a0:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(error_sum_yaw, DataToSendBuffer, (82 + (128*a)), (90 + (128*a)));
 80075a2:	4b36      	ldr	r3, [pc, #216]	@ (800767c <uSD_Card_SendData_To_Buffer+0x2d0>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	b218      	sxth	r0, r3
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	b2db      	uxtb	r3, r3
 80075ac:	01db      	lsls	r3, r3, #7
 80075ae:	b2db      	uxtb	r3, r3
 80075b0:	3352      	adds	r3, #82	@ 0x52
 80075b2:	b2da      	uxtb	r2, r3
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	b2db      	uxtb	r3, r3
 80075b8:	01db      	lsls	r3, r3, #7
 80075ba:	b2db      	uxtb	r3, r3
 80075bc:	335a      	adds	r3, #90	@ 0x5a
 80075be:	b2db      	uxtb	r3, r3
 80075c0:	4924      	ldr	r1, [pc, #144]	@ (8007654 <uSD_Card_SendData_To_Buffer+0x2a8>)
 80075c2:	f7ff fd99 	bl	80070f8 <convert_value_to_array2>
	 DataToSendBuffer[(90 + (128*a))] = ' ';
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	01db      	lsls	r3, r3, #7
 80075ca:	335a      	adds	r3, #90	@ 0x5a
 80075cc:	4a21      	ldr	r2, [pc, #132]	@ (8007654 <uSD_Card_SendData_To_Buffer+0x2a8>)
 80075ce:	2120      	movs	r1, #32
 80075d0:	54d1      	strb	r1, [r2, r3]

	convert_value_to_array3(data.x, DataToSendBuffer, (91 + (128*a)), (98 + (128*a)));
 80075d2:	4b2b      	ldr	r3, [pc, #172]	@ (8007680 <uSD_Card_SendData_To_Buffer+0x2d4>)
 80075d4:	edd3 7a00 	vldr	s15, [r3]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	b2db      	uxtb	r3, r3
 80075dc:	01db      	lsls	r3, r3, #7
 80075de:	b2db      	uxtb	r3, r3
 80075e0:	335b      	adds	r3, #91	@ 0x5b
 80075e2:	b2d9      	uxtb	r1, r3
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	b2db      	uxtb	r3, r3
 80075e8:	01db      	lsls	r3, r3, #7
 80075ea:	b2db      	uxtb	r3, r3
 80075ec:	3362      	adds	r3, #98	@ 0x62
 80075ee:	b2db      	uxtb	r3, r3
 80075f0:	461a      	mov	r2, r3
 80075f2:	4818      	ldr	r0, [pc, #96]	@ (8007654 <uSD_Card_SendData_To_Buffer+0x2a8>)
 80075f4:	eeb0 0a67 	vmov.f32	s0, s15
 80075f8:	f7ff fddd 	bl	80071b6 <convert_value_to_array3>
	 DataToSendBuffer[(98 + (128*a))] = ' ';
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	01db      	lsls	r3, r3, #7
 8007600:	3362      	adds	r3, #98	@ 0x62
 8007602:	4a14      	ldr	r2, [pc, #80]	@ (8007654 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007604:	2120      	movs	r1, #32
 8007606:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array3(data.y, DataToSendBuffer, (99 + (128*a)), (106 + (128*a)));
 8007608:	4b1d      	ldr	r3, [pc, #116]	@ (8007680 <uSD_Card_SendData_To_Buffer+0x2d4>)
 800760a:	edd3 7a01 	vldr	s15, [r3, #4]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	b2db      	uxtb	r3, r3
 8007612:	01db      	lsls	r3, r3, #7
 8007614:	b2db      	uxtb	r3, r3
 8007616:	3363      	adds	r3, #99	@ 0x63
 8007618:	b2d9      	uxtb	r1, r3
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	b2db      	uxtb	r3, r3
 800761e:	01db      	lsls	r3, r3, #7
 8007620:	b2db      	uxtb	r3, r3
 8007622:	336a      	adds	r3, #106	@ 0x6a
 8007624:	b2db      	uxtb	r3, r3
 8007626:	461a      	mov	r2, r3
 8007628:	480a      	ldr	r0, [pc, #40]	@ (8007654 <uSD_Card_SendData_To_Buffer+0x2a8>)
 800762a:	eeb0 0a67 	vmov.f32	s0, s15
 800762e:	f7ff fdc2 	bl	80071b6 <convert_value_to_array3>
	 DataToSendBuffer[(106 + (128*a))] = ' ';
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	01db      	lsls	r3, r3, #7
 8007636:	336a      	adds	r3, #106	@ 0x6a
 8007638:	4a06      	ldr	r2, [pc, #24]	@ (8007654 <uSD_Card_SendData_To_Buffer+0x2a8>)
 800763a:	2120      	movs	r1, #32
 800763c:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array3(data.z, DataToSendBuffer, (107 + (128*a)), (114 + (128*a)));
 800763e:	4b10      	ldr	r3, [pc, #64]	@ (8007680 <uSD_Card_SendData_To_Buffer+0x2d4>)
 8007640:	edd3 7a02 	vldr	s15, [r3, #8]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	b2db      	uxtb	r3, r3
 8007648:	01db      	lsls	r3, r3, #7
 800764a:	b2db      	uxtb	r3, r3
 800764c:	336b      	adds	r3, #107	@ 0x6b
 800764e:	e019      	b.n	8007684 <uSD_Card_SendData_To_Buffer+0x2d8>
 8007650:	000041c4 	.word	0x000041c4
 8007654:	24002f28 	.word	0x24002f28
 8007658:	0000418c 	.word	0x0000418c
 800765c:	0000418e 	.word	0x0000418e
 8007660:	00004190 	.word	0x00004190
 8007664:	00004192 	.word	0x00004192
 8007668:	0000406c 	.word	0x0000406c
 800766c:	00004068 	.word	0x00004068
 8007670:	00004070 	.word	0x00004070
 8007674:	0000409c 	.word	0x0000409c
 8007678:	000040a0 	.word	0x000040a0
 800767c:	000040a4 	.word	0x000040a4
 8007680:	0000007c 	.word	0x0000007c
 8007684:	b2d9      	uxtb	r1, r3
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	b2db      	uxtb	r3, r3
 800768a:	01db      	lsls	r3, r3, #7
 800768c:	b2db      	uxtb	r3, r3
 800768e:	3372      	adds	r3, #114	@ 0x72
 8007690:	b2db      	uxtb	r3, r3
 8007692:	461a      	mov	r2, r3
 8007694:	482d      	ldr	r0, [pc, #180]	@ (800774c <uSD_Card_SendData_To_Buffer+0x3a0>)
 8007696:	eeb0 0a67 	vmov.f32	s0, s15
 800769a:	f7ff fd8c 	bl	80071b6 <convert_value_to_array3>
	 DataToSendBuffer[(114 + (128*a))] = ' ';
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	01db      	lsls	r3, r3, #7
 80076a2:	3372      	adds	r3, #114	@ 0x72
 80076a4:	4a29      	ldr	r2, [pc, #164]	@ (800774c <uSD_Card_SendData_To_Buffer+0x3a0>)
 80076a6:	2120      	movs	r1, #32
 80076a8:	54d1      	strb	r1, [r2, r3]


	convert_value_to_array2(MYDRON.batterysize, DataToSendBuffer, (115 + (128*a)), (119 + (128*a)));
 80076aa:	4b29      	ldr	r3, [pc, #164]	@ (8007750 <uSD_Card_SendData_To_Buffer+0x3a4>)
 80076ac:	881b      	ldrh	r3, [r3, #0]
 80076ae:	b218      	sxth	r0, r3
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	b2db      	uxtb	r3, r3
 80076b4:	01db      	lsls	r3, r3, #7
 80076b6:	b2db      	uxtb	r3, r3
 80076b8:	3373      	adds	r3, #115	@ 0x73
 80076ba:	b2da      	uxtb	r2, r3
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	b2db      	uxtb	r3, r3
 80076c0:	01db      	lsls	r3, r3, #7
 80076c2:	b2db      	uxtb	r3, r3
 80076c4:	3377      	adds	r3, #119	@ 0x77
 80076c6:	b2db      	uxtb	r3, r3
 80076c8:	4920      	ldr	r1, [pc, #128]	@ (800774c <uSD_Card_SendData_To_Buffer+0x3a0>)
 80076ca:	f7ff fd15 	bl	80070f8 <convert_value_to_array2>
	 DataToSendBuffer[(119 + (128*a))] = ' ';
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	01db      	lsls	r3, r3, #7
 80076d2:	3377      	adds	r3, #119	@ 0x77
 80076d4:	4a1d      	ldr	r2, [pc, #116]	@ (800774c <uSD_Card_SendData_To_Buffer+0x3a0>)
 80076d6:	2120      	movs	r1, #32
 80076d8:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(MYDRON.dron_status.Connection, DataToSendBuffer, (120 + (128*a)), (122 + (128*a)));
 80076da:	4b1d      	ldr	r3, [pc, #116]	@ (8007750 <uSD_Card_SendData_To_Buffer+0x3a4>)
 80076dc:	895b      	ldrh	r3, [r3, #10]
 80076de:	b218      	sxth	r0, r3
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	b2db      	uxtb	r3, r3
 80076e4:	01db      	lsls	r3, r3, #7
 80076e6:	b2db      	uxtb	r3, r3
 80076e8:	3378      	adds	r3, #120	@ 0x78
 80076ea:	b2da      	uxtb	r2, r3
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	b2db      	uxtb	r3, r3
 80076f0:	01db      	lsls	r3, r3, #7
 80076f2:	b2db      	uxtb	r3, r3
 80076f4:	337a      	adds	r3, #122	@ 0x7a
 80076f6:	b2db      	uxtb	r3, r3
 80076f8:	4914      	ldr	r1, [pc, #80]	@ (800774c <uSD_Card_SendData_To_Buffer+0x3a0>)
 80076fa:	f7ff fcfd 	bl	80070f8 <convert_value_to_array2>
	 DataToSendBuffer[(122 + (128*a))] = ' ';
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	01db      	lsls	r3, r3, #7
 8007702:	337a      	adds	r3, #122	@ 0x7a
 8007704:	4a11      	ldr	r2, [pc, #68]	@ (800774c <uSD_Card_SendData_To_Buffer+0x3a0>)
 8007706:	2120      	movs	r1, #32
 8007708:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(Mag_Z, DataToSendBuffer, (123 + (128*a)), (127 + (128*a)));
 800770a:	4b12      	ldr	r3, [pc, #72]	@ (8007754 <uSD_Card_SendData_To_Buffer+0x3a8>)
 800770c:	edd3 7a00 	vldr	s15, [r3]
 8007710:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007714:	ee17 3a90 	vmov	r3, s15
 8007718:	b218      	sxth	r0, r3
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	b2db      	uxtb	r3, r3
 800771e:	01db      	lsls	r3, r3, #7
 8007720:	b2db      	uxtb	r3, r3
 8007722:	337b      	adds	r3, #123	@ 0x7b
 8007724:	b2da      	uxtb	r2, r3
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	b2db      	uxtb	r3, r3
 800772a:	01db      	lsls	r3, r3, #7
 800772c:	b2db      	uxtb	r3, r3
 800772e:	337f      	adds	r3, #127	@ 0x7f
 8007730:	b2db      	uxtb	r3, r3
 8007732:	4906      	ldr	r1, [pc, #24]	@ (800774c <uSD_Card_SendData_To_Buffer+0x3a0>)
 8007734:	f7ff fce0 	bl	80070f8 <convert_value_to_array2>
	 DataToSendBuffer[(128 + (128*a))] = '\n';
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	3301      	adds	r3, #1
 800773c:	01db      	lsls	r3, r3, #7
 800773e:	4a03      	ldr	r2, [pc, #12]	@ (800774c <uSD_Card_SendData_To_Buffer+0x3a0>)
 8007740:	210a      	movs	r1, #10
 8007742:	54d1      	strb	r1, [r2, r3]
}
 8007744:	bf00      	nop
 8007746:	3708      	adds	r7, #8
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}
 800774c:	24002f28 	.word	0x24002f28
 8007750:	00000180 	.word	0x00000180
 8007754:	00000058 	.word	0x00000058

08007758 <Stack_Push>:

void Stack_Push(float data){
 8007758:	b480      	push	{r7}
 800775a:	b083      	sub	sp, #12
 800775c:	af00      	add	r7, sp, #0
 800775e:	ed87 0a01 	vstr	s0, [r7, #4]
	Old_Data_stack.start_pointer++;
 8007762:	4b22      	ldr	r3, [pc, #136]	@ (80077ec <Stack_Push+0x94>)
 8007764:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007768:	f8b3 3ea8 	ldrh.w	r3, [r3, #3752]	@ 0xea8
 800776c:	3301      	adds	r3, #1
 800776e:	b29a      	uxth	r2, r3
 8007770:	4b1e      	ldr	r3, [pc, #120]	@ (80077ec <Stack_Push+0x94>)
 8007772:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007776:	f8a3 2ea8 	strh.w	r2, [r3, #3752]	@ 0xea8
	if(Old_Data_stack.start_pointer == 4000){
 800777a:	4b1c      	ldr	r3, [pc, #112]	@ (80077ec <Stack_Push+0x94>)
 800777c:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007780:	f8b3 3ea8 	ldrh.w	r3, [r3, #3752]	@ 0xea8
 8007784:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8007788:	d105      	bne.n	8007796 <Stack_Push+0x3e>
		Old_Data_stack.start_pointer = 0;
 800778a:	4b18      	ldr	r3, [pc, #96]	@ (80077ec <Stack_Push+0x94>)
 800778c:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007790:	2200      	movs	r2, #0
 8007792:	f8a3 2ea8 	strh.w	r2, [r3, #3752]	@ 0xea8
	}
	Old_Data_stack.olddata[Old_Data_stack.start_pointer] = data;
 8007796:	4b15      	ldr	r3, [pc, #84]	@ (80077ec <Stack_Push+0x94>)
 8007798:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800779c:	f8b3 3ea8 	ldrh.w	r3, [r3, #3752]	@ 0xea8
 80077a0:	4a12      	ldr	r2, [pc, #72]	@ (80077ec <Stack_Push+0x94>)
 80077a2:	009b      	lsls	r3, r3, #2
 80077a4:	4413      	add	r3, r2
 80077a6:	687a      	ldr	r2, [r7, #4]
 80077a8:	601a      	str	r2, [r3, #0]

	Old_Data_stack.end_pointer++;
 80077aa:	4b10      	ldr	r3, [pc, #64]	@ (80077ec <Stack_Push+0x94>)
 80077ac:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80077b0:	f8b3 3eaa 	ldrh.w	r3, [r3, #3754]	@ 0xeaa
 80077b4:	3301      	adds	r3, #1
 80077b6:	b29a      	uxth	r2, r3
 80077b8:	4b0c      	ldr	r3, [pc, #48]	@ (80077ec <Stack_Push+0x94>)
 80077ba:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80077be:	f8a3 2eaa 	strh.w	r2, [r3, #3754]	@ 0xeaa
	if(Old_Data_stack.start_pointer == 4000){
 80077c2:	4b0a      	ldr	r3, [pc, #40]	@ (80077ec <Stack_Push+0x94>)
 80077c4:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80077c8:	f8b3 3ea8 	ldrh.w	r3, [r3, #3752]	@ 0xea8
 80077cc:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 80077d0:	d105      	bne.n	80077de <Stack_Push+0x86>
		Old_Data_stack.start_pointer = 0;
 80077d2:	4b06      	ldr	r3, [pc, #24]	@ (80077ec <Stack_Push+0x94>)
 80077d4:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80077d8:	2200      	movs	r2, #0
 80077da:	f8a3 2ea8 	strh.w	r2, [r3, #3752]	@ 0xea8
	}
}
 80077de:	bf00      	nop
 80077e0:	370c      	adds	r7, #12
 80077e2:	46bd      	mov	sp, r7
 80077e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e8:	4770      	bx	lr
 80077ea:	bf00      	nop
 80077ec:	0000019c 	.word	0x0000019c

080077f0 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b084      	sub	sp, #16
 80077f4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80077f6:	463b      	mov	r3, r7
 80077f8:	2200      	movs	r2, #0
 80077fa:	601a      	str	r2, [r3, #0]
 80077fc:	605a      	str	r2, [r3, #4]
 80077fe:	609a      	str	r2, [r3, #8]
 8007800:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8007802:	f003 fc5f 	bl	800b0c4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8007806:	2301      	movs	r3, #1
 8007808:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800780a:	2300      	movs	r3, #0
 800780c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800780e:	2300      	movs	r3, #0
 8007810:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8007812:	231f      	movs	r3, #31
 8007814:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8007816:	2387      	movs	r3, #135	@ 0x87
 8007818:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800781a:	2300      	movs	r3, #0
 800781c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800781e:	2300      	movs	r3, #0
 8007820:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8007822:	2301      	movs	r3, #1
 8007824:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8007826:	2301      	movs	r3, #1
 8007828:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800782a:	2300      	movs	r3, #0
 800782c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800782e:	2300      	movs	r3, #0
 8007830:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8007832:	463b      	mov	r3, r7
 8007834:	4618      	mov	r0, r3
 8007836:	f003 fc7d 	bl	800b134 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800783a:	2004      	movs	r0, #4
 800783c:	f003 fc5a 	bl	800b0f4 <HAL_MPU_Enable>

}
 8007840:	bf00      	nop
 8007842:	3710      	adds	r7, #16
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}

08007848 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007848:	b480      	push	{r7}
 800784a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800784c:	b672      	cpsid	i
}
 800784e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007850:	bf00      	nop
 8007852:	e7fd      	b.n	8007850 <Error_Handler+0x8>

08007854 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi6;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8007858:	4b27      	ldr	r3, [pc, #156]	@ (80078f8 <MX_SPI2_Init+0xa4>)
 800785a:	4a28      	ldr	r2, [pc, #160]	@ (80078fc <MX_SPI2_Init+0xa8>)
 800785c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800785e:	4b26      	ldr	r3, [pc, #152]	@ (80078f8 <MX_SPI2_Init+0xa4>)
 8007860:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8007864:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8007866:	4b24      	ldr	r3, [pc, #144]	@ (80078f8 <MX_SPI2_Init+0xa4>)
 8007868:	2200      	movs	r2, #0
 800786a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800786c:	4b22      	ldr	r3, [pc, #136]	@ (80078f8 <MX_SPI2_Init+0xa4>)
 800786e:	2207      	movs	r2, #7
 8007870:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007872:	4b21      	ldr	r3, [pc, #132]	@ (80078f8 <MX_SPI2_Init+0xa4>)
 8007874:	2200      	movs	r2, #0
 8007876:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007878:	4b1f      	ldr	r3, [pc, #124]	@ (80078f8 <MX_SPI2_Init+0xa4>)
 800787a:	2200      	movs	r2, #0
 800787c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800787e:	4b1e      	ldr	r3, [pc, #120]	@ (80078f8 <MX_SPI2_Init+0xa4>)
 8007880:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8007884:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007886:	4b1c      	ldr	r3, [pc, #112]	@ (80078f8 <MX_SPI2_Init+0xa4>)
 8007888:	2200      	movs	r2, #0
 800788a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800788c:	4b1a      	ldr	r3, [pc, #104]	@ (80078f8 <MX_SPI2_Init+0xa4>)
 800788e:	2200      	movs	r2, #0
 8007890:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8007892:	4b19      	ldr	r3, [pc, #100]	@ (80078f8 <MX_SPI2_Init+0xa4>)
 8007894:	2200      	movs	r2, #0
 8007896:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007898:	4b17      	ldr	r3, [pc, #92]	@ (80078f8 <MX_SPI2_Init+0xa4>)
 800789a:	2200      	movs	r2, #0
 800789c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 800789e:	4b16      	ldr	r3, [pc, #88]	@ (80078f8 <MX_SPI2_Init+0xa4>)
 80078a0:	2200      	movs	r2, #0
 80078a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80078a4:	4b14      	ldr	r3, [pc, #80]	@ (80078f8 <MX_SPI2_Init+0xa4>)
 80078a6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80078aa:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80078ac:	4b12      	ldr	r3, [pc, #72]	@ (80078f8 <MX_SPI2_Init+0xa4>)
 80078ae:	2200      	movs	r2, #0
 80078b0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80078b2:	4b11      	ldr	r3, [pc, #68]	@ (80078f8 <MX_SPI2_Init+0xa4>)
 80078b4:	2200      	movs	r2, #0
 80078b6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80078b8:	4b0f      	ldr	r3, [pc, #60]	@ (80078f8 <MX_SPI2_Init+0xa4>)
 80078ba:	2200      	movs	r2, #0
 80078bc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80078be:	4b0e      	ldr	r3, [pc, #56]	@ (80078f8 <MX_SPI2_Init+0xa4>)
 80078c0:	2200      	movs	r2, #0
 80078c2:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80078c4:	4b0c      	ldr	r3, [pc, #48]	@ (80078f8 <MX_SPI2_Init+0xa4>)
 80078c6:	2200      	movs	r2, #0
 80078c8:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80078ca:	4b0b      	ldr	r3, [pc, #44]	@ (80078f8 <MX_SPI2_Init+0xa4>)
 80078cc:	2200      	movs	r2, #0
 80078ce:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80078d0:	4b09      	ldr	r3, [pc, #36]	@ (80078f8 <MX_SPI2_Init+0xa4>)
 80078d2:	2200      	movs	r2, #0
 80078d4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80078d6:	4b08      	ldr	r3, [pc, #32]	@ (80078f8 <MX_SPI2_Init+0xa4>)
 80078d8:	2200      	movs	r2, #0
 80078da:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80078dc:	4b06      	ldr	r3, [pc, #24]	@ (80078f8 <MX_SPI2_Init+0xa4>)
 80078de:	2200      	movs	r2, #0
 80078e0:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80078e2:	4805      	ldr	r0, [pc, #20]	@ (80078f8 <MX_SPI2_Init+0xa4>)
 80078e4:	f00c fcb0 	bl	8014248 <HAL_SPI_Init>
 80078e8:	4603      	mov	r3, r0
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d001      	beq.n	80078f2 <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 80078ee:	f7ff ffab 	bl	8007848 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80078f2:	bf00      	nop
 80078f4:	bd80      	pop	{r7, pc}
 80078f6:	bf00      	nop
 80078f8:	240001ec 	.word	0x240001ec
 80078fc:	40003800 	.word	0x40003800

08007900 <MX_SPI6_Init>:
/* SPI6 init function */
void MX_SPI6_Init(void)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	af00      	add	r7, sp, #0
  /* USER CODE END SPI6_Init 0 */

  /* USER CODE BEGIN SPI6_Init 1 */

  /* USER CODE END SPI6_Init 1 */
  hspi6.Instance = SPI6;
 8007904:	4b27      	ldr	r3, [pc, #156]	@ (80079a4 <MX_SPI6_Init+0xa4>)
 8007906:	4a28      	ldr	r2, [pc, #160]	@ (80079a8 <MX_SPI6_Init+0xa8>)
 8007908:	601a      	str	r2, [r3, #0]
  hspi6.Init.Mode = SPI_MODE_MASTER;
 800790a:	4b26      	ldr	r3, [pc, #152]	@ (80079a4 <MX_SPI6_Init+0xa4>)
 800790c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8007910:	605a      	str	r2, [r3, #4]
  hspi6.Init.Direction = SPI_DIRECTION_2LINES;
 8007912:	4b24      	ldr	r3, [pc, #144]	@ (80079a4 <MX_SPI6_Init+0xa4>)
 8007914:	2200      	movs	r2, #0
 8007916:	609a      	str	r2, [r3, #8]
  hspi6.Init.DataSize = SPI_DATASIZE_8BIT;
 8007918:	4b22      	ldr	r3, [pc, #136]	@ (80079a4 <MX_SPI6_Init+0xa4>)
 800791a:	2207      	movs	r2, #7
 800791c:	60da      	str	r2, [r3, #12]
  hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
 800791e:	4b21      	ldr	r3, [pc, #132]	@ (80079a4 <MX_SPI6_Init+0xa4>)
 8007920:	2200      	movs	r2, #0
 8007922:	611a      	str	r2, [r3, #16]
  hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007924:	4b1f      	ldr	r3, [pc, #124]	@ (80079a4 <MX_SPI6_Init+0xa4>)
 8007926:	2200      	movs	r2, #0
 8007928:	615a      	str	r2, [r3, #20]
  hspi6.Init.NSS = SPI_NSS_SOFT;
 800792a:	4b1e      	ldr	r3, [pc, #120]	@ (80079a4 <MX_SPI6_Init+0xa4>)
 800792c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8007930:	619a      	str	r2, [r3, #24]
  hspi6.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007932:	4b1c      	ldr	r3, [pc, #112]	@ (80079a4 <MX_SPI6_Init+0xa4>)
 8007934:	2200      	movs	r2, #0
 8007936:	61da      	str	r2, [r3, #28]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007938:	4b1a      	ldr	r3, [pc, #104]	@ (80079a4 <MX_SPI6_Init+0xa4>)
 800793a:	2200      	movs	r2, #0
 800793c:	621a      	str	r2, [r3, #32]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
 800793e:	4b19      	ldr	r3, [pc, #100]	@ (80079a4 <MX_SPI6_Init+0xa4>)
 8007940:	2200      	movs	r2, #0
 8007942:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007944:	4b17      	ldr	r3, [pc, #92]	@ (80079a4 <MX_SPI6_Init+0xa4>)
 8007946:	2200      	movs	r2, #0
 8007948:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi6.Init.CRCPolynomial = 0x0;
 800794a:	4b16      	ldr	r3, [pc, #88]	@ (80079a4 <MX_SPI6_Init+0xa4>)
 800794c:	2200      	movs	r2, #0
 800794e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi6.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8007950:	4b14      	ldr	r3, [pc, #80]	@ (80079a4 <MX_SPI6_Init+0xa4>)
 8007952:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8007956:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi6.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8007958:	4b12      	ldr	r3, [pc, #72]	@ (80079a4 <MX_SPI6_Init+0xa4>)
 800795a:	2200      	movs	r2, #0
 800795c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi6.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800795e:	4b11      	ldr	r3, [pc, #68]	@ (80079a4 <MX_SPI6_Init+0xa4>)
 8007960:	2200      	movs	r2, #0
 8007962:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi6.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8007964:	4b0f      	ldr	r3, [pc, #60]	@ (80079a4 <MX_SPI6_Init+0xa4>)
 8007966:	2200      	movs	r2, #0
 8007968:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi6.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800796a:	4b0e      	ldr	r3, [pc, #56]	@ (80079a4 <MX_SPI6_Init+0xa4>)
 800796c:	2200      	movs	r2, #0
 800796e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi6.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8007970:	4b0c      	ldr	r3, [pc, #48]	@ (80079a4 <MX_SPI6_Init+0xa4>)
 8007972:	2200      	movs	r2, #0
 8007974:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi6.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8007976:	4b0b      	ldr	r3, [pc, #44]	@ (80079a4 <MX_SPI6_Init+0xa4>)
 8007978:	2200      	movs	r2, #0
 800797a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi6.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800797c:	4b09      	ldr	r3, [pc, #36]	@ (80079a4 <MX_SPI6_Init+0xa4>)
 800797e:	2200      	movs	r2, #0
 8007980:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi6.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8007982:	4b08      	ldr	r3, [pc, #32]	@ (80079a4 <MX_SPI6_Init+0xa4>)
 8007984:	2200      	movs	r2, #0
 8007986:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi6.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8007988:	4b06      	ldr	r3, [pc, #24]	@ (80079a4 <MX_SPI6_Init+0xa4>)
 800798a:	2200      	movs	r2, #0
 800798c:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
 800798e:	4805      	ldr	r0, [pc, #20]	@ (80079a4 <MX_SPI6_Init+0xa4>)
 8007990:	f00c fc5a 	bl	8014248 <HAL_SPI_Init>
 8007994:	4603      	mov	r3, r0
 8007996:	2b00      	cmp	r3, #0
 8007998:	d001      	beq.n	800799e <MX_SPI6_Init+0x9e>
  {
    Error_Handler();
 800799a:	f7ff ff55 	bl	8007848 <Error_Handler>
  }
  /* USER CODE BEGIN SPI6_Init 2 */

  /* USER CODE END SPI6_Init 2 */

}
 800799e:	bf00      	nop
 80079a0:	bd80      	pop	{r7, pc}
 80079a2:	bf00      	nop
 80079a4:	24000274 	.word	0x24000274
 80079a8:	58001400 	.word	0x58001400

080079ac <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b0ba      	sub	sp, #232	@ 0xe8
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80079b4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80079b8:	2200      	movs	r2, #0
 80079ba:	601a      	str	r2, [r3, #0]
 80079bc:	605a      	str	r2, [r3, #4]
 80079be:	609a      	str	r2, [r3, #8]
 80079c0:	60da      	str	r2, [r3, #12]
 80079c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80079c4:	f107 0318 	add.w	r3, r7, #24
 80079c8:	22b8      	movs	r2, #184	@ 0xb8
 80079ca:	2100      	movs	r1, #0
 80079cc:	4618      	mov	r0, r3
 80079ce:	f016 f87d 	bl	801dacc <memset>
  if(spiHandle->Instance==SPI2)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4a77      	ldr	r2, [pc, #476]	@ (8007bb4 <HAL_SPI_MspInit+0x208>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	f040 8089 	bne.w	8007af0 <HAL_SPI_MspInit+0x144>
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80079de:	4b76      	ldr	r3, [pc, #472]	@ (8007bb8 <HAL_SPI_MspInit+0x20c>)
 80079e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80079e4:	4a74      	ldr	r2, [pc, #464]	@ (8007bb8 <HAL_SPI_MspInit+0x20c>)
 80079e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80079ea:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80079ee:	4b72      	ldr	r3, [pc, #456]	@ (8007bb8 <HAL_SPI_MspInit+0x20c>)
 80079f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80079f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80079f8:	617b      	str	r3, [r7, #20]
 80079fa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80079fc:	4b6e      	ldr	r3, [pc, #440]	@ (8007bb8 <HAL_SPI_MspInit+0x20c>)
 80079fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007a02:	4a6d      	ldr	r2, [pc, #436]	@ (8007bb8 <HAL_SPI_MspInit+0x20c>)
 8007a04:	f043 0302 	orr.w	r3, r3, #2
 8007a08:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007a0c:	4b6a      	ldr	r3, [pc, #424]	@ (8007bb8 <HAL_SPI_MspInit+0x20c>)
 8007a0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007a12:	f003 0302 	and.w	r3, r3, #2
 8007a16:	613b      	str	r3, [r7, #16]
 8007a18:	693b      	ldr	r3, [r7, #16]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8007a1a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007a1e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a22:	2302      	movs	r3, #2
 8007a24:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a28:	2300      	movs	r3, #0
 8007a2a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8007a2e:	2301      	movs	r3, #1
 8007a30:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007a34:	2305      	movs	r3, #5
 8007a36:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007a3a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8007a3e:	4619      	mov	r1, r3
 8007a40:	485e      	ldr	r0, [pc, #376]	@ (8007bbc <HAL_SPI_MspInit+0x210>)
 8007a42:	f006 fa09 	bl	800de58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8007a46:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8007a4a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a4e:	2302      	movs	r3, #2
 8007a50:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007a54:	2301      	movs	r3, #1
 8007a56:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007a60:	2305      	movs	r3, #5
 8007a62:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007a66:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8007a6a:	4619      	mov	r1, r3
 8007a6c:	4853      	ldr	r0, [pc, #332]	@ (8007bbc <HAL_SPI_MspInit+0x210>)
 8007a6e:	f006 f9f3 	bl	800de58 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream0;
 8007a72:	4b53      	ldr	r3, [pc, #332]	@ (8007bc0 <HAL_SPI_MspInit+0x214>)
 8007a74:	4a53      	ldr	r2, [pc, #332]	@ (8007bc4 <HAL_SPI_MspInit+0x218>)
 8007a76:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8007a78:	4b51      	ldr	r3, [pc, #324]	@ (8007bc0 <HAL_SPI_MspInit+0x214>)
 8007a7a:	2228      	movs	r2, #40	@ 0x28
 8007a7c:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007a7e:	4b50      	ldr	r3, [pc, #320]	@ (8007bc0 <HAL_SPI_MspInit+0x214>)
 8007a80:	2240      	movs	r2, #64	@ 0x40
 8007a82:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007a84:	4b4e      	ldr	r3, [pc, #312]	@ (8007bc0 <HAL_SPI_MspInit+0x214>)
 8007a86:	2200      	movs	r2, #0
 8007a88:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007a8a:	4b4d      	ldr	r3, [pc, #308]	@ (8007bc0 <HAL_SPI_MspInit+0x214>)
 8007a8c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007a90:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007a92:	4b4b      	ldr	r3, [pc, #300]	@ (8007bc0 <HAL_SPI_MspInit+0x214>)
 8007a94:	2200      	movs	r2, #0
 8007a96:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007a98:	4b49      	ldr	r3, [pc, #292]	@ (8007bc0 <HAL_SPI_MspInit+0x214>)
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8007a9e:	4b48      	ldr	r3, [pc, #288]	@ (8007bc0 <HAL_SPI_MspInit+0x214>)
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007aa4:	4b46      	ldr	r3, [pc, #280]	@ (8007bc0 <HAL_SPI_MspInit+0x214>)
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8007aaa:	4b45      	ldr	r3, [pc, #276]	@ (8007bc0 <HAL_SPI_MspInit+0x214>)
 8007aac:	2204      	movs	r2, #4
 8007aae:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_spi2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8007ab0:	4b43      	ldr	r3, [pc, #268]	@ (8007bc0 <HAL_SPI_MspInit+0x214>)
 8007ab2:	2203      	movs	r2, #3
 8007ab4:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_spi2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8007ab6:	4b42      	ldr	r3, [pc, #264]	@ (8007bc0 <HAL_SPI_MspInit+0x214>)
 8007ab8:	2200      	movs	r2, #0
 8007aba:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_spi2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8007abc:	4b40      	ldr	r3, [pc, #256]	@ (8007bc0 <HAL_SPI_MspInit+0x214>)
 8007abe:	2200      	movs	r2, #0
 8007ac0:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8007ac2:	483f      	ldr	r0, [pc, #252]	@ (8007bc0 <HAL_SPI_MspInit+0x214>)
 8007ac4:	f003 fb76 	bl	800b1b4 <HAL_DMA_Init>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d001      	beq.n	8007ad2 <HAL_SPI_MspInit+0x126>
    {
      Error_Handler();
 8007ace:	f7ff febb 	bl	8007848 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	4a3a      	ldr	r2, [pc, #232]	@ (8007bc0 <HAL_SPI_MspInit+0x214>)
 8007ad6:	679a      	str	r2, [r3, #120]	@ 0x78
 8007ad8:	4a39      	ldr	r2, [pc, #228]	@ (8007bc0 <HAL_SPI_MspInit+0x214>)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8007ade:	2200      	movs	r2, #0
 8007ae0:	2100      	movs	r1, #0
 8007ae2:	2024      	movs	r0, #36	@ 0x24
 8007ae4:	f003 fab9 	bl	800b05a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8007ae8:	2024      	movs	r0, #36	@ 0x24
 8007aea:	f003 fad0 	bl	800b08e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }
}
 8007aee:	e05c      	b.n	8007baa <HAL_SPI_MspInit+0x1fe>
  else if(spiHandle->Instance==SPI6)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	4a34      	ldr	r2, [pc, #208]	@ (8007bc8 <HAL_SPI_MspInit+0x21c>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d157      	bne.n	8007baa <HAL_SPI_MspInit+0x1fe>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI6;
 8007afa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8007afe:	f04f 0300 	mov.w	r3, #0
 8007b02:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 24;
 8007b06:	2318      	movs	r3, #24
 8007b08:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3N = 200;
 8007b0a:	23c8      	movs	r3, #200	@ 0xc8
 8007b0c:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3P = 1;
 8007b0e:	2301      	movs	r3, #1
 8007b10:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3Q = 10;
 8007b12:	230a      	movs	r3, #10
 8007b14:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8007b16:	2302      	movs	r3, #2
 8007b18:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8007b1e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007b22:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8007b24:	2300      	movs	r3, #0
 8007b26:	65fb      	str	r3, [r7, #92]	@ 0x5c
    PeriphClkInitStruct.Spi6ClockSelection = RCC_SPI6CLKSOURCE_PLL3;
 8007b28:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8007b2c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007b30:	f107 0318 	add.w	r3, r7, #24
 8007b34:	4618      	mov	r0, r3
 8007b36:	f009 ffa1 	bl	8011a7c <HAL_RCCEx_PeriphCLKConfig>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d001      	beq.n	8007b44 <HAL_SPI_MspInit+0x198>
      Error_Handler();
 8007b40:	f7ff fe82 	bl	8007848 <Error_Handler>
    __HAL_RCC_SPI6_CLK_ENABLE();
 8007b44:	4b1c      	ldr	r3, [pc, #112]	@ (8007bb8 <HAL_SPI_MspInit+0x20c>)
 8007b46:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007b4a:	4a1b      	ldr	r2, [pc, #108]	@ (8007bb8 <HAL_SPI_MspInit+0x20c>)
 8007b4c:	f043 0320 	orr.w	r3, r3, #32
 8007b50:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8007b54:	4b18      	ldr	r3, [pc, #96]	@ (8007bb8 <HAL_SPI_MspInit+0x20c>)
 8007b56:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007b5a:	f003 0320 	and.w	r3, r3, #32
 8007b5e:	60fb      	str	r3, [r7, #12]
 8007b60:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007b62:	4b15      	ldr	r3, [pc, #84]	@ (8007bb8 <HAL_SPI_MspInit+0x20c>)
 8007b64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007b68:	4a13      	ldr	r2, [pc, #76]	@ (8007bb8 <HAL_SPI_MspInit+0x20c>)
 8007b6a:	f043 0302 	orr.w	r3, r3, #2
 8007b6e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007b72:	4b11      	ldr	r3, [pc, #68]	@ (8007bb8 <HAL_SPI_MspInit+0x20c>)
 8007b74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007b78:	f003 0302 	and.w	r3, r3, #2
 8007b7c:	60bb      	str	r3, [r7, #8]
 8007b7e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8007b80:	2338      	movs	r3, #56	@ 0x38
 8007b82:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b86:	2302      	movs	r3, #2
 8007b88:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007b92:	2300      	movs	r3, #0
 8007b94:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
 8007b98:	2308      	movs	r3, #8
 8007b9a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007b9e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8007ba2:	4619      	mov	r1, r3
 8007ba4:	4805      	ldr	r0, [pc, #20]	@ (8007bbc <HAL_SPI_MspInit+0x210>)
 8007ba6:	f006 f957 	bl	800de58 <HAL_GPIO_Init>
}
 8007baa:	bf00      	nop
 8007bac:	37e8      	adds	r7, #232	@ 0xe8
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}
 8007bb2:	bf00      	nop
 8007bb4:	40003800 	.word	0x40003800
 8007bb8:	58024400 	.word	0x58024400
 8007bbc:	58020400 	.word	0x58020400
 8007bc0:	240002fc 	.word	0x240002fc
 8007bc4:	40020010 	.word	0x40020010
 8007bc8:	58001400 	.word	0x58001400

08007bcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007bcc:	b480      	push	{r7}
 8007bce:	b083      	sub	sp, #12
 8007bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007bd2:	4b0a      	ldr	r3, [pc, #40]	@ (8007bfc <HAL_MspInit+0x30>)
 8007bd4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007bd8:	4a08      	ldr	r2, [pc, #32]	@ (8007bfc <HAL_MspInit+0x30>)
 8007bda:	f043 0302 	orr.w	r3, r3, #2
 8007bde:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8007be2:	4b06      	ldr	r3, [pc, #24]	@ (8007bfc <HAL_MspInit+0x30>)
 8007be4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007be8:	f003 0302 	and.w	r3, r3, #2
 8007bec:	607b      	str	r3, [r7, #4]
 8007bee:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007bf0:	bf00      	nop
 8007bf2:	370c      	adds	r7, #12
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfa:	4770      	bx	lr
 8007bfc:	58024400 	.word	0x58024400

08007c00 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint32_t FatFsCnt = 0;
volatile uint32_t Timer1, Timer2;

void SDTimer_Handler(void)//1ms
{
 8007c00:	b480      	push	{r7}
 8007c02:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8007c04:	4b0b      	ldr	r3, [pc, #44]	@ (8007c34 <SDTimer_Handler+0x34>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d004      	beq.n	8007c16 <SDTimer_Handler+0x16>
    Timer1--;
 8007c0c:	4b09      	ldr	r3, [pc, #36]	@ (8007c34 <SDTimer_Handler+0x34>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	3b01      	subs	r3, #1
 8007c12:	4a08      	ldr	r2, [pc, #32]	@ (8007c34 <SDTimer_Handler+0x34>)
 8007c14:	6013      	str	r3, [r2, #0]

  if(Timer2 > 0)
 8007c16:	4b08      	ldr	r3, [pc, #32]	@ (8007c38 <SDTimer_Handler+0x38>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d004      	beq.n	8007c28 <SDTimer_Handler+0x28>
    Timer2--;
 8007c1e:	4b06      	ldr	r3, [pc, #24]	@ (8007c38 <SDTimer_Handler+0x38>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	3b01      	subs	r3, #1
 8007c24:	4a04      	ldr	r2, [pc, #16]	@ (8007c38 <SDTimer_Handler+0x38>)
 8007c26:	6013      	str	r3, [r2, #0]
}
 8007c28:	bf00      	nop
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c30:	4770      	bx	lr
 8007c32:	bf00      	nop
 8007c34:	24000378 	.word	0x24000378
 8007c38:	2400037c 	.word	0x2400037c
 8007c3c:	00000000 	.word	0x00000000

08007c40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b082      	sub	sp, #8
 8007c44:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */


	LED_G_0;
 8007c46:	2200      	movs	r2, #0
 8007c48:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007c4c:	48bc      	ldr	r0, [pc, #752]	@ (8007f40 <NMI_Handler+0x300>)
 8007c4e:	f006 fac3 	bl	800e1d8 <HAL_GPIO_WritePin>
	LED_Y_0;
 8007c52:	2200      	movs	r2, #0
 8007c54:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007c58:	48ba      	ldr	r0, [pc, #744]	@ (8007f44 <NMI_Handler+0x304>)
 8007c5a:	f006 fabd 	bl	800e1d8 <HAL_GPIO_WritePin>
	LED_R_1;
 8007c5e:	2201      	movs	r2, #1
 8007c60:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8007c64:	48b7      	ldr	r0, [pc, #732]	@ (8007f44 <NMI_Handler+0x304>)
 8007c66:	f006 fab7 	bl	800e1d8 <HAL_GPIO_WritePin>
//todo create crash log
	f_close(&fil);
 8007c6a:	48b7      	ldr	r0, [pc, #732]	@ (8007f48 <NMI_Handler+0x308>)
 8007c6c:	f015 fd36 	bl	801d6dc <f_close>

	wanted_rool = 0;
 8007c70:	4bb6      	ldr	r3, [pc, #728]	@ (8007f4c <NMI_Handler+0x30c>)
 8007c72:	f04f 0200 	mov.w	r2, #0
 8007c76:	601a      	str	r2, [r3, #0]
	wanted_pitch = 0;
 8007c78:	4bb5      	ldr	r3, [pc, #724]	@ (8007f50 <NMI_Handler+0x310>)
 8007c7a:	f04f 0200 	mov.w	r2, #0
 8007c7e:	601a      	str	r2, [r3, #0]
	wanted_yaw = 0;
 8007c80:	4bb4      	ldr	r3, [pc, #720]	@ (8007f54 <NMI_Handler+0x314>)
 8007c82:	f04f 0200 	mov.w	r2, #0
 8007c86:	601a      	str	r2, [r3, #0]
	wanted_thrust = DRON_SLOWFALING;
 8007c88:	4bb3      	ldr	r3, [pc, #716]	@ (8007f58 <NMI_Handler+0x318>)
 8007c8a:	881b      	ldrh	r3, [r3, #0]
 8007c8c:	b21a      	sxth	r2, r3
 8007c8e:	4bb3      	ldr	r3, [pc, #716]	@ (8007f5c <NMI_Handler+0x31c>)
 8007c90:	801a      	strh	r2, [r3, #0]
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
  {
	   	HAL_Delay(1);
 8007c92:	2001      	movs	r0, #1
 8007c94:	f001 f942 	bl	8008f1c <HAL_Delay>
		MPU6050_GET_ACCANDGYR_CALANDSCL(&ax, &ay, &az, &gx, &gy, &gz, accelx_cal, accely_cal, accelz_cal, gyrox_cal, gyroy_cal, gyroz_cal, Gyr_Scale, Acc_Scale);
 8007c98:	4bb1      	ldr	r3, [pc, #708]	@ (8007f60 <NMI_Handler+0x320>)
 8007c9a:	edd3 7a00 	vldr	s15, [r3]
 8007c9e:	4bb1      	ldr	r3, [pc, #708]	@ (8007f64 <NMI_Handler+0x324>)
 8007ca0:	ed93 7a00 	vldr	s14, [r3]
 8007ca4:	4bb0      	ldr	r3, [pc, #704]	@ (8007f68 <NMI_Handler+0x328>)
 8007ca6:	edd3 6a00 	vldr	s13, [r3]
 8007caa:	4bb0      	ldr	r3, [pc, #704]	@ (8007f6c <NMI_Handler+0x32c>)
 8007cac:	ed93 6a00 	vldr	s12, [r3]
 8007cb0:	4baf      	ldr	r3, [pc, #700]	@ (8007f70 <NMI_Handler+0x330>)
 8007cb2:	edd3 5a00 	vldr	s11, [r3]
 8007cb6:	4baf      	ldr	r3, [pc, #700]	@ (8007f74 <NMI_Handler+0x334>)
 8007cb8:	ed93 5a00 	vldr	s10, [r3]
 8007cbc:	4bae      	ldr	r3, [pc, #696]	@ (8007f78 <NMI_Handler+0x338>)
 8007cbe:	edd3 4a00 	vldr	s9, [r3]
 8007cc2:	4bae      	ldr	r3, [pc, #696]	@ (8007f7c <NMI_Handler+0x33c>)
 8007cc4:	ed93 4a00 	vldr	s8, [r3]
 8007cc8:	4bad      	ldr	r3, [pc, #692]	@ (8007f80 <NMI_Handler+0x340>)
 8007cca:	9301      	str	r3, [sp, #4]
 8007ccc:	4bad      	ldr	r3, [pc, #692]	@ (8007f84 <NMI_Handler+0x344>)
 8007cce:	9300      	str	r3, [sp, #0]
 8007cd0:	eef0 3a44 	vmov.f32	s7, s8
 8007cd4:	eeb0 3a64 	vmov.f32	s6, s9
 8007cd8:	eef0 2a45 	vmov.f32	s5, s10
 8007cdc:	eeb0 2a65 	vmov.f32	s4, s11
 8007ce0:	eef0 1a46 	vmov.f32	s3, s12
 8007ce4:	eeb0 1a66 	vmov.f32	s2, s13
 8007ce8:	eef0 0a47 	vmov.f32	s1, s14
 8007cec:	eeb0 0a67 	vmov.f32	s0, s15
 8007cf0:	4ba5      	ldr	r3, [pc, #660]	@ (8007f88 <NMI_Handler+0x348>)
 8007cf2:	4aa6      	ldr	r2, [pc, #664]	@ (8007f8c <NMI_Handler+0x34c>)
 8007cf4:	49a6      	ldr	r1, [pc, #664]	@ (8007f90 <NMI_Handler+0x350>)
 8007cf6:	48a7      	ldr	r0, [pc, #668]	@ (8007f94 <NMI_Handler+0x354>)
 8007cf8:	f7f9 fc74 	bl	80015e4 <MPU6050_GET_ACCANDGYR_CALANDSCL>
		MPU6050_GET_ACCEL_TO_ANGLE(ax, ay, az, &ax_ang, &ay_ang/*, &az_ang*/);
 8007cfc:	4ba5      	ldr	r3, [pc, #660]	@ (8007f94 <NMI_Handler+0x354>)
 8007cfe:	edd3 7a00 	vldr	s15, [r3]
 8007d02:	4ba3      	ldr	r3, [pc, #652]	@ (8007f90 <NMI_Handler+0x350>)
 8007d04:	ed93 7a00 	vldr	s14, [r3]
 8007d08:	4ba0      	ldr	r3, [pc, #640]	@ (8007f8c <NMI_Handler+0x34c>)
 8007d0a:	edd3 6a00 	vldr	s13, [r3]
 8007d0e:	49a2      	ldr	r1, [pc, #648]	@ (8007f98 <NMI_Handler+0x358>)
 8007d10:	48a2      	ldr	r0, [pc, #648]	@ (8007f9c <NMI_Handler+0x35c>)
 8007d12:	eeb0 1a66 	vmov.f32	s2, s13
 8007d16:	eef0 0a47 	vmov.f32	s1, s14
 8007d1a:	eeb0 0a67 	vmov.f32	s0, s15
 8007d1e:	f7f9 fbe3 	bl	80014e8 <MPU6050_GET_ACCEL_TO_ANGLE>
		MPU6050_GET_ACCANDGYR_FILTRED(&data, ax_ang, ay_ang, Mag_Z, gx, gy, gz);
 8007d22:	4b9e      	ldr	r3, [pc, #632]	@ (8007f9c <NMI_Handler+0x35c>)
 8007d24:	edd3 7a00 	vldr	s15, [r3]
 8007d28:	4b9b      	ldr	r3, [pc, #620]	@ (8007f98 <NMI_Handler+0x358>)
 8007d2a:	ed93 7a00 	vldr	s14, [r3]
 8007d2e:	4b9c      	ldr	r3, [pc, #624]	@ (8007fa0 <NMI_Handler+0x360>)
 8007d30:	edd3 6a00 	vldr	s13, [r3]
 8007d34:	4b94      	ldr	r3, [pc, #592]	@ (8007f88 <NMI_Handler+0x348>)
 8007d36:	ed93 6a00 	vldr	s12, [r3]
 8007d3a:	4b92      	ldr	r3, [pc, #584]	@ (8007f84 <NMI_Handler+0x344>)
 8007d3c:	edd3 5a00 	vldr	s11, [r3]
 8007d40:	4b8f      	ldr	r3, [pc, #572]	@ (8007f80 <NMI_Handler+0x340>)
 8007d42:	ed93 5a00 	vldr	s10, [r3]
 8007d46:	eef0 2a45 	vmov.f32	s5, s10
 8007d4a:	eeb0 2a65 	vmov.f32	s4, s11
 8007d4e:	eef0 1a46 	vmov.f32	s3, s12
 8007d52:	eeb0 1a66 	vmov.f32	s2, s13
 8007d56:	eef0 0a47 	vmov.f32	s1, s14
 8007d5a:	eeb0 0a67 	vmov.f32	s0, s15
 8007d5e:	4891      	ldr	r0, [pc, #580]	@ (8007fa4 <NMI_Handler+0x364>)
 8007d60:	f7f9 fdba 	bl	80018d8 <MPU6050_GET_ACCANDGYR_FILTRED>


		now_pitch = data.x;
 8007d64:	4b8f      	ldr	r3, [pc, #572]	@ (8007fa4 <NMI_Handler+0x364>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	4a8f      	ldr	r2, [pc, #572]	@ (8007fa8 <NMI_Handler+0x368>)
 8007d6a:	6013      	str	r3, [r2, #0]
		now_rool = data.y;
 8007d6c:	4b8d      	ldr	r3, [pc, #564]	@ (8007fa4 <NMI_Handler+0x364>)
 8007d6e:	685b      	ldr	r3, [r3, #4]
 8007d70:	4a8e      	ldr	r2, [pc, #568]	@ (8007fac <NMI_Handler+0x36c>)
 8007d72:	6013      	str	r3, [r2, #0]
		now_yaw = data.z;
 8007d74:	4b8b      	ldr	r3, [pc, #556]	@ (8007fa4 <NMI_Handler+0x364>)
 8007d76:	689b      	ldr	r3, [r3, #8]
 8007d78:	4a8d      	ldr	r2, [pc, #564]	@ (8007fb0 <NMI_Handler+0x370>)
 8007d7a:	6013      	str	r3, [r2, #0]


		last_wanted_rool_rx = wanted_rool;
 8007d7c:	4b73      	ldr	r3, [pc, #460]	@ (8007f4c <NMI_Handler+0x30c>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4a8c      	ldr	r2, [pc, #560]	@ (8007fb4 <NMI_Handler+0x374>)
 8007d82:	6013      	str	r3, [r2, #0]
		last_wanted_pitch_rx = wanted_pitch;
 8007d84:	4b72      	ldr	r3, [pc, #456]	@ (8007f50 <NMI_Handler+0x310>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	4a8b      	ldr	r2, [pc, #556]	@ (8007fb8 <NMI_Handler+0x378>)
 8007d8a:	6013      	str	r3, [r2, #0]
		last_wanted_yaw_rx = wanted_yaw;
 8007d8c:	4b71      	ldr	r3, [pc, #452]	@ (8007f54 <NMI_Handler+0x314>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4a8a      	ldr	r2, [pc, #552]	@ (8007fbc <NMI_Handler+0x37c>)
 8007d92:	6013      	str	r3, [r2, #0]


		error_sum_pitch = error_sum_pitch + (wanted_pitch - now_pitch);
 8007d94:	4b8a      	ldr	r3, [pc, #552]	@ (8007fc0 <NMI_Handler+0x380>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	ee07 3a90 	vmov	s15, r3
 8007d9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007da0:	4b6b      	ldr	r3, [pc, #428]	@ (8007f50 <NMI_Handler+0x310>)
 8007da2:	edd3 6a00 	vldr	s13, [r3]
 8007da6:	4b80      	ldr	r3, [pc, #512]	@ (8007fa8 <NMI_Handler+0x368>)
 8007da8:	edd3 7a00 	vldr	s15, [r3]
 8007dac:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8007db0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007db4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007db8:	ee17 2a90 	vmov	r2, s15
 8007dbc:	4b80      	ldr	r3, [pc, #512]	@ (8007fc0 <NMI_Handler+0x380>)
 8007dbe:	601a      	str	r2, [r3, #0]
		error_sum_rool = error_sum_rool + (wanted_rool - now_rool);
 8007dc0:	4b80      	ldr	r3, [pc, #512]	@ (8007fc4 <NMI_Handler+0x384>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	ee07 3a90 	vmov	s15, r3
 8007dc8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007dcc:	4b5f      	ldr	r3, [pc, #380]	@ (8007f4c <NMI_Handler+0x30c>)
 8007dce:	edd3 6a00 	vldr	s13, [r3]
 8007dd2:	4b76      	ldr	r3, [pc, #472]	@ (8007fac <NMI_Handler+0x36c>)
 8007dd4:	edd3 7a00 	vldr	s15, [r3]
 8007dd8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8007ddc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007de0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007de4:	ee17 2a90 	vmov	r2, s15
 8007de8:	4b76      	ldr	r3, [pc, #472]	@ (8007fc4 <NMI_Handler+0x384>)
 8007dea:	601a      	str	r2, [r3, #0]
		error_sum_yaw = error_sum_yaw + (wanted_yaw - now_yaw);
 8007dec:	4b76      	ldr	r3, [pc, #472]	@ (8007fc8 <NMI_Handler+0x388>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	ee07 3a90 	vmov	s15, r3
 8007df4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007df8:	4b56      	ldr	r3, [pc, #344]	@ (8007f54 <NMI_Handler+0x314>)
 8007dfa:	edd3 6a00 	vldr	s13, [r3]
 8007dfe:	4b6c      	ldr	r3, [pc, #432]	@ (8007fb0 <NMI_Handler+0x370>)
 8007e00:	edd3 7a00 	vldr	s15, [r3]
 8007e04:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8007e08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007e0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007e10:	ee17 2a90 	vmov	r2, s15
 8007e14:	4b6c      	ldr	r3, [pc, #432]	@ (8007fc8 <NMI_Handler+0x388>)
 8007e16:	601a      	str	r2, [r3, #0]

		error_sum_angular_rate_pitch = error_sum_angular_rate_pitch + (pid_pitch - gx);
 8007e18:	4b6c      	ldr	r3, [pc, #432]	@ (8007fcc <NMI_Handler+0x38c>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	ee07 3a90 	vmov	s15, r3
 8007e20:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007e24:	4b6a      	ldr	r3, [pc, #424]	@ (8007fd0 <NMI_Handler+0x390>)
 8007e26:	edd3 6a00 	vldr	s13, [r3]
 8007e2a:	4b57      	ldr	r3, [pc, #348]	@ (8007f88 <NMI_Handler+0x348>)
 8007e2c:	edd3 7a00 	vldr	s15, [r3]
 8007e30:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8007e34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007e38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007e3c:	ee17 2a90 	vmov	r2, s15
 8007e40:	4b62      	ldr	r3, [pc, #392]	@ (8007fcc <NMI_Handler+0x38c>)
 8007e42:	601a      	str	r2, [r3, #0]
		error_sum_angular_rate_rool = error_sum_angular_rate_rool + (pid_rool - gy);
 8007e44:	4b63      	ldr	r3, [pc, #396]	@ (8007fd4 <NMI_Handler+0x394>)
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	ee07 3a90 	vmov	s15, r3
 8007e4c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007e50:	4b61      	ldr	r3, [pc, #388]	@ (8007fd8 <NMI_Handler+0x398>)
 8007e52:	edd3 6a00 	vldr	s13, [r3]
 8007e56:	4b4b      	ldr	r3, [pc, #300]	@ (8007f84 <NMI_Handler+0x344>)
 8007e58:	edd3 7a00 	vldr	s15, [r3]
 8007e5c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8007e60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007e64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007e68:	ee17 2a90 	vmov	r2, s15
 8007e6c:	4b59      	ldr	r3, [pc, #356]	@ (8007fd4 <NMI_Handler+0x394>)
 8007e6e:	601a      	str	r2, [r3, #0]
		error_sum_angular_rate_yaw = error_sum_angular_rate_yaw + (pid_yaw - gz);
 8007e70:	4b5a      	ldr	r3, [pc, #360]	@ (8007fdc <NMI_Handler+0x39c>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	ee07 3a90 	vmov	s15, r3
 8007e78:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007e7c:	4b58      	ldr	r3, [pc, #352]	@ (8007fe0 <NMI_Handler+0x3a0>)
 8007e7e:	edd3 6a00 	vldr	s13, [r3]
 8007e82:	4b3f      	ldr	r3, [pc, #252]	@ (8007f80 <NMI_Handler+0x340>)
 8007e84:	edd3 7a00 	vldr	s15, [r3]
 8007e88:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8007e8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007e90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007e94:	ee17 2a90 	vmov	r2, s15
 8007e98:	4b50      	ldr	r3, [pc, #320]	@ (8007fdc <NMI_Handler+0x39c>)
 8007e9a:	601a      	str	r2, [r3, #0]


		PID_cal(&pid_pitch, PID_FAC_Pitch, 1);// angle control
 8007e9c:	2201      	movs	r2, #1
 8007e9e:	4951      	ldr	r1, [pc, #324]	@ (8007fe4 <NMI_Handler+0x3a4>)
 8007ea0:	484b      	ldr	r0, [pc, #300]	@ (8007fd0 <NMI_Handler+0x390>)
 8007ea2:	f7fb fea5 	bl	8003bf0 <PID_cal>
		PID_cal(&pid_rool, PID_FAC_Rool, 2);
 8007ea6:	2202      	movs	r2, #2
 8007ea8:	494f      	ldr	r1, [pc, #316]	@ (8007fe8 <NMI_Handler+0x3a8>)
 8007eaa:	484b      	ldr	r0, [pc, #300]	@ (8007fd8 <NMI_Handler+0x398>)
 8007eac:	f7fb fea0 	bl	8003bf0 <PID_cal>

		PID_cal(&pid_angular_rate_pitch, PID_FAC_Angular_Rate_Pitch, 4);// angle rate control
 8007eb0:	2204      	movs	r2, #4
 8007eb2:	494e      	ldr	r1, [pc, #312]	@ (8007fec <NMI_Handler+0x3ac>)
 8007eb4:	484e      	ldr	r0, [pc, #312]	@ (8007ff0 <NMI_Handler+0x3b0>)
 8007eb6:	f7fb fe9b 	bl	8003bf0 <PID_cal>
		PID_cal(&pid_angular_rate_rool, PID_FAC_Angular_Rate_Rool, 5);
 8007eba:	2205      	movs	r2, #5
 8007ebc:	494d      	ldr	r1, [pc, #308]	@ (8007ff4 <NMI_Handler+0x3b4>)
 8007ebe:	484e      	ldr	r0, [pc, #312]	@ (8007ff8 <NMI_Handler+0x3b8>)
 8007ec0:	f7fb fe96 	bl	8003bf0 <PID_cal>
		PID_cal(&pid_angular_rate_yaw, PID_FAC_Angular_Rate_Yaw, 6);
 8007ec4:	2206      	movs	r2, #6
 8007ec6:	494d      	ldr	r1, [pc, #308]	@ (8007ffc <NMI_Handler+0x3bc>)
 8007ec8:	484d      	ldr	r0, [pc, #308]	@ (8008000 <NMI_Handler+0x3c0>)
 8007eca:	f7fb fe91 	bl	8003bf0 <PID_cal>


		old_error_pitch = wanted_pitch - now_pitch;
 8007ece:	4b20      	ldr	r3, [pc, #128]	@ (8007f50 <NMI_Handler+0x310>)
 8007ed0:	ed93 7a00 	vldr	s14, [r3]
 8007ed4:	4b34      	ldr	r3, [pc, #208]	@ (8007fa8 <NMI_Handler+0x368>)
 8007ed6:	edd3 7a00 	vldr	s15, [r3]
 8007eda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007ede:	4b49      	ldr	r3, [pc, #292]	@ (8008004 <NMI_Handler+0x3c4>)
 8007ee0:	edc3 7a00 	vstr	s15, [r3]
		old_error_rool = wanted_rool - now_rool;
 8007ee4:	4b19      	ldr	r3, [pc, #100]	@ (8007f4c <NMI_Handler+0x30c>)
 8007ee6:	ed93 7a00 	vldr	s14, [r3]
 8007eea:	4b30      	ldr	r3, [pc, #192]	@ (8007fac <NMI_Handler+0x36c>)
 8007eec:	edd3 7a00 	vldr	s15, [r3]
 8007ef0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007ef4:	4b44      	ldr	r3, [pc, #272]	@ (8008008 <NMI_Handler+0x3c8>)
 8007ef6:	edc3 7a00 	vstr	s15, [r3]

		old_error_angular_rate_pitch = pid_pitch - gx;
 8007efa:	4b35      	ldr	r3, [pc, #212]	@ (8007fd0 <NMI_Handler+0x390>)
 8007efc:	ed93 7a00 	vldr	s14, [r3]
 8007f00:	4b21      	ldr	r3, [pc, #132]	@ (8007f88 <NMI_Handler+0x348>)
 8007f02:	edd3 7a00 	vldr	s15, [r3]
 8007f06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007f0a:	4b40      	ldr	r3, [pc, #256]	@ (800800c <NMI_Handler+0x3cc>)
 8007f0c:	edc3 7a00 	vstr	s15, [r3]
		old_error_angular_rate_rool = pid_rool - gy;
 8007f10:	4b31      	ldr	r3, [pc, #196]	@ (8007fd8 <NMI_Handler+0x398>)
 8007f12:	ed93 7a00 	vldr	s14, [r3]
 8007f16:	4b1b      	ldr	r3, [pc, #108]	@ (8007f84 <NMI_Handler+0x344>)
 8007f18:	edd3 7a00 	vldr	s15, [r3]
 8007f1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007f20:	4b3b      	ldr	r3, [pc, #236]	@ (8008010 <NMI_Handler+0x3d0>)
 8007f22:	edc3 7a00 	vstr	s15, [r3]
		old_error_angular_rate_yaw = wanted_yaw - gz;
 8007f26:	4b0b      	ldr	r3, [pc, #44]	@ (8007f54 <NMI_Handler+0x314>)
 8007f28:	ed93 7a00 	vldr	s14, [r3]
 8007f2c:	4b14      	ldr	r3, [pc, #80]	@ (8007f80 <NMI_Handler+0x340>)
 8007f2e:	edd3 7a00 	vldr	s15, [r3]
 8007f32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007f36:	4b37      	ldr	r3, [pc, #220]	@ (8008014 <NMI_Handler+0x3d4>)
 8007f38:	edc3 7a00 	vstr	s15, [r3]
 8007f3c:	e06c      	b.n	8008018 <NMI_Handler+0x3d8>
 8007f3e:	bf00      	nop
 8007f40:	58021000 	.word	0x58021000
 8007f44:	58020400 	.word	0x58020400
 8007f48:	24001ef0 	.word	0x24001ef0
 8007f4c:	0000406c 	.word	0x0000406c
 8007f50:	00004068 	.word	0x00004068
 8007f54:	00004070 	.word	0x00004070
 8007f58:	0801e590 	.word	0x0801e590
 8007f5c:	0000405c 	.word	0x0000405c
 8007f60:	00000030 	.word	0x00000030
 8007f64:	00000034 	.word	0x00000034
 8007f68:	00000038 	.word	0x00000038
 8007f6c:	0000003c 	.word	0x0000003c
 8007f70:	00000040 	.word	0x00000040
 8007f74:	00000044 	.word	0x00000044
 8007f78:	0801e584 	.word	0x0801e584
 8007f7c:	0801e588 	.word	0x0801e588
 8007f80:	00000014 	.word	0x00000014
 8007f84:	00000010 	.word	0x00000010
 8007f88:	0000000c 	.word	0x0000000c
 8007f8c:	00000008 	.word	0x00000008
 8007f90:	00000004 	.word	0x00000004
 8007f94:	00000000 	.word	0x00000000
 8007f98:	0000001c 	.word	0x0000001c
 8007f9c:	00000018 	.word	0x00000018
 8007fa0:	00000058 	.word	0x00000058
 8007fa4:	0000007c 	.word	0x0000007c
 8007fa8:	00004078 	.word	0x00004078
 8007fac:	0000407c 	.word	0x0000407c
 8007fb0:	00004080 	.word	0x00004080
 8007fb4:	00004054 	.word	0x00004054
 8007fb8:	00004050 	.word	0x00004050
 8007fbc:	00004058 	.word	0x00004058
 8007fc0:	0000409c 	.word	0x0000409c
 8007fc4:	000040a0 	.word	0x000040a0
 8007fc8:	000040a4 	.word	0x000040a4
 8007fcc:	000040a8 	.word	0x000040a8
 8007fd0:	000040b4 	.word	0x000040b4
 8007fd4:	000040ac 	.word	0x000040ac
 8007fd8:	000040bc 	.word	0x000040bc
 8007fdc:	000040b0 	.word	0x000040b0
 8007fe0:	000040b8 	.word	0x000040b8
 8007fe4:	000040f0 	.word	0x000040f0
 8007fe8:	00004104 	.word	0x00004104
 8007fec:	00004150 	.word	0x00004150
 8007ff0:	000040c0 	.word	0x000040c0
 8007ff4:	00004164 	.word	0x00004164
 8007ff8:	000040c8 	.word	0x000040c8
 8007ffc:	00004178 	.word	0x00004178
 8008000:	000040c4 	.word	0x000040c4
 8008004:	00004084 	.word	0x00004084
 8008008:	00004088 	.word	0x00004088
 800800c:	00004090 	.word	0x00004090
 8008010:	00004094 	.word	0x00004094
 8008014:	00004098 	.word	0x00004098


		MYDRON.ROOL = pid_angular_rate_rool;
 8008018:	4b99      	ldr	r3, [pc, #612]	@ (8008280 <NMI_Handler+0x640>)
 800801a:	edd3 7a00 	vldr	s15, [r3]
 800801e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008022:	ee17 3a90 	vmov	r3, s15
 8008026:	b21a      	sxth	r2, r3
 8008028:	4b96      	ldr	r3, [pc, #600]	@ (8008284 <NMI_Handler+0x644>)
 800802a:	80da      	strh	r2, [r3, #6]
		MYDRON.PITCH = pid_angular_rate_pitch;
 800802c:	4b96      	ldr	r3, [pc, #600]	@ (8008288 <NMI_Handler+0x648>)
 800802e:	edd3 7a00 	vldr	s15, [r3]
 8008032:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008036:	ee17 3a90 	vmov	r3, s15
 800803a:	b21a      	sxth	r2, r3
 800803c:	4b91      	ldr	r3, [pc, #580]	@ (8008284 <NMI_Handler+0x644>)
 800803e:	809a      	strh	r2, [r3, #4]
		MYDRON.YAW = pid_angular_rate_yaw;
 8008040:	4b92      	ldr	r3, [pc, #584]	@ (800828c <NMI_Handler+0x64c>)
 8008042:	edd3 7a00 	vldr	s15, [r3]
 8008046:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800804a:	ee17 3a90 	vmov	r3, s15
 800804e:	b21a      	sxth	r2, r3
 8008050:	4b8c      	ldr	r3, [pc, #560]	@ (8008284 <NMI_Handler+0x644>)
 8008052:	811a      	strh	r2, [r3, #8]



		Thrust_filter(1);
 8008054:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8008058:	f7fb fbbe 	bl	80037d8 <Thrust_filter>
		if(MYDRON.THRUST > thrust_limit){
 800805c:	4b89      	ldr	r3, [pc, #548]	@ (8008284 <NMI_Handler+0x644>)
 800805e:	885b      	ldrh	r3, [r3, #2]
 8008060:	461a      	mov	r2, r3
 8008062:	4b8b      	ldr	r3, [pc, #556]	@ (8008290 <NMI_Handler+0x650>)
 8008064:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008068:	429a      	cmp	r2, r3
 800806a:	dd05      	ble.n	8008078 <NMI_Handler+0x438>
			MYDRON.THRUST = thrust_limit;
 800806c:	4b88      	ldr	r3, [pc, #544]	@ (8008290 <NMI_Handler+0x650>)
 800806e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008072:	b29a      	uxth	r2, r3
 8008074:	4b83      	ldr	r3, [pc, #524]	@ (8008284 <NMI_Handler+0x644>)
 8008076:	805a      	strh	r2, [r3, #2]
		}


		SPEED1 = (MYDRON.THRUST*0.7)+ MYDRON.ROOL - MYDRON.PITCH + MYDRON.YAW + min_speed + 500;//trust 7000 max
 8008078:	4b82      	ldr	r3, [pc, #520]	@ (8008284 <NMI_Handler+0x644>)
 800807a:	885b      	ldrh	r3, [r3, #2]
 800807c:	ee07 3a90 	vmov	s15, r3
 8008080:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008084:	ed9f 6b78 	vldr	d6, [pc, #480]	@ 8008268 <NMI_Handler+0x628>
 8008088:	ee27 6b06 	vmul.f64	d6, d7, d6
 800808c:	4b7d      	ldr	r3, [pc, #500]	@ (8008284 <NMI_Handler+0x644>)
 800808e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8008092:	ee07 3a90 	vmov	s15, r3
 8008096:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800809a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800809e:	4b79      	ldr	r3, [pc, #484]	@ (8008284 <NMI_Handler+0x644>)
 80080a0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80080a4:	ee07 3a90 	vmov	s15, r3
 80080a8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80080ac:	ee36 6b47 	vsub.f64	d6, d6, d7
 80080b0:	4b74      	ldr	r3, [pc, #464]	@ (8008284 <NMI_Handler+0x644>)
 80080b2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80080b6:	ee07 3a90 	vmov	s15, r3
 80080ba:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80080be:	ee36 7b07 	vadd.f64	d7, d6, d7
 80080c2:	ed9f 6b6b 	vldr	d6, [pc, #428]	@ 8008270 <NMI_Handler+0x630>
 80080c6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80080ca:	ed9f 6b6b 	vldr	d6, [pc, #428]	@ 8008278 <NMI_Handler+0x638>
 80080ce:	ee37 7b06 	vadd.f64	d7, d7, d6
 80080d2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80080d6:	ee17 3a90 	vmov	r3, s15
 80080da:	b29a      	uxth	r2, r3
 80080dc:	4b6d      	ldr	r3, [pc, #436]	@ (8008294 <NMI_Handler+0x654>)
 80080de:	801a      	strh	r2, [r3, #0]
		SPEED2 = (MYDRON.THRUST*0.7)- MYDRON.ROOL - MYDRON.PITCH - MYDRON.YAW + min_speed + 500;//
 80080e0:	4b68      	ldr	r3, [pc, #416]	@ (8008284 <NMI_Handler+0x644>)
 80080e2:	885b      	ldrh	r3, [r3, #2]
 80080e4:	ee07 3a90 	vmov	s15, r3
 80080e8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80080ec:	ed9f 6b5e 	vldr	d6, [pc, #376]	@ 8008268 <NMI_Handler+0x628>
 80080f0:	ee27 6b06 	vmul.f64	d6, d7, d6
 80080f4:	4b63      	ldr	r3, [pc, #396]	@ (8008284 <NMI_Handler+0x644>)
 80080f6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80080fa:	ee07 3a90 	vmov	s15, r3
 80080fe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008102:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008106:	4b5f      	ldr	r3, [pc, #380]	@ (8008284 <NMI_Handler+0x644>)
 8008108:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800810c:	ee07 3a90 	vmov	s15, r3
 8008110:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008114:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008118:	4b5a      	ldr	r3, [pc, #360]	@ (8008284 <NMI_Handler+0x644>)
 800811a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800811e:	ee07 3a90 	vmov	s15, r3
 8008122:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008126:	ee36 7b47 	vsub.f64	d7, d6, d7
 800812a:	ed9f 6b51 	vldr	d6, [pc, #324]	@ 8008270 <NMI_Handler+0x630>
 800812e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008132:	ed9f 6b51 	vldr	d6, [pc, #324]	@ 8008278 <NMI_Handler+0x638>
 8008136:	ee37 7b06 	vadd.f64	d7, d7, d6
 800813a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800813e:	ee17 3a90 	vmov	r3, s15
 8008142:	b29a      	uxth	r2, r3
 8008144:	4b54      	ldr	r3, [pc, #336]	@ (8008298 <NMI_Handler+0x658>)
 8008146:	801a      	strh	r2, [r3, #0]
		SPEED3 = (MYDRON.THRUST*0.7)+ MYDRON.ROOL + MYDRON.PITCH - MYDRON.YAW + min_speed + 500;//
 8008148:	4b4e      	ldr	r3, [pc, #312]	@ (8008284 <NMI_Handler+0x644>)
 800814a:	885b      	ldrh	r3, [r3, #2]
 800814c:	ee07 3a90 	vmov	s15, r3
 8008150:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008154:	ed9f 6b44 	vldr	d6, [pc, #272]	@ 8008268 <NMI_Handler+0x628>
 8008158:	ee27 6b06 	vmul.f64	d6, d7, d6
 800815c:	4b49      	ldr	r3, [pc, #292]	@ (8008284 <NMI_Handler+0x644>)
 800815e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8008162:	ee07 3a90 	vmov	s15, r3
 8008166:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800816a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800816e:	4b45      	ldr	r3, [pc, #276]	@ (8008284 <NMI_Handler+0x644>)
 8008170:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8008174:	ee07 3a90 	vmov	s15, r3
 8008178:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800817c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8008180:	4b40      	ldr	r3, [pc, #256]	@ (8008284 <NMI_Handler+0x644>)
 8008182:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008186:	ee07 3a90 	vmov	s15, r3
 800818a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800818e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008192:	ed9f 6b37 	vldr	d6, [pc, #220]	@ 8008270 <NMI_Handler+0x630>
 8008196:	ee37 7b06 	vadd.f64	d7, d7, d6
 800819a:	ed9f 6b37 	vldr	d6, [pc, #220]	@ 8008278 <NMI_Handler+0x638>
 800819e:	ee37 7b06 	vadd.f64	d7, d7, d6
 80081a2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80081a6:	ee17 3a90 	vmov	r3, s15
 80081aa:	b29a      	uxth	r2, r3
 80081ac:	4b3b      	ldr	r3, [pc, #236]	@ (800829c <NMI_Handler+0x65c>)
 80081ae:	801a      	strh	r2, [r3, #0]
		SPEED4 = (MYDRON.THRUST*0.7)- MYDRON.ROOL + MYDRON.PITCH + MYDRON.YAW + min_speed + 500;//
 80081b0:	4b34      	ldr	r3, [pc, #208]	@ (8008284 <NMI_Handler+0x644>)
 80081b2:	885b      	ldrh	r3, [r3, #2]
 80081b4:	ee07 3a90 	vmov	s15, r3
 80081b8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80081bc:	ed9f 6b2a 	vldr	d6, [pc, #168]	@ 8008268 <NMI_Handler+0x628>
 80081c0:	ee27 6b06 	vmul.f64	d6, d7, d6
 80081c4:	4b2f      	ldr	r3, [pc, #188]	@ (8008284 <NMI_Handler+0x644>)
 80081c6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80081ca:	ee07 3a90 	vmov	s15, r3
 80081ce:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80081d2:	ee36 6b47 	vsub.f64	d6, d6, d7
 80081d6:	4b2b      	ldr	r3, [pc, #172]	@ (8008284 <NMI_Handler+0x644>)
 80081d8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80081dc:	ee07 3a90 	vmov	s15, r3
 80081e0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80081e4:	ee36 6b07 	vadd.f64	d6, d6, d7
 80081e8:	4b26      	ldr	r3, [pc, #152]	@ (8008284 <NMI_Handler+0x644>)
 80081ea:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80081ee:	ee07 3a90 	vmov	s15, r3
 80081f2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80081f6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80081fa:	ed9f 6b1d 	vldr	d6, [pc, #116]	@ 8008270 <NMI_Handler+0x630>
 80081fe:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008202:	ed9f 6b1d 	vldr	d6, [pc, #116]	@ 8008278 <NMI_Handler+0x638>
 8008206:	ee37 7b06 	vadd.f64	d7, d7, d6
 800820a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800820e:	ee17 3a90 	vmov	r3, s15
 8008212:	b29a      	uxth	r2, r3
 8008214:	4b22      	ldr	r3, [pc, #136]	@ (80082a0 <NMI_Handler+0x660>)
 8008216:	801a      	strh	r2, [r3, #0]

		ESC_1_SPEED(SPEED1);
 8008218:	4b1e      	ldr	r3, [pc, #120]	@ (8008294 <NMI_Handler+0x654>)
 800821a:	881b      	ldrh	r3, [r3, #0]
 800821c:	4618      	mov	r0, r3
 800821e:	f7f8 fe09 	bl	8000e34 <ESC_1_SPEED>
		ESC_2_SPEED(SPEED2);
 8008222:	4b1d      	ldr	r3, [pc, #116]	@ (8008298 <NMI_Handler+0x658>)
 8008224:	881b      	ldrh	r3, [r3, #0]
 8008226:	4618      	mov	r0, r3
 8008228:	f7f8 fe26 	bl	8000e78 <ESC_2_SPEED>
		ESC_3_SPEED(SPEED3);
 800822c:	4b1b      	ldr	r3, [pc, #108]	@ (800829c <NMI_Handler+0x65c>)
 800822e:	881b      	ldrh	r3, [r3, #0]
 8008230:	4618      	mov	r0, r3
 8008232:	f7f8 fe43 	bl	8000ebc <ESC_3_SPEED>
		ESC_4_SPEED(SPEED4);
 8008236:	4b1a      	ldr	r3, [pc, #104]	@ (80082a0 <NMI_Handler+0x660>)
 8008238:	881b      	ldrh	r3, [r3, #0]
 800823a:	4618      	mov	r0, r3
 800823c:	f7f8 fe60 	bl	8000f00 <ESC_4_SPEED>


		OLD_SPEED1 = SPEED1;
 8008240:	4b14      	ldr	r3, [pc, #80]	@ (8008294 <NMI_Handler+0x654>)
 8008242:	881a      	ldrh	r2, [r3, #0]
 8008244:	4b17      	ldr	r3, [pc, #92]	@ (80082a4 <NMI_Handler+0x664>)
 8008246:	801a      	strh	r2, [r3, #0]
		OLD_SPEED2 = SPEED2;
 8008248:	4b13      	ldr	r3, [pc, #76]	@ (8008298 <NMI_Handler+0x658>)
 800824a:	881a      	ldrh	r2, [r3, #0]
 800824c:	4b16      	ldr	r3, [pc, #88]	@ (80082a8 <NMI_Handler+0x668>)
 800824e:	801a      	strh	r2, [r3, #0]
		OLD_SPEED3 = SPEED3;
 8008250:	4b12      	ldr	r3, [pc, #72]	@ (800829c <NMI_Handler+0x65c>)
 8008252:	881a      	ldrh	r2, [r3, #0]
 8008254:	4b15      	ldr	r3, [pc, #84]	@ (80082ac <NMI_Handler+0x66c>)
 8008256:	801a      	strh	r2, [r3, #0]
		OLD_SPEED4 = SPEED4;
 8008258:	4b11      	ldr	r3, [pc, #68]	@ (80082a0 <NMI_Handler+0x660>)
 800825a:	881a      	ldrh	r2, [r3, #0]
 800825c:	4b14      	ldr	r3, [pc, #80]	@ (80082b0 <NMI_Handler+0x670>)
 800825e:	801a      	strh	r2, [r3, #0]
	   	HAL_Delay(1);
 8008260:	e517      	b.n	8007c92 <NMI_Handler+0x52>
 8008262:	bf00      	nop
 8008264:	f3af 8000 	nop.w
 8008268:	66666666 	.word	0x66666666
 800826c:	3fe66666 	.word	0x3fe66666
 8008270:	00000000 	.word	0x00000000
 8008274:	40c48200 	.word	0x40c48200
 8008278:	00000000 	.word	0x00000000
 800827c:	407f4000 	.word	0x407f4000
 8008280:	000040c8 	.word	0x000040c8
 8008284:	00000180 	.word	0x00000180
 8008288:	000040c0 	.word	0x000040c0
 800828c:	000040c4 	.word	0x000040c4
 8008290:	0000405e 	.word	0x0000405e
 8008294:	0000418c 	.word	0x0000418c
 8008298:	0000418e 	.word	0x0000418e
 800829c:	00004190 	.word	0x00004190
 80082a0:	00004192 	.word	0x00004192
 80082a4:	00004194 	.word	0x00004194
 80082a8:	00004196 	.word	0x00004196
 80082ac:	00004198 	.word	0x00004198
 80082b0:	0000419a 	.word	0x0000419a

080082b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

	LED_G_1;
 80082b8:	2201      	movs	r2, #1
 80082ba:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80082be:	4812      	ldr	r0, [pc, #72]	@ (8008308 <HardFault_Handler+0x54>)
 80082c0:	f005 ff8a 	bl	800e1d8 <HAL_GPIO_WritePin>
	LED_Y_0;
 80082c4:	2200      	movs	r2, #0
 80082c6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80082ca:	4810      	ldr	r0, [pc, #64]	@ (800830c <HardFault_Handler+0x58>)
 80082cc:	f005 ff84 	bl	800e1d8 <HAL_GPIO_WritePin>
	LED_R_1;
 80082d0:	2201      	movs	r2, #1
 80082d2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80082d6:	480d      	ldr	r0, [pc, #52]	@ (800830c <HardFault_Handler+0x58>)
 80082d8:	f005 ff7e 	bl	800e1d8 <HAL_GPIO_WritePin>
	//todo create crash log
	f_close(&fil);
 80082dc:	480c      	ldr	r0, [pc, #48]	@ (8008310 <HardFault_Handler+0x5c>)
 80082de:	f015 f9fd 	bl	801d6dc <f_close>
	wanted_rool = 0;
 80082e2:	4b0c      	ldr	r3, [pc, #48]	@ (8008314 <HardFault_Handler+0x60>)
 80082e4:	f04f 0200 	mov.w	r2, #0
 80082e8:	601a      	str	r2, [r3, #0]
	wanted_pitch = 0;
 80082ea:	4b0b      	ldr	r3, [pc, #44]	@ (8008318 <HardFault_Handler+0x64>)
 80082ec:	f04f 0200 	mov.w	r2, #0
 80082f0:	601a      	str	r2, [r3, #0]
	wanted_yaw = 0;
 80082f2:	4b0a      	ldr	r3, [pc, #40]	@ (800831c <HardFault_Handler+0x68>)
 80082f4:	f04f 0200 	mov.w	r2, #0
 80082f8:	601a      	str	r2, [r3, #0]
	wanted_thrust = DRON_SLOWFALING;
 80082fa:	4b09      	ldr	r3, [pc, #36]	@ (8008320 <HardFault_Handler+0x6c>)
 80082fc:	881b      	ldrh	r3, [r3, #0]
 80082fe:	b21a      	sxth	r2, r3
 8008300:	4b08      	ldr	r3, [pc, #32]	@ (8008324 <HardFault_Handler+0x70>)
 8008302:	801a      	strh	r2, [r3, #0]
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008304:	bf00      	nop
 8008306:	e7fd      	b.n	8008304 <HardFault_Handler+0x50>
 8008308:	58021000 	.word	0x58021000
 800830c:	58020400 	.word	0x58020400
 8008310:	24001ef0 	.word	0x24001ef0
 8008314:	0000406c 	.word	0x0000406c
 8008318:	00004068 	.word	0x00004068
 800831c:	00004070 	.word	0x00004070
 8008320:	0801e590 	.word	0x0801e590
 8008324:	0000405c 	.word	0x0000405c

08008328 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

	LED_G_0;
 800832c:	2200      	movs	r2, #0
 800832e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008332:	4812      	ldr	r0, [pc, #72]	@ (800837c <MemManage_Handler+0x54>)
 8008334:	f005 ff50 	bl	800e1d8 <HAL_GPIO_WritePin>
	LED_Y_0;
 8008338:	2200      	movs	r2, #0
 800833a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800833e:	4810      	ldr	r0, [pc, #64]	@ (8008380 <MemManage_Handler+0x58>)
 8008340:	f005 ff4a 	bl	800e1d8 <HAL_GPIO_WritePin>
	LED_R_1;
 8008344:	2201      	movs	r2, #1
 8008346:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800834a:	480d      	ldr	r0, [pc, #52]	@ (8008380 <MemManage_Handler+0x58>)
 800834c:	f005 ff44 	bl	800e1d8 <HAL_GPIO_WritePin>
	//todo create crash log
	f_close(&fil);
 8008350:	480c      	ldr	r0, [pc, #48]	@ (8008384 <MemManage_Handler+0x5c>)
 8008352:	f015 f9c3 	bl	801d6dc <f_close>
	wanted_rool = 0;
 8008356:	4b0c      	ldr	r3, [pc, #48]	@ (8008388 <MemManage_Handler+0x60>)
 8008358:	f04f 0200 	mov.w	r2, #0
 800835c:	601a      	str	r2, [r3, #0]
	wanted_pitch = 0;
 800835e:	4b0b      	ldr	r3, [pc, #44]	@ (800838c <MemManage_Handler+0x64>)
 8008360:	f04f 0200 	mov.w	r2, #0
 8008364:	601a      	str	r2, [r3, #0]
	wanted_yaw = 0;
 8008366:	4b0a      	ldr	r3, [pc, #40]	@ (8008390 <MemManage_Handler+0x68>)
 8008368:	f04f 0200 	mov.w	r2, #0
 800836c:	601a      	str	r2, [r3, #0]
	wanted_thrust = DRON_SLOWFALING;
 800836e:	4b09      	ldr	r3, [pc, #36]	@ (8008394 <MemManage_Handler+0x6c>)
 8008370:	881b      	ldrh	r3, [r3, #0]
 8008372:	b21a      	sxth	r2, r3
 8008374:	4b08      	ldr	r3, [pc, #32]	@ (8008398 <MemManage_Handler+0x70>)
 8008376:	801a      	strh	r2, [r3, #0]
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008378:	bf00      	nop
 800837a:	e7fd      	b.n	8008378 <MemManage_Handler+0x50>
 800837c:	58021000 	.word	0x58021000
 8008380:	58020400 	.word	0x58020400
 8008384:	24001ef0 	.word	0x24001ef0
 8008388:	0000406c 	.word	0x0000406c
 800838c:	00004068 	.word	0x00004068
 8008390:	00004070 	.word	0x00004070
 8008394:	0801e590 	.word	0x0801e590
 8008398:	0000405c 	.word	0x0000405c

0800839c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

	LED_G_1;
 80083a0:	2201      	movs	r2, #1
 80083a2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80083a6:	4812      	ldr	r0, [pc, #72]	@ (80083f0 <BusFault_Handler+0x54>)
 80083a8:	f005 ff16 	bl	800e1d8 <HAL_GPIO_WritePin>
	LED_Y_1;
 80083ac:	2201      	movs	r2, #1
 80083ae:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80083b2:	4810      	ldr	r0, [pc, #64]	@ (80083f4 <BusFault_Handler+0x58>)
 80083b4:	f005 ff10 	bl	800e1d8 <HAL_GPIO_WritePin>
	LED_R_1;
 80083b8:	2201      	movs	r2, #1
 80083ba:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80083be:	480d      	ldr	r0, [pc, #52]	@ (80083f4 <BusFault_Handler+0x58>)
 80083c0:	f005 ff0a 	bl	800e1d8 <HAL_GPIO_WritePin>
	//todo create crash log
	f_close(&fil);
 80083c4:	480c      	ldr	r0, [pc, #48]	@ (80083f8 <BusFault_Handler+0x5c>)
 80083c6:	f015 f989 	bl	801d6dc <f_close>
	wanted_rool = 0;
 80083ca:	4b0c      	ldr	r3, [pc, #48]	@ (80083fc <BusFault_Handler+0x60>)
 80083cc:	f04f 0200 	mov.w	r2, #0
 80083d0:	601a      	str	r2, [r3, #0]
	wanted_pitch = 0;
 80083d2:	4b0b      	ldr	r3, [pc, #44]	@ (8008400 <BusFault_Handler+0x64>)
 80083d4:	f04f 0200 	mov.w	r2, #0
 80083d8:	601a      	str	r2, [r3, #0]
	wanted_yaw = 0;
 80083da:	4b0a      	ldr	r3, [pc, #40]	@ (8008404 <BusFault_Handler+0x68>)
 80083dc:	f04f 0200 	mov.w	r2, #0
 80083e0:	601a      	str	r2, [r3, #0]
	wanted_thrust = DRON_SLOWFALING;
 80083e2:	4b09      	ldr	r3, [pc, #36]	@ (8008408 <BusFault_Handler+0x6c>)
 80083e4:	881b      	ldrh	r3, [r3, #0]
 80083e6:	b21a      	sxth	r2, r3
 80083e8:	4b08      	ldr	r3, [pc, #32]	@ (800840c <BusFault_Handler+0x70>)
 80083ea:	801a      	strh	r2, [r3, #0]
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80083ec:	bf00      	nop
 80083ee:	e7fd      	b.n	80083ec <BusFault_Handler+0x50>
 80083f0:	58021000 	.word	0x58021000
 80083f4:	58020400 	.word	0x58020400
 80083f8:	24001ef0 	.word	0x24001ef0
 80083fc:	0000406c 	.word	0x0000406c
 8008400:	00004068 	.word	0x00004068
 8008404:	00004070 	.word	0x00004070
 8008408:	0801e590 	.word	0x0801e590
 800840c:	0000405c 	.word	0x0000405c

08008410 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

	LED_G_0;
 8008414:	2200      	movs	r2, #0
 8008416:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800841a:	4812      	ldr	r0, [pc, #72]	@ (8008464 <UsageFault_Handler+0x54>)
 800841c:	f005 fedc 	bl	800e1d8 <HAL_GPIO_WritePin>
	LED_Y_1;
 8008420:	2201      	movs	r2, #1
 8008422:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8008426:	4810      	ldr	r0, [pc, #64]	@ (8008468 <UsageFault_Handler+0x58>)
 8008428:	f005 fed6 	bl	800e1d8 <HAL_GPIO_WritePin>
	LED_R_1;
 800842c:	2201      	movs	r2, #1
 800842e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8008432:	480d      	ldr	r0, [pc, #52]	@ (8008468 <UsageFault_Handler+0x58>)
 8008434:	f005 fed0 	bl	800e1d8 <HAL_GPIO_WritePin>
	//todo create crash log
	f_close(&fil);
 8008438:	480c      	ldr	r0, [pc, #48]	@ (800846c <UsageFault_Handler+0x5c>)
 800843a:	f015 f94f 	bl	801d6dc <f_close>
	wanted_rool = 0;
 800843e:	4b0c      	ldr	r3, [pc, #48]	@ (8008470 <UsageFault_Handler+0x60>)
 8008440:	f04f 0200 	mov.w	r2, #0
 8008444:	601a      	str	r2, [r3, #0]
	wanted_pitch = 0;
 8008446:	4b0b      	ldr	r3, [pc, #44]	@ (8008474 <UsageFault_Handler+0x64>)
 8008448:	f04f 0200 	mov.w	r2, #0
 800844c:	601a      	str	r2, [r3, #0]
	wanted_yaw = 0;
 800844e:	4b0a      	ldr	r3, [pc, #40]	@ (8008478 <UsageFault_Handler+0x68>)
 8008450:	f04f 0200 	mov.w	r2, #0
 8008454:	601a      	str	r2, [r3, #0]
	wanted_thrust = DRON_SLOWFALING;
 8008456:	4b09      	ldr	r3, [pc, #36]	@ (800847c <UsageFault_Handler+0x6c>)
 8008458:	881b      	ldrh	r3, [r3, #0]
 800845a:	b21a      	sxth	r2, r3
 800845c:	4b08      	ldr	r3, [pc, #32]	@ (8008480 <UsageFault_Handler+0x70>)
 800845e:	801a      	strh	r2, [r3, #0]
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008460:	bf00      	nop
 8008462:	e7fd      	b.n	8008460 <UsageFault_Handler+0x50>
 8008464:	58021000 	.word	0x58021000
 8008468:	58020400 	.word	0x58020400
 800846c:	24001ef0 	.word	0x24001ef0
 8008470:	0000406c 	.word	0x0000406c
 8008474:	00004068 	.word	0x00004068
 8008478:	00004070 	.word	0x00004070
 800847c:	0801e590 	.word	0x0801e590
 8008480:	0000405c 	.word	0x0000405c

08008484 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008484:	b480      	push	{r7}
 8008486:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008488:	bf00      	nop
 800848a:	46bd      	mov	sp, r7
 800848c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008490:	4770      	bx	lr

08008492 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008492:	b480      	push	{r7}
 8008494:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008496:	bf00      	nop
 8008498:	46bd      	mov	sp, r7
 800849a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849e:	4770      	bx	lr

080084a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80084a0:	b480      	push	{r7}
 80084a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80084a4:	bf00      	nop
 80084a6:	46bd      	mov	sp, r7
 80084a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ac:	4770      	bx	lr
	...

080084b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	  FatFsCnt++;
 80084b4:	4b08      	ldr	r3, [pc, #32]	@ (80084d8 <SysTick_Handler+0x28>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	3301      	adds	r3, #1
 80084ba:	4a07      	ldr	r2, [pc, #28]	@ (80084d8 <SysTick_Handler+0x28>)
 80084bc:	6013      	str	r3, [r2, #0]
	  if(FatFsCnt >= 10)
 80084be:	4b06      	ldr	r3, [pc, #24]	@ (80084d8 <SysTick_Handler+0x28>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	2b09      	cmp	r3, #9
 80084c4:	d904      	bls.n	80084d0 <SysTick_Handler+0x20>
	  {
	    FatFsCnt = 0;
 80084c6:	4b04      	ldr	r3, [pc, #16]	@ (80084d8 <SysTick_Handler+0x28>)
 80084c8:	2200      	movs	r2, #0
 80084ca:	601a      	str	r2, [r3, #0]
	    SDTimer_Handler();
 80084cc:	f7ff fb98 	bl	8007c00 <SDTimer_Handler>
	  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80084d0:	f000 fd04 	bl	8008edc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80084d4:	bf00      	nop
 80084d6:	bd80      	pop	{r7, pc}
 80084d8:	24000374 	.word	0x24000374

080084dc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80084e0:	4802      	ldr	r0, [pc, #8]	@ (80084ec <DMA1_Stream0_IRQHandler+0x10>)
 80084e2:	f004 f98d 	bl	800c800 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80084e6:	bf00      	nop
 80084e8:	bd80      	pop	{r7, pc}
 80084ea:	bf00      	nop
 80084ec:	240002fc 	.word	0x240002fc

080084f0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc2);
 80084f4:	4802      	ldr	r0, [pc, #8]	@ (8008500 <ADC_IRQHandler+0x10>)
 80084f6:	f001 fb05 	bl	8009b04 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80084fa:	bf00      	nop
 80084fc:	bd80      	pop	{r7, pc}
 80084fe:	bf00      	nop
 8008500:	240000ac 	.word	0x240000ac

08008504 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8008508:	4802      	ldr	r0, [pc, #8]	@ (8008514 <TIM2_IRQHandler+0x10>)
 800850a:	f00d ff24 	bl	8016356 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800850e:	bf00      	nop
 8008510:	bd80      	pop	{r7, pc}
 8008512:	bf00      	nop
 8008514:	240003cc 	.word	0x240003cc

08008518 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800851c:	4802      	ldr	r0, [pc, #8]	@ (8008528 <SPI2_IRQHandler+0x10>)
 800851e:	f00d f893 	bl	8015648 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8008522:	bf00      	nop
 8008524:	bd80      	pop	{r7, pc}
 8008526:	bf00      	nop
 8008528:	240001ec 	.word	0x240001ec

0800852c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8008530:	4802      	ldr	r0, [pc, #8]	@ (800853c <USART1_IRQHandler+0x10>)
 8008532:	f00f fb6d 	bl	8017c10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8008536:	bf00      	nop
 8008538:	bd80      	pop	{r7, pc}
 800853a:	bf00      	nop
 800853c:	240004b0 	.word	0x240004b0

08008540 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NRF24_IRQ_Pin);
 8008544:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8008548:	f005 fe5f 	bl	800e20a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800854c:	bf00      	nop
 800854e:	bd80      	pop	{r7, pc}

08008550 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8008554:	4802      	ldr	r0, [pc, #8]	@ (8008560 <DMA2_Stream0_IRQHandler+0x10>)
 8008556:	f004 f953 	bl	800c800 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800855a:	bf00      	nop
 800855c:	bd80      	pop	{r7, pc}
 800855e:	bf00      	nop
 8008560:	2400011c 	.word	0x2400011c

08008564 <I2C5_EV_IRQHandler>:

/**
  * @brief This function handles I2C5 event interrupt.
  */
void I2C5_EV_IRQHandler(void)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C5_EV_IRQn 0 */

  /* USER CODE END I2C5_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c5);
 8008568:	4802      	ldr	r0, [pc, #8]	@ (8008574 <I2C5_EV_IRQHandler+0x10>)
 800856a:	f006 fa43 	bl	800e9f4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C5_EV_IRQn 1 */

  /* USER CODE END I2C5_EV_IRQn 1 */
}
 800856e:	bf00      	nop
 8008570:	bd80      	pop	{r7, pc}
 8008572:	bf00      	nop
 8008574:	24000198 	.word	0x24000198

08008578 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008578:	b480      	push	{r7}
 800857a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800857c:	4b32      	ldr	r3, [pc, #200]	@ (8008648 <SystemInit+0xd0>)
 800857e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008582:	4a31      	ldr	r2, [pc, #196]	@ (8008648 <SystemInit+0xd0>)
 8008584:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008588:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800858c:	4b2f      	ldr	r3, [pc, #188]	@ (800864c <SystemInit+0xd4>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f003 030f 	and.w	r3, r3, #15
 8008594:	2b06      	cmp	r3, #6
 8008596:	d807      	bhi.n	80085a8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8008598:	4b2c      	ldr	r3, [pc, #176]	@ (800864c <SystemInit+0xd4>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f023 030f 	bic.w	r3, r3, #15
 80085a0:	4a2a      	ldr	r2, [pc, #168]	@ (800864c <SystemInit+0xd4>)
 80085a2:	f043 0307 	orr.w	r3, r3, #7
 80085a6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80085a8:	4b29      	ldr	r3, [pc, #164]	@ (8008650 <SystemInit+0xd8>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	4a28      	ldr	r2, [pc, #160]	@ (8008650 <SystemInit+0xd8>)
 80085ae:	f043 0301 	orr.w	r3, r3, #1
 80085b2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80085b4:	4b26      	ldr	r3, [pc, #152]	@ (8008650 <SystemInit+0xd8>)
 80085b6:	2200      	movs	r2, #0
 80085b8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80085ba:	4b25      	ldr	r3, [pc, #148]	@ (8008650 <SystemInit+0xd8>)
 80085bc:	681a      	ldr	r2, [r3, #0]
 80085be:	4924      	ldr	r1, [pc, #144]	@ (8008650 <SystemInit+0xd8>)
 80085c0:	4b24      	ldr	r3, [pc, #144]	@ (8008654 <SystemInit+0xdc>)
 80085c2:	4013      	ands	r3, r2
 80085c4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80085c6:	4b21      	ldr	r3, [pc, #132]	@ (800864c <SystemInit+0xd4>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f003 0308 	and.w	r3, r3, #8
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d007      	beq.n	80085e2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80085d2:	4b1e      	ldr	r3, [pc, #120]	@ (800864c <SystemInit+0xd4>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f023 030f 	bic.w	r3, r3, #15
 80085da:	4a1c      	ldr	r2, [pc, #112]	@ (800864c <SystemInit+0xd4>)
 80085dc:	f043 0307 	orr.w	r3, r3, #7
 80085e0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80085e2:	4b1b      	ldr	r3, [pc, #108]	@ (8008650 <SystemInit+0xd8>)
 80085e4:	2200      	movs	r2, #0
 80085e6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80085e8:	4b19      	ldr	r3, [pc, #100]	@ (8008650 <SystemInit+0xd8>)
 80085ea:	2200      	movs	r2, #0
 80085ec:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80085ee:	4b18      	ldr	r3, [pc, #96]	@ (8008650 <SystemInit+0xd8>)
 80085f0:	2200      	movs	r2, #0
 80085f2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80085f4:	4b16      	ldr	r3, [pc, #88]	@ (8008650 <SystemInit+0xd8>)
 80085f6:	4a18      	ldr	r2, [pc, #96]	@ (8008658 <SystemInit+0xe0>)
 80085f8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80085fa:	4b15      	ldr	r3, [pc, #84]	@ (8008650 <SystemInit+0xd8>)
 80085fc:	4a17      	ldr	r2, [pc, #92]	@ (800865c <SystemInit+0xe4>)
 80085fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8008600:	4b13      	ldr	r3, [pc, #76]	@ (8008650 <SystemInit+0xd8>)
 8008602:	4a17      	ldr	r2, [pc, #92]	@ (8008660 <SystemInit+0xe8>)
 8008604:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8008606:	4b12      	ldr	r3, [pc, #72]	@ (8008650 <SystemInit+0xd8>)
 8008608:	2200      	movs	r2, #0
 800860a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800860c:	4b10      	ldr	r3, [pc, #64]	@ (8008650 <SystemInit+0xd8>)
 800860e:	4a14      	ldr	r2, [pc, #80]	@ (8008660 <SystemInit+0xe8>)
 8008610:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8008612:	4b0f      	ldr	r3, [pc, #60]	@ (8008650 <SystemInit+0xd8>)
 8008614:	2200      	movs	r2, #0
 8008616:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8008618:	4b0d      	ldr	r3, [pc, #52]	@ (8008650 <SystemInit+0xd8>)
 800861a:	4a11      	ldr	r2, [pc, #68]	@ (8008660 <SystemInit+0xe8>)
 800861c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800861e:	4b0c      	ldr	r3, [pc, #48]	@ (8008650 <SystemInit+0xd8>)
 8008620:	2200      	movs	r2, #0
 8008622:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8008624:	4b0a      	ldr	r3, [pc, #40]	@ (8008650 <SystemInit+0xd8>)
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	4a09      	ldr	r2, [pc, #36]	@ (8008650 <SystemInit+0xd8>)
 800862a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800862e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8008630:	4b07      	ldr	r3, [pc, #28]	@ (8008650 <SystemInit+0xd8>)
 8008632:	2200      	movs	r2, #0
 8008634:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8008636:	4b0b      	ldr	r3, [pc, #44]	@ (8008664 <SystemInit+0xec>)
 8008638:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800863c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800863e:	bf00      	nop
 8008640:	46bd      	mov	sp, r7
 8008642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008646:	4770      	bx	lr
 8008648:	e000ed00 	.word	0xe000ed00
 800864c:	52002000 	.word	0x52002000
 8008650:	58024400 	.word	0x58024400
 8008654:	eaf6ed7f 	.word	0xeaf6ed7f
 8008658:	02020200 	.word	0x02020200
 800865c:	01ff0000 	.word	0x01ff0000
 8008660:	01010280 	.word	0x01010280
 8008664:	52004000 	.word	0x52004000

08008668 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b098      	sub	sp, #96	@ 0x60
 800866c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800866e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8008672:	2200      	movs	r2, #0
 8008674:	601a      	str	r2, [r3, #0]
 8008676:	605a      	str	r2, [r3, #4]
 8008678:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800867a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800867e:	2200      	movs	r2, #0
 8008680:	601a      	str	r2, [r3, #0]
 8008682:	605a      	str	r2, [r3, #4]
 8008684:	609a      	str	r2, [r3, #8]
 8008686:	60da      	str	r2, [r3, #12]
 8008688:	611a      	str	r2, [r3, #16]
 800868a:	615a      	str	r2, [r3, #20]
 800868c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800868e:	1d3b      	adds	r3, r7, #4
 8008690:	2234      	movs	r2, #52	@ 0x34
 8008692:	2100      	movs	r1, #0
 8008694:	4618      	mov	r0, r3
 8008696:	f015 fa19 	bl	801dacc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800869a:	4b45      	ldr	r3, [pc, #276]	@ (80087b0 <MX_TIM1_Init+0x148>)
 800869c:	4a45      	ldr	r2, [pc, #276]	@ (80087b4 <MX_TIM1_Init+0x14c>)
 800869e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 999;
 80086a0:	4b43      	ldr	r3, [pc, #268]	@ (80087b0 <MX_TIM1_Init+0x148>)
 80086a2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80086a6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80086a8:	4b41      	ldr	r3, [pc, #260]	@ (80087b0 <MX_TIM1_Init+0x148>)
 80086aa:	2200      	movs	r2, #0
 80086ac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 256;
 80086ae:	4b40      	ldr	r3, [pc, #256]	@ (80087b0 <MX_TIM1_Init+0x148>)
 80086b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80086b4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80086b6:	4b3e      	ldr	r3, [pc, #248]	@ (80087b0 <MX_TIM1_Init+0x148>)
 80086b8:	2200      	movs	r2, #0
 80086ba:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80086bc:	4b3c      	ldr	r3, [pc, #240]	@ (80087b0 <MX_TIM1_Init+0x148>)
 80086be:	2200      	movs	r2, #0
 80086c0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80086c2:	4b3b      	ldr	r3, [pc, #236]	@ (80087b0 <MX_TIM1_Init+0x148>)
 80086c4:	2280      	movs	r2, #128	@ 0x80
 80086c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80086c8:	4839      	ldr	r0, [pc, #228]	@ (80087b0 <MX_TIM1_Init+0x148>)
 80086ca:	f00d fc79 	bl	8015fc0 <HAL_TIM_PWM_Init>
 80086ce:	4603      	mov	r3, r0
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d001      	beq.n	80086d8 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 80086d4:	f7ff f8b8 	bl	8007848 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80086d8:	2300      	movs	r3, #0
 80086da:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80086dc:	2300      	movs	r3, #0
 80086de:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80086e0:	2300      	movs	r3, #0
 80086e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80086e4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80086e8:	4619      	mov	r1, r3
 80086ea:	4831      	ldr	r0, [pc, #196]	@ (80087b0 <MX_TIM1_Init+0x148>)
 80086ec:	f00e ff8c 	bl	8017608 <HAL_TIMEx_MasterConfigSynchronization>
 80086f0:	4603      	mov	r3, r0
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d001      	beq.n	80086fa <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80086f6:	f7ff f8a7 	bl	8007848 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80086fa:	2360      	movs	r3, #96	@ 0x60
 80086fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80086fe:	2300      	movs	r3, #0
 8008700:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008702:	2300      	movs	r3, #0
 8008704:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8008706:	2300      	movs	r3, #0
 8008708:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800870a:	2300      	movs	r3, #0
 800870c:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800870e:	2300      	movs	r3, #0
 8008710:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8008712:	2300      	movs	r3, #0
 8008714:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8008716:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800871a:	2204      	movs	r2, #4
 800871c:	4619      	mov	r1, r3
 800871e:	4824      	ldr	r0, [pc, #144]	@ (80087b0 <MX_TIM1_Init+0x148>)
 8008720:	f00d ffbc 	bl	801669c <HAL_TIM_PWM_ConfigChannel>
 8008724:	4603      	mov	r3, r0
 8008726:	2b00      	cmp	r3, #0
 8008728:	d001      	beq.n	800872e <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 800872a:	f7ff f88d 	bl	8007848 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800872e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008732:	2208      	movs	r2, #8
 8008734:	4619      	mov	r1, r3
 8008736:	481e      	ldr	r0, [pc, #120]	@ (80087b0 <MX_TIM1_Init+0x148>)
 8008738:	f00d ffb0 	bl	801669c <HAL_TIM_PWM_ConfigChannel>
 800873c:	4603      	mov	r3, r0
 800873e:	2b00      	cmp	r3, #0
 8008740:	d001      	beq.n	8008746 <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 8008742:	f7ff f881 	bl	8007848 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8008746:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800874a:	220c      	movs	r2, #12
 800874c:	4619      	mov	r1, r3
 800874e:	4818      	ldr	r0, [pc, #96]	@ (80087b0 <MX_TIM1_Init+0x148>)
 8008750:	f00d ffa4 	bl	801669c <HAL_TIM_PWM_ConfigChannel>
 8008754:	4603      	mov	r3, r0
 8008756:	2b00      	cmp	r3, #0
 8008758:	d001      	beq.n	800875e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800875a:	f7ff f875 	bl	8007848 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800875e:	2300      	movs	r3, #0
 8008760:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8008762:	2300      	movs	r3, #0
 8008764:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8008766:	2300      	movs	r3, #0
 8008768:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800876a:	2300      	movs	r3, #0
 800876c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800876e:	2300      	movs	r3, #0
 8008770:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8008772:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008776:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8008778:	2300      	movs	r3, #0
 800877a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800877c:	2300      	movs	r3, #0
 800877e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8008780:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008784:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8008786:	2300      	movs	r3, #0
 8008788:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800878a:	2300      	movs	r3, #0
 800878c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800878e:	1d3b      	adds	r3, r7, #4
 8008790:	4619      	mov	r1, r3
 8008792:	4807      	ldr	r0, [pc, #28]	@ (80087b0 <MX_TIM1_Init+0x148>)
 8008794:	f00e ffd4 	bl	8017740 <HAL_TIMEx_ConfigBreakDeadTime>
 8008798:	4603      	mov	r3, r0
 800879a:	2b00      	cmp	r3, #0
 800879c:	d001      	beq.n	80087a2 <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 800879e:	f7ff f853 	bl	8007848 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80087a2:	4803      	ldr	r0, [pc, #12]	@ (80087b0 <MX_TIM1_Init+0x148>)
 80087a4:	f000 f9da 	bl	8008b5c <HAL_TIM_MspPostInit>

}
 80087a8:	bf00      	nop
 80087aa:	3760      	adds	r7, #96	@ 0x60
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}
 80087b0:	24000380 	.word	0x24000380
 80087b4:	40010000 	.word	0x40010000

080087b8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b088      	sub	sp, #32
 80087bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80087be:	f107 0314 	add.w	r3, r7, #20
 80087c2:	2200      	movs	r2, #0
 80087c4:	601a      	str	r2, [r3, #0]
 80087c6:	605a      	str	r2, [r3, #4]
 80087c8:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80087ca:	1d3b      	adds	r3, r7, #4
 80087cc:	2200      	movs	r2, #0
 80087ce:	601a      	str	r2, [r3, #0]
 80087d0:	605a      	str	r2, [r3, #4]
 80087d2:	609a      	str	r2, [r3, #8]
 80087d4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80087d6:	4b21      	ldr	r3, [pc, #132]	@ (800885c <MX_TIM2_Init+0xa4>)
 80087d8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80087dc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 274;
 80087de:	4b1f      	ldr	r3, [pc, #124]	@ (800885c <MX_TIM2_Init+0xa4>)
 80087e0:	f44f 7289 	mov.w	r2, #274	@ 0x112
 80087e4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80087e6:	4b1d      	ldr	r3, [pc, #116]	@ (800885c <MX_TIM2_Init+0xa4>)
 80087e8:	2200      	movs	r2, #0
 80087ea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80087ec:	4b1b      	ldr	r3, [pc, #108]	@ (800885c <MX_TIM2_Init+0xa4>)
 80087ee:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80087f2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80087f4:	4b19      	ldr	r3, [pc, #100]	@ (800885c <MX_TIM2_Init+0xa4>)
 80087f6:	2200      	movs	r2, #0
 80087f8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80087fa:	4b18      	ldr	r3, [pc, #96]	@ (800885c <MX_TIM2_Init+0xa4>)
 80087fc:	2280      	movs	r2, #128	@ 0x80
 80087fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8008800:	4816      	ldr	r0, [pc, #88]	@ (800885c <MX_TIM2_Init+0xa4>)
 8008802:	f00d fd51 	bl	80162a8 <HAL_TIM_IC_Init>
 8008806:	4603      	mov	r3, r0
 8008808:	2b00      	cmp	r3, #0
 800880a:	d001      	beq.n	8008810 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 800880c:	f7ff f81c 	bl	8007848 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008810:	2300      	movs	r3, #0
 8008812:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008814:	2300      	movs	r3, #0
 8008816:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8008818:	f107 0314 	add.w	r3, r7, #20
 800881c:	4619      	mov	r1, r3
 800881e:	480f      	ldr	r0, [pc, #60]	@ (800885c <MX_TIM2_Init+0xa4>)
 8008820:	f00e fef2 	bl	8017608 <HAL_TIMEx_MasterConfigSynchronization>
 8008824:	4603      	mov	r3, r0
 8008826:	2b00      	cmp	r3, #0
 8008828:	d001      	beq.n	800882e <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 800882a:	f7ff f80d 	bl	8007848 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800882e:	2300      	movs	r3, #0
 8008830:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8008832:	2301      	movs	r3, #1
 8008834:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8008836:	2300      	movs	r3, #0
 8008838:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800883a:	2300      	movs	r3, #0
 800883c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800883e:	1d3b      	adds	r3, r7, #4
 8008840:	2200      	movs	r2, #0
 8008842:	4619      	mov	r1, r3
 8008844:	4805      	ldr	r0, [pc, #20]	@ (800885c <MX_TIM2_Init+0xa4>)
 8008846:	f00d fe8d 	bl	8016564 <HAL_TIM_IC_ConfigChannel>
 800884a:	4603      	mov	r3, r0
 800884c:	2b00      	cmp	r3, #0
 800884e:	d001      	beq.n	8008854 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8008850:	f7fe fffa 	bl	8007848 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8008854:	bf00      	nop
 8008856:	3720      	adds	r7, #32
 8008858:	46bd      	mov	sp, r7
 800885a:	bd80      	pop	{r7, pc}
 800885c:	240003cc 	.word	0x240003cc

08008860 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b08a      	sub	sp, #40	@ 0x28
 8008864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008866:	f107 031c 	add.w	r3, r7, #28
 800886a:	2200      	movs	r2, #0
 800886c:	601a      	str	r2, [r3, #0]
 800886e:	605a      	str	r2, [r3, #4]
 8008870:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008872:	463b      	mov	r3, r7
 8008874:	2200      	movs	r2, #0
 8008876:	601a      	str	r2, [r3, #0]
 8008878:	605a      	str	r2, [r3, #4]
 800887a:	609a      	str	r2, [r3, #8]
 800887c:	60da      	str	r2, [r3, #12]
 800887e:	611a      	str	r2, [r3, #16]
 8008880:	615a      	str	r2, [r3, #20]
 8008882:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8008884:	4b32      	ldr	r3, [pc, #200]	@ (8008950 <MX_TIM3_Init+0xf0>)
 8008886:	4a33      	ldr	r2, [pc, #204]	@ (8008954 <MX_TIM3_Init+0xf4>)
 8008888:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 28;
 800888a:	4b31      	ldr	r3, [pc, #196]	@ (8008950 <MX_TIM3_Init+0xf0>)
 800888c:	221c      	movs	r2, #28
 800888e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008890:	4b2f      	ldr	r3, [pc, #188]	@ (8008950 <MX_TIM3_Init+0xf0>)
 8008892:	2200      	movs	r2, #0
 8008894:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8008896:	4b2e      	ldr	r3, [pc, #184]	@ (8008950 <MX_TIM3_Init+0xf0>)
 8008898:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800889c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800889e:	4b2c      	ldr	r3, [pc, #176]	@ (8008950 <MX_TIM3_Init+0xf0>)
 80088a0:	2200      	movs	r2, #0
 80088a2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80088a4:	4b2a      	ldr	r3, [pc, #168]	@ (8008950 <MX_TIM3_Init+0xf0>)
 80088a6:	2200      	movs	r2, #0
 80088a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80088aa:	4829      	ldr	r0, [pc, #164]	@ (8008950 <MX_TIM3_Init+0xf0>)
 80088ac:	f00d fb88 	bl	8015fc0 <HAL_TIM_PWM_Init>
 80088b0:	4603      	mov	r3, r0
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d001      	beq.n	80088ba <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80088b6:	f7fe ffc7 	bl	8007848 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80088ba:	2300      	movs	r3, #0
 80088bc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80088be:	2300      	movs	r3, #0
 80088c0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80088c2:	f107 031c 	add.w	r3, r7, #28
 80088c6:	4619      	mov	r1, r3
 80088c8:	4821      	ldr	r0, [pc, #132]	@ (8008950 <MX_TIM3_Init+0xf0>)
 80088ca:	f00e fe9d 	bl	8017608 <HAL_TIMEx_MasterConfigSynchronization>
 80088ce:	4603      	mov	r3, r0
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d001      	beq.n	80088d8 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80088d4:	f7fe ffb8 	bl	8007848 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80088d8:	2360      	movs	r3, #96	@ 0x60
 80088da:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80088dc:	2300      	movs	r3, #0
 80088de:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80088e0:	2300      	movs	r3, #0
 80088e2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80088e4:	2300      	movs	r3, #0
 80088e6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80088e8:	463b      	mov	r3, r7
 80088ea:	2200      	movs	r2, #0
 80088ec:	4619      	mov	r1, r3
 80088ee:	4818      	ldr	r0, [pc, #96]	@ (8008950 <MX_TIM3_Init+0xf0>)
 80088f0:	f00d fed4 	bl	801669c <HAL_TIM_PWM_ConfigChannel>
 80088f4:	4603      	mov	r3, r0
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d001      	beq.n	80088fe <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80088fa:	f7fe ffa5 	bl	8007848 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80088fe:	463b      	mov	r3, r7
 8008900:	2204      	movs	r2, #4
 8008902:	4619      	mov	r1, r3
 8008904:	4812      	ldr	r0, [pc, #72]	@ (8008950 <MX_TIM3_Init+0xf0>)
 8008906:	f00d fec9 	bl	801669c <HAL_TIM_PWM_ConfigChannel>
 800890a:	4603      	mov	r3, r0
 800890c:	2b00      	cmp	r3, #0
 800890e:	d001      	beq.n	8008914 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8008910:	f7fe ff9a 	bl	8007848 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8008914:	463b      	mov	r3, r7
 8008916:	2208      	movs	r2, #8
 8008918:	4619      	mov	r1, r3
 800891a:	480d      	ldr	r0, [pc, #52]	@ (8008950 <MX_TIM3_Init+0xf0>)
 800891c:	f00d febe 	bl	801669c <HAL_TIM_PWM_ConfigChannel>
 8008920:	4603      	mov	r3, r0
 8008922:	2b00      	cmp	r3, #0
 8008924:	d001      	beq.n	800892a <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 8008926:	f7fe ff8f 	bl	8007848 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800892a:	463b      	mov	r3, r7
 800892c:	220c      	movs	r2, #12
 800892e:	4619      	mov	r1, r3
 8008930:	4807      	ldr	r0, [pc, #28]	@ (8008950 <MX_TIM3_Init+0xf0>)
 8008932:	f00d feb3 	bl	801669c <HAL_TIM_PWM_ConfigChannel>
 8008936:	4603      	mov	r3, r0
 8008938:	2b00      	cmp	r3, #0
 800893a:	d001      	beq.n	8008940 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 800893c:	f7fe ff84 	bl	8007848 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8008940:	4803      	ldr	r0, [pc, #12]	@ (8008950 <MX_TIM3_Init+0xf0>)
 8008942:	f000 f90b 	bl	8008b5c <HAL_TIM_MspPostInit>

}
 8008946:	bf00      	nop
 8008948:	3728      	adds	r7, #40	@ 0x28
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}
 800894e:	bf00      	nop
 8008950:	24000418 	.word	0x24000418
 8008954:	40000400 	.word	0x40000400

08008958 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b088      	sub	sp, #32
 800895c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800895e:	f107 0310 	add.w	r3, r7, #16
 8008962:	2200      	movs	r2, #0
 8008964:	601a      	str	r2, [r3, #0]
 8008966:	605a      	str	r2, [r3, #4]
 8008968:	609a      	str	r2, [r3, #8]
 800896a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800896c:	1d3b      	adds	r3, r7, #4
 800896e:	2200      	movs	r2, #0
 8008970:	601a      	str	r2, [r3, #0]
 8008972:	605a      	str	r2, [r3, #4]
 8008974:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8008976:	4b21      	ldr	r3, [pc, #132]	@ (80089fc <MX_TIM8_Init+0xa4>)
 8008978:	4a21      	ldr	r2, [pc, #132]	@ (8008a00 <MX_TIM8_Init+0xa8>)
 800897a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 5549;
 800897c:	4b1f      	ldr	r3, [pc, #124]	@ (80089fc <MX_TIM8_Init+0xa4>)
 800897e:	f241 52ad 	movw	r2, #5549	@ 0x15ad
 8008982:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008984:	4b1d      	ldr	r3, [pc, #116]	@ (80089fc <MX_TIM8_Init+0xa4>)
 8008986:	2200      	movs	r2, #0
 8008988:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 9999;
 800898a:	4b1c      	ldr	r3, [pc, #112]	@ (80089fc <MX_TIM8_Init+0xa4>)
 800898c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8008990:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008992:	4b1a      	ldr	r3, [pc, #104]	@ (80089fc <MX_TIM8_Init+0xa4>)
 8008994:	2200      	movs	r2, #0
 8008996:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8008998:	4b18      	ldr	r3, [pc, #96]	@ (80089fc <MX_TIM8_Init+0xa4>)
 800899a:	2200      	movs	r2, #0
 800899c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800899e:	4b17      	ldr	r3, [pc, #92]	@ (80089fc <MX_TIM8_Init+0xa4>)
 80089a0:	2200      	movs	r2, #0
 80089a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80089a4:	4815      	ldr	r0, [pc, #84]	@ (80089fc <MX_TIM8_Init+0xa4>)
 80089a6:	f00d f9b0 	bl	8015d0a <HAL_TIM_Base_Init>
 80089aa:	4603      	mov	r3, r0
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d001      	beq.n	80089b4 <MX_TIM8_Init+0x5c>
  {
    Error_Handler();
 80089b0:	f7fe ff4a 	bl	8007848 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80089b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80089b8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80089ba:	f107 0310 	add.w	r3, r7, #16
 80089be:	4619      	mov	r1, r3
 80089c0:	480e      	ldr	r0, [pc, #56]	@ (80089fc <MX_TIM8_Init+0xa4>)
 80089c2:	f00d ff7f 	bl	80168c4 <HAL_TIM_ConfigClockSource>
 80089c6:	4603      	mov	r3, r0
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d001      	beq.n	80089d0 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 80089cc:	f7fe ff3c 	bl	8007848 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80089d0:	2320      	movs	r3, #32
 80089d2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 80089d4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80089d8:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80089da:	2300      	movs	r3, #0
 80089dc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80089de:	1d3b      	adds	r3, r7, #4
 80089e0:	4619      	mov	r1, r3
 80089e2:	4806      	ldr	r0, [pc, #24]	@ (80089fc <MX_TIM8_Init+0xa4>)
 80089e4:	f00e fe10 	bl	8017608 <HAL_TIMEx_MasterConfigSynchronization>
 80089e8:	4603      	mov	r3, r0
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d001      	beq.n	80089f2 <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 80089ee:	f7fe ff2b 	bl	8007848 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80089f2:	bf00      	nop
 80089f4:	3720      	adds	r7, #32
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}
 80089fa:	bf00      	nop
 80089fc:	24000464 	.word	0x24000464
 8008a00:	40010400 	.word	0x40010400

08008a04 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8008a04:	b480      	push	{r7}
 8008a06:	b085      	sub	sp, #20
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	4a16      	ldr	r2, [pc, #88]	@ (8008a6c <HAL_TIM_PWM_MspInit+0x68>)
 8008a12:	4293      	cmp	r3, r2
 8008a14:	d10f      	bne.n	8008a36 <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8008a16:	4b16      	ldr	r3, [pc, #88]	@ (8008a70 <HAL_TIM_PWM_MspInit+0x6c>)
 8008a18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008a1c:	4a14      	ldr	r2, [pc, #80]	@ (8008a70 <HAL_TIM_PWM_MspInit+0x6c>)
 8008a1e:	f043 0301 	orr.w	r3, r3, #1
 8008a22:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8008a26:	4b12      	ldr	r3, [pc, #72]	@ (8008a70 <HAL_TIM_PWM_MspInit+0x6c>)
 8008a28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008a2c:	f003 0301 	and.w	r3, r3, #1
 8008a30:	60fb      	str	r3, [r7, #12]
 8008a32:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8008a34:	e013      	b.n	8008a5e <HAL_TIM_PWM_MspInit+0x5a>
  else if(tim_pwmHandle->Instance==TIM3)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	4a0e      	ldr	r2, [pc, #56]	@ (8008a74 <HAL_TIM_PWM_MspInit+0x70>)
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	d10e      	bne.n	8008a5e <HAL_TIM_PWM_MspInit+0x5a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8008a40:	4b0b      	ldr	r3, [pc, #44]	@ (8008a70 <HAL_TIM_PWM_MspInit+0x6c>)
 8008a42:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008a46:	4a0a      	ldr	r2, [pc, #40]	@ (8008a70 <HAL_TIM_PWM_MspInit+0x6c>)
 8008a48:	f043 0302 	orr.w	r3, r3, #2
 8008a4c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8008a50:	4b07      	ldr	r3, [pc, #28]	@ (8008a70 <HAL_TIM_PWM_MspInit+0x6c>)
 8008a52:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008a56:	f003 0302 	and.w	r3, r3, #2
 8008a5a:	60bb      	str	r3, [r7, #8]
 8008a5c:	68bb      	ldr	r3, [r7, #8]
}
 8008a5e:	bf00      	nop
 8008a60:	3714      	adds	r7, #20
 8008a62:	46bd      	mov	sp, r7
 8008a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a68:	4770      	bx	lr
 8008a6a:	bf00      	nop
 8008a6c:	40010000 	.word	0x40010000
 8008a70:	58024400 	.word	0x58024400
 8008a74:	40000400 	.word	0x40000400

08008a78 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b08a      	sub	sp, #40	@ 0x28
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008a80:	f107 0314 	add.w	r3, r7, #20
 8008a84:	2200      	movs	r2, #0
 8008a86:	601a      	str	r2, [r3, #0]
 8008a88:	605a      	str	r2, [r3, #4]
 8008a8a:	609a      	str	r2, [r3, #8]
 8008a8c:	60da      	str	r2, [r3, #12]
 8008a8e:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a98:	d135      	bne.n	8008b06 <HAL_TIM_IC_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8008a9a:	4b1d      	ldr	r3, [pc, #116]	@ (8008b10 <HAL_TIM_IC_MspInit+0x98>)
 8008a9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008aa0:	4a1b      	ldr	r2, [pc, #108]	@ (8008b10 <HAL_TIM_IC_MspInit+0x98>)
 8008aa2:	f043 0301 	orr.w	r3, r3, #1
 8008aa6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8008aaa:	4b19      	ldr	r3, [pc, #100]	@ (8008b10 <HAL_TIM_IC_MspInit+0x98>)
 8008aac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008ab0:	f003 0301 	and.w	r3, r3, #1
 8008ab4:	613b      	str	r3, [r7, #16]
 8008ab6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008ab8:	4b15      	ldr	r3, [pc, #84]	@ (8008b10 <HAL_TIM_IC_MspInit+0x98>)
 8008aba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008abe:	4a14      	ldr	r2, [pc, #80]	@ (8008b10 <HAL_TIM_IC_MspInit+0x98>)
 8008ac0:	f043 0301 	orr.w	r3, r3, #1
 8008ac4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008ac8:	4b11      	ldr	r3, [pc, #68]	@ (8008b10 <HAL_TIM_IC_MspInit+0x98>)
 8008aca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008ace:	f003 0301 	and.w	r3, r3, #1
 8008ad2:	60fb      	str	r3, [r7, #12]
 8008ad4:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ada:	2302      	movs	r3, #2
 8008adc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ade:	2300      	movs	r3, #0
 8008ae0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008aea:	f107 0314 	add.w	r3, r7, #20
 8008aee:	4619      	mov	r1, r3
 8008af0:	4808      	ldr	r0, [pc, #32]	@ (8008b14 <HAL_TIM_IC_MspInit+0x9c>)
 8008af2:	f005 f9b1 	bl	800de58 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8008af6:	2200      	movs	r2, #0
 8008af8:	2101      	movs	r1, #1
 8008afa:	201c      	movs	r0, #28
 8008afc:	f002 faad 	bl	800b05a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8008b00:	201c      	movs	r0, #28
 8008b02:	f002 fac4 	bl	800b08e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8008b06:	bf00      	nop
 8008b08:	3728      	adds	r7, #40	@ 0x28
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bd80      	pop	{r7, pc}
 8008b0e:	bf00      	nop
 8008b10:	58024400 	.word	0x58024400
 8008b14:	58020000 	.word	0x58020000

08008b18 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8008b18:	b480      	push	{r7}
 8008b1a:	b085      	sub	sp, #20
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM8)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	4a0b      	ldr	r2, [pc, #44]	@ (8008b54 <HAL_TIM_Base_MspInit+0x3c>)
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d10e      	bne.n	8008b48 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8008b2a:	4b0b      	ldr	r3, [pc, #44]	@ (8008b58 <HAL_TIM_Base_MspInit+0x40>)
 8008b2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008b30:	4a09      	ldr	r2, [pc, #36]	@ (8008b58 <HAL_TIM_Base_MspInit+0x40>)
 8008b32:	f043 0302 	orr.w	r3, r3, #2
 8008b36:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8008b3a:	4b07      	ldr	r3, [pc, #28]	@ (8008b58 <HAL_TIM_Base_MspInit+0x40>)
 8008b3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008b40:	f003 0302 	and.w	r3, r3, #2
 8008b44:	60fb      	str	r3, [r7, #12]
 8008b46:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8008b48:	bf00      	nop
 8008b4a:	3714      	adds	r7, #20
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b52:	4770      	bx	lr
 8008b54:	40010400 	.word	0x40010400
 8008b58:	58024400 	.word	0x58024400

08008b5c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b08a      	sub	sp, #40	@ 0x28
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008b64:	f107 0314 	add.w	r3, r7, #20
 8008b68:	2200      	movs	r2, #0
 8008b6a:	601a      	str	r2, [r3, #0]
 8008b6c:	605a      	str	r2, [r3, #4]
 8008b6e:	609a      	str	r2, [r3, #8]
 8008b70:	60da      	str	r2, [r3, #12]
 8008b72:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	4a26      	ldr	r2, [pc, #152]	@ (8008c14 <HAL_TIM_MspPostInit+0xb8>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d120      	bne.n	8008bc0 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8008b7e:	4b26      	ldr	r3, [pc, #152]	@ (8008c18 <HAL_TIM_MspPostInit+0xbc>)
 8008b80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008b84:	4a24      	ldr	r2, [pc, #144]	@ (8008c18 <HAL_TIM_MspPostInit+0xbc>)
 8008b86:	f043 0310 	orr.w	r3, r3, #16
 8008b8a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008b8e:	4b22      	ldr	r3, [pc, #136]	@ (8008c18 <HAL_TIM_MspPostInit+0xbc>)
 8008b90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008b94:	f003 0310 	and.w	r3, r3, #16
 8008b98:	613b      	str	r3, [r7, #16]
 8008b9a:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8008b9c:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8008ba0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ba2:	2302      	movs	r3, #2
 8008ba4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008baa:	2300      	movs	r3, #0
 8008bac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8008bae:	2301      	movs	r3, #1
 8008bb0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008bb2:	f107 0314 	add.w	r3, r7, #20
 8008bb6:	4619      	mov	r1, r3
 8008bb8:	4818      	ldr	r0, [pc, #96]	@ (8008c1c <HAL_TIM_MspPostInit+0xc0>)
 8008bba:	f005 f94d 	bl	800de58 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8008bbe:	e024      	b.n	8008c0a <HAL_TIM_MspPostInit+0xae>
  else if(timHandle->Instance==TIM3)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	4a16      	ldr	r2, [pc, #88]	@ (8008c20 <HAL_TIM_MspPostInit+0xc4>)
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	d11f      	bne.n	8008c0a <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008bca:	4b13      	ldr	r3, [pc, #76]	@ (8008c18 <HAL_TIM_MspPostInit+0xbc>)
 8008bcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008bd0:	4a11      	ldr	r2, [pc, #68]	@ (8008c18 <HAL_TIM_MspPostInit+0xbc>)
 8008bd2:	f043 0304 	orr.w	r3, r3, #4
 8008bd6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008bda:	4b0f      	ldr	r3, [pc, #60]	@ (8008c18 <HAL_TIM_MspPostInit+0xbc>)
 8008bdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008be0:	f003 0304 	and.w	r3, r3, #4
 8008be4:	60fb      	str	r3, [r7, #12]
 8008be6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8008be8:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8008bec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008bee:	2302      	movs	r3, #2
 8008bf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8008bfa:	2302      	movs	r3, #2
 8008bfc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008bfe:	f107 0314 	add.w	r3, r7, #20
 8008c02:	4619      	mov	r1, r3
 8008c04:	4807      	ldr	r0, [pc, #28]	@ (8008c24 <HAL_TIM_MspPostInit+0xc8>)
 8008c06:	f005 f927 	bl	800de58 <HAL_GPIO_Init>
}
 8008c0a:	bf00      	nop
 8008c0c:	3728      	adds	r7, #40	@ 0x28
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd80      	pop	{r7, pc}
 8008c12:	bf00      	nop
 8008c14:	40010000 	.word	0x40010000
 8008c18:	58024400 	.word	0x58024400
 8008c1c:	58021000 	.word	0x58021000
 8008c20:	40000400 	.word	0x40000400
 8008c24:	58020800 	.word	0x58020800

08008c28 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8008c2c:	4b22      	ldr	r3, [pc, #136]	@ (8008cb8 <MX_USART1_UART_Init+0x90>)
 8008c2e:	4a23      	ldr	r2, [pc, #140]	@ (8008cbc <MX_USART1_UART_Init+0x94>)
 8008c30:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8008c32:	4b21      	ldr	r3, [pc, #132]	@ (8008cb8 <MX_USART1_UART_Init+0x90>)
 8008c34:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8008c38:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008c3a:	4b1f      	ldr	r3, [pc, #124]	@ (8008cb8 <MX_USART1_UART_Init+0x90>)
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008c40:	4b1d      	ldr	r3, [pc, #116]	@ (8008cb8 <MX_USART1_UART_Init+0x90>)
 8008c42:	2200      	movs	r2, #0
 8008c44:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008c46:	4b1c      	ldr	r3, [pc, #112]	@ (8008cb8 <MX_USART1_UART_Init+0x90>)
 8008c48:	2200      	movs	r2, #0
 8008c4a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008c4c:	4b1a      	ldr	r3, [pc, #104]	@ (8008cb8 <MX_USART1_UART_Init+0x90>)
 8008c4e:	220c      	movs	r2, #12
 8008c50:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008c52:	4b19      	ldr	r3, [pc, #100]	@ (8008cb8 <MX_USART1_UART_Init+0x90>)
 8008c54:	2200      	movs	r2, #0
 8008c56:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008c58:	4b17      	ldr	r3, [pc, #92]	@ (8008cb8 <MX_USART1_UART_Init+0x90>)
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008c5e:	4b16      	ldr	r3, [pc, #88]	@ (8008cb8 <MX_USART1_UART_Init+0x90>)
 8008c60:	2200      	movs	r2, #0
 8008c62:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8008c64:	4b14      	ldr	r3, [pc, #80]	@ (8008cb8 <MX_USART1_UART_Init+0x90>)
 8008c66:	2200      	movs	r2, #0
 8008c68:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008c6a:	4b13      	ldr	r3, [pc, #76]	@ (8008cb8 <MX_USART1_UART_Init+0x90>)
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008c70:	4811      	ldr	r0, [pc, #68]	@ (8008cb8 <MX_USART1_UART_Init+0x90>)
 8008c72:	f00e fe0f 	bl	8017894 <HAL_UART_Init>
 8008c76:	4603      	mov	r3, r0
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d001      	beq.n	8008c80 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8008c7c:	f7fe fde4 	bl	8007848 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008c80:	2100      	movs	r1, #0
 8008c82:	480d      	ldr	r0, [pc, #52]	@ (8008cb8 <MX_USART1_UART_Init+0x90>)
 8008c84:	f011 fca3 	bl	801a5ce <HAL_UARTEx_SetTxFifoThreshold>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d001      	beq.n	8008c92 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8008c8e:	f7fe fddb 	bl	8007848 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008c92:	2100      	movs	r1, #0
 8008c94:	4808      	ldr	r0, [pc, #32]	@ (8008cb8 <MX_USART1_UART_Init+0x90>)
 8008c96:	f011 fcd8 	bl	801a64a <HAL_UARTEx_SetRxFifoThreshold>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d001      	beq.n	8008ca4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8008ca0:	f7fe fdd2 	bl	8007848 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8008ca4:	4804      	ldr	r0, [pc, #16]	@ (8008cb8 <MX_USART1_UART_Init+0x90>)
 8008ca6:	f011 fc59 	bl	801a55c <HAL_UARTEx_DisableFifoMode>
 8008caa:	4603      	mov	r3, r0
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d001      	beq.n	8008cb4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8008cb0:	f7fe fdca 	bl	8007848 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8008cb4:	bf00      	nop
 8008cb6:	bd80      	pop	{r7, pc}
 8008cb8:	240004b0 	.word	0x240004b0
 8008cbc:	40011000 	.word	0x40011000

08008cc0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b0b8      	sub	sp, #224	@ 0xe0
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008cc8:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8008ccc:	2200      	movs	r2, #0
 8008cce:	601a      	str	r2, [r3, #0]
 8008cd0:	605a      	str	r2, [r3, #4]
 8008cd2:	609a      	str	r2, [r3, #8]
 8008cd4:	60da      	str	r2, [r3, #12]
 8008cd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008cd8:	f107 0310 	add.w	r3, r7, #16
 8008cdc:	22b8      	movs	r2, #184	@ 0xb8
 8008cde:	2100      	movs	r1, #0
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	f014 fef3 	bl	801dacc <memset>
  if(uartHandle->Instance==USART1)
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	4a2b      	ldr	r2, [pc, #172]	@ (8008d98 <HAL_UART_MspInit+0xd8>)
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d14e      	bne.n	8008d8e <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8008cf0:	f04f 0201 	mov.w	r2, #1
 8008cf4:	f04f 0300 	mov.w	r3, #0
 8008cf8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008d02:	f107 0310 	add.w	r3, r7, #16
 8008d06:	4618      	mov	r0, r3
 8008d08:	f008 feb8 	bl	8011a7c <HAL_RCCEx_PeriphCLKConfig>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d001      	beq.n	8008d16 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8008d12:	f7fe fd99 	bl	8007848 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008d16:	4b21      	ldr	r3, [pc, #132]	@ (8008d9c <HAL_UART_MspInit+0xdc>)
 8008d18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008d1c:	4a1f      	ldr	r2, [pc, #124]	@ (8008d9c <HAL_UART_MspInit+0xdc>)
 8008d1e:	f043 0310 	orr.w	r3, r3, #16
 8008d22:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8008d26:	4b1d      	ldr	r3, [pc, #116]	@ (8008d9c <HAL_UART_MspInit+0xdc>)
 8008d28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008d2c:	f003 0310 	and.w	r3, r3, #16
 8008d30:	60fb      	str	r3, [r7, #12]
 8008d32:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008d34:	4b19      	ldr	r3, [pc, #100]	@ (8008d9c <HAL_UART_MspInit+0xdc>)
 8008d36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008d3a:	4a18      	ldr	r2, [pc, #96]	@ (8008d9c <HAL_UART_MspInit+0xdc>)
 8008d3c:	f043 0301 	orr.w	r3, r3, #1
 8008d40:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008d44:	4b15      	ldr	r3, [pc, #84]	@ (8008d9c <HAL_UART_MspInit+0xdc>)
 8008d46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008d4a:	f003 0301 	and.w	r3, r3, #1
 8008d4e:	60bb      	str	r3, [r7, #8]
 8008d50:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8008d52:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8008d56:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d5a:	2302      	movs	r3, #2
 8008d5c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d60:	2300      	movs	r3, #0
 8008d62:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008d66:	2300      	movs	r3, #0
 8008d68:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8008d6c:	2307      	movs	r3, #7
 8008d6e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008d72:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8008d76:	4619      	mov	r1, r3
 8008d78:	4809      	ldr	r0, [pc, #36]	@ (8008da0 <HAL_UART_MspInit+0xe0>)
 8008d7a:	f005 f86d 	bl	800de58 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8008d7e:	2200      	movs	r2, #0
 8008d80:	2100      	movs	r1, #0
 8008d82:	2025      	movs	r0, #37	@ 0x25
 8008d84:	f002 f969 	bl	800b05a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8008d88:	2025      	movs	r0, #37	@ 0x25
 8008d8a:	f002 f980 	bl	800b08e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8008d8e:	bf00      	nop
 8008d90:	37e0      	adds	r7, #224	@ 0xe0
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bd80      	pop	{r7, pc}
 8008d96:	bf00      	nop
 8008d98:	40011000 	.word	0x40011000
 8008d9c:	58024400 	.word	0x58024400
 8008da0:	58020000 	.word	0x58020000

08008da4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8008da4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8008ddc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8008da8:	f7ff fbe6 	bl	8008578 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008dac:	480c      	ldr	r0, [pc, #48]	@ (8008de0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8008dae:	490d      	ldr	r1, [pc, #52]	@ (8008de4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008db0:	4a0d      	ldr	r2, [pc, #52]	@ (8008de8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8008db2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008db4:	e002      	b.n	8008dbc <LoopCopyDataInit>

08008db6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008db6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008db8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008dba:	3304      	adds	r3, #4

08008dbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008dbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008dbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008dc0:	d3f9      	bcc.n	8008db6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008dc2:	4a0a      	ldr	r2, [pc, #40]	@ (8008dec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008dc4:	4c0a      	ldr	r4, [pc, #40]	@ (8008df0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8008dc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008dc8:	e001      	b.n	8008dce <LoopFillZerobss>

08008dca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008dca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008dcc:	3204      	adds	r2, #4

08008dce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008dce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008dd0:	d3fb      	bcc.n	8008dca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8008dd2:	f014 fe89 	bl	801dae8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008dd6:	f7fc f8b3 	bl	8004f40 <main>
  bx  lr
 8008dda:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8008ddc:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8008de0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8008de4:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8008de8:	08020350 	.word	0x08020350
  ldr r2, =_sbss
 8008dec:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8008df0:	240008ac 	.word	0x240008ac

08008df4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008df4:	e7fe      	b.n	8008df4 <ADC3_IRQHandler>
	...

08008df8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b082      	sub	sp, #8
 8008dfc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008dfe:	2003      	movs	r0, #3
 8008e00:	f002 f920 	bl	800b044 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008e04:	f008 fc64 	bl	80116d0 <HAL_RCC_GetSysClockFreq>
 8008e08:	4602      	mov	r2, r0
 8008e0a:	4b15      	ldr	r3, [pc, #84]	@ (8008e60 <HAL_Init+0x68>)
 8008e0c:	699b      	ldr	r3, [r3, #24]
 8008e0e:	0a1b      	lsrs	r3, r3, #8
 8008e10:	f003 030f 	and.w	r3, r3, #15
 8008e14:	4913      	ldr	r1, [pc, #76]	@ (8008e64 <HAL_Init+0x6c>)
 8008e16:	5ccb      	ldrb	r3, [r1, r3]
 8008e18:	f003 031f 	and.w	r3, r3, #31
 8008e1c:	fa22 f303 	lsr.w	r3, r2, r3
 8008e20:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008e22:	4b0f      	ldr	r3, [pc, #60]	@ (8008e60 <HAL_Init+0x68>)
 8008e24:	699b      	ldr	r3, [r3, #24]
 8008e26:	f003 030f 	and.w	r3, r3, #15
 8008e2a:	4a0e      	ldr	r2, [pc, #56]	@ (8008e64 <HAL_Init+0x6c>)
 8008e2c:	5cd3      	ldrb	r3, [r2, r3]
 8008e2e:	f003 031f 	and.w	r3, r3, #31
 8008e32:	687a      	ldr	r2, [r7, #4]
 8008e34:	fa22 f303 	lsr.w	r3, r2, r3
 8008e38:	4a0b      	ldr	r2, [pc, #44]	@ (8008e68 <HAL_Init+0x70>)
 8008e3a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008e3c:	4a0b      	ldr	r2, [pc, #44]	@ (8008e6c <HAL_Init+0x74>)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008e42:	200f      	movs	r0, #15
 8008e44:	f000 f814 	bl	8008e70 <HAL_InitTick>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d001      	beq.n	8008e52 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8008e4e:	2301      	movs	r3, #1
 8008e50:	e002      	b.n	8008e58 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8008e52:	f7fe febb 	bl	8007bcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008e56:	2300      	movs	r3, #0
}
 8008e58:	4618      	mov	r0, r3
 8008e5a:	3708      	adds	r7, #8
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}
 8008e60:	58024400 	.word	0x58024400
 8008e64:	0801e594 	.word	0x0801e594
 8008e68:	24000008 	.word	0x24000008
 8008e6c:	24000004 	.word	0x24000004

08008e70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b082      	sub	sp, #8
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8008e78:	4b15      	ldr	r3, [pc, #84]	@ (8008ed0 <HAL_InitTick+0x60>)
 8008e7a:	781b      	ldrb	r3, [r3, #0]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d101      	bne.n	8008e84 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8008e80:	2301      	movs	r3, #1
 8008e82:	e021      	b.n	8008ec8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8008e84:	4b13      	ldr	r3, [pc, #76]	@ (8008ed4 <HAL_InitTick+0x64>)
 8008e86:	681a      	ldr	r2, [r3, #0]
 8008e88:	4b11      	ldr	r3, [pc, #68]	@ (8008ed0 <HAL_InitTick+0x60>)
 8008e8a:	781b      	ldrb	r3, [r3, #0]
 8008e8c:	4619      	mov	r1, r3
 8008e8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008e92:	fbb3 f3f1 	udiv	r3, r3, r1
 8008e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	f002 f905 	bl	800b0aa <HAL_SYSTICK_Config>
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d001      	beq.n	8008eaa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8008ea6:	2301      	movs	r3, #1
 8008ea8:	e00e      	b.n	8008ec8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2b0f      	cmp	r3, #15
 8008eae:	d80a      	bhi.n	8008ec6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	6879      	ldr	r1, [r7, #4]
 8008eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8008eb8:	f002 f8cf 	bl	800b05a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008ebc:	4a06      	ldr	r2, [pc, #24]	@ (8008ed8 <HAL_InitTick+0x68>)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	e000      	b.n	8008ec8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8008ec6:	2301      	movs	r3, #1
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	3708      	adds	r7, #8
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd80      	pop	{r7, pc}
 8008ed0:	24000010 	.word	0x24000010
 8008ed4:	24000004 	.word	0x24000004
 8008ed8:	2400000c 	.word	0x2400000c

08008edc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008edc:	b480      	push	{r7}
 8008ede:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8008ee0:	4b06      	ldr	r3, [pc, #24]	@ (8008efc <HAL_IncTick+0x20>)
 8008ee2:	781b      	ldrb	r3, [r3, #0]
 8008ee4:	461a      	mov	r2, r3
 8008ee6:	4b06      	ldr	r3, [pc, #24]	@ (8008f00 <HAL_IncTick+0x24>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	4413      	add	r3, r2
 8008eec:	4a04      	ldr	r2, [pc, #16]	@ (8008f00 <HAL_IncTick+0x24>)
 8008eee:	6013      	str	r3, [r2, #0]
}
 8008ef0:	bf00      	nop
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef8:	4770      	bx	lr
 8008efa:	bf00      	nop
 8008efc:	24000010 	.word	0x24000010
 8008f00:	24000544 	.word	0x24000544

08008f04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008f04:	b480      	push	{r7}
 8008f06:	af00      	add	r7, sp, #0
  return uwTick;
 8008f08:	4b03      	ldr	r3, [pc, #12]	@ (8008f18 <HAL_GetTick+0x14>)
 8008f0a:	681b      	ldr	r3, [r3, #0]
}
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f14:	4770      	bx	lr
 8008f16:	bf00      	nop
 8008f18:	24000544 	.word	0x24000544

08008f1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b084      	sub	sp, #16
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008f24:	f7ff ffee 	bl	8008f04 <HAL_GetTick>
 8008f28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f34:	d005      	beq.n	8008f42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008f36:	4b0a      	ldr	r3, [pc, #40]	@ (8008f60 <HAL_Delay+0x44>)
 8008f38:	781b      	ldrb	r3, [r3, #0]
 8008f3a:	461a      	mov	r2, r3
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	4413      	add	r3, r2
 8008f40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008f42:	bf00      	nop
 8008f44:	f7ff ffde 	bl	8008f04 <HAL_GetTick>
 8008f48:	4602      	mov	r2, r0
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	1ad3      	subs	r3, r2, r3
 8008f4e:	68fa      	ldr	r2, [r7, #12]
 8008f50:	429a      	cmp	r2, r3
 8008f52:	d8f7      	bhi.n	8008f44 <HAL_Delay+0x28>
  {
  }
}
 8008f54:	bf00      	nop
 8008f56:	bf00      	nop
 8008f58:	3710      	adds	r7, #16
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd80      	pop	{r7, pc}
 8008f5e:	bf00      	nop
 8008f60:	24000010 	.word	0x24000010

08008f64 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8008f64:	b480      	push	{r7}
 8008f66:	b083      	sub	sp, #12
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
 8008f6c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	689b      	ldr	r3, [r3, #8]
 8008f72:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	431a      	orrs	r2, r3
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	609a      	str	r2, [r3, #8]
}
 8008f7e:	bf00      	nop
 8008f80:	370c      	adds	r7, #12
 8008f82:	46bd      	mov	sp, r7
 8008f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f88:	4770      	bx	lr

08008f8a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8008f8a:	b480      	push	{r7}
 8008f8c:	b083      	sub	sp, #12
 8008f8e:	af00      	add	r7, sp, #0
 8008f90:	6078      	str	r0, [r7, #4]
 8008f92:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	689b      	ldr	r3, [r3, #8]
 8008f98:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	431a      	orrs	r2, r3
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	609a      	str	r2, [r3, #8]
}
 8008fa4:	bf00      	nop
 8008fa6:	370c      	adds	r7, #12
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fae:	4770      	bx	lr

08008fb0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b083      	sub	sp, #12
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	689b      	ldr	r3, [r3, #8]
 8008fbc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	370c      	adds	r7, #12
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fca:	4770      	bx	lr

08008fcc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8008fcc:	b480      	push	{r7}
 8008fce:	b087      	sub	sp, #28
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	60f8      	str	r0, [r7, #12]
 8008fd4:	60b9      	str	r1, [r7, #8]
 8008fd6:	607a      	str	r2, [r7, #4]
 8008fd8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	3360      	adds	r3, #96	@ 0x60
 8008fde:	461a      	mov	r2, r3
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	009b      	lsls	r3, r3, #2
 8008fe4:	4413      	add	r3, r2
 8008fe6:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	4a10      	ldr	r2, [pc, #64]	@ (800902c <LL_ADC_SetOffset+0x60>)
 8008fec:	4293      	cmp	r3, r2
 8008fee:	d10b      	bne.n	8009008 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8008ff0:	697b      	ldr	r3, [r7, #20]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	4313      	orrs	r3, r2
 8008ffe:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8009002:	697b      	ldr	r3, [r7, #20]
 8009004:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8009006:	e00b      	b.n	8009020 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8009008:	697b      	ldr	r3, [r7, #20]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	430b      	orrs	r3, r1
 800901a:	431a      	orrs	r2, r3
 800901c:	697b      	ldr	r3, [r7, #20]
 800901e:	601a      	str	r2, [r3, #0]
}
 8009020:	bf00      	nop
 8009022:	371c      	adds	r7, #28
 8009024:	46bd      	mov	sp, r7
 8009026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902a:	4770      	bx	lr
 800902c:	58026000 	.word	0x58026000

08009030 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8009030:	b480      	push	{r7}
 8009032:	b085      	sub	sp, #20
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
 8009038:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	3360      	adds	r3, #96	@ 0x60
 800903e:	461a      	mov	r2, r3
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	009b      	lsls	r3, r3, #2
 8009044:	4413      	add	r3, r2
 8009046:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8009050:	4618      	mov	r0, r3
 8009052:	3714      	adds	r7, #20
 8009054:	46bd      	mov	sp, r7
 8009056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905a:	4770      	bx	lr

0800905c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800905c:	b480      	push	{r7}
 800905e:	b085      	sub	sp, #20
 8009060:	af00      	add	r7, sp, #0
 8009062:	60f8      	str	r0, [r7, #12]
 8009064:	60b9      	str	r1, [r7, #8]
 8009066:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	691b      	ldr	r3, [r3, #16]
 800906c:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8009070:	68bb      	ldr	r3, [r7, #8]
 8009072:	f003 031f 	and.w	r3, r3, #31
 8009076:	6879      	ldr	r1, [r7, #4]
 8009078:	fa01 f303 	lsl.w	r3, r1, r3
 800907c:	431a      	orrs	r2, r3
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	611a      	str	r2, [r3, #16]
}
 8009082:	bf00      	nop
 8009084:	3714      	adds	r7, #20
 8009086:	46bd      	mov	sp, r7
 8009088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908c:	4770      	bx	lr
	...

08009090 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8009090:	b480      	push	{r7}
 8009092:	b087      	sub	sp, #28
 8009094:	af00      	add	r7, sp, #0
 8009096:	60f8      	str	r0, [r7, #12]
 8009098:	60b9      	str	r1, [r7, #8]
 800909a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	4a0c      	ldr	r2, [pc, #48]	@ (80090d0 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 80090a0:	4293      	cmp	r3, r2
 80090a2:	d00e      	beq.n	80090c2 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	3360      	adds	r3, #96	@ 0x60
 80090a8:	461a      	mov	r2, r3
 80090aa:	68bb      	ldr	r3, [r7, #8]
 80090ac:	009b      	lsls	r3, r3, #2
 80090ae:	4413      	add	r3, r2
 80090b0:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80090b2:	697b      	ldr	r3, [r7, #20]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	431a      	orrs	r2, r3
 80090be:	697b      	ldr	r3, [r7, #20]
 80090c0:	601a      	str	r2, [r3, #0]
  }
}
 80090c2:	bf00      	nop
 80090c4:	371c      	adds	r7, #28
 80090c6:	46bd      	mov	sp, r7
 80090c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090cc:	4770      	bx	lr
 80090ce:	bf00      	nop
 80090d0:	58026000 	.word	0x58026000

080090d4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80090d4:	b480      	push	{r7}
 80090d6:	b087      	sub	sp, #28
 80090d8:	af00      	add	r7, sp, #0
 80090da:	60f8      	str	r0, [r7, #12]
 80090dc:	60b9      	str	r1, [r7, #8]
 80090de:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	4a0c      	ldr	r2, [pc, #48]	@ (8009114 <LL_ADC_SetOffsetSaturation+0x40>)
 80090e4:	4293      	cmp	r3, r2
 80090e6:	d10e      	bne.n	8009106 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	3360      	adds	r3, #96	@ 0x60
 80090ec:	461a      	mov	r2, r3
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	009b      	lsls	r3, r3, #2
 80090f2:	4413      	add	r3, r2
 80090f4:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80090f6:	697b      	ldr	r3, [r7, #20]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	431a      	orrs	r2, r3
 8009102:	697b      	ldr	r3, [r7, #20]
 8009104:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8009106:	bf00      	nop
 8009108:	371c      	adds	r7, #28
 800910a:	46bd      	mov	sp, r7
 800910c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009110:	4770      	bx	lr
 8009112:	bf00      	nop
 8009114:	58026000 	.word	0x58026000

08009118 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8009118:	b480      	push	{r7}
 800911a:	b087      	sub	sp, #28
 800911c:	af00      	add	r7, sp, #0
 800911e:	60f8      	str	r0, [r7, #12]
 8009120:	60b9      	str	r1, [r7, #8]
 8009122:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	4a0c      	ldr	r2, [pc, #48]	@ (8009158 <LL_ADC_SetOffsetSign+0x40>)
 8009128:	4293      	cmp	r3, r2
 800912a:	d10e      	bne.n	800914a <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	3360      	adds	r3, #96	@ 0x60
 8009130:	461a      	mov	r2, r3
 8009132:	68bb      	ldr	r3, [r7, #8]
 8009134:	009b      	lsls	r3, r3, #2
 8009136:	4413      	add	r3, r2
 8009138:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800913a:	697b      	ldr	r3, [r7, #20]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	431a      	orrs	r2, r3
 8009146:	697b      	ldr	r3, [r7, #20]
 8009148:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 800914a:	bf00      	nop
 800914c:	371c      	adds	r7, #28
 800914e:	46bd      	mov	sp, r7
 8009150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009154:	4770      	bx	lr
 8009156:	bf00      	nop
 8009158:	58026000 	.word	0x58026000

0800915c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800915c:	b480      	push	{r7}
 800915e:	b087      	sub	sp, #28
 8009160:	af00      	add	r7, sp, #0
 8009162:	60f8      	str	r0, [r7, #12]
 8009164:	60b9      	str	r1, [r7, #8]
 8009166:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	3360      	adds	r3, #96	@ 0x60
 800916c:	461a      	mov	r2, r3
 800916e:	68bb      	ldr	r3, [r7, #8]
 8009170:	009b      	lsls	r3, r3, #2
 8009172:	4413      	add	r3, r2
 8009174:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	4a0c      	ldr	r2, [pc, #48]	@ (80091ac <LL_ADC_SetOffsetState+0x50>)
 800917a:	4293      	cmp	r3, r2
 800917c:	d108      	bne.n	8009190 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 800917e:	697b      	ldr	r3, [r7, #20]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	431a      	orrs	r2, r3
 800918a:	697b      	ldr	r3, [r7, #20]
 800918c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 800918e:	e007      	b.n	80091a0 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8009190:	697b      	ldr	r3, [r7, #20]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	431a      	orrs	r2, r3
 800919c:	697b      	ldr	r3, [r7, #20]
 800919e:	601a      	str	r2, [r3, #0]
}
 80091a0:	bf00      	nop
 80091a2:	371c      	adds	r7, #28
 80091a4:	46bd      	mov	sp, r7
 80091a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091aa:	4770      	bx	lr
 80091ac:	58026000 	.word	0x58026000

080091b0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80091b0:	b480      	push	{r7}
 80091b2:	b083      	sub	sp, #12
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	68db      	ldr	r3, [r3, #12]
 80091bc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d101      	bne.n	80091c8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80091c4:	2301      	movs	r3, #1
 80091c6:	e000      	b.n	80091ca <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80091c8:	2300      	movs	r3, #0
}
 80091ca:	4618      	mov	r0, r3
 80091cc:	370c      	adds	r7, #12
 80091ce:	46bd      	mov	sp, r7
 80091d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d4:	4770      	bx	lr

080091d6 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80091d6:	b480      	push	{r7}
 80091d8:	b087      	sub	sp, #28
 80091da:	af00      	add	r7, sp, #0
 80091dc:	60f8      	str	r0, [r7, #12]
 80091de:	60b9      	str	r1, [r7, #8]
 80091e0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	3330      	adds	r3, #48	@ 0x30
 80091e6:	461a      	mov	r2, r3
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	0a1b      	lsrs	r3, r3, #8
 80091ec:	009b      	lsls	r3, r3, #2
 80091ee:	f003 030c 	and.w	r3, r3, #12
 80091f2:	4413      	add	r3, r2
 80091f4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80091f6:	697b      	ldr	r3, [r7, #20]
 80091f8:	681a      	ldr	r2, [r3, #0]
 80091fa:	68bb      	ldr	r3, [r7, #8]
 80091fc:	f003 031f 	and.w	r3, r3, #31
 8009200:	211f      	movs	r1, #31
 8009202:	fa01 f303 	lsl.w	r3, r1, r3
 8009206:	43db      	mvns	r3, r3
 8009208:	401a      	ands	r2, r3
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	0e9b      	lsrs	r3, r3, #26
 800920e:	f003 011f 	and.w	r1, r3, #31
 8009212:	68bb      	ldr	r3, [r7, #8]
 8009214:	f003 031f 	and.w	r3, r3, #31
 8009218:	fa01 f303 	lsl.w	r3, r1, r3
 800921c:	431a      	orrs	r2, r3
 800921e:	697b      	ldr	r3, [r7, #20]
 8009220:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8009222:	bf00      	nop
 8009224:	371c      	adds	r7, #28
 8009226:	46bd      	mov	sp, r7
 8009228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922c:	4770      	bx	lr

0800922e <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800922e:	b480      	push	{r7}
 8009230:	b083      	sub	sp, #12
 8009232:	af00      	add	r7, sp, #0
 8009234:	6078      	str	r0, [r7, #4]
 8009236:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	68db      	ldr	r3, [r3, #12]
 800923c:	f023 0203 	bic.w	r2, r3, #3
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	431a      	orrs	r2, r3
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	60da      	str	r2, [r3, #12]
}
 8009248:	bf00      	nop
 800924a:	370c      	adds	r7, #12
 800924c:	46bd      	mov	sp, r7
 800924e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009252:	4770      	bx	lr

08009254 <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 8009254:	b480      	push	{r7}
 8009256:	b083      	sub	sp, #12
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	68db      	ldr	r3, [r3, #12]
 8009260:	f043 0201 	orr.w	r2, r3, #1
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	60da      	str	r2, [r3, #12]
}
 8009268:	bf00      	nop
 800926a:	370c      	adds	r7, #12
 800926c:	46bd      	mov	sp, r7
 800926e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009272:	4770      	bx	lr

08009274 <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 8009274:	b480      	push	{r7}
 8009276:	b083      	sub	sp, #12
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
 800927c:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	4a08      	ldr	r2, [pc, #32]	@ (80092a4 <LL_ADC_REG_SetDMATransferMode+0x30>)
 8009282:	4293      	cmp	r3, r2
 8009284:	d107      	bne.n	8009296 <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	68db      	ldr	r3, [r3, #12]
 800928a:	f023 0203 	bic.w	r2, r3, #3
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	431a      	orrs	r2, r3
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	60da      	str	r2, [r3, #12]
  }
}
 8009296:	bf00      	nop
 8009298:	370c      	adds	r7, #12
 800929a:	46bd      	mov	sp, r7
 800929c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a0:	4770      	bx	lr
 80092a2:	bf00      	nop
 80092a4:	58026000 	.word	0x58026000

080092a8 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80092a8:	b480      	push	{r7}
 80092aa:	b083      	sub	sp, #12
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80092b4:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d101      	bne.n	80092c0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80092bc:	2301      	movs	r3, #1
 80092be:	e000      	b.n	80092c2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80092c0:	2300      	movs	r3, #0
}
 80092c2:	4618      	mov	r0, r3
 80092c4:	370c      	adds	r7, #12
 80092c6:	46bd      	mov	sp, r7
 80092c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092cc:	4770      	bx	lr

080092ce <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80092ce:	b480      	push	{r7}
 80092d0:	b087      	sub	sp, #28
 80092d2:	af00      	add	r7, sp, #0
 80092d4:	60f8      	str	r0, [r7, #12]
 80092d6:	60b9      	str	r1, [r7, #8]
 80092d8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	3314      	adds	r3, #20
 80092de:	461a      	mov	r2, r3
 80092e0:	68bb      	ldr	r3, [r7, #8]
 80092e2:	0e5b      	lsrs	r3, r3, #25
 80092e4:	009b      	lsls	r3, r3, #2
 80092e6:	f003 0304 	and.w	r3, r3, #4
 80092ea:	4413      	add	r3, r2
 80092ec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80092ee:	697b      	ldr	r3, [r7, #20]
 80092f0:	681a      	ldr	r2, [r3, #0]
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	0d1b      	lsrs	r3, r3, #20
 80092f6:	f003 031f 	and.w	r3, r3, #31
 80092fa:	2107      	movs	r1, #7
 80092fc:	fa01 f303 	lsl.w	r3, r1, r3
 8009300:	43db      	mvns	r3, r3
 8009302:	401a      	ands	r2, r3
 8009304:	68bb      	ldr	r3, [r7, #8]
 8009306:	0d1b      	lsrs	r3, r3, #20
 8009308:	f003 031f 	and.w	r3, r3, #31
 800930c:	6879      	ldr	r1, [r7, #4]
 800930e:	fa01 f303 	lsl.w	r3, r1, r3
 8009312:	431a      	orrs	r2, r3
 8009314:	697b      	ldr	r3, [r7, #20]
 8009316:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8009318:	bf00      	nop
 800931a:	371c      	adds	r7, #28
 800931c:	46bd      	mov	sp, r7
 800931e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009322:	4770      	bx	lr

08009324 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8009324:	b480      	push	{r7}
 8009326:	b085      	sub	sp, #20
 8009328:	af00      	add	r7, sp, #0
 800932a:	60f8      	str	r0, [r7, #12]
 800932c:	60b9      	str	r1, [r7, #8]
 800932e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	4a1a      	ldr	r2, [pc, #104]	@ (800939c <LL_ADC_SetChannelSingleDiff+0x78>)
 8009334:	4293      	cmp	r3, r2
 8009336:	d115      	bne.n	8009364 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800933e:	68bb      	ldr	r3, [r7, #8]
 8009340:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009344:	43db      	mvns	r3, r3
 8009346:	401a      	ands	r2, r3
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f003 0318 	and.w	r3, r3, #24
 800934e:	4914      	ldr	r1, [pc, #80]	@ (80093a0 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8009350:	40d9      	lsrs	r1, r3
 8009352:	68bb      	ldr	r3, [r7, #8]
 8009354:	400b      	ands	r3, r1
 8009356:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800935a:	431a      	orrs	r2, r3
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8009362:	e014      	b.n	800938e <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800936a:	68bb      	ldr	r3, [r7, #8]
 800936c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009370:	43db      	mvns	r3, r3
 8009372:	401a      	ands	r2, r3
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f003 0318 	and.w	r3, r3, #24
 800937a:	4909      	ldr	r1, [pc, #36]	@ (80093a0 <LL_ADC_SetChannelSingleDiff+0x7c>)
 800937c:	40d9      	lsrs	r1, r3
 800937e:	68bb      	ldr	r3, [r7, #8]
 8009380:	400b      	ands	r3, r1
 8009382:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009386:	431a      	orrs	r2, r3
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 800938e:	bf00      	nop
 8009390:	3714      	adds	r7, #20
 8009392:	46bd      	mov	sp, r7
 8009394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009398:	4770      	bx	lr
 800939a:	bf00      	nop
 800939c:	58026000 	.word	0x58026000
 80093a0:	000fffff 	.word	0x000fffff

080093a4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80093a4:	b480      	push	{r7}
 80093a6:	b083      	sub	sp, #12
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	689b      	ldr	r3, [r3, #8]
 80093b0:	f003 031f 	and.w	r3, r3, #31
}
 80093b4:	4618      	mov	r0, r3
 80093b6:	370c      	adds	r7, #12
 80093b8:	46bd      	mov	sp, r7
 80093ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093be:	4770      	bx	lr

080093c0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80093c0:	b480      	push	{r7}
 80093c2:	b083      	sub	sp, #12
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	689b      	ldr	r3, [r3, #8]
 80093cc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 80093d0:	4618      	mov	r0, r3
 80093d2:	370c      	adds	r7, #12
 80093d4:	46bd      	mov	sp, r7
 80093d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093da:	4770      	bx	lr

080093dc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80093dc:	b480      	push	{r7}
 80093de:	b083      	sub	sp, #12
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	689a      	ldr	r2, [r3, #8]
 80093e8:	4b04      	ldr	r3, [pc, #16]	@ (80093fc <LL_ADC_DisableDeepPowerDown+0x20>)
 80093ea:	4013      	ands	r3, r2
 80093ec:	687a      	ldr	r2, [r7, #4]
 80093ee:	6093      	str	r3, [r2, #8]
}
 80093f0:	bf00      	nop
 80093f2:	370c      	adds	r7, #12
 80093f4:	46bd      	mov	sp, r7
 80093f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fa:	4770      	bx	lr
 80093fc:	5fffffc0 	.word	0x5fffffc0

08009400 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8009400:	b480      	push	{r7}
 8009402:	b083      	sub	sp, #12
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	689b      	ldr	r3, [r3, #8]
 800940c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009410:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009414:	d101      	bne.n	800941a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8009416:	2301      	movs	r3, #1
 8009418:	e000      	b.n	800941c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800941a:	2300      	movs	r3, #0
}
 800941c:	4618      	mov	r0, r3
 800941e:	370c      	adds	r7, #12
 8009420:	46bd      	mov	sp, r7
 8009422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009426:	4770      	bx	lr

08009428 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8009428:	b480      	push	{r7}
 800942a:	b083      	sub	sp, #12
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	689a      	ldr	r2, [r3, #8]
 8009434:	4b05      	ldr	r3, [pc, #20]	@ (800944c <LL_ADC_EnableInternalRegulator+0x24>)
 8009436:	4013      	ands	r3, r2
 8009438:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8009440:	bf00      	nop
 8009442:	370c      	adds	r7, #12
 8009444:	46bd      	mov	sp, r7
 8009446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944a:	4770      	bx	lr
 800944c:	6fffffc0 	.word	0x6fffffc0

08009450 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8009450:	b480      	push	{r7}
 8009452:	b083      	sub	sp, #12
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	689b      	ldr	r3, [r3, #8]
 800945c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009460:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009464:	d101      	bne.n	800946a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8009466:	2301      	movs	r3, #1
 8009468:	e000      	b.n	800946c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800946a:	2300      	movs	r3, #0
}
 800946c:	4618      	mov	r0, r3
 800946e:	370c      	adds	r7, #12
 8009470:	46bd      	mov	sp, r7
 8009472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009476:	4770      	bx	lr

08009478 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8009478:	b480      	push	{r7}
 800947a:	b083      	sub	sp, #12
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	689a      	ldr	r2, [r3, #8]
 8009484:	4b05      	ldr	r3, [pc, #20]	@ (800949c <LL_ADC_Enable+0x24>)
 8009486:	4013      	ands	r3, r2
 8009488:	f043 0201 	orr.w	r2, r3, #1
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8009490:	bf00      	nop
 8009492:	370c      	adds	r7, #12
 8009494:	46bd      	mov	sp, r7
 8009496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949a:	4770      	bx	lr
 800949c:	7fffffc0 	.word	0x7fffffc0

080094a0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80094a0:	b480      	push	{r7}
 80094a2:	b083      	sub	sp, #12
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	689b      	ldr	r3, [r3, #8]
 80094ac:	f003 0301 	and.w	r3, r3, #1
 80094b0:	2b01      	cmp	r3, #1
 80094b2:	d101      	bne.n	80094b8 <LL_ADC_IsEnabled+0x18>
 80094b4:	2301      	movs	r3, #1
 80094b6:	e000      	b.n	80094ba <LL_ADC_IsEnabled+0x1a>
 80094b8:	2300      	movs	r3, #0
}
 80094ba:	4618      	mov	r0, r3
 80094bc:	370c      	adds	r7, #12
 80094be:	46bd      	mov	sp, r7
 80094c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c4:	4770      	bx	lr
	...

080094c8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80094c8:	b480      	push	{r7}
 80094ca:	b083      	sub	sp, #12
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	689a      	ldr	r2, [r3, #8]
 80094d4:	4b05      	ldr	r3, [pc, #20]	@ (80094ec <LL_ADC_REG_StartConversion+0x24>)
 80094d6:	4013      	ands	r3, r2
 80094d8:	f043 0204 	orr.w	r2, r3, #4
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80094e0:	bf00      	nop
 80094e2:	370c      	adds	r7, #12
 80094e4:	46bd      	mov	sp, r7
 80094e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ea:	4770      	bx	lr
 80094ec:	7fffffc0 	.word	0x7fffffc0

080094f0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80094f0:	b480      	push	{r7}
 80094f2:	b083      	sub	sp, #12
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	689b      	ldr	r3, [r3, #8]
 80094fc:	f003 0304 	and.w	r3, r3, #4
 8009500:	2b04      	cmp	r3, #4
 8009502:	d101      	bne.n	8009508 <LL_ADC_REG_IsConversionOngoing+0x18>
 8009504:	2301      	movs	r3, #1
 8009506:	e000      	b.n	800950a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8009508:	2300      	movs	r3, #0
}
 800950a:	4618      	mov	r0, r3
 800950c:	370c      	adds	r7, #12
 800950e:	46bd      	mov	sp, r7
 8009510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009514:	4770      	bx	lr

08009516 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8009516:	b480      	push	{r7}
 8009518:	b083      	sub	sp, #12
 800951a:	af00      	add	r7, sp, #0
 800951c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	689b      	ldr	r3, [r3, #8]
 8009522:	f003 0308 	and.w	r3, r3, #8
 8009526:	2b08      	cmp	r3, #8
 8009528:	d101      	bne.n	800952e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800952a:	2301      	movs	r3, #1
 800952c:	e000      	b.n	8009530 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800952e:	2300      	movs	r3, #0
}
 8009530:	4618      	mov	r0, r3
 8009532:	370c      	adds	r7, #12
 8009534:	46bd      	mov	sp, r7
 8009536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953a:	4770      	bx	lr

0800953c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800953c:	b590      	push	{r4, r7, lr}
 800953e:	b089      	sub	sp, #36	@ 0x24
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009544:	2300      	movs	r3, #0
 8009546:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8009548:	2300      	movs	r3, #0
 800954a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d101      	bne.n	8009556 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8009552:	2301      	movs	r3, #1
 8009554:	e1ee      	b.n	8009934 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	691b      	ldr	r3, [r3, #16]
 800955a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009560:	2b00      	cmp	r3, #0
 8009562:	d109      	bne.n	8009578 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8009564:	6878      	ldr	r0, [r7, #4]
 8009566:	f7fa f87b 	bl	8003660 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2200      	movs	r2, #0
 800956e:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2200      	movs	r2, #0
 8009574:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	4618      	mov	r0, r3
 800957e:	f7ff ff3f 	bl	8009400 <LL_ADC_IsDeepPowerDownEnabled>
 8009582:	4603      	mov	r3, r0
 8009584:	2b00      	cmp	r3, #0
 8009586:	d004      	beq.n	8009592 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	4618      	mov	r0, r3
 800958e:	f7ff ff25 	bl	80093dc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	4618      	mov	r0, r3
 8009598:	f7ff ff5a 	bl	8009450 <LL_ADC_IsInternalRegulatorEnabled>
 800959c:	4603      	mov	r3, r0
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d114      	bne.n	80095cc <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	4618      	mov	r0, r3
 80095a8:	f7ff ff3e 	bl	8009428 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80095ac:	4b8e      	ldr	r3, [pc, #568]	@ (80097e8 <HAL_ADC_Init+0x2ac>)
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	099b      	lsrs	r3, r3, #6
 80095b2:	4a8e      	ldr	r2, [pc, #568]	@ (80097ec <HAL_ADC_Init+0x2b0>)
 80095b4:	fba2 2303 	umull	r2, r3, r2, r3
 80095b8:	099b      	lsrs	r3, r3, #6
 80095ba:	3301      	adds	r3, #1
 80095bc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80095be:	e002      	b.n	80095c6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80095c0:	68bb      	ldr	r3, [r7, #8]
 80095c2:	3b01      	subs	r3, #1
 80095c4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80095c6:	68bb      	ldr	r3, [r7, #8]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d1f9      	bne.n	80095c0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	4618      	mov	r0, r3
 80095d2:	f7ff ff3d 	bl	8009450 <LL_ADC_IsInternalRegulatorEnabled>
 80095d6:	4603      	mov	r3, r0
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d10d      	bne.n	80095f8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80095e0:	f043 0210 	orr.w	r2, r3, #16
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80095ec:	f043 0201 	orr.w	r2, r3, #1
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 80095f4:	2301      	movs	r3, #1
 80095f6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	4618      	mov	r0, r3
 80095fe:	f7ff ff77 	bl	80094f0 <LL_ADC_REG_IsConversionOngoing>
 8009602:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009608:	f003 0310 	and.w	r3, r3, #16
 800960c:	2b00      	cmp	r3, #0
 800960e:	f040 8188 	bne.w	8009922 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8009612:	697b      	ldr	r3, [r7, #20]
 8009614:	2b00      	cmp	r3, #0
 8009616:	f040 8184 	bne.w	8009922 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800961e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8009622:	f043 0202 	orr.w	r2, r3, #2
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	4618      	mov	r0, r3
 8009630:	f7ff ff36 	bl	80094a0 <LL_ADC_IsEnabled>
 8009634:	4603      	mov	r3, r0
 8009636:	2b00      	cmp	r3, #0
 8009638:	d136      	bne.n	80096a8 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	4a6c      	ldr	r2, [pc, #432]	@ (80097f0 <HAL_ADC_Init+0x2b4>)
 8009640:	4293      	cmp	r3, r2
 8009642:	d004      	beq.n	800964e <HAL_ADC_Init+0x112>
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	4a6a      	ldr	r2, [pc, #424]	@ (80097f4 <HAL_ADC_Init+0x2b8>)
 800964a:	4293      	cmp	r3, r2
 800964c:	d10e      	bne.n	800966c <HAL_ADC_Init+0x130>
 800964e:	4868      	ldr	r0, [pc, #416]	@ (80097f0 <HAL_ADC_Init+0x2b4>)
 8009650:	f7ff ff26 	bl	80094a0 <LL_ADC_IsEnabled>
 8009654:	4604      	mov	r4, r0
 8009656:	4867      	ldr	r0, [pc, #412]	@ (80097f4 <HAL_ADC_Init+0x2b8>)
 8009658:	f7ff ff22 	bl	80094a0 <LL_ADC_IsEnabled>
 800965c:	4603      	mov	r3, r0
 800965e:	4323      	orrs	r3, r4
 8009660:	2b00      	cmp	r3, #0
 8009662:	bf0c      	ite	eq
 8009664:	2301      	moveq	r3, #1
 8009666:	2300      	movne	r3, #0
 8009668:	b2db      	uxtb	r3, r3
 800966a:	e008      	b.n	800967e <HAL_ADC_Init+0x142>
 800966c:	4862      	ldr	r0, [pc, #392]	@ (80097f8 <HAL_ADC_Init+0x2bc>)
 800966e:	f7ff ff17 	bl	80094a0 <LL_ADC_IsEnabled>
 8009672:	4603      	mov	r3, r0
 8009674:	2b00      	cmp	r3, #0
 8009676:	bf0c      	ite	eq
 8009678:	2301      	moveq	r3, #1
 800967a:	2300      	movne	r3, #0
 800967c:	b2db      	uxtb	r3, r3
 800967e:	2b00      	cmp	r3, #0
 8009680:	d012      	beq.n	80096a8 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	4a5a      	ldr	r2, [pc, #360]	@ (80097f0 <HAL_ADC_Init+0x2b4>)
 8009688:	4293      	cmp	r3, r2
 800968a:	d004      	beq.n	8009696 <HAL_ADC_Init+0x15a>
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	4a58      	ldr	r2, [pc, #352]	@ (80097f4 <HAL_ADC_Init+0x2b8>)
 8009692:	4293      	cmp	r3, r2
 8009694:	d101      	bne.n	800969a <HAL_ADC_Init+0x15e>
 8009696:	4a59      	ldr	r2, [pc, #356]	@ (80097fc <HAL_ADC_Init+0x2c0>)
 8009698:	e000      	b.n	800969c <HAL_ADC_Init+0x160>
 800969a:	4a59      	ldr	r2, [pc, #356]	@ (8009800 <HAL_ADC_Init+0x2c4>)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	685b      	ldr	r3, [r3, #4]
 80096a0:	4619      	mov	r1, r3
 80096a2:	4610      	mov	r0, r2
 80096a4:	f7ff fc5e 	bl	8008f64 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	4a52      	ldr	r2, [pc, #328]	@ (80097f8 <HAL_ADC_Init+0x2bc>)
 80096ae:	4293      	cmp	r3, r2
 80096b0:	d129      	bne.n	8009706 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	7e5b      	ldrb	r3, [r3, #25]
 80096b6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80096bc:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 80096c2:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	689b      	ldr	r3, [r3, #8]
 80096c8:	2b08      	cmp	r3, #8
 80096ca:	d013      	beq.n	80096f4 <HAL_ADC_Init+0x1b8>
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	689b      	ldr	r3, [r3, #8]
 80096d0:	2b0c      	cmp	r3, #12
 80096d2:	d00d      	beq.n	80096f0 <HAL_ADC_Init+0x1b4>
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	689b      	ldr	r3, [r3, #8]
 80096d8:	2b1c      	cmp	r3, #28
 80096da:	d007      	beq.n	80096ec <HAL_ADC_Init+0x1b0>
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	689b      	ldr	r3, [r3, #8]
 80096e0:	2b18      	cmp	r3, #24
 80096e2:	d101      	bne.n	80096e8 <HAL_ADC_Init+0x1ac>
 80096e4:	2318      	movs	r3, #24
 80096e6:	e006      	b.n	80096f6 <HAL_ADC_Init+0x1ba>
 80096e8:	2300      	movs	r3, #0
 80096ea:	e004      	b.n	80096f6 <HAL_ADC_Init+0x1ba>
 80096ec:	2310      	movs	r3, #16
 80096ee:	e002      	b.n	80096f6 <HAL_ADC_Init+0x1ba>
 80096f0:	2308      	movs	r3, #8
 80096f2:	e000      	b.n	80096f6 <HAL_ADC_Init+0x1ba>
 80096f4:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 80096f6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80096fe:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8009700:	4313      	orrs	r3, r2
 8009702:	61bb      	str	r3, [r7, #24]
 8009704:	e00e      	b.n	8009724 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	7e5b      	ldrb	r3, [r3, #25]
 800970a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8009710:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8009716:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800971e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8009720:	4313      	orrs	r3, r2
 8009722:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f893 3020 	ldrb.w	r3, [r3, #32]
 800972a:	2b01      	cmp	r3, #1
 800972c:	d106      	bne.n	800973c <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009732:	3b01      	subs	r3, #1
 8009734:	045b      	lsls	r3, r3, #17
 8009736:	69ba      	ldr	r2, [r7, #24]
 8009738:	4313      	orrs	r3, r2
 800973a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009740:	2b00      	cmp	r3, #0
 8009742:	d009      	beq.n	8009758 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009748:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009750:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8009752:	69ba      	ldr	r2, [r7, #24]
 8009754:	4313      	orrs	r3, r2
 8009756:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	4a26      	ldr	r2, [pc, #152]	@ (80097f8 <HAL_ADC_Init+0x2bc>)
 800975e:	4293      	cmp	r3, r2
 8009760:	d115      	bne.n	800978e <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	68da      	ldr	r2, [r3, #12]
 8009768:	4b26      	ldr	r3, [pc, #152]	@ (8009804 <HAL_ADC_Init+0x2c8>)
 800976a:	4013      	ands	r3, r2
 800976c:	687a      	ldr	r2, [r7, #4]
 800976e:	6812      	ldr	r2, [r2, #0]
 8009770:	69b9      	ldr	r1, [r7, #24]
 8009772:	430b      	orrs	r3, r1
 8009774:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	691b      	ldr	r3, [r3, #16]
 800977c:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	430a      	orrs	r2, r1
 800978a:	611a      	str	r2, [r3, #16]
 800978c:	e009      	b.n	80097a2 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	68da      	ldr	r2, [r3, #12]
 8009794:	4b1c      	ldr	r3, [pc, #112]	@ (8009808 <HAL_ADC_Init+0x2cc>)
 8009796:	4013      	ands	r3, r2
 8009798:	687a      	ldr	r2, [r7, #4]
 800979a:	6812      	ldr	r2, [r2, #0]
 800979c:	69b9      	ldr	r1, [r7, #24]
 800979e:	430b      	orrs	r3, r1
 80097a0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	4618      	mov	r0, r3
 80097a8:	f7ff fea2 	bl	80094f0 <LL_ADC_REG_IsConversionOngoing>
 80097ac:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	4618      	mov	r0, r3
 80097b4:	f7ff feaf 	bl	8009516 <LL_ADC_INJ_IsConversionOngoing>
 80097b8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80097ba:	693b      	ldr	r3, [r7, #16]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	f040 808e 	bne.w	80098de <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	f040 808a 	bne.w	80098de <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	4a0a      	ldr	r2, [pc, #40]	@ (80097f8 <HAL_ADC_Init+0x2bc>)
 80097d0:	4293      	cmp	r3, r2
 80097d2:	d11b      	bne.n	800980c <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	7e1b      	ldrb	r3, [r3, #24]
 80097d8:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80097e0:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 80097e2:	4313      	orrs	r3, r2
 80097e4:	61bb      	str	r3, [r7, #24]
 80097e6:	e018      	b.n	800981a <HAL_ADC_Init+0x2de>
 80097e8:	24000004 	.word	0x24000004
 80097ec:	053e2d63 	.word	0x053e2d63
 80097f0:	40022000 	.word	0x40022000
 80097f4:	40022100 	.word	0x40022100
 80097f8:	58026000 	.word	0x58026000
 80097fc:	40022300 	.word	0x40022300
 8009800:	58026300 	.word	0x58026300
 8009804:	fff04007 	.word	0xfff04007
 8009808:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	7e1b      	ldrb	r3, [r3, #24]
 8009810:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 8009816:	4313      	orrs	r3, r2
 8009818:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	68da      	ldr	r2, [r3, #12]
 8009820:	4b46      	ldr	r3, [pc, #280]	@ (800993c <HAL_ADC_Init+0x400>)
 8009822:	4013      	ands	r3, r2
 8009824:	687a      	ldr	r2, [r7, #4]
 8009826:	6812      	ldr	r2, [r2, #0]
 8009828:	69b9      	ldr	r1, [r7, #24]
 800982a:	430b      	orrs	r3, r1
 800982c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009834:	2b01      	cmp	r3, #1
 8009836:	d137      	bne.n	80098a8 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800983c:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	4a3f      	ldr	r2, [pc, #252]	@ (8009940 <HAL_ADC_Init+0x404>)
 8009844:	4293      	cmp	r3, r2
 8009846:	d116      	bne.n	8009876 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	691a      	ldr	r2, [r3, #16]
 800984e:	4b3d      	ldr	r3, [pc, #244]	@ (8009944 <HAL_ADC_Init+0x408>)
 8009850:	4013      	ands	r3, r2
 8009852:	687a      	ldr	r2, [r7, #4]
 8009854:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8009856:	687a      	ldr	r2, [r7, #4]
 8009858:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800985a:	4311      	orrs	r1, r2
 800985c:	687a      	ldr	r2, [r7, #4]
 800985e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8009860:	4311      	orrs	r1, r2
 8009862:	687a      	ldr	r2, [r7, #4]
 8009864:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8009866:	430a      	orrs	r2, r1
 8009868:	431a      	orrs	r2, r3
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f042 0201 	orr.w	r2, r2, #1
 8009872:	611a      	str	r2, [r3, #16]
 8009874:	e020      	b.n	80098b8 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	691a      	ldr	r2, [r3, #16]
 800987c:	4b32      	ldr	r3, [pc, #200]	@ (8009948 <HAL_ADC_Init+0x40c>)
 800987e:	4013      	ands	r3, r2
 8009880:	687a      	ldr	r2, [r7, #4]
 8009882:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009884:	3a01      	subs	r2, #1
 8009886:	0411      	lsls	r1, r2, #16
 8009888:	687a      	ldr	r2, [r7, #4]
 800988a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800988c:	4311      	orrs	r1, r2
 800988e:	687a      	ldr	r2, [r7, #4]
 8009890:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8009892:	4311      	orrs	r1, r2
 8009894:	687a      	ldr	r2, [r7, #4]
 8009896:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8009898:	430a      	orrs	r2, r1
 800989a:	431a      	orrs	r2, r3
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f042 0201 	orr.w	r2, r2, #1
 80098a4:	611a      	str	r2, [r3, #16]
 80098a6:	e007      	b.n	80098b8 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	691a      	ldr	r2, [r3, #16]
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	f022 0201 	bic.w	r2, r2, #1
 80098b6:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	691b      	ldr	r3, [r3, #16]
 80098be:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	430a      	orrs	r2, r1
 80098cc:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	4a1b      	ldr	r2, [pc, #108]	@ (8009940 <HAL_ADC_Init+0x404>)
 80098d4:	4293      	cmp	r3, r2
 80098d6:	d002      	beq.n	80098de <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f001 f9c3 	bl	800ac64 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	691b      	ldr	r3, [r3, #16]
 80098e2:	2b01      	cmp	r3, #1
 80098e4:	d10c      	bne.n	8009900 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098ec:	f023 010f 	bic.w	r1, r3, #15
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	69db      	ldr	r3, [r3, #28]
 80098f4:	1e5a      	subs	r2, r3, #1
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	430a      	orrs	r2, r1
 80098fc:	631a      	str	r2, [r3, #48]	@ 0x30
 80098fe:	e007      	b.n	8009910 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	f022 020f 	bic.w	r2, r2, #15
 800990e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009914:	f023 0303 	bic.w	r3, r3, #3
 8009918:	f043 0201 	orr.w	r2, r3, #1
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	661a      	str	r2, [r3, #96]	@ 0x60
 8009920:	e007      	b.n	8009932 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009926:	f043 0210 	orr.w	r2, r3, #16
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800992e:	2301      	movs	r3, #1
 8009930:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8009932:	7ffb      	ldrb	r3, [r7, #31]
}
 8009934:	4618      	mov	r0, r3
 8009936:	3724      	adds	r7, #36	@ 0x24
 8009938:	46bd      	mov	sp, r7
 800993a:	bd90      	pop	{r4, r7, pc}
 800993c:	ffffbffc 	.word	0xffffbffc
 8009940:	58026000 	.word	0x58026000
 8009944:	fc00f81f 	.word	0xfc00f81f
 8009948:	fc00f81e 	.word	0xfc00f81e

0800994c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b086      	sub	sp, #24
 8009950:	af00      	add	r7, sp, #0
 8009952:	60f8      	str	r0, [r7, #12]
 8009954:	60b9      	str	r1, [r7, #8]
 8009956:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	4a60      	ldr	r2, [pc, #384]	@ (8009ae0 <HAL_ADC_Start_DMA+0x194>)
 800995e:	4293      	cmp	r3, r2
 8009960:	d004      	beq.n	800996c <HAL_ADC_Start_DMA+0x20>
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	4a5f      	ldr	r2, [pc, #380]	@ (8009ae4 <HAL_ADC_Start_DMA+0x198>)
 8009968:	4293      	cmp	r3, r2
 800996a:	d101      	bne.n	8009970 <HAL_ADC_Start_DMA+0x24>
 800996c:	4b5e      	ldr	r3, [pc, #376]	@ (8009ae8 <HAL_ADC_Start_DMA+0x19c>)
 800996e:	e000      	b.n	8009972 <HAL_ADC_Start_DMA+0x26>
 8009970:	4b5e      	ldr	r3, [pc, #376]	@ (8009aec <HAL_ADC_Start_DMA+0x1a0>)
 8009972:	4618      	mov	r0, r3
 8009974:	f7ff fd16 	bl	80093a4 <LL_ADC_GetMultimode>
 8009978:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	4618      	mov	r0, r3
 8009980:	f7ff fdb6 	bl	80094f0 <LL_ADC_REG_IsConversionOngoing>
 8009984:	4603      	mov	r3, r0
 8009986:	2b00      	cmp	r3, #0
 8009988:	f040 80a2 	bne.w	8009ad0 <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009992:	2b01      	cmp	r3, #1
 8009994:	d101      	bne.n	800999a <HAL_ADC_Start_DMA+0x4e>
 8009996:	2302      	movs	r3, #2
 8009998:	e09d      	b.n	8009ad6 <HAL_ADC_Start_DMA+0x18a>
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	2201      	movs	r2, #1
 800999e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80099a2:	693b      	ldr	r3, [r7, #16]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d006      	beq.n	80099b6 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80099a8:	693b      	ldr	r3, [r7, #16]
 80099aa:	2b05      	cmp	r3, #5
 80099ac:	d003      	beq.n	80099b6 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80099ae:	693b      	ldr	r3, [r7, #16]
 80099b0:	2b09      	cmp	r3, #9
 80099b2:	f040 8086 	bne.w	8009ac2 <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80099b6:	68f8      	ldr	r0, [r7, #12]
 80099b8:	f001 f836 	bl	800aa28 <ADC_Enable>
 80099bc:	4603      	mov	r3, r0
 80099be:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80099c0:	7dfb      	ldrb	r3, [r7, #23]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d178      	bne.n	8009ab8 <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80099ca:	4b49      	ldr	r3, [pc, #292]	@ (8009af0 <HAL_ADC_Start_DMA+0x1a4>)
 80099cc:	4013      	ands	r3, r2
 80099ce:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	4a42      	ldr	r2, [pc, #264]	@ (8009ae4 <HAL_ADC_Start_DMA+0x198>)
 80099dc:	4293      	cmp	r3, r2
 80099de:	d002      	beq.n	80099e6 <HAL_ADC_Start_DMA+0x9a>
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	e000      	b.n	80099e8 <HAL_ADC_Start_DMA+0x9c>
 80099e6:	4b3e      	ldr	r3, [pc, #248]	@ (8009ae0 <HAL_ADC_Start_DMA+0x194>)
 80099e8:	68fa      	ldr	r2, [r7, #12]
 80099ea:	6812      	ldr	r2, [r2, #0]
 80099ec:	4293      	cmp	r3, r2
 80099ee:	d002      	beq.n	80099f6 <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80099f0:	693b      	ldr	r3, [r7, #16]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d105      	bne.n	8009a02 <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80099fa:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009a06:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d006      	beq.n	8009a1c <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009a12:	f023 0206 	bic.w	r2, r3, #6
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	665a      	str	r2, [r3, #100]	@ 0x64
 8009a1a:	e002      	b.n	8009a22 <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	2200      	movs	r2, #0
 8009a20:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a26:	4a33      	ldr	r2, [pc, #204]	@ (8009af4 <HAL_ADC_Start_DMA+0x1a8>)
 8009a28:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a2e:	4a32      	ldr	r2, [pc, #200]	@ (8009af8 <HAL_ADC_Start_DMA+0x1ac>)
 8009a30:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a36:	4a31      	ldr	r2, [pc, #196]	@ (8009afc <HAL_ADC_Start_DMA+0x1b0>)
 8009a38:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	221c      	movs	r2, #28
 8009a40:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	2200      	movs	r2, #0
 8009a46:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	685a      	ldr	r2, [r3, #4]
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	f042 0210 	orr.w	r2, r2, #16
 8009a58:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	4a28      	ldr	r2, [pc, #160]	@ (8009b00 <HAL_ADC_Start_DMA+0x1b4>)
 8009a60:	4293      	cmp	r3, r2
 8009a62:	d10f      	bne.n	8009a84 <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	681a      	ldr	r2, [r3, #0]
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009a6e:	005b      	lsls	r3, r3, #1
 8009a70:	4619      	mov	r1, r3
 8009a72:	4610      	mov	r0, r2
 8009a74:	f7ff fbfe 	bl	8009274 <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	f7ff fbe9 	bl	8009254 <LL_ADC_EnableDMAReq>
 8009a82:	e007      	b.n	8009a94 <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	681a      	ldr	r2, [r3, #0]
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a8c:	4619      	mov	r1, r3
 8009a8e:	4610      	mov	r0, r2
 8009a90:	f7ff fbcd 	bl	800922e <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	3340      	adds	r3, #64	@ 0x40
 8009a9e:	4619      	mov	r1, r3
 8009aa0:	68ba      	ldr	r2, [r7, #8]
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	f001 fede 	bl	800b864 <HAL_DMA_Start_IT>
 8009aa8:	4603      	mov	r3, r0
 8009aaa:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	f7ff fd09 	bl	80094c8 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8009ab6:	e00d      	b.n	8009ad4 <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	2200      	movs	r2, #0
 8009abc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      if (tmp_hal_status == HAL_OK)
 8009ac0:	e008      	b.n	8009ad4 <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	2200      	movs	r2, #0
 8009aca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8009ace:	e001      	b.n	8009ad4 <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8009ad0:	2302      	movs	r3, #2
 8009ad2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8009ad4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	3718      	adds	r7, #24
 8009ada:	46bd      	mov	sp, r7
 8009adc:	bd80      	pop	{r7, pc}
 8009ade:	bf00      	nop
 8009ae0:	40022000 	.word	0x40022000
 8009ae4:	40022100 	.word	0x40022100
 8009ae8:	40022300 	.word	0x40022300
 8009aec:	58026300 	.word	0x58026300
 8009af0:	fffff0fe 	.word	0xfffff0fe
 8009af4:	0800ab3d 	.word	0x0800ab3d
 8009af8:	0800ac15 	.word	0x0800ac15
 8009afc:	0800ac31 	.word	0x0800ac31
 8009b00:	58026000 	.word	0x58026000

08009b04 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b08a      	sub	sp, #40	@ 0x28
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	685b      	ldr	r3, [r3, #4]
 8009b1e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	4a87      	ldr	r2, [pc, #540]	@ (8009d44 <HAL_ADC_IRQHandler+0x240>)
 8009b26:	4293      	cmp	r3, r2
 8009b28:	d004      	beq.n	8009b34 <HAL_ADC_IRQHandler+0x30>
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	4a86      	ldr	r2, [pc, #536]	@ (8009d48 <HAL_ADC_IRQHandler+0x244>)
 8009b30:	4293      	cmp	r3, r2
 8009b32:	d101      	bne.n	8009b38 <HAL_ADC_IRQHandler+0x34>
 8009b34:	4b85      	ldr	r3, [pc, #532]	@ (8009d4c <HAL_ADC_IRQHandler+0x248>)
 8009b36:	e000      	b.n	8009b3a <HAL_ADC_IRQHandler+0x36>
 8009b38:	4b85      	ldr	r3, [pc, #532]	@ (8009d50 <HAL_ADC_IRQHandler+0x24c>)
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	f7ff fc32 	bl	80093a4 <LL_ADC_GetMultimode>
 8009b40:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8009b42:	69fb      	ldr	r3, [r7, #28]
 8009b44:	f003 0302 	and.w	r3, r3, #2
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d017      	beq.n	8009b7c <HAL_ADC_IRQHandler+0x78>
 8009b4c:	69bb      	ldr	r3, [r7, #24]
 8009b4e:	f003 0302 	and.w	r3, r3, #2
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d012      	beq.n	8009b7c <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009b5a:	f003 0310 	and.w	r3, r3, #16
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d105      	bne.n	8009b6e <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009b66:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8009b6e:	6878      	ldr	r0, [r7, #4]
 8009b70:	f001 f98e 	bl	800ae90 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	2202      	movs	r2, #2
 8009b7a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8009b7c:	69fb      	ldr	r3, [r7, #28]
 8009b7e:	f003 0304 	and.w	r3, r3, #4
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d004      	beq.n	8009b90 <HAL_ADC_IRQHandler+0x8c>
 8009b86:	69bb      	ldr	r3, [r7, #24]
 8009b88:	f003 0304 	and.w	r3, r3, #4
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d10a      	bne.n	8009ba6 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8009b90:	69fb      	ldr	r3, [r7, #28]
 8009b92:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	f000 8083 	beq.w	8009ca2 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8009b9c:	69bb      	ldr	r3, [r7, #24]
 8009b9e:	f003 0308 	and.w	r3, r3, #8
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d07d      	beq.n	8009ca2 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009baa:	f003 0310 	and.w	r3, r3, #16
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d105      	bne.n	8009bbe <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009bb6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	f7ff faf4 	bl	80091b0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d062      	beq.n	8009c94 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	4a5d      	ldr	r2, [pc, #372]	@ (8009d48 <HAL_ADC_IRQHandler+0x244>)
 8009bd4:	4293      	cmp	r3, r2
 8009bd6:	d002      	beq.n	8009bde <HAL_ADC_IRQHandler+0xda>
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	e000      	b.n	8009be0 <HAL_ADC_IRQHandler+0xdc>
 8009bde:	4b59      	ldr	r3, [pc, #356]	@ (8009d44 <HAL_ADC_IRQHandler+0x240>)
 8009be0:	687a      	ldr	r2, [r7, #4]
 8009be2:	6812      	ldr	r2, [r2, #0]
 8009be4:	4293      	cmp	r3, r2
 8009be6:	d008      	beq.n	8009bfa <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8009be8:	697b      	ldr	r3, [r7, #20]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d005      	beq.n	8009bfa <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8009bee:	697b      	ldr	r3, [r7, #20]
 8009bf0:	2b05      	cmp	r3, #5
 8009bf2:	d002      	beq.n	8009bfa <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8009bf4:	697b      	ldr	r3, [r7, #20]
 8009bf6:	2b09      	cmp	r3, #9
 8009bf8:	d104      	bne.n	8009c04 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	68db      	ldr	r3, [r3, #12]
 8009c00:	623b      	str	r3, [r7, #32]
 8009c02:	e00c      	b.n	8009c1e <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	4a4f      	ldr	r2, [pc, #316]	@ (8009d48 <HAL_ADC_IRQHandler+0x244>)
 8009c0a:	4293      	cmp	r3, r2
 8009c0c:	d002      	beq.n	8009c14 <HAL_ADC_IRQHandler+0x110>
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	e000      	b.n	8009c16 <HAL_ADC_IRQHandler+0x112>
 8009c14:	4b4b      	ldr	r3, [pc, #300]	@ (8009d44 <HAL_ADC_IRQHandler+0x240>)
 8009c16:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8009c18:	693b      	ldr	r3, [r7, #16]
 8009c1a:	68db      	ldr	r3, [r3, #12]
 8009c1c:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8009c1e:	6a3b      	ldr	r3, [r7, #32]
 8009c20:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d135      	bne.n	8009c94 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	f003 0308 	and.w	r3, r3, #8
 8009c32:	2b08      	cmp	r3, #8
 8009c34:	d12e      	bne.n	8009c94 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	f7ff fc58 	bl	80094f0 <LL_ADC_REG_IsConversionOngoing>
 8009c40:	4603      	mov	r3, r0
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d11a      	bne.n	8009c7c <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	685a      	ldr	r2, [r3, #4]
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	f022 020c 	bic.w	r2, r2, #12
 8009c54:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c5a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	661a      	str	r2, [r3, #96]	@ 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c66:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d112      	bne.n	8009c94 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c72:	f043 0201 	orr.w	r2, r3, #1
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	661a      	str	r2, [r3, #96]	@ 0x60
 8009c7a:	e00b      	b.n	8009c94 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c80:	f043 0210 	orr.w	r2, r3, #16
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009c8c:	f043 0201 	orr.w	r2, r3, #1
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	665a      	str	r2, [r3, #100]	@ 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8009c94:	6878      	ldr	r0, [r7, #4]
 8009c96:	f000 f96f 	bl	8009f78 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	220c      	movs	r2, #12
 8009ca0:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8009ca2:	69fb      	ldr	r3, [r7, #28]
 8009ca4:	f003 0320 	and.w	r3, r3, #32
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d004      	beq.n	8009cb6 <HAL_ADC_IRQHandler+0x1b2>
 8009cac:	69bb      	ldr	r3, [r7, #24]
 8009cae:	f003 0320 	and.w	r3, r3, #32
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d10b      	bne.n	8009cce <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8009cb6:	69fb      	ldr	r3, [r7, #28]
 8009cb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	f000 80a0 	beq.w	8009e02 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8009cc2:	69bb      	ldr	r3, [r7, #24]
 8009cc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	f000 809a 	beq.w	8009e02 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009cd2:	f003 0310 	and.w	r3, r3, #16
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d105      	bne.n	8009ce6 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009cde:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	4618      	mov	r0, r3
 8009cec:	f7ff fadc 	bl	80092a8 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8009cf0:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	f7ff fa5a 	bl	80091b0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8009cfc:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	4a11      	ldr	r2, [pc, #68]	@ (8009d48 <HAL_ADC_IRQHandler+0x244>)
 8009d04:	4293      	cmp	r3, r2
 8009d06:	d002      	beq.n	8009d0e <HAL_ADC_IRQHandler+0x20a>
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	e000      	b.n	8009d10 <HAL_ADC_IRQHandler+0x20c>
 8009d0e:	4b0d      	ldr	r3, [pc, #52]	@ (8009d44 <HAL_ADC_IRQHandler+0x240>)
 8009d10:	687a      	ldr	r2, [r7, #4]
 8009d12:	6812      	ldr	r2, [r2, #0]
 8009d14:	4293      	cmp	r3, r2
 8009d16:	d008      	beq.n	8009d2a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8009d18:	697b      	ldr	r3, [r7, #20]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d005      	beq.n	8009d2a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8009d1e:	697b      	ldr	r3, [r7, #20]
 8009d20:	2b06      	cmp	r3, #6
 8009d22:	d002      	beq.n	8009d2a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8009d24:	697b      	ldr	r3, [r7, #20]
 8009d26:	2b07      	cmp	r3, #7
 8009d28:	d104      	bne.n	8009d34 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	68db      	ldr	r3, [r3, #12]
 8009d30:	623b      	str	r3, [r7, #32]
 8009d32:	e014      	b.n	8009d5e <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	4a03      	ldr	r2, [pc, #12]	@ (8009d48 <HAL_ADC_IRQHandler+0x244>)
 8009d3a:	4293      	cmp	r3, r2
 8009d3c:	d00a      	beq.n	8009d54 <HAL_ADC_IRQHandler+0x250>
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	e008      	b.n	8009d56 <HAL_ADC_IRQHandler+0x252>
 8009d44:	40022000 	.word	0x40022000
 8009d48:	40022100 	.word	0x40022100
 8009d4c:	40022300 	.word	0x40022300
 8009d50:	58026300 	.word	0x58026300
 8009d54:	4b84      	ldr	r3, [pc, #528]	@ (8009f68 <HAL_ADC_IRQHandler+0x464>)
 8009d56:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8009d58:	693b      	ldr	r3, [r7, #16]
 8009d5a:	68db      	ldr	r3, [r3, #12]
 8009d5c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d047      	beq.n	8009df4 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8009d64:	6a3b      	ldr	r3, [r7, #32]
 8009d66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d007      	beq.n	8009d7e <HAL_ADC_IRQHandler+0x27a>
 8009d6e:	68bb      	ldr	r3, [r7, #8]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d03f      	beq.n	8009df4 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8009d74:	6a3b      	ldr	r3, [r7, #32]
 8009d76:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d13a      	bne.n	8009df4 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d88:	2b40      	cmp	r3, #64	@ 0x40
 8009d8a:	d133      	bne.n	8009df4 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8009d8c:	6a3b      	ldr	r3, [r7, #32]
 8009d8e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d12e      	bne.n	8009df4 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	f7ff fbbb 	bl	8009516 <LL_ADC_INJ_IsConversionOngoing>
 8009da0:	4603      	mov	r3, r0
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d11a      	bne.n	8009ddc <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	685a      	ldr	r2, [r3, #4]
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8009db4:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009dba:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	661a      	str	r2, [r3, #96]	@ 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009dc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d112      	bne.n	8009df4 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009dd2:	f043 0201 	orr.w	r2, r3, #1
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	661a      	str	r2, [r3, #96]	@ 0x60
 8009dda:	e00b      	b.n	8009df4 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009de0:	f043 0210 	orr.w	r2, r3, #16
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	661a      	str	r2, [r3, #96]	@ 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009dec:	f043 0201 	orr.w	r2, r3, #1
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	665a      	str	r2, [r3, #100]	@ 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	f001 f823 	bl	800ae40 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	2260      	movs	r2, #96	@ 0x60
 8009e00:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8009e02:	69fb      	ldr	r3, [r7, #28]
 8009e04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d011      	beq.n	8009e30 <HAL_ADC_IRQHandler+0x32c>
 8009e0c:	69bb      	ldr	r3, [r7, #24]
 8009e0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d00c      	beq.n	8009e30 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009e1a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8009e22:	6878      	ldr	r0, [r7, #4]
 8009e24:	f000 f8bc 	bl	8009fa0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	2280      	movs	r2, #128	@ 0x80
 8009e2e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8009e30:	69fb      	ldr	r3, [r7, #28]
 8009e32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d012      	beq.n	8009e60 <HAL_ADC_IRQHandler+0x35c>
 8009e3a:	69bb      	ldr	r3, [r7, #24]
 8009e3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d00d      	beq.n	8009e60 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009e48:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	f001 f809 	bl	800ae68 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009e5e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8009e60:	69fb      	ldr	r3, [r7, #28]
 8009e62:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d012      	beq.n	8009e90 <HAL_ADC_IRQHandler+0x38c>
 8009e6a:	69bb      	ldr	r3, [r7, #24]
 8009e6c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d00d      	beq.n	8009e90 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009e78:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8009e80:	6878      	ldr	r0, [r7, #4]
 8009e82:	f000 fffb 	bl	800ae7c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009e8e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8009e90:	69fb      	ldr	r3, [r7, #28]
 8009e92:	f003 0310 	and.w	r3, r3, #16
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d043      	beq.n	8009f22 <HAL_ADC_IRQHandler+0x41e>
 8009e9a:	69bb      	ldr	r3, [r7, #24]
 8009e9c:	f003 0310 	and.w	r3, r3, #16
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d03e      	beq.n	8009f22 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d102      	bne.n	8009eb2 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8009eac:	2301      	movs	r3, #1
 8009eae:	627b      	str	r3, [r7, #36]	@ 0x24
 8009eb0:	e021      	b.n	8009ef6 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8009eb2:	697b      	ldr	r3, [r7, #20]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d015      	beq.n	8009ee4 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	4a2a      	ldr	r2, [pc, #168]	@ (8009f68 <HAL_ADC_IRQHandler+0x464>)
 8009ebe:	4293      	cmp	r3, r2
 8009ec0:	d004      	beq.n	8009ecc <HAL_ADC_IRQHandler+0x3c8>
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	4a29      	ldr	r2, [pc, #164]	@ (8009f6c <HAL_ADC_IRQHandler+0x468>)
 8009ec8:	4293      	cmp	r3, r2
 8009eca:	d101      	bne.n	8009ed0 <HAL_ADC_IRQHandler+0x3cc>
 8009ecc:	4b28      	ldr	r3, [pc, #160]	@ (8009f70 <HAL_ADC_IRQHandler+0x46c>)
 8009ece:	e000      	b.n	8009ed2 <HAL_ADC_IRQHandler+0x3ce>
 8009ed0:	4b28      	ldr	r3, [pc, #160]	@ (8009f74 <HAL_ADC_IRQHandler+0x470>)
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	f7ff fa74 	bl	80093c0 <LL_ADC_GetMultiDMATransfer>
 8009ed8:	4603      	mov	r3, r0
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d00b      	beq.n	8009ef6 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8009ede:	2301      	movs	r3, #1
 8009ee0:	627b      	str	r3, [r7, #36]	@ 0x24
 8009ee2:	e008      	b.n	8009ef6 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	68db      	ldr	r3, [r3, #12]
 8009eea:	f003 0303 	and.w	r3, r3, #3
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d001      	beq.n	8009ef6 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8009ef2:	2301      	movs	r3, #1
 8009ef4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8009ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ef8:	2b01      	cmp	r3, #1
 8009efa:	d10e      	bne.n	8009f1a <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009f00:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009f0c:	f043 0202 	orr.w	r2, r3, #2
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	665a      	str	r2, [r3, #100]	@ 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8009f14:	6878      	ldr	r0, [r7, #4]
 8009f16:	f000 f84d 	bl	8009fb4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	2210      	movs	r2, #16
 8009f20:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8009f22:	69fb      	ldr	r3, [r7, #28]
 8009f24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d018      	beq.n	8009f5e <HAL_ADC_IRQHandler+0x45a>
 8009f2c:	69bb      	ldr	r3, [r7, #24]
 8009f2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d013      	beq.n	8009f5e <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009f3a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009f46:	f043 0208 	orr.w	r2, r3, #8
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009f56:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8009f58:	6878      	ldr	r0, [r7, #4]
 8009f5a:	f000 ff7b 	bl	800ae54 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8009f5e:	bf00      	nop
 8009f60:	3728      	adds	r7, #40	@ 0x28
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd80      	pop	{r7, pc}
 8009f66:	bf00      	nop
 8009f68:	40022000 	.word	0x40022000
 8009f6c:	40022100 	.word	0x40022100
 8009f70:	40022300 	.word	0x40022300
 8009f74:	58026300 	.word	0x58026300

08009f78 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8009f78:	b480      	push	{r7}
 8009f7a:	b083      	sub	sp, #12
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8009f80:	bf00      	nop
 8009f82:	370c      	adds	r7, #12
 8009f84:	46bd      	mov	sp, r7
 8009f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8a:	4770      	bx	lr

08009f8c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8009f8c:	b480      	push	{r7}
 8009f8e:	b083      	sub	sp, #12
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8009f94:	bf00      	nop
 8009f96:	370c      	adds	r7, #12
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9e:	4770      	bx	lr

08009fa0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8009fa0:	b480      	push	{r7}
 8009fa2:	b083      	sub	sp, #12
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8009fa8:	bf00      	nop
 8009faa:	370c      	adds	r7, #12
 8009fac:	46bd      	mov	sp, r7
 8009fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb2:	4770      	bx	lr

08009fb4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8009fb4:	b480      	push	{r7}
 8009fb6:	b083      	sub	sp, #12
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8009fbc:	bf00      	nop
 8009fbe:	370c      	adds	r7, #12
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc6:	4770      	bx	lr

08009fc8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8009fc8:	b590      	push	{r4, r7, lr}
 8009fca:	b0b9      	sub	sp, #228	@ 0xe4
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
 8009fd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8009fd8:	2300      	movs	r3, #0
 8009fda:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009fe2:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	68db      	ldr	r3, [r3, #12]
 8009fe8:	4aab      	ldr	r2, [pc, #684]	@ (800a298 <HAL_ADC_ConfigChannel+0x2d0>)
 8009fea:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009ff2:	2b01      	cmp	r3, #1
 8009ff4:	d102      	bne.n	8009ffc <HAL_ADC_ConfigChannel+0x34>
 8009ff6:	2302      	movs	r3, #2
 8009ff8:	f000 bcfe 	b.w	800a9f8 <HAL_ADC_ConfigChannel+0xa30>
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2201      	movs	r2, #1
 800a000:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	4618      	mov	r0, r3
 800a00a:	f7ff fa71 	bl	80094f0 <LL_ADC_REG_IsConversionOngoing>
 800a00e:	4603      	mov	r3, r0
 800a010:	2b00      	cmp	r3, #0
 800a012:	f040 84e2 	bne.w	800a9da <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	db38      	blt.n	800a090 <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	4a9e      	ldr	r2, [pc, #632]	@ (800a29c <HAL_ADC_ConfigChannel+0x2d4>)
 800a024:	4293      	cmp	r3, r2
 800a026:	d033      	beq.n	800a090 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a030:	2b00      	cmp	r3, #0
 800a032:	d108      	bne.n	800a046 <HAL_ADC_ConfigChannel+0x7e>
 800a034:	683b      	ldr	r3, [r7, #0]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	0e9b      	lsrs	r3, r3, #26
 800a03a:	f003 031f 	and.w	r3, r3, #31
 800a03e:	2201      	movs	r2, #1
 800a040:	fa02 f303 	lsl.w	r3, r2, r3
 800a044:	e01d      	b.n	800a082 <HAL_ADC_ConfigChannel+0xba>
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a04e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800a052:	fa93 f3a3 	rbit	r3, r3
 800a056:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800a05a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a05e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800a062:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a066:	2b00      	cmp	r3, #0
 800a068:	d101      	bne.n	800a06e <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 800a06a:	2320      	movs	r3, #32
 800a06c:	e004      	b.n	800a078 <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 800a06e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a072:	fab3 f383 	clz	r3, r3
 800a076:	b2db      	uxtb	r3, r3
 800a078:	f003 031f 	and.w	r3, r3, #31
 800a07c:	2201      	movs	r2, #1
 800a07e:	fa02 f303 	lsl.w	r3, r2, r3
 800a082:	687a      	ldr	r2, [r7, #4]
 800a084:	6812      	ldr	r2, [r2, #0]
 800a086:	69d1      	ldr	r1, [r2, #28]
 800a088:	687a      	ldr	r2, [r7, #4]
 800a08a:	6812      	ldr	r2, [r2, #0]
 800a08c:	430b      	orrs	r3, r1
 800a08e:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	6818      	ldr	r0, [r3, #0]
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	6859      	ldr	r1, [r3, #4]
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	461a      	mov	r2, r3
 800a09e:	f7ff f89a 	bl	80091d6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	f7ff fa22 	bl	80094f0 <LL_ADC_REG_IsConversionOngoing>
 800a0ac:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	f7ff fa2e 	bl	8009516 <LL_ADC_INJ_IsConversionOngoing>
 800a0ba:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800a0be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	f040 8270 	bne.w	800a5a8 <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800a0c8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	f040 826b 	bne.w	800a5a8 <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	6818      	ldr	r0, [r3, #0]
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	6819      	ldr	r1, [r3, #0]
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	689b      	ldr	r3, [r3, #8]
 800a0de:	461a      	mov	r2, r3
 800a0e0:	f7ff f8f5 	bl	80092ce <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	4a6c      	ldr	r2, [pc, #432]	@ (800a29c <HAL_ADC_ConfigChannel+0x2d4>)
 800a0ea:	4293      	cmp	r3, r2
 800a0ec:	d10d      	bne.n	800a10a <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	695a      	ldr	r2, [r3, #20]
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	68db      	ldr	r3, [r3, #12]
 800a0f8:	08db      	lsrs	r3, r3, #3
 800a0fa:	f003 0303 	and.w	r3, r3, #3
 800a0fe:	005b      	lsls	r3, r3, #1
 800a100:	fa02 f303 	lsl.w	r3, r2, r3
 800a104:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a108:	e032      	b.n	800a170 <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800a10a:	4b65      	ldr	r3, [pc, #404]	@ (800a2a0 <HAL_ADC_ConfigChannel+0x2d8>)
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800a112:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a116:	d10b      	bne.n	800a130 <HAL_ADC_ConfigChannel+0x168>
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	695a      	ldr	r2, [r3, #20]
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	68db      	ldr	r3, [r3, #12]
 800a122:	089b      	lsrs	r3, r3, #2
 800a124:	f003 0307 	and.w	r3, r3, #7
 800a128:	005b      	lsls	r3, r3, #1
 800a12a:	fa02 f303 	lsl.w	r3, r2, r3
 800a12e:	e01d      	b.n	800a16c <HAL_ADC_ConfigChannel+0x1a4>
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	68db      	ldr	r3, [r3, #12]
 800a136:	f003 0310 	and.w	r3, r3, #16
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d10b      	bne.n	800a156 <HAL_ADC_ConfigChannel+0x18e>
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	695a      	ldr	r2, [r3, #20]
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	68db      	ldr	r3, [r3, #12]
 800a148:	089b      	lsrs	r3, r3, #2
 800a14a:	f003 0307 	and.w	r3, r3, #7
 800a14e:	005b      	lsls	r3, r3, #1
 800a150:	fa02 f303 	lsl.w	r3, r2, r3
 800a154:	e00a      	b.n	800a16c <HAL_ADC_ConfigChannel+0x1a4>
 800a156:	683b      	ldr	r3, [r7, #0]
 800a158:	695a      	ldr	r2, [r3, #20]
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	68db      	ldr	r3, [r3, #12]
 800a160:	089b      	lsrs	r3, r3, #2
 800a162:	f003 0304 	and.w	r3, r3, #4
 800a166:	005b      	lsls	r3, r3, #1
 800a168:	fa02 f303 	lsl.w	r3, r2, r3
 800a16c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	691b      	ldr	r3, [r3, #16]
 800a174:	2b04      	cmp	r3, #4
 800a176:	d048      	beq.n	800a20a <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	6818      	ldr	r0, [r3, #0]
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	6919      	ldr	r1, [r3, #16]
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	681a      	ldr	r2, [r3, #0]
 800a184:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a188:	f7fe ff20 	bl	8008fcc <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	4a42      	ldr	r2, [pc, #264]	@ (800a29c <HAL_ADC_ConfigChannel+0x2d4>)
 800a192:	4293      	cmp	r3, r2
 800a194:	d119      	bne.n	800a1ca <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	6818      	ldr	r0, [r3, #0]
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	6919      	ldr	r1, [r3, #16]
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	69db      	ldr	r3, [r3, #28]
 800a1a2:	461a      	mov	r2, r3
 800a1a4:	f7fe ffb8 	bl	8009118 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	6818      	ldr	r0, [r3, #0]
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	6919      	ldr	r1, [r3, #16]
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a1b6:	2b01      	cmp	r3, #1
 800a1b8:	d102      	bne.n	800a1c0 <HAL_ADC_ConfigChannel+0x1f8>
 800a1ba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a1be:	e000      	b.n	800a1c2 <HAL_ADC_ConfigChannel+0x1fa>
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	461a      	mov	r2, r3
 800a1c4:	f7fe ff86 	bl	80090d4 <LL_ADC_SetOffsetSaturation>
 800a1c8:	e1ee      	b.n	800a5a8 <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	6818      	ldr	r0, [r3, #0]
 800a1ce:	683b      	ldr	r3, [r7, #0]
 800a1d0:	6919      	ldr	r1, [r3, #16]
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800a1d8:	2b01      	cmp	r3, #1
 800a1da:	d102      	bne.n	800a1e2 <HAL_ADC_ConfigChannel+0x21a>
 800a1dc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a1e0:	e000      	b.n	800a1e4 <HAL_ADC_ConfigChannel+0x21c>
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	461a      	mov	r2, r3
 800a1e6:	f7fe ff53 	bl	8009090 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	6818      	ldr	r0, [r3, #0]
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	6919      	ldr	r1, [r3, #16]
 800a1f2:	683b      	ldr	r3, [r7, #0]
 800a1f4:	7e1b      	ldrb	r3, [r3, #24]
 800a1f6:	2b01      	cmp	r3, #1
 800a1f8:	d102      	bne.n	800a200 <HAL_ADC_ConfigChannel+0x238>
 800a1fa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a1fe:	e000      	b.n	800a202 <HAL_ADC_ConfigChannel+0x23a>
 800a200:	2300      	movs	r3, #0
 800a202:	461a      	mov	r2, r3
 800a204:	f7fe ff2a 	bl	800905c <LL_ADC_SetDataRightShift>
 800a208:	e1ce      	b.n	800a5a8 <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	4a23      	ldr	r2, [pc, #140]	@ (800a29c <HAL_ADC_ConfigChannel+0x2d4>)
 800a210:	4293      	cmp	r3, r2
 800a212:	f040 8181 	bne.w	800a518 <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	2100      	movs	r1, #0
 800a21c:	4618      	mov	r0, r3
 800a21e:	f7fe ff07 	bl	8009030 <LL_ADC_GetOffsetChannel>
 800a222:	4603      	mov	r3, r0
 800a224:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d10a      	bne.n	800a242 <HAL_ADC_ConfigChannel+0x27a>
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	2100      	movs	r1, #0
 800a232:	4618      	mov	r0, r3
 800a234:	f7fe fefc 	bl	8009030 <LL_ADC_GetOffsetChannel>
 800a238:	4603      	mov	r3, r0
 800a23a:	0e9b      	lsrs	r3, r3, #26
 800a23c:	f003 021f 	and.w	r2, r3, #31
 800a240:	e01e      	b.n	800a280 <HAL_ADC_ConfigChannel+0x2b8>
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	2100      	movs	r1, #0
 800a248:	4618      	mov	r0, r3
 800a24a:	f7fe fef1 	bl	8009030 <LL_ADC_GetOffsetChannel>
 800a24e:	4603      	mov	r3, r0
 800a250:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a254:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a258:	fa93 f3a3 	rbit	r3, r3
 800a25c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 800a260:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a264:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 800a268:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d101      	bne.n	800a274 <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 800a270:	2320      	movs	r3, #32
 800a272:	e004      	b.n	800a27e <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 800a274:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800a278:	fab3 f383 	clz	r3, r3
 800a27c:	b2db      	uxtb	r3, r3
 800a27e:	461a      	mov	r2, r3
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d10b      	bne.n	800a2a4 <HAL_ADC_ConfigChannel+0x2dc>
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	0e9b      	lsrs	r3, r3, #26
 800a292:	f003 031f 	and.w	r3, r3, #31
 800a296:	e01e      	b.n	800a2d6 <HAL_ADC_ConfigChannel+0x30e>
 800a298:	47ff0000 	.word	0x47ff0000
 800a29c:	58026000 	.word	0x58026000
 800a2a0:	5c001000 	.word	0x5c001000
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a2ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a2b0:	fa93 f3a3 	rbit	r3, r3
 800a2b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800a2b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a2bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800a2c0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d101      	bne.n	800a2cc <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 800a2c8:	2320      	movs	r3, #32
 800a2ca:	e004      	b.n	800a2d6 <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 800a2cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800a2d0:	fab3 f383 	clz	r3, r3
 800a2d4:	b2db      	uxtb	r3, r3
 800a2d6:	429a      	cmp	r2, r3
 800a2d8:	d106      	bne.n	800a2e8 <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	2200      	movs	r2, #0
 800a2e0:	2100      	movs	r1, #0
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	f7fe ff3a 	bl	800915c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	2101      	movs	r1, #1
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	f7fe fe9e 	bl	8009030 <LL_ADC_GetOffsetChannel>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d10a      	bne.n	800a314 <HAL_ADC_ConfigChannel+0x34c>
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	2101      	movs	r1, #1
 800a304:	4618      	mov	r0, r3
 800a306:	f7fe fe93 	bl	8009030 <LL_ADC_GetOffsetChannel>
 800a30a:	4603      	mov	r3, r0
 800a30c:	0e9b      	lsrs	r3, r3, #26
 800a30e:	f003 021f 	and.w	r2, r3, #31
 800a312:	e01e      	b.n	800a352 <HAL_ADC_ConfigChannel+0x38a>
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	2101      	movs	r1, #1
 800a31a:	4618      	mov	r0, r3
 800a31c:	f7fe fe88 	bl	8009030 <LL_ADC_GetOffsetChannel>
 800a320:	4603      	mov	r3, r0
 800a322:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a326:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a32a:	fa93 f3a3 	rbit	r3, r3
 800a32e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800a332:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a336:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800a33a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d101      	bne.n	800a346 <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 800a342:	2320      	movs	r3, #32
 800a344:	e004      	b.n	800a350 <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 800a346:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a34a:	fab3 f383 	clz	r3, r3
 800a34e:	b2db      	uxtb	r3, r3
 800a350:	461a      	mov	r2, r3
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d105      	bne.n	800a36a <HAL_ADC_ConfigChannel+0x3a2>
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	0e9b      	lsrs	r3, r3, #26
 800a364:	f003 031f 	and.w	r3, r3, #31
 800a368:	e018      	b.n	800a39c <HAL_ADC_ConfigChannel+0x3d4>
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a372:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a376:	fa93 f3a3 	rbit	r3, r3
 800a37a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800a37e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a382:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800a386:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d101      	bne.n	800a392 <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 800a38e:	2320      	movs	r3, #32
 800a390:	e004      	b.n	800a39c <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 800a392:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a396:	fab3 f383 	clz	r3, r3
 800a39a:	b2db      	uxtb	r3, r3
 800a39c:	429a      	cmp	r2, r3
 800a39e:	d106      	bne.n	800a3ae <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	2101      	movs	r1, #1
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	f7fe fed7 	bl	800915c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	2102      	movs	r1, #2
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	f7fe fe3b 	bl	8009030 <LL_ADC_GetOffsetChannel>
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d10a      	bne.n	800a3da <HAL_ADC_ConfigChannel+0x412>
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	2102      	movs	r1, #2
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	f7fe fe30 	bl	8009030 <LL_ADC_GetOffsetChannel>
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	0e9b      	lsrs	r3, r3, #26
 800a3d4:	f003 021f 	and.w	r2, r3, #31
 800a3d8:	e01e      	b.n	800a418 <HAL_ADC_ConfigChannel+0x450>
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	2102      	movs	r1, #2
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	f7fe fe25 	bl	8009030 <LL_ADC_GetOffsetChannel>
 800a3e6:	4603      	mov	r3, r0
 800a3e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a3ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a3f0:	fa93 f3a3 	rbit	r3, r3
 800a3f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800a3f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a3fc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800a400:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a404:	2b00      	cmp	r3, #0
 800a406:	d101      	bne.n	800a40c <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 800a408:	2320      	movs	r3, #32
 800a40a:	e004      	b.n	800a416 <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 800a40c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a410:	fab3 f383 	clz	r3, r3
 800a414:	b2db      	uxtb	r3, r3
 800a416:	461a      	mov	r2, r3
 800a418:	683b      	ldr	r3, [r7, #0]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a420:	2b00      	cmp	r3, #0
 800a422:	d105      	bne.n	800a430 <HAL_ADC_ConfigChannel+0x468>
 800a424:	683b      	ldr	r3, [r7, #0]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	0e9b      	lsrs	r3, r3, #26
 800a42a:	f003 031f 	and.w	r3, r3, #31
 800a42e:	e014      	b.n	800a45a <HAL_ADC_ConfigChannel+0x492>
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a436:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a438:	fa93 f3a3 	rbit	r3, r3
 800a43c:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800a43e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a440:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 800a444:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d101      	bne.n	800a450 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 800a44c:	2320      	movs	r3, #32
 800a44e:	e004      	b.n	800a45a <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800a450:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a454:	fab3 f383 	clz	r3, r3
 800a458:	b2db      	uxtb	r3, r3
 800a45a:	429a      	cmp	r2, r3
 800a45c:	d106      	bne.n	800a46c <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	2200      	movs	r2, #0
 800a464:	2102      	movs	r1, #2
 800a466:	4618      	mov	r0, r3
 800a468:	f7fe fe78 	bl	800915c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	2103      	movs	r1, #3
 800a472:	4618      	mov	r0, r3
 800a474:	f7fe fddc 	bl	8009030 <LL_ADC_GetOffsetChannel>
 800a478:	4603      	mov	r3, r0
 800a47a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d10a      	bne.n	800a498 <HAL_ADC_ConfigChannel+0x4d0>
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	2103      	movs	r1, #3
 800a488:	4618      	mov	r0, r3
 800a48a:	f7fe fdd1 	bl	8009030 <LL_ADC_GetOffsetChannel>
 800a48e:	4603      	mov	r3, r0
 800a490:	0e9b      	lsrs	r3, r3, #26
 800a492:	f003 021f 	and.w	r2, r3, #31
 800a496:	e017      	b.n	800a4c8 <HAL_ADC_ConfigChannel+0x500>
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	2103      	movs	r1, #3
 800a49e:	4618      	mov	r0, r3
 800a4a0:	f7fe fdc6 	bl	8009030 <LL_ADC_GetOffsetChannel>
 800a4a4:	4603      	mov	r3, r0
 800a4a6:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a4a8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a4aa:	fa93 f3a3 	rbit	r3, r3
 800a4ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800a4b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a4b2:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 800a4b4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d101      	bne.n	800a4be <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 800a4ba:	2320      	movs	r3, #32
 800a4bc:	e003      	b.n	800a4c6 <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 800a4be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a4c0:	fab3 f383 	clz	r3, r3
 800a4c4:	b2db      	uxtb	r3, r3
 800a4c6:	461a      	mov	r2, r3
 800a4c8:	683b      	ldr	r3, [r7, #0]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d105      	bne.n	800a4e0 <HAL_ADC_ConfigChannel+0x518>
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	0e9b      	lsrs	r3, r3, #26
 800a4da:	f003 031f 	and.w	r3, r3, #31
 800a4de:	e011      	b.n	800a504 <HAL_ADC_ConfigChannel+0x53c>
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a4e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a4e8:	fa93 f3a3 	rbit	r3, r3
 800a4ec:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800a4ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a4f0:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800a4f2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d101      	bne.n	800a4fc <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 800a4f8:	2320      	movs	r3, #32
 800a4fa:	e003      	b.n	800a504 <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 800a4fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a4fe:	fab3 f383 	clz	r3, r3
 800a502:	b2db      	uxtb	r3, r3
 800a504:	429a      	cmp	r2, r3
 800a506:	d14f      	bne.n	800a5a8 <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	2200      	movs	r2, #0
 800a50e:	2103      	movs	r1, #3
 800a510:	4618      	mov	r0, r3
 800a512:	f7fe fe23 	bl	800915c <LL_ADC_SetOffsetState>
 800a516:	e047      	b.n	800a5a8 <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a51e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	069b      	lsls	r3, r3, #26
 800a528:	429a      	cmp	r2, r3
 800a52a:	d107      	bne.n	800a53c <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800a53a:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a542:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800a546:	683b      	ldr	r3, [r7, #0]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	069b      	lsls	r3, r3, #26
 800a54c:	429a      	cmp	r2, r3
 800a54e:	d107      	bne.n	800a560 <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800a55e:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a566:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800a56a:	683b      	ldr	r3, [r7, #0]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	069b      	lsls	r3, r3, #26
 800a570:	429a      	cmp	r2, r3
 800a572:	d107      	bne.n	800a584 <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800a582:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a58a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	069b      	lsls	r3, r3, #26
 800a594:	429a      	cmp	r2, r3
 800a596:	d107      	bne.n	800a5a8 <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800a5a6:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	f7fe ff77 	bl	80094a0 <LL_ADC_IsEnabled>
 800a5b2:	4603      	mov	r3, r0
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	f040 8219 	bne.w	800a9ec <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	6818      	ldr	r0, [r3, #0]
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	6819      	ldr	r1, [r3, #0]
 800a5c2:	683b      	ldr	r3, [r7, #0]
 800a5c4:	68db      	ldr	r3, [r3, #12]
 800a5c6:	461a      	mov	r2, r3
 800a5c8:	f7fe feac 	bl	8009324 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	68db      	ldr	r3, [r3, #12]
 800a5d0:	4aa1      	ldr	r2, [pc, #644]	@ (800a858 <HAL_ADC_ConfigChannel+0x890>)
 800a5d2:	4293      	cmp	r3, r2
 800a5d4:	f040 812e 	bne.w	800a834 <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800a5dc:	683b      	ldr	r3, [r7, #0]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d10b      	bne.n	800a600 <HAL_ADC_ConfigChannel+0x638>
 800a5e8:	683b      	ldr	r3, [r7, #0]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	0e9b      	lsrs	r3, r3, #26
 800a5ee:	3301      	adds	r3, #1
 800a5f0:	f003 031f 	and.w	r3, r3, #31
 800a5f4:	2b09      	cmp	r3, #9
 800a5f6:	bf94      	ite	ls
 800a5f8:	2301      	movls	r3, #1
 800a5fa:	2300      	movhi	r3, #0
 800a5fc:	b2db      	uxtb	r3, r3
 800a5fe:	e019      	b.n	800a634 <HAL_ADC_ConfigChannel+0x66c>
 800a600:	683b      	ldr	r3, [r7, #0]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a606:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a608:	fa93 f3a3 	rbit	r3, r3
 800a60c:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800a60e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a610:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800a612:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a614:	2b00      	cmp	r3, #0
 800a616:	d101      	bne.n	800a61c <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 800a618:	2320      	movs	r3, #32
 800a61a:	e003      	b.n	800a624 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 800a61c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a61e:	fab3 f383 	clz	r3, r3
 800a622:	b2db      	uxtb	r3, r3
 800a624:	3301      	adds	r3, #1
 800a626:	f003 031f 	and.w	r3, r3, #31
 800a62a:	2b09      	cmp	r3, #9
 800a62c:	bf94      	ite	ls
 800a62e:	2301      	movls	r3, #1
 800a630:	2300      	movhi	r3, #0
 800a632:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800a634:	2b00      	cmp	r3, #0
 800a636:	d079      	beq.n	800a72c <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a640:	2b00      	cmp	r3, #0
 800a642:	d107      	bne.n	800a654 <HAL_ADC_ConfigChannel+0x68c>
 800a644:	683b      	ldr	r3, [r7, #0]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	0e9b      	lsrs	r3, r3, #26
 800a64a:	3301      	adds	r3, #1
 800a64c:	069b      	lsls	r3, r3, #26
 800a64e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800a652:	e015      	b.n	800a680 <HAL_ADC_ConfigChannel+0x6b8>
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a65a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a65c:	fa93 f3a3 	rbit	r3, r3
 800a660:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800a662:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a664:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800a666:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d101      	bne.n	800a670 <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 800a66c:	2320      	movs	r3, #32
 800a66e:	e003      	b.n	800a678 <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 800a670:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a672:	fab3 f383 	clz	r3, r3
 800a676:	b2db      	uxtb	r3, r3
 800a678:	3301      	adds	r3, #1
 800a67a:	069b      	lsls	r3, r3, #26
 800a67c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800a680:	683b      	ldr	r3, [r7, #0]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d109      	bne.n	800a6a0 <HAL_ADC_ConfigChannel+0x6d8>
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	0e9b      	lsrs	r3, r3, #26
 800a692:	3301      	adds	r3, #1
 800a694:	f003 031f 	and.w	r3, r3, #31
 800a698:	2101      	movs	r1, #1
 800a69a:	fa01 f303 	lsl.w	r3, r1, r3
 800a69e:	e017      	b.n	800a6d0 <HAL_ADC_ConfigChannel+0x708>
 800a6a0:	683b      	ldr	r3, [r7, #0]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a6a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a6a8:	fa93 f3a3 	rbit	r3, r3
 800a6ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800a6ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a6b0:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800a6b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d101      	bne.n	800a6bc <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 800a6b8:	2320      	movs	r3, #32
 800a6ba:	e003      	b.n	800a6c4 <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 800a6bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a6be:	fab3 f383 	clz	r3, r3
 800a6c2:	b2db      	uxtb	r3, r3
 800a6c4:	3301      	adds	r3, #1
 800a6c6:	f003 031f 	and.w	r3, r3, #31
 800a6ca:	2101      	movs	r1, #1
 800a6cc:	fa01 f303 	lsl.w	r3, r1, r3
 800a6d0:	ea42 0103 	orr.w	r1, r2, r3
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d10a      	bne.n	800a6f6 <HAL_ADC_ConfigChannel+0x72e>
 800a6e0:	683b      	ldr	r3, [r7, #0]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	0e9b      	lsrs	r3, r3, #26
 800a6e6:	3301      	adds	r3, #1
 800a6e8:	f003 021f 	and.w	r2, r3, #31
 800a6ec:	4613      	mov	r3, r2
 800a6ee:	005b      	lsls	r3, r3, #1
 800a6f0:	4413      	add	r3, r2
 800a6f2:	051b      	lsls	r3, r3, #20
 800a6f4:	e018      	b.n	800a728 <HAL_ADC_ConfigChannel+0x760>
 800a6f6:	683b      	ldr	r3, [r7, #0]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a6fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6fe:	fa93 f3a3 	rbit	r3, r3
 800a702:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800a704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a706:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800a708:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d101      	bne.n	800a712 <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 800a70e:	2320      	movs	r3, #32
 800a710:	e003      	b.n	800a71a <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 800a712:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a714:	fab3 f383 	clz	r3, r3
 800a718:	b2db      	uxtb	r3, r3
 800a71a:	3301      	adds	r3, #1
 800a71c:	f003 021f 	and.w	r2, r3, #31
 800a720:	4613      	mov	r3, r2
 800a722:	005b      	lsls	r3, r3, #1
 800a724:	4413      	add	r3, r2
 800a726:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800a728:	430b      	orrs	r3, r1
 800a72a:	e07e      	b.n	800a82a <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a734:	2b00      	cmp	r3, #0
 800a736:	d107      	bne.n	800a748 <HAL_ADC_ConfigChannel+0x780>
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	0e9b      	lsrs	r3, r3, #26
 800a73e:	3301      	adds	r3, #1
 800a740:	069b      	lsls	r3, r3, #26
 800a742:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800a746:	e015      	b.n	800a774 <HAL_ADC_ConfigChannel+0x7ac>
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a74e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a750:	fa93 f3a3 	rbit	r3, r3
 800a754:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800a756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a758:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800a75a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d101      	bne.n	800a764 <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 800a760:	2320      	movs	r3, #32
 800a762:	e003      	b.n	800a76c <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 800a764:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a766:	fab3 f383 	clz	r3, r3
 800a76a:	b2db      	uxtb	r3, r3
 800a76c:	3301      	adds	r3, #1
 800a76e:	069b      	lsls	r3, r3, #26
 800a770:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800a774:	683b      	ldr	r3, [r7, #0]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d109      	bne.n	800a794 <HAL_ADC_ConfigChannel+0x7cc>
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	0e9b      	lsrs	r3, r3, #26
 800a786:	3301      	adds	r3, #1
 800a788:	f003 031f 	and.w	r3, r3, #31
 800a78c:	2101      	movs	r1, #1
 800a78e:	fa01 f303 	lsl.w	r3, r1, r3
 800a792:	e017      	b.n	800a7c4 <HAL_ADC_ConfigChannel+0x7fc>
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a79a:	69fb      	ldr	r3, [r7, #28]
 800a79c:	fa93 f3a3 	rbit	r3, r3
 800a7a0:	61bb      	str	r3, [r7, #24]
  return result;
 800a7a2:	69bb      	ldr	r3, [r7, #24]
 800a7a4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800a7a6:	6a3b      	ldr	r3, [r7, #32]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d101      	bne.n	800a7b0 <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 800a7ac:	2320      	movs	r3, #32
 800a7ae:	e003      	b.n	800a7b8 <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 800a7b0:	6a3b      	ldr	r3, [r7, #32]
 800a7b2:	fab3 f383 	clz	r3, r3
 800a7b6:	b2db      	uxtb	r3, r3
 800a7b8:	3301      	adds	r3, #1
 800a7ba:	f003 031f 	and.w	r3, r3, #31
 800a7be:	2101      	movs	r1, #1
 800a7c0:	fa01 f303 	lsl.w	r3, r1, r3
 800a7c4:	ea42 0103 	orr.w	r1, r2, r3
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d10d      	bne.n	800a7f0 <HAL_ADC_ConfigChannel+0x828>
 800a7d4:	683b      	ldr	r3, [r7, #0]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	0e9b      	lsrs	r3, r3, #26
 800a7da:	3301      	adds	r3, #1
 800a7dc:	f003 021f 	and.w	r2, r3, #31
 800a7e0:	4613      	mov	r3, r2
 800a7e2:	005b      	lsls	r3, r3, #1
 800a7e4:	4413      	add	r3, r2
 800a7e6:	3b1e      	subs	r3, #30
 800a7e8:	051b      	lsls	r3, r3, #20
 800a7ea:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800a7ee:	e01b      	b.n	800a828 <HAL_ADC_ConfigChannel+0x860>
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a7f6:	693b      	ldr	r3, [r7, #16]
 800a7f8:	fa93 f3a3 	rbit	r3, r3
 800a7fc:	60fb      	str	r3, [r7, #12]
  return result;
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800a802:	697b      	ldr	r3, [r7, #20]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d101      	bne.n	800a80c <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 800a808:	2320      	movs	r3, #32
 800a80a:	e003      	b.n	800a814 <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 800a80c:	697b      	ldr	r3, [r7, #20]
 800a80e:	fab3 f383 	clz	r3, r3
 800a812:	b2db      	uxtb	r3, r3
 800a814:	3301      	adds	r3, #1
 800a816:	f003 021f 	and.w	r2, r3, #31
 800a81a:	4613      	mov	r3, r2
 800a81c:	005b      	lsls	r3, r3, #1
 800a81e:	4413      	add	r3, r2
 800a820:	3b1e      	subs	r3, #30
 800a822:	051b      	lsls	r3, r3, #20
 800a824:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800a828:	430b      	orrs	r3, r1
 800a82a:	683a      	ldr	r2, [r7, #0]
 800a82c:	6892      	ldr	r2, [r2, #8]
 800a82e:	4619      	mov	r1, r3
 800a830:	f7fe fd4d 	bl	80092ce <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	f280 80d7 	bge.w	800a9ec <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	4a06      	ldr	r2, [pc, #24]	@ (800a85c <HAL_ADC_ConfigChannel+0x894>)
 800a844:	4293      	cmp	r3, r2
 800a846:	d004      	beq.n	800a852 <HAL_ADC_ConfigChannel+0x88a>
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	4a04      	ldr	r2, [pc, #16]	@ (800a860 <HAL_ADC_ConfigChannel+0x898>)
 800a84e:	4293      	cmp	r3, r2
 800a850:	d10a      	bne.n	800a868 <HAL_ADC_ConfigChannel+0x8a0>
 800a852:	4b04      	ldr	r3, [pc, #16]	@ (800a864 <HAL_ADC_ConfigChannel+0x89c>)
 800a854:	e009      	b.n	800a86a <HAL_ADC_ConfigChannel+0x8a2>
 800a856:	bf00      	nop
 800a858:	47ff0000 	.word	0x47ff0000
 800a85c:	40022000 	.word	0x40022000
 800a860:	40022100 	.word	0x40022100
 800a864:	40022300 	.word	0x40022300
 800a868:	4b65      	ldr	r3, [pc, #404]	@ (800aa00 <HAL_ADC_ConfigChannel+0xa38>)
 800a86a:	4618      	mov	r0, r3
 800a86c:	f7fe fba0 	bl	8008fb0 <LL_ADC_GetCommonPathInternalCh>
 800a870:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	4a62      	ldr	r2, [pc, #392]	@ (800aa04 <HAL_ADC_ConfigChannel+0xa3c>)
 800a87a:	4293      	cmp	r3, r2
 800a87c:	d004      	beq.n	800a888 <HAL_ADC_ConfigChannel+0x8c0>
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	4a61      	ldr	r2, [pc, #388]	@ (800aa08 <HAL_ADC_ConfigChannel+0xa40>)
 800a884:	4293      	cmp	r3, r2
 800a886:	d10e      	bne.n	800a8a6 <HAL_ADC_ConfigChannel+0x8de>
 800a888:	485e      	ldr	r0, [pc, #376]	@ (800aa04 <HAL_ADC_ConfigChannel+0xa3c>)
 800a88a:	f7fe fe09 	bl	80094a0 <LL_ADC_IsEnabled>
 800a88e:	4604      	mov	r4, r0
 800a890:	485d      	ldr	r0, [pc, #372]	@ (800aa08 <HAL_ADC_ConfigChannel+0xa40>)
 800a892:	f7fe fe05 	bl	80094a0 <LL_ADC_IsEnabled>
 800a896:	4603      	mov	r3, r0
 800a898:	4323      	orrs	r3, r4
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	bf0c      	ite	eq
 800a89e:	2301      	moveq	r3, #1
 800a8a0:	2300      	movne	r3, #0
 800a8a2:	b2db      	uxtb	r3, r3
 800a8a4:	e008      	b.n	800a8b8 <HAL_ADC_ConfigChannel+0x8f0>
 800a8a6:	4859      	ldr	r0, [pc, #356]	@ (800aa0c <HAL_ADC_ConfigChannel+0xa44>)
 800a8a8:	f7fe fdfa 	bl	80094a0 <LL_ADC_IsEnabled>
 800a8ac:	4603      	mov	r3, r0
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	bf0c      	ite	eq
 800a8b2:	2301      	moveq	r3, #1
 800a8b4:	2300      	movne	r3, #0
 800a8b6:	b2db      	uxtb	r3, r3
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	f000 8084 	beq.w	800a9c6 <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800a8be:	683b      	ldr	r3, [r7, #0]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	4a53      	ldr	r2, [pc, #332]	@ (800aa10 <HAL_ADC_ConfigChannel+0xa48>)
 800a8c4:	4293      	cmp	r3, r2
 800a8c6:	d132      	bne.n	800a92e <HAL_ADC_ConfigChannel+0x966>
 800a8c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a8cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d12c      	bne.n	800a92e <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	4a4c      	ldr	r2, [pc, #304]	@ (800aa0c <HAL_ADC_ConfigChannel+0xa44>)
 800a8da:	4293      	cmp	r3, r2
 800a8dc:	f040 8086 	bne.w	800a9ec <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	4a47      	ldr	r2, [pc, #284]	@ (800aa04 <HAL_ADC_ConfigChannel+0xa3c>)
 800a8e6:	4293      	cmp	r3, r2
 800a8e8:	d004      	beq.n	800a8f4 <HAL_ADC_ConfigChannel+0x92c>
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	4a46      	ldr	r2, [pc, #280]	@ (800aa08 <HAL_ADC_ConfigChannel+0xa40>)
 800a8f0:	4293      	cmp	r3, r2
 800a8f2:	d101      	bne.n	800a8f8 <HAL_ADC_ConfigChannel+0x930>
 800a8f4:	4a47      	ldr	r2, [pc, #284]	@ (800aa14 <HAL_ADC_ConfigChannel+0xa4c>)
 800a8f6:	e000      	b.n	800a8fa <HAL_ADC_ConfigChannel+0x932>
 800a8f8:	4a41      	ldr	r2, [pc, #260]	@ (800aa00 <HAL_ADC_ConfigChannel+0xa38>)
 800a8fa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a8fe:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a902:	4619      	mov	r1, r3
 800a904:	4610      	mov	r0, r2
 800a906:	f7fe fb40 	bl	8008f8a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800a90a:	4b43      	ldr	r3, [pc, #268]	@ (800aa18 <HAL_ADC_ConfigChannel+0xa50>)
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	099b      	lsrs	r3, r3, #6
 800a910:	4a42      	ldr	r2, [pc, #264]	@ (800aa1c <HAL_ADC_ConfigChannel+0xa54>)
 800a912:	fba2 2303 	umull	r2, r3, r2, r3
 800a916:	099b      	lsrs	r3, r3, #6
 800a918:	3301      	adds	r3, #1
 800a91a:	005b      	lsls	r3, r3, #1
 800a91c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800a91e:	e002      	b.n	800a926 <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 800a920:	68bb      	ldr	r3, [r7, #8]
 800a922:	3b01      	subs	r3, #1
 800a924:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800a926:	68bb      	ldr	r3, [r7, #8]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d1f9      	bne.n	800a920 <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800a92c:	e05e      	b.n	800a9ec <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800a92e:	683b      	ldr	r3, [r7, #0]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	4a3b      	ldr	r2, [pc, #236]	@ (800aa20 <HAL_ADC_ConfigChannel+0xa58>)
 800a934:	4293      	cmp	r3, r2
 800a936:	d120      	bne.n	800a97a <HAL_ADC_ConfigChannel+0x9b2>
 800a938:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a93c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a940:	2b00      	cmp	r3, #0
 800a942:	d11a      	bne.n	800a97a <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	4a30      	ldr	r2, [pc, #192]	@ (800aa0c <HAL_ADC_ConfigChannel+0xa44>)
 800a94a:	4293      	cmp	r3, r2
 800a94c:	d14e      	bne.n	800a9ec <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	4a2c      	ldr	r2, [pc, #176]	@ (800aa04 <HAL_ADC_ConfigChannel+0xa3c>)
 800a954:	4293      	cmp	r3, r2
 800a956:	d004      	beq.n	800a962 <HAL_ADC_ConfigChannel+0x99a>
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	4a2a      	ldr	r2, [pc, #168]	@ (800aa08 <HAL_ADC_ConfigChannel+0xa40>)
 800a95e:	4293      	cmp	r3, r2
 800a960:	d101      	bne.n	800a966 <HAL_ADC_ConfigChannel+0x99e>
 800a962:	4a2c      	ldr	r2, [pc, #176]	@ (800aa14 <HAL_ADC_ConfigChannel+0xa4c>)
 800a964:	e000      	b.n	800a968 <HAL_ADC_ConfigChannel+0x9a0>
 800a966:	4a26      	ldr	r2, [pc, #152]	@ (800aa00 <HAL_ADC_ConfigChannel+0xa38>)
 800a968:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a96c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a970:	4619      	mov	r1, r3
 800a972:	4610      	mov	r0, r2
 800a974:	f7fe fb09 	bl	8008f8a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800a978:	e038      	b.n	800a9ec <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800a97a:	683b      	ldr	r3, [r7, #0]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	4a29      	ldr	r2, [pc, #164]	@ (800aa24 <HAL_ADC_ConfigChannel+0xa5c>)
 800a980:	4293      	cmp	r3, r2
 800a982:	d133      	bne.n	800a9ec <HAL_ADC_ConfigChannel+0xa24>
 800a984:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a988:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d12d      	bne.n	800a9ec <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	4a1d      	ldr	r2, [pc, #116]	@ (800aa0c <HAL_ADC_ConfigChannel+0xa44>)
 800a996:	4293      	cmp	r3, r2
 800a998:	d128      	bne.n	800a9ec <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	4a19      	ldr	r2, [pc, #100]	@ (800aa04 <HAL_ADC_ConfigChannel+0xa3c>)
 800a9a0:	4293      	cmp	r3, r2
 800a9a2:	d004      	beq.n	800a9ae <HAL_ADC_ConfigChannel+0x9e6>
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	4a17      	ldr	r2, [pc, #92]	@ (800aa08 <HAL_ADC_ConfigChannel+0xa40>)
 800a9aa:	4293      	cmp	r3, r2
 800a9ac:	d101      	bne.n	800a9b2 <HAL_ADC_ConfigChannel+0x9ea>
 800a9ae:	4a19      	ldr	r2, [pc, #100]	@ (800aa14 <HAL_ADC_ConfigChannel+0xa4c>)
 800a9b0:	e000      	b.n	800a9b4 <HAL_ADC_ConfigChannel+0x9ec>
 800a9b2:	4a13      	ldr	r2, [pc, #76]	@ (800aa00 <HAL_ADC_ConfigChannel+0xa38>)
 800a9b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a9b8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800a9bc:	4619      	mov	r1, r3
 800a9be:	4610      	mov	r0, r2
 800a9c0:	f7fe fae3 	bl	8008f8a <LL_ADC_SetCommonPathInternalCh>
 800a9c4:	e012      	b.n	800a9ec <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a9ca:	f043 0220 	orr.w	r2, r3, #32
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 800a9d2:	2301      	movs	r3, #1
 800a9d4:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 800a9d8:	e008      	b.n	800a9ec <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a9de:	f043 0220 	orr.w	r2, r3, #32
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800a9e6:	2301      	movs	r3, #1
 800a9e8:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 800a9f4:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	37e4      	adds	r7, #228	@ 0xe4
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	bd90      	pop	{r4, r7, pc}
 800aa00:	58026300 	.word	0x58026300
 800aa04:	40022000 	.word	0x40022000
 800aa08:	40022100 	.word	0x40022100
 800aa0c:	58026000 	.word	0x58026000
 800aa10:	c7520000 	.word	0xc7520000
 800aa14:	40022300 	.word	0x40022300
 800aa18:	24000004 	.word	0x24000004
 800aa1c:	053e2d63 	.word	0x053e2d63
 800aa20:	c3210000 	.word	0xc3210000
 800aa24:	cb840000 	.word	0xcb840000

0800aa28 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b084      	sub	sp, #16
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	4618      	mov	r0, r3
 800aa36:	f7fe fd33 	bl	80094a0 <LL_ADC_IsEnabled>
 800aa3a:	4603      	mov	r3, r0
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d16e      	bne.n	800ab1e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	689a      	ldr	r2, [r3, #8]
 800aa46:	4b38      	ldr	r3, [pc, #224]	@ (800ab28 <ADC_Enable+0x100>)
 800aa48:	4013      	ands	r3, r2
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d00d      	beq.n	800aa6a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aa52:	f043 0210 	orr.w	r2, r3, #16
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aa5e:	f043 0201 	orr.w	r2, r3, #1
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 800aa66:	2301      	movs	r3, #1
 800aa68:	e05a      	b.n	800ab20 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	4618      	mov	r0, r3
 800aa70:	f7fe fd02 	bl	8009478 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800aa74:	f7fe fa46 	bl	8008f04 <HAL_GetTick>
 800aa78:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	4a2b      	ldr	r2, [pc, #172]	@ (800ab2c <ADC_Enable+0x104>)
 800aa80:	4293      	cmp	r3, r2
 800aa82:	d004      	beq.n	800aa8e <ADC_Enable+0x66>
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	4a29      	ldr	r2, [pc, #164]	@ (800ab30 <ADC_Enable+0x108>)
 800aa8a:	4293      	cmp	r3, r2
 800aa8c:	d101      	bne.n	800aa92 <ADC_Enable+0x6a>
 800aa8e:	4b29      	ldr	r3, [pc, #164]	@ (800ab34 <ADC_Enable+0x10c>)
 800aa90:	e000      	b.n	800aa94 <ADC_Enable+0x6c>
 800aa92:	4b29      	ldr	r3, [pc, #164]	@ (800ab38 <ADC_Enable+0x110>)
 800aa94:	4618      	mov	r0, r3
 800aa96:	f7fe fc85 	bl	80093a4 <LL_ADC_GetMultimode>
 800aa9a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	4a23      	ldr	r2, [pc, #140]	@ (800ab30 <ADC_Enable+0x108>)
 800aaa2:	4293      	cmp	r3, r2
 800aaa4:	d002      	beq.n	800aaac <ADC_Enable+0x84>
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	e000      	b.n	800aaae <ADC_Enable+0x86>
 800aaac:	4b1f      	ldr	r3, [pc, #124]	@ (800ab2c <ADC_Enable+0x104>)
 800aaae:	687a      	ldr	r2, [r7, #4]
 800aab0:	6812      	ldr	r2, [r2, #0]
 800aab2:	4293      	cmp	r3, r2
 800aab4:	d02c      	beq.n	800ab10 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800aab6:	68bb      	ldr	r3, [r7, #8]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d130      	bne.n	800ab1e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800aabc:	e028      	b.n	800ab10 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	4618      	mov	r0, r3
 800aac4:	f7fe fcec 	bl	80094a0 <LL_ADC_IsEnabled>
 800aac8:	4603      	mov	r3, r0
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d104      	bne.n	800aad8 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	4618      	mov	r0, r3
 800aad4:	f7fe fcd0 	bl	8009478 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800aad8:	f7fe fa14 	bl	8008f04 <HAL_GetTick>
 800aadc:	4602      	mov	r2, r0
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	1ad3      	subs	r3, r2, r3
 800aae2:	2b02      	cmp	r3, #2
 800aae4:	d914      	bls.n	800ab10 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	f003 0301 	and.w	r3, r3, #1
 800aaf0:	2b01      	cmp	r3, #1
 800aaf2:	d00d      	beq.n	800ab10 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aaf8:	f043 0210 	orr.w	r2, r3, #16
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ab04:	f043 0201 	orr.w	r2, r3, #1
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 800ab0c:	2301      	movs	r3, #1
 800ab0e:	e007      	b.n	800ab20 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	f003 0301 	and.w	r3, r3, #1
 800ab1a:	2b01      	cmp	r3, #1
 800ab1c:	d1cf      	bne.n	800aabe <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800ab1e:	2300      	movs	r3, #0
}
 800ab20:	4618      	mov	r0, r3
 800ab22:	3710      	adds	r7, #16
 800ab24:	46bd      	mov	sp, r7
 800ab26:	bd80      	pop	{r7, pc}
 800ab28:	8000003f 	.word	0x8000003f
 800ab2c:	40022000 	.word	0x40022000
 800ab30:	40022100 	.word	0x40022100
 800ab34:	40022300 	.word	0x40022300
 800ab38:	58026300 	.word	0x58026300

0800ab3c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b084      	sub	sp, #16
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab48:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ab4e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d14b      	bne.n	800abee <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ab5a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	f003 0308 	and.w	r3, r3, #8
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d021      	beq.n	800abb4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	4618      	mov	r0, r3
 800ab76:	f7fe fb1b 	bl	80091b0 <LL_ADC_REG_IsTriggerSourceSWStart>
 800ab7a:	4603      	mov	r3, r0
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d032      	beq.n	800abe6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	68db      	ldr	r3, [r3, #12]
 800ab86:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d12b      	bne.n	800abe6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ab92:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	661a      	str	r2, [r3, #96]	@ 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ab9e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d11f      	bne.n	800abe6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800abaa:	f043 0201 	orr.w	r2, r3, #1
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	661a      	str	r2, [r3, #96]	@ 0x60
 800abb2:	e018      	b.n	800abe6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	68db      	ldr	r3, [r3, #12]
 800abba:	f003 0303 	and.w	r3, r3, #3
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d111      	bne.n	800abe6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800abc6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	661a      	str	r2, [r3, #96]	@ 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800abd2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d105      	bne.n	800abe6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800abde:	f043 0201 	orr.w	r2, r3, #1
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800abe6:	68f8      	ldr	r0, [r7, #12]
 800abe8:	f7ff f9c6 	bl	8009f78 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800abec:	e00e      	b.n	800ac0c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800abf2:	f003 0310 	and.w	r3, r3, #16
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d003      	beq.n	800ac02 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800abfa:	68f8      	ldr	r0, [r7, #12]
 800abfc:	f7ff f9da 	bl	8009fb4 <HAL_ADC_ErrorCallback>
}
 800ac00:	e004      	b.n	800ac0c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ac06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ac08:	6878      	ldr	r0, [r7, #4]
 800ac0a:	4798      	blx	r3
}
 800ac0c:	bf00      	nop
 800ac0e:	3710      	adds	r7, #16
 800ac10:	46bd      	mov	sp, r7
 800ac12:	bd80      	pop	{r7, pc}

0800ac14 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b084      	sub	sp, #16
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac20:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800ac22:	68f8      	ldr	r0, [r7, #12]
 800ac24:	f7ff f9b2 	bl	8009f8c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800ac28:	bf00      	nop
 800ac2a:	3710      	adds	r7, #16
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	bd80      	pop	{r7, pc}

0800ac30 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b084      	sub	sp, #16
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac3c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ac42:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ac4e:	f043 0204 	orr.w	r2, r3, #4
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800ac56:	68f8      	ldr	r0, [r7, #12]
 800ac58:	f7ff f9ac 	bl	8009fb4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800ac5c:	bf00      	nop
 800ac5e:	3710      	adds	r7, #16
 800ac60:	46bd      	mov	sp, r7
 800ac62:	bd80      	pop	{r7, pc}

0800ac64 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b084      	sub	sp, #16
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	4a6c      	ldr	r2, [pc, #432]	@ (800ae24 <ADC_ConfigureBoostMode+0x1c0>)
 800ac72:	4293      	cmp	r3, r2
 800ac74:	d004      	beq.n	800ac80 <ADC_ConfigureBoostMode+0x1c>
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	4a6b      	ldr	r2, [pc, #428]	@ (800ae28 <ADC_ConfigureBoostMode+0x1c4>)
 800ac7c:	4293      	cmp	r3, r2
 800ac7e:	d109      	bne.n	800ac94 <ADC_ConfigureBoostMode+0x30>
 800ac80:	4b6a      	ldr	r3, [pc, #424]	@ (800ae2c <ADC_ConfigureBoostMode+0x1c8>)
 800ac82:	689b      	ldr	r3, [r3, #8]
 800ac84:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	bf14      	ite	ne
 800ac8c:	2301      	movne	r3, #1
 800ac8e:	2300      	moveq	r3, #0
 800ac90:	b2db      	uxtb	r3, r3
 800ac92:	e008      	b.n	800aca6 <ADC_ConfigureBoostMode+0x42>
 800ac94:	4b66      	ldr	r3, [pc, #408]	@ (800ae30 <ADC_ConfigureBoostMode+0x1cc>)
 800ac96:	689b      	ldr	r3, [r3, #8]
 800ac98:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	bf14      	ite	ne
 800aca0:	2301      	movne	r3, #1
 800aca2:	2300      	moveq	r3, #0
 800aca4:	b2db      	uxtb	r3, r3
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d01c      	beq.n	800ace4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800acaa:	f006 fe8b 	bl	80119c4 <HAL_RCC_GetHCLKFreq>
 800acae:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	685b      	ldr	r3, [r3, #4]
 800acb4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800acb8:	d010      	beq.n	800acdc <ADC_ConfigureBoostMode+0x78>
 800acba:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800acbe:	d873      	bhi.n	800ada8 <ADC_ConfigureBoostMode+0x144>
 800acc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800acc4:	d002      	beq.n	800accc <ADC_ConfigureBoostMode+0x68>
 800acc6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800acca:	d16d      	bne.n	800ada8 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	685b      	ldr	r3, [r3, #4]
 800acd0:	0c1b      	lsrs	r3, r3, #16
 800acd2:	68fa      	ldr	r2, [r7, #12]
 800acd4:	fbb2 f3f3 	udiv	r3, r2, r3
 800acd8:	60fb      	str	r3, [r7, #12]
        break;
 800acda:	e068      	b.n	800adae <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	089b      	lsrs	r3, r3, #2
 800ace0:	60fb      	str	r3, [r7, #12]
        break;
 800ace2:	e064      	b.n	800adae <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800ace4:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800ace8:	f04f 0100 	mov.w	r1, #0
 800acec:	f008 f866 	bl	8012dbc <HAL_RCCEx_GetPeriphCLKFreq>
 800acf0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	685b      	ldr	r3, [r3, #4]
 800acf6:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800acfa:	d051      	beq.n	800ada0 <ADC_ConfigureBoostMode+0x13c>
 800acfc:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800ad00:	d854      	bhi.n	800adac <ADC_ConfigureBoostMode+0x148>
 800ad02:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800ad06:	d047      	beq.n	800ad98 <ADC_ConfigureBoostMode+0x134>
 800ad08:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800ad0c:	d84e      	bhi.n	800adac <ADC_ConfigureBoostMode+0x148>
 800ad0e:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800ad12:	d03d      	beq.n	800ad90 <ADC_ConfigureBoostMode+0x12c>
 800ad14:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800ad18:	d848      	bhi.n	800adac <ADC_ConfigureBoostMode+0x148>
 800ad1a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ad1e:	d033      	beq.n	800ad88 <ADC_ConfigureBoostMode+0x124>
 800ad20:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ad24:	d842      	bhi.n	800adac <ADC_ConfigureBoostMode+0x148>
 800ad26:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800ad2a:	d029      	beq.n	800ad80 <ADC_ConfigureBoostMode+0x11c>
 800ad2c:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800ad30:	d83c      	bhi.n	800adac <ADC_ConfigureBoostMode+0x148>
 800ad32:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800ad36:	d01a      	beq.n	800ad6e <ADC_ConfigureBoostMode+0x10a>
 800ad38:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800ad3c:	d836      	bhi.n	800adac <ADC_ConfigureBoostMode+0x148>
 800ad3e:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800ad42:	d014      	beq.n	800ad6e <ADC_ConfigureBoostMode+0x10a>
 800ad44:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800ad48:	d830      	bhi.n	800adac <ADC_ConfigureBoostMode+0x148>
 800ad4a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ad4e:	d00e      	beq.n	800ad6e <ADC_ConfigureBoostMode+0x10a>
 800ad50:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ad54:	d82a      	bhi.n	800adac <ADC_ConfigureBoostMode+0x148>
 800ad56:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800ad5a:	d008      	beq.n	800ad6e <ADC_ConfigureBoostMode+0x10a>
 800ad5c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800ad60:	d824      	bhi.n	800adac <ADC_ConfigureBoostMode+0x148>
 800ad62:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ad66:	d002      	beq.n	800ad6e <ADC_ConfigureBoostMode+0x10a>
 800ad68:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800ad6c:	d11e      	bne.n	800adac <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	685b      	ldr	r3, [r3, #4]
 800ad72:	0c9b      	lsrs	r3, r3, #18
 800ad74:	005b      	lsls	r3, r3, #1
 800ad76:	68fa      	ldr	r2, [r7, #12]
 800ad78:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad7c:	60fb      	str	r3, [r7, #12]
        break;
 800ad7e:	e016      	b.n	800adae <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	091b      	lsrs	r3, r3, #4
 800ad84:	60fb      	str	r3, [r7, #12]
        break;
 800ad86:	e012      	b.n	800adae <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	095b      	lsrs	r3, r3, #5
 800ad8c:	60fb      	str	r3, [r7, #12]
        break;
 800ad8e:	e00e      	b.n	800adae <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	099b      	lsrs	r3, r3, #6
 800ad94:	60fb      	str	r3, [r7, #12]
        break;
 800ad96:	e00a      	b.n	800adae <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	09db      	lsrs	r3, r3, #7
 800ad9c:	60fb      	str	r3, [r7, #12]
        break;
 800ad9e:	e006      	b.n	800adae <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	0a1b      	lsrs	r3, r3, #8
 800ada4:	60fb      	str	r3, [r7, #12]
        break;
 800ada6:	e002      	b.n	800adae <ADC_ConfigureBoostMode+0x14a>
        break;
 800ada8:	bf00      	nop
 800adaa:	e000      	b.n	800adae <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 800adac:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	085b      	lsrs	r3, r3, #1
 800adb2:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	4a1f      	ldr	r2, [pc, #124]	@ (800ae34 <ADC_ConfigureBoostMode+0x1d0>)
 800adb8:	4293      	cmp	r3, r2
 800adba:	d808      	bhi.n	800adce <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	689a      	ldr	r2, [r3, #8]
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800adca:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800adcc:	e025      	b.n	800ae1a <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	4a19      	ldr	r2, [pc, #100]	@ (800ae38 <ADC_ConfigureBoostMode+0x1d4>)
 800add2:	4293      	cmp	r3, r2
 800add4:	d80a      	bhi.n	800adec <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	689b      	ldr	r3, [r3, #8]
 800addc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ade8:	609a      	str	r2, [r3, #8]
}
 800adea:	e016      	b.n	800ae1a <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	4a13      	ldr	r2, [pc, #76]	@ (800ae3c <ADC_ConfigureBoostMode+0x1d8>)
 800adf0:	4293      	cmp	r3, r2
 800adf2:	d80a      	bhi.n	800ae0a <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	689b      	ldr	r3, [r3, #8]
 800adfa:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ae06:	609a      	str	r2, [r3, #8]
}
 800ae08:	e007      	b.n	800ae1a <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	689a      	ldr	r2, [r3, #8]
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800ae18:	609a      	str	r2, [r3, #8]
}
 800ae1a:	bf00      	nop
 800ae1c:	3710      	adds	r7, #16
 800ae1e:	46bd      	mov	sp, r7
 800ae20:	bd80      	pop	{r7, pc}
 800ae22:	bf00      	nop
 800ae24:	40022000 	.word	0x40022000
 800ae28:	40022100 	.word	0x40022100
 800ae2c:	40022300 	.word	0x40022300
 800ae30:	58026300 	.word	0x58026300
 800ae34:	005f5e10 	.word	0x005f5e10
 800ae38:	00bebc20 	.word	0x00bebc20
 800ae3c:	017d7840 	.word	0x017d7840

0800ae40 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800ae40:	b480      	push	{r7}
 800ae42:	b083      	sub	sp, #12
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800ae48:	bf00      	nop
 800ae4a:	370c      	adds	r7, #12
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae52:	4770      	bx	lr

0800ae54 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800ae54:	b480      	push	{r7}
 800ae56:	b083      	sub	sp, #12
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800ae5c:	bf00      	nop
 800ae5e:	370c      	adds	r7, #12
 800ae60:	46bd      	mov	sp, r7
 800ae62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae66:	4770      	bx	lr

0800ae68 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800ae68:	b480      	push	{r7}
 800ae6a:	b083      	sub	sp, #12
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800ae70:	bf00      	nop
 800ae72:	370c      	adds	r7, #12
 800ae74:	46bd      	mov	sp, r7
 800ae76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7a:	4770      	bx	lr

0800ae7c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800ae7c:	b480      	push	{r7}
 800ae7e:	b083      	sub	sp, #12
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800ae84:	bf00      	nop
 800ae86:	370c      	adds	r7, #12
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8e:	4770      	bx	lr

0800ae90 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800ae90:	b480      	push	{r7}
 800ae92:	b083      	sub	sp, #12
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800ae98:	bf00      	nop
 800ae9a:	370c      	adds	r7, #12
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea2:	4770      	bx	lr

0800aea4 <__NVIC_SetPriorityGrouping>:
{
 800aea4:	b480      	push	{r7}
 800aea6:	b085      	sub	sp, #20
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	f003 0307 	and.w	r3, r3, #7
 800aeb2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800aeb4:	4b0b      	ldr	r3, [pc, #44]	@ (800aee4 <__NVIC_SetPriorityGrouping+0x40>)
 800aeb6:	68db      	ldr	r3, [r3, #12]
 800aeb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800aeba:	68ba      	ldr	r2, [r7, #8]
 800aebc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800aec0:	4013      	ands	r3, r2
 800aec2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800aec8:	68bb      	ldr	r3, [r7, #8]
 800aeca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800aecc:	4b06      	ldr	r3, [pc, #24]	@ (800aee8 <__NVIC_SetPriorityGrouping+0x44>)
 800aece:	4313      	orrs	r3, r2
 800aed0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800aed2:	4a04      	ldr	r2, [pc, #16]	@ (800aee4 <__NVIC_SetPriorityGrouping+0x40>)
 800aed4:	68bb      	ldr	r3, [r7, #8]
 800aed6:	60d3      	str	r3, [r2, #12]
}
 800aed8:	bf00      	nop
 800aeda:	3714      	adds	r7, #20
 800aedc:	46bd      	mov	sp, r7
 800aede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee2:	4770      	bx	lr
 800aee4:	e000ed00 	.word	0xe000ed00
 800aee8:	05fa0000 	.word	0x05fa0000

0800aeec <__NVIC_GetPriorityGrouping>:
{
 800aeec:	b480      	push	{r7}
 800aeee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800aef0:	4b04      	ldr	r3, [pc, #16]	@ (800af04 <__NVIC_GetPriorityGrouping+0x18>)
 800aef2:	68db      	ldr	r3, [r3, #12]
 800aef4:	0a1b      	lsrs	r3, r3, #8
 800aef6:	f003 0307 	and.w	r3, r3, #7
}
 800aefa:	4618      	mov	r0, r3
 800aefc:	46bd      	mov	sp, r7
 800aefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af02:	4770      	bx	lr
 800af04:	e000ed00 	.word	0xe000ed00

0800af08 <__NVIC_EnableIRQ>:
{
 800af08:	b480      	push	{r7}
 800af0a:	b083      	sub	sp, #12
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	4603      	mov	r3, r0
 800af10:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800af12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800af16:	2b00      	cmp	r3, #0
 800af18:	db0b      	blt.n	800af32 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800af1a:	88fb      	ldrh	r3, [r7, #6]
 800af1c:	f003 021f 	and.w	r2, r3, #31
 800af20:	4907      	ldr	r1, [pc, #28]	@ (800af40 <__NVIC_EnableIRQ+0x38>)
 800af22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800af26:	095b      	lsrs	r3, r3, #5
 800af28:	2001      	movs	r0, #1
 800af2a:	fa00 f202 	lsl.w	r2, r0, r2
 800af2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800af32:	bf00      	nop
 800af34:	370c      	adds	r7, #12
 800af36:	46bd      	mov	sp, r7
 800af38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3c:	4770      	bx	lr
 800af3e:	bf00      	nop
 800af40:	e000e100 	.word	0xe000e100

0800af44 <__NVIC_SetPriority>:
{
 800af44:	b480      	push	{r7}
 800af46:	b083      	sub	sp, #12
 800af48:	af00      	add	r7, sp, #0
 800af4a:	4603      	mov	r3, r0
 800af4c:	6039      	str	r1, [r7, #0]
 800af4e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800af50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800af54:	2b00      	cmp	r3, #0
 800af56:	db0a      	blt.n	800af6e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800af58:	683b      	ldr	r3, [r7, #0]
 800af5a:	b2da      	uxtb	r2, r3
 800af5c:	490c      	ldr	r1, [pc, #48]	@ (800af90 <__NVIC_SetPriority+0x4c>)
 800af5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800af62:	0112      	lsls	r2, r2, #4
 800af64:	b2d2      	uxtb	r2, r2
 800af66:	440b      	add	r3, r1
 800af68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800af6c:	e00a      	b.n	800af84 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800af6e:	683b      	ldr	r3, [r7, #0]
 800af70:	b2da      	uxtb	r2, r3
 800af72:	4908      	ldr	r1, [pc, #32]	@ (800af94 <__NVIC_SetPriority+0x50>)
 800af74:	88fb      	ldrh	r3, [r7, #6]
 800af76:	f003 030f 	and.w	r3, r3, #15
 800af7a:	3b04      	subs	r3, #4
 800af7c:	0112      	lsls	r2, r2, #4
 800af7e:	b2d2      	uxtb	r2, r2
 800af80:	440b      	add	r3, r1
 800af82:	761a      	strb	r2, [r3, #24]
}
 800af84:	bf00      	nop
 800af86:	370c      	adds	r7, #12
 800af88:	46bd      	mov	sp, r7
 800af8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8e:	4770      	bx	lr
 800af90:	e000e100 	.word	0xe000e100
 800af94:	e000ed00 	.word	0xe000ed00

0800af98 <NVIC_EncodePriority>:
{
 800af98:	b480      	push	{r7}
 800af9a:	b089      	sub	sp, #36	@ 0x24
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	60f8      	str	r0, [r7, #12]
 800afa0:	60b9      	str	r1, [r7, #8]
 800afa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	f003 0307 	and.w	r3, r3, #7
 800afaa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800afac:	69fb      	ldr	r3, [r7, #28]
 800afae:	f1c3 0307 	rsb	r3, r3, #7
 800afb2:	2b04      	cmp	r3, #4
 800afb4:	bf28      	it	cs
 800afb6:	2304      	movcs	r3, #4
 800afb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800afba:	69fb      	ldr	r3, [r7, #28]
 800afbc:	3304      	adds	r3, #4
 800afbe:	2b06      	cmp	r3, #6
 800afc0:	d902      	bls.n	800afc8 <NVIC_EncodePriority+0x30>
 800afc2:	69fb      	ldr	r3, [r7, #28]
 800afc4:	3b03      	subs	r3, #3
 800afc6:	e000      	b.n	800afca <NVIC_EncodePriority+0x32>
 800afc8:	2300      	movs	r3, #0
 800afca:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800afcc:	f04f 32ff 	mov.w	r2, #4294967295
 800afd0:	69bb      	ldr	r3, [r7, #24]
 800afd2:	fa02 f303 	lsl.w	r3, r2, r3
 800afd6:	43da      	mvns	r2, r3
 800afd8:	68bb      	ldr	r3, [r7, #8]
 800afda:	401a      	ands	r2, r3
 800afdc:	697b      	ldr	r3, [r7, #20]
 800afde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800afe0:	f04f 31ff 	mov.w	r1, #4294967295
 800afe4:	697b      	ldr	r3, [r7, #20]
 800afe6:	fa01 f303 	lsl.w	r3, r1, r3
 800afea:	43d9      	mvns	r1, r3
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800aff0:	4313      	orrs	r3, r2
}
 800aff2:	4618      	mov	r0, r3
 800aff4:	3724      	adds	r7, #36	@ 0x24
 800aff6:	46bd      	mov	sp, r7
 800aff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affc:	4770      	bx	lr
	...

0800b000 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b082      	sub	sp, #8
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	3b01      	subs	r3, #1
 800b00c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b010:	d301      	bcc.n	800b016 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800b012:	2301      	movs	r3, #1
 800b014:	e00f      	b.n	800b036 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800b016:	4a0a      	ldr	r2, [pc, #40]	@ (800b040 <SysTick_Config+0x40>)
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	3b01      	subs	r3, #1
 800b01c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800b01e:	210f      	movs	r1, #15
 800b020:	f04f 30ff 	mov.w	r0, #4294967295
 800b024:	f7ff ff8e 	bl	800af44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800b028:	4b05      	ldr	r3, [pc, #20]	@ (800b040 <SysTick_Config+0x40>)
 800b02a:	2200      	movs	r2, #0
 800b02c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800b02e:	4b04      	ldr	r3, [pc, #16]	@ (800b040 <SysTick_Config+0x40>)
 800b030:	2207      	movs	r2, #7
 800b032:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800b034:	2300      	movs	r3, #0
}
 800b036:	4618      	mov	r0, r3
 800b038:	3708      	adds	r7, #8
 800b03a:	46bd      	mov	sp, r7
 800b03c:	bd80      	pop	{r7, pc}
 800b03e:	bf00      	nop
 800b040:	e000e010 	.word	0xe000e010

0800b044 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b044:	b580      	push	{r7, lr}
 800b046:	b082      	sub	sp, #8
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b04c:	6878      	ldr	r0, [r7, #4]
 800b04e:	f7ff ff29 	bl	800aea4 <__NVIC_SetPriorityGrouping>
}
 800b052:	bf00      	nop
 800b054:	3708      	adds	r7, #8
 800b056:	46bd      	mov	sp, r7
 800b058:	bd80      	pop	{r7, pc}

0800b05a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b05a:	b580      	push	{r7, lr}
 800b05c:	b086      	sub	sp, #24
 800b05e:	af00      	add	r7, sp, #0
 800b060:	4603      	mov	r3, r0
 800b062:	60b9      	str	r1, [r7, #8]
 800b064:	607a      	str	r2, [r7, #4]
 800b066:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800b068:	f7ff ff40 	bl	800aeec <__NVIC_GetPriorityGrouping>
 800b06c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b06e:	687a      	ldr	r2, [r7, #4]
 800b070:	68b9      	ldr	r1, [r7, #8]
 800b072:	6978      	ldr	r0, [r7, #20]
 800b074:	f7ff ff90 	bl	800af98 <NVIC_EncodePriority>
 800b078:	4602      	mov	r2, r0
 800b07a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b07e:	4611      	mov	r1, r2
 800b080:	4618      	mov	r0, r3
 800b082:	f7ff ff5f 	bl	800af44 <__NVIC_SetPriority>
}
 800b086:	bf00      	nop
 800b088:	3718      	adds	r7, #24
 800b08a:	46bd      	mov	sp, r7
 800b08c:	bd80      	pop	{r7, pc}

0800b08e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b08e:	b580      	push	{r7, lr}
 800b090:	b082      	sub	sp, #8
 800b092:	af00      	add	r7, sp, #0
 800b094:	4603      	mov	r3, r0
 800b096:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b098:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b09c:	4618      	mov	r0, r3
 800b09e:	f7ff ff33 	bl	800af08 <__NVIC_EnableIRQ>
}
 800b0a2:	bf00      	nop
 800b0a4:	3708      	adds	r7, #8
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	bd80      	pop	{r7, pc}

0800b0aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800b0aa:	b580      	push	{r7, lr}
 800b0ac:	b082      	sub	sp, #8
 800b0ae:	af00      	add	r7, sp, #0
 800b0b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800b0b2:	6878      	ldr	r0, [r7, #4]
 800b0b4:	f7ff ffa4 	bl	800b000 <SysTick_Config>
 800b0b8:	4603      	mov	r3, r0
}
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	3708      	adds	r7, #8
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	bd80      	pop	{r7, pc}
	...

0800b0c4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800b0c4:	b480      	push	{r7}
 800b0c6:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 800b0c8:	f3bf 8f5f 	dmb	sy
}
 800b0cc:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800b0ce:	4b07      	ldr	r3, [pc, #28]	@ (800b0ec <HAL_MPU_Disable+0x28>)
 800b0d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0d2:	4a06      	ldr	r2, [pc, #24]	@ (800b0ec <HAL_MPU_Disable+0x28>)
 800b0d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b0d8:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800b0da:	4b05      	ldr	r3, [pc, #20]	@ (800b0f0 <HAL_MPU_Disable+0x2c>)
 800b0dc:	2200      	movs	r2, #0
 800b0de:	605a      	str	r2, [r3, #4]
}
 800b0e0:	bf00      	nop
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e8:	4770      	bx	lr
 800b0ea:	bf00      	nop
 800b0ec:	e000ed00 	.word	0xe000ed00
 800b0f0:	e000ed90 	.word	0xe000ed90

0800b0f4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800b0f4:	b480      	push	{r7}
 800b0f6:	b083      	sub	sp, #12
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800b0fc:	4a0b      	ldr	r2, [pc, #44]	@ (800b12c <HAL_MPU_Enable+0x38>)
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	f043 0301 	orr.w	r3, r3, #1
 800b104:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800b106:	4b0a      	ldr	r3, [pc, #40]	@ (800b130 <HAL_MPU_Enable+0x3c>)
 800b108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b10a:	4a09      	ldr	r2, [pc, #36]	@ (800b130 <HAL_MPU_Enable+0x3c>)
 800b10c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b110:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800b112:	f3bf 8f4f 	dsb	sy
}
 800b116:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800b118:	f3bf 8f6f 	isb	sy
}
 800b11c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800b11e:	bf00      	nop
 800b120:	370c      	adds	r7, #12
 800b122:	46bd      	mov	sp, r7
 800b124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b128:	4770      	bx	lr
 800b12a:	bf00      	nop
 800b12c:	e000ed90 	.word	0xe000ed90
 800b130:	e000ed00 	.word	0xe000ed00

0800b134 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800b134:	b480      	push	{r7}
 800b136:	b083      	sub	sp, #12
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	785a      	ldrb	r2, [r3, #1]
 800b140:	4b1b      	ldr	r3, [pc, #108]	@ (800b1b0 <HAL_MPU_ConfigRegion+0x7c>)
 800b142:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800b144:	4b1a      	ldr	r3, [pc, #104]	@ (800b1b0 <HAL_MPU_ConfigRegion+0x7c>)
 800b146:	691b      	ldr	r3, [r3, #16]
 800b148:	4a19      	ldr	r2, [pc, #100]	@ (800b1b0 <HAL_MPU_ConfigRegion+0x7c>)
 800b14a:	f023 0301 	bic.w	r3, r3, #1
 800b14e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800b150:	4a17      	ldr	r2, [pc, #92]	@ (800b1b0 <HAL_MPU_ConfigRegion+0x7c>)
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	685b      	ldr	r3, [r3, #4]
 800b156:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	7b1b      	ldrb	r3, [r3, #12]
 800b15c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	7adb      	ldrb	r3, [r3, #11]
 800b162:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800b164:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	7a9b      	ldrb	r3, [r3, #10]
 800b16a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800b16c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	7b5b      	ldrb	r3, [r3, #13]
 800b172:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800b174:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	7b9b      	ldrb	r3, [r3, #14]
 800b17a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800b17c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	7bdb      	ldrb	r3, [r3, #15]
 800b182:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800b184:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	7a5b      	ldrb	r3, [r3, #9]
 800b18a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800b18c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	7a1b      	ldrb	r3, [r3, #8]
 800b192:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800b194:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800b196:	687a      	ldr	r2, [r7, #4]
 800b198:	7812      	ldrb	r2, [r2, #0]
 800b19a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800b19c:	4a04      	ldr	r2, [pc, #16]	@ (800b1b0 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800b19e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800b1a0:	6113      	str	r3, [r2, #16]
}
 800b1a2:	bf00      	nop
 800b1a4:	370c      	adds	r7, #12
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ac:	4770      	bx	lr
 800b1ae:	bf00      	nop
 800b1b0:	e000ed90 	.word	0xe000ed90

0800b1b4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b086      	sub	sp, #24
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800b1bc:	f7fd fea2 	bl	8008f04 <HAL_GetTick>
 800b1c0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d101      	bne.n	800b1cc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800b1c8:	2301      	movs	r3, #1
 800b1ca:	e312      	b.n	800b7f2 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	4a66      	ldr	r2, [pc, #408]	@ (800b36c <HAL_DMA_Init+0x1b8>)
 800b1d2:	4293      	cmp	r3, r2
 800b1d4:	d04a      	beq.n	800b26c <HAL_DMA_Init+0xb8>
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	4a65      	ldr	r2, [pc, #404]	@ (800b370 <HAL_DMA_Init+0x1bc>)
 800b1dc:	4293      	cmp	r3, r2
 800b1de:	d045      	beq.n	800b26c <HAL_DMA_Init+0xb8>
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	4a63      	ldr	r2, [pc, #396]	@ (800b374 <HAL_DMA_Init+0x1c0>)
 800b1e6:	4293      	cmp	r3, r2
 800b1e8:	d040      	beq.n	800b26c <HAL_DMA_Init+0xb8>
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	4a62      	ldr	r2, [pc, #392]	@ (800b378 <HAL_DMA_Init+0x1c4>)
 800b1f0:	4293      	cmp	r3, r2
 800b1f2:	d03b      	beq.n	800b26c <HAL_DMA_Init+0xb8>
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	4a60      	ldr	r2, [pc, #384]	@ (800b37c <HAL_DMA_Init+0x1c8>)
 800b1fa:	4293      	cmp	r3, r2
 800b1fc:	d036      	beq.n	800b26c <HAL_DMA_Init+0xb8>
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	4a5f      	ldr	r2, [pc, #380]	@ (800b380 <HAL_DMA_Init+0x1cc>)
 800b204:	4293      	cmp	r3, r2
 800b206:	d031      	beq.n	800b26c <HAL_DMA_Init+0xb8>
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	4a5d      	ldr	r2, [pc, #372]	@ (800b384 <HAL_DMA_Init+0x1d0>)
 800b20e:	4293      	cmp	r3, r2
 800b210:	d02c      	beq.n	800b26c <HAL_DMA_Init+0xb8>
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	4a5c      	ldr	r2, [pc, #368]	@ (800b388 <HAL_DMA_Init+0x1d4>)
 800b218:	4293      	cmp	r3, r2
 800b21a:	d027      	beq.n	800b26c <HAL_DMA_Init+0xb8>
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	4a5a      	ldr	r2, [pc, #360]	@ (800b38c <HAL_DMA_Init+0x1d8>)
 800b222:	4293      	cmp	r3, r2
 800b224:	d022      	beq.n	800b26c <HAL_DMA_Init+0xb8>
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	4a59      	ldr	r2, [pc, #356]	@ (800b390 <HAL_DMA_Init+0x1dc>)
 800b22c:	4293      	cmp	r3, r2
 800b22e:	d01d      	beq.n	800b26c <HAL_DMA_Init+0xb8>
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	4a57      	ldr	r2, [pc, #348]	@ (800b394 <HAL_DMA_Init+0x1e0>)
 800b236:	4293      	cmp	r3, r2
 800b238:	d018      	beq.n	800b26c <HAL_DMA_Init+0xb8>
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	4a56      	ldr	r2, [pc, #344]	@ (800b398 <HAL_DMA_Init+0x1e4>)
 800b240:	4293      	cmp	r3, r2
 800b242:	d013      	beq.n	800b26c <HAL_DMA_Init+0xb8>
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	4a54      	ldr	r2, [pc, #336]	@ (800b39c <HAL_DMA_Init+0x1e8>)
 800b24a:	4293      	cmp	r3, r2
 800b24c:	d00e      	beq.n	800b26c <HAL_DMA_Init+0xb8>
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	4a53      	ldr	r2, [pc, #332]	@ (800b3a0 <HAL_DMA_Init+0x1ec>)
 800b254:	4293      	cmp	r3, r2
 800b256:	d009      	beq.n	800b26c <HAL_DMA_Init+0xb8>
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	4a51      	ldr	r2, [pc, #324]	@ (800b3a4 <HAL_DMA_Init+0x1f0>)
 800b25e:	4293      	cmp	r3, r2
 800b260:	d004      	beq.n	800b26c <HAL_DMA_Init+0xb8>
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	4a50      	ldr	r2, [pc, #320]	@ (800b3a8 <HAL_DMA_Init+0x1f4>)
 800b268:	4293      	cmp	r3, r2
 800b26a:	d101      	bne.n	800b270 <HAL_DMA_Init+0xbc>
 800b26c:	2301      	movs	r3, #1
 800b26e:	e000      	b.n	800b272 <HAL_DMA_Init+0xbe>
 800b270:	2300      	movs	r3, #0
 800b272:	2b00      	cmp	r3, #0
 800b274:	f000 813c 	beq.w	800b4f0 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	2202      	movs	r2, #2
 800b27c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	2200      	movs	r2, #0
 800b284:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	4a37      	ldr	r2, [pc, #220]	@ (800b36c <HAL_DMA_Init+0x1b8>)
 800b28e:	4293      	cmp	r3, r2
 800b290:	d04a      	beq.n	800b328 <HAL_DMA_Init+0x174>
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	4a36      	ldr	r2, [pc, #216]	@ (800b370 <HAL_DMA_Init+0x1bc>)
 800b298:	4293      	cmp	r3, r2
 800b29a:	d045      	beq.n	800b328 <HAL_DMA_Init+0x174>
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	4a34      	ldr	r2, [pc, #208]	@ (800b374 <HAL_DMA_Init+0x1c0>)
 800b2a2:	4293      	cmp	r3, r2
 800b2a4:	d040      	beq.n	800b328 <HAL_DMA_Init+0x174>
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	4a33      	ldr	r2, [pc, #204]	@ (800b378 <HAL_DMA_Init+0x1c4>)
 800b2ac:	4293      	cmp	r3, r2
 800b2ae:	d03b      	beq.n	800b328 <HAL_DMA_Init+0x174>
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	4a31      	ldr	r2, [pc, #196]	@ (800b37c <HAL_DMA_Init+0x1c8>)
 800b2b6:	4293      	cmp	r3, r2
 800b2b8:	d036      	beq.n	800b328 <HAL_DMA_Init+0x174>
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	4a30      	ldr	r2, [pc, #192]	@ (800b380 <HAL_DMA_Init+0x1cc>)
 800b2c0:	4293      	cmp	r3, r2
 800b2c2:	d031      	beq.n	800b328 <HAL_DMA_Init+0x174>
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	4a2e      	ldr	r2, [pc, #184]	@ (800b384 <HAL_DMA_Init+0x1d0>)
 800b2ca:	4293      	cmp	r3, r2
 800b2cc:	d02c      	beq.n	800b328 <HAL_DMA_Init+0x174>
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	4a2d      	ldr	r2, [pc, #180]	@ (800b388 <HAL_DMA_Init+0x1d4>)
 800b2d4:	4293      	cmp	r3, r2
 800b2d6:	d027      	beq.n	800b328 <HAL_DMA_Init+0x174>
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	4a2b      	ldr	r2, [pc, #172]	@ (800b38c <HAL_DMA_Init+0x1d8>)
 800b2de:	4293      	cmp	r3, r2
 800b2e0:	d022      	beq.n	800b328 <HAL_DMA_Init+0x174>
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	4a2a      	ldr	r2, [pc, #168]	@ (800b390 <HAL_DMA_Init+0x1dc>)
 800b2e8:	4293      	cmp	r3, r2
 800b2ea:	d01d      	beq.n	800b328 <HAL_DMA_Init+0x174>
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	4a28      	ldr	r2, [pc, #160]	@ (800b394 <HAL_DMA_Init+0x1e0>)
 800b2f2:	4293      	cmp	r3, r2
 800b2f4:	d018      	beq.n	800b328 <HAL_DMA_Init+0x174>
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	4a27      	ldr	r2, [pc, #156]	@ (800b398 <HAL_DMA_Init+0x1e4>)
 800b2fc:	4293      	cmp	r3, r2
 800b2fe:	d013      	beq.n	800b328 <HAL_DMA_Init+0x174>
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	4a25      	ldr	r2, [pc, #148]	@ (800b39c <HAL_DMA_Init+0x1e8>)
 800b306:	4293      	cmp	r3, r2
 800b308:	d00e      	beq.n	800b328 <HAL_DMA_Init+0x174>
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	4a24      	ldr	r2, [pc, #144]	@ (800b3a0 <HAL_DMA_Init+0x1ec>)
 800b310:	4293      	cmp	r3, r2
 800b312:	d009      	beq.n	800b328 <HAL_DMA_Init+0x174>
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	4a22      	ldr	r2, [pc, #136]	@ (800b3a4 <HAL_DMA_Init+0x1f0>)
 800b31a:	4293      	cmp	r3, r2
 800b31c:	d004      	beq.n	800b328 <HAL_DMA_Init+0x174>
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	4a21      	ldr	r2, [pc, #132]	@ (800b3a8 <HAL_DMA_Init+0x1f4>)
 800b324:	4293      	cmp	r3, r2
 800b326:	d108      	bne.n	800b33a <HAL_DMA_Init+0x186>
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	681a      	ldr	r2, [r3, #0]
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	f022 0201 	bic.w	r2, r2, #1
 800b336:	601a      	str	r2, [r3, #0]
 800b338:	e007      	b.n	800b34a <HAL_DMA_Init+0x196>
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	681a      	ldr	r2, [r3, #0]
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	f022 0201 	bic.w	r2, r2, #1
 800b348:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800b34a:	e02f      	b.n	800b3ac <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800b34c:	f7fd fdda 	bl	8008f04 <HAL_GetTick>
 800b350:	4602      	mov	r2, r0
 800b352:	693b      	ldr	r3, [r7, #16]
 800b354:	1ad3      	subs	r3, r2, r3
 800b356:	2b05      	cmp	r3, #5
 800b358:	d928      	bls.n	800b3ac <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	2220      	movs	r2, #32
 800b35e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	2203      	movs	r2, #3
 800b364:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 800b368:	2301      	movs	r3, #1
 800b36a:	e242      	b.n	800b7f2 <HAL_DMA_Init+0x63e>
 800b36c:	40020010 	.word	0x40020010
 800b370:	40020028 	.word	0x40020028
 800b374:	40020040 	.word	0x40020040
 800b378:	40020058 	.word	0x40020058
 800b37c:	40020070 	.word	0x40020070
 800b380:	40020088 	.word	0x40020088
 800b384:	400200a0 	.word	0x400200a0
 800b388:	400200b8 	.word	0x400200b8
 800b38c:	40020410 	.word	0x40020410
 800b390:	40020428 	.word	0x40020428
 800b394:	40020440 	.word	0x40020440
 800b398:	40020458 	.word	0x40020458
 800b39c:	40020470 	.word	0x40020470
 800b3a0:	40020488 	.word	0x40020488
 800b3a4:	400204a0 	.word	0x400204a0
 800b3a8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	f003 0301 	and.w	r3, r3, #1
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d1c8      	bne.n	800b34c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800b3c2:	697a      	ldr	r2, [r7, #20]
 800b3c4:	4b83      	ldr	r3, [pc, #524]	@ (800b5d4 <HAL_DMA_Init+0x420>)
 800b3c6:	4013      	ands	r3, r2
 800b3c8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800b3d2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	691b      	ldr	r3, [r3, #16]
 800b3d8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b3de:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	699b      	ldr	r3, [r3, #24]
 800b3e4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b3ea:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	6a1b      	ldr	r3, [r3, #32]
 800b3f0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800b3f2:	697a      	ldr	r2, [r7, #20]
 800b3f4:	4313      	orrs	r3, r2
 800b3f6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3fc:	2b04      	cmp	r3, #4
 800b3fe:	d107      	bne.n	800b410 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b408:	4313      	orrs	r3, r2
 800b40a:	697a      	ldr	r2, [r7, #20]
 800b40c:	4313      	orrs	r3, r2
 800b40e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	685b      	ldr	r3, [r3, #4]
 800b414:	2b28      	cmp	r3, #40	@ 0x28
 800b416:	d903      	bls.n	800b420 <HAL_DMA_Init+0x26c>
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	685b      	ldr	r3, [r3, #4]
 800b41c:	2b2e      	cmp	r3, #46	@ 0x2e
 800b41e:	d91f      	bls.n	800b460 <HAL_DMA_Init+0x2ac>
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	685b      	ldr	r3, [r3, #4]
 800b424:	2b3e      	cmp	r3, #62	@ 0x3e
 800b426:	d903      	bls.n	800b430 <HAL_DMA_Init+0x27c>
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	685b      	ldr	r3, [r3, #4]
 800b42c:	2b42      	cmp	r3, #66	@ 0x42
 800b42e:	d917      	bls.n	800b460 <HAL_DMA_Init+0x2ac>
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	685b      	ldr	r3, [r3, #4]
 800b434:	2b46      	cmp	r3, #70	@ 0x46
 800b436:	d903      	bls.n	800b440 <HAL_DMA_Init+0x28c>
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	685b      	ldr	r3, [r3, #4]
 800b43c:	2b48      	cmp	r3, #72	@ 0x48
 800b43e:	d90f      	bls.n	800b460 <HAL_DMA_Init+0x2ac>
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	685b      	ldr	r3, [r3, #4]
 800b444:	2b4e      	cmp	r3, #78	@ 0x4e
 800b446:	d903      	bls.n	800b450 <HAL_DMA_Init+0x29c>
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	685b      	ldr	r3, [r3, #4]
 800b44c:	2b52      	cmp	r3, #82	@ 0x52
 800b44e:	d907      	bls.n	800b460 <HAL_DMA_Init+0x2ac>
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	685b      	ldr	r3, [r3, #4]
 800b454:	2b73      	cmp	r3, #115	@ 0x73
 800b456:	d905      	bls.n	800b464 <HAL_DMA_Init+0x2b0>
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	685b      	ldr	r3, [r3, #4]
 800b45c:	2b77      	cmp	r3, #119	@ 0x77
 800b45e:	d801      	bhi.n	800b464 <HAL_DMA_Init+0x2b0>
 800b460:	2301      	movs	r3, #1
 800b462:	e000      	b.n	800b466 <HAL_DMA_Init+0x2b2>
 800b464:	2300      	movs	r3, #0
 800b466:	2b00      	cmp	r3, #0
 800b468:	d003      	beq.n	800b472 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800b46a:	697b      	ldr	r3, [r7, #20]
 800b46c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b470:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	697a      	ldr	r2, [r7, #20]
 800b478:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	695b      	ldr	r3, [r3, #20]
 800b480:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800b482:	697b      	ldr	r3, [r7, #20]
 800b484:	f023 0307 	bic.w	r3, r3, #7
 800b488:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b48e:	697a      	ldr	r2, [r7, #20]
 800b490:	4313      	orrs	r3, r2
 800b492:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b498:	2b04      	cmp	r3, #4
 800b49a:	d117      	bne.n	800b4cc <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4a0:	697a      	ldr	r2, [r7, #20]
 800b4a2:	4313      	orrs	r3, r2
 800b4a4:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d00e      	beq.n	800b4cc <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800b4ae:	6878      	ldr	r0, [r7, #4]
 800b4b0:	f002 fb48 	bl	800db44 <DMA_CheckFifoParam>
 800b4b4:	4603      	mov	r3, r0
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d008      	beq.n	800b4cc <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	2240      	movs	r2, #64	@ 0x40
 800b4be:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	2201      	movs	r2, #1
 800b4c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800b4c8:	2301      	movs	r3, #1
 800b4ca:	e192      	b.n	800b7f2 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	697a      	ldr	r2, [r7, #20]
 800b4d2:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800b4d4:	6878      	ldr	r0, [r7, #4]
 800b4d6:	f002 fa83 	bl	800d9e0 <DMA_CalcBaseAndBitshift>
 800b4da:	4603      	mov	r3, r0
 800b4dc:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b4e2:	f003 031f 	and.w	r3, r3, #31
 800b4e6:	223f      	movs	r2, #63	@ 0x3f
 800b4e8:	409a      	lsls	r2, r3
 800b4ea:	68bb      	ldr	r3, [r7, #8]
 800b4ec:	609a      	str	r2, [r3, #8]
 800b4ee:	e0c8      	b.n	800b682 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	4a38      	ldr	r2, [pc, #224]	@ (800b5d8 <HAL_DMA_Init+0x424>)
 800b4f6:	4293      	cmp	r3, r2
 800b4f8:	d022      	beq.n	800b540 <HAL_DMA_Init+0x38c>
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	4a37      	ldr	r2, [pc, #220]	@ (800b5dc <HAL_DMA_Init+0x428>)
 800b500:	4293      	cmp	r3, r2
 800b502:	d01d      	beq.n	800b540 <HAL_DMA_Init+0x38c>
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	4a35      	ldr	r2, [pc, #212]	@ (800b5e0 <HAL_DMA_Init+0x42c>)
 800b50a:	4293      	cmp	r3, r2
 800b50c:	d018      	beq.n	800b540 <HAL_DMA_Init+0x38c>
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	4a34      	ldr	r2, [pc, #208]	@ (800b5e4 <HAL_DMA_Init+0x430>)
 800b514:	4293      	cmp	r3, r2
 800b516:	d013      	beq.n	800b540 <HAL_DMA_Init+0x38c>
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	4a32      	ldr	r2, [pc, #200]	@ (800b5e8 <HAL_DMA_Init+0x434>)
 800b51e:	4293      	cmp	r3, r2
 800b520:	d00e      	beq.n	800b540 <HAL_DMA_Init+0x38c>
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	4a31      	ldr	r2, [pc, #196]	@ (800b5ec <HAL_DMA_Init+0x438>)
 800b528:	4293      	cmp	r3, r2
 800b52a:	d009      	beq.n	800b540 <HAL_DMA_Init+0x38c>
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	4a2f      	ldr	r2, [pc, #188]	@ (800b5f0 <HAL_DMA_Init+0x43c>)
 800b532:	4293      	cmp	r3, r2
 800b534:	d004      	beq.n	800b540 <HAL_DMA_Init+0x38c>
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	4a2e      	ldr	r2, [pc, #184]	@ (800b5f4 <HAL_DMA_Init+0x440>)
 800b53c:	4293      	cmp	r3, r2
 800b53e:	d101      	bne.n	800b544 <HAL_DMA_Init+0x390>
 800b540:	2301      	movs	r3, #1
 800b542:	e000      	b.n	800b546 <HAL_DMA_Init+0x392>
 800b544:	2300      	movs	r3, #0
 800b546:	2b00      	cmp	r3, #0
 800b548:	f000 8092 	beq.w	800b670 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	4a21      	ldr	r2, [pc, #132]	@ (800b5d8 <HAL_DMA_Init+0x424>)
 800b552:	4293      	cmp	r3, r2
 800b554:	d021      	beq.n	800b59a <HAL_DMA_Init+0x3e6>
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	4a20      	ldr	r2, [pc, #128]	@ (800b5dc <HAL_DMA_Init+0x428>)
 800b55c:	4293      	cmp	r3, r2
 800b55e:	d01c      	beq.n	800b59a <HAL_DMA_Init+0x3e6>
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	4a1e      	ldr	r2, [pc, #120]	@ (800b5e0 <HAL_DMA_Init+0x42c>)
 800b566:	4293      	cmp	r3, r2
 800b568:	d017      	beq.n	800b59a <HAL_DMA_Init+0x3e6>
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	4a1d      	ldr	r2, [pc, #116]	@ (800b5e4 <HAL_DMA_Init+0x430>)
 800b570:	4293      	cmp	r3, r2
 800b572:	d012      	beq.n	800b59a <HAL_DMA_Init+0x3e6>
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	4a1b      	ldr	r2, [pc, #108]	@ (800b5e8 <HAL_DMA_Init+0x434>)
 800b57a:	4293      	cmp	r3, r2
 800b57c:	d00d      	beq.n	800b59a <HAL_DMA_Init+0x3e6>
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	4a1a      	ldr	r2, [pc, #104]	@ (800b5ec <HAL_DMA_Init+0x438>)
 800b584:	4293      	cmp	r3, r2
 800b586:	d008      	beq.n	800b59a <HAL_DMA_Init+0x3e6>
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	4a18      	ldr	r2, [pc, #96]	@ (800b5f0 <HAL_DMA_Init+0x43c>)
 800b58e:	4293      	cmp	r3, r2
 800b590:	d003      	beq.n	800b59a <HAL_DMA_Init+0x3e6>
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	4a17      	ldr	r2, [pc, #92]	@ (800b5f4 <HAL_DMA_Init+0x440>)
 800b598:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	2202      	movs	r2, #2
 800b59e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800b5b2:	697a      	ldr	r2, [r7, #20]
 800b5b4:	4b10      	ldr	r3, [pc, #64]	@ (800b5f8 <HAL_DMA_Init+0x444>)
 800b5b6:	4013      	ands	r3, r2
 800b5b8:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	689b      	ldr	r3, [r3, #8]
 800b5be:	2b40      	cmp	r3, #64	@ 0x40
 800b5c0:	d01c      	beq.n	800b5fc <HAL_DMA_Init+0x448>
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	689b      	ldr	r3, [r3, #8]
 800b5c6:	2b80      	cmp	r3, #128	@ 0x80
 800b5c8:	d102      	bne.n	800b5d0 <HAL_DMA_Init+0x41c>
 800b5ca:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800b5ce:	e016      	b.n	800b5fe <HAL_DMA_Init+0x44a>
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	e014      	b.n	800b5fe <HAL_DMA_Init+0x44a>
 800b5d4:	fe10803f 	.word	0xfe10803f
 800b5d8:	58025408 	.word	0x58025408
 800b5dc:	5802541c 	.word	0x5802541c
 800b5e0:	58025430 	.word	0x58025430
 800b5e4:	58025444 	.word	0x58025444
 800b5e8:	58025458 	.word	0x58025458
 800b5ec:	5802546c 	.word	0x5802546c
 800b5f0:	58025480 	.word	0x58025480
 800b5f4:	58025494 	.word	0x58025494
 800b5f8:	fffe000f 	.word	0xfffe000f
 800b5fc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800b5fe:	687a      	ldr	r2, [r7, #4]
 800b600:	68d2      	ldr	r2, [r2, #12]
 800b602:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800b604:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	691b      	ldr	r3, [r3, #16]
 800b60a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800b60c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	695b      	ldr	r3, [r3, #20]
 800b612:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800b614:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	699b      	ldr	r3, [r3, #24]
 800b61a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800b61c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	69db      	ldr	r3, [r3, #28]
 800b622:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800b624:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	6a1b      	ldr	r3, [r3, #32]
 800b62a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800b62c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800b62e:	697a      	ldr	r2, [r7, #20]
 800b630:	4313      	orrs	r3, r2
 800b632:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	697a      	ldr	r2, [r7, #20]
 800b63a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	461a      	mov	r2, r3
 800b642:	4b6e      	ldr	r3, [pc, #440]	@ (800b7fc <HAL_DMA_Init+0x648>)
 800b644:	4413      	add	r3, r2
 800b646:	4a6e      	ldr	r2, [pc, #440]	@ (800b800 <HAL_DMA_Init+0x64c>)
 800b648:	fba2 2303 	umull	r2, r3, r2, r3
 800b64c:	091b      	lsrs	r3, r3, #4
 800b64e:	009a      	lsls	r2, r3, #2
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800b654:	6878      	ldr	r0, [r7, #4]
 800b656:	f002 f9c3 	bl	800d9e0 <DMA_CalcBaseAndBitshift>
 800b65a:	4603      	mov	r3, r0
 800b65c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b662:	f003 031f 	and.w	r3, r3, #31
 800b666:	2201      	movs	r2, #1
 800b668:	409a      	lsls	r2, r3
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	605a      	str	r2, [r3, #4]
 800b66e:	e008      	b.n	800b682 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	2240      	movs	r2, #64	@ 0x40
 800b674:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	2203      	movs	r2, #3
 800b67a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800b67e:	2301      	movs	r3, #1
 800b680:	e0b7      	b.n	800b7f2 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	4a5f      	ldr	r2, [pc, #380]	@ (800b804 <HAL_DMA_Init+0x650>)
 800b688:	4293      	cmp	r3, r2
 800b68a:	d072      	beq.n	800b772 <HAL_DMA_Init+0x5be>
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	4a5d      	ldr	r2, [pc, #372]	@ (800b808 <HAL_DMA_Init+0x654>)
 800b692:	4293      	cmp	r3, r2
 800b694:	d06d      	beq.n	800b772 <HAL_DMA_Init+0x5be>
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	4a5c      	ldr	r2, [pc, #368]	@ (800b80c <HAL_DMA_Init+0x658>)
 800b69c:	4293      	cmp	r3, r2
 800b69e:	d068      	beq.n	800b772 <HAL_DMA_Init+0x5be>
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	4a5a      	ldr	r2, [pc, #360]	@ (800b810 <HAL_DMA_Init+0x65c>)
 800b6a6:	4293      	cmp	r3, r2
 800b6a8:	d063      	beq.n	800b772 <HAL_DMA_Init+0x5be>
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	4a59      	ldr	r2, [pc, #356]	@ (800b814 <HAL_DMA_Init+0x660>)
 800b6b0:	4293      	cmp	r3, r2
 800b6b2:	d05e      	beq.n	800b772 <HAL_DMA_Init+0x5be>
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	4a57      	ldr	r2, [pc, #348]	@ (800b818 <HAL_DMA_Init+0x664>)
 800b6ba:	4293      	cmp	r3, r2
 800b6bc:	d059      	beq.n	800b772 <HAL_DMA_Init+0x5be>
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	4a56      	ldr	r2, [pc, #344]	@ (800b81c <HAL_DMA_Init+0x668>)
 800b6c4:	4293      	cmp	r3, r2
 800b6c6:	d054      	beq.n	800b772 <HAL_DMA_Init+0x5be>
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	4a54      	ldr	r2, [pc, #336]	@ (800b820 <HAL_DMA_Init+0x66c>)
 800b6ce:	4293      	cmp	r3, r2
 800b6d0:	d04f      	beq.n	800b772 <HAL_DMA_Init+0x5be>
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	4a53      	ldr	r2, [pc, #332]	@ (800b824 <HAL_DMA_Init+0x670>)
 800b6d8:	4293      	cmp	r3, r2
 800b6da:	d04a      	beq.n	800b772 <HAL_DMA_Init+0x5be>
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	4a51      	ldr	r2, [pc, #324]	@ (800b828 <HAL_DMA_Init+0x674>)
 800b6e2:	4293      	cmp	r3, r2
 800b6e4:	d045      	beq.n	800b772 <HAL_DMA_Init+0x5be>
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	4a50      	ldr	r2, [pc, #320]	@ (800b82c <HAL_DMA_Init+0x678>)
 800b6ec:	4293      	cmp	r3, r2
 800b6ee:	d040      	beq.n	800b772 <HAL_DMA_Init+0x5be>
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	4a4e      	ldr	r2, [pc, #312]	@ (800b830 <HAL_DMA_Init+0x67c>)
 800b6f6:	4293      	cmp	r3, r2
 800b6f8:	d03b      	beq.n	800b772 <HAL_DMA_Init+0x5be>
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	4a4d      	ldr	r2, [pc, #308]	@ (800b834 <HAL_DMA_Init+0x680>)
 800b700:	4293      	cmp	r3, r2
 800b702:	d036      	beq.n	800b772 <HAL_DMA_Init+0x5be>
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	4a4b      	ldr	r2, [pc, #300]	@ (800b838 <HAL_DMA_Init+0x684>)
 800b70a:	4293      	cmp	r3, r2
 800b70c:	d031      	beq.n	800b772 <HAL_DMA_Init+0x5be>
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	4a4a      	ldr	r2, [pc, #296]	@ (800b83c <HAL_DMA_Init+0x688>)
 800b714:	4293      	cmp	r3, r2
 800b716:	d02c      	beq.n	800b772 <HAL_DMA_Init+0x5be>
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	4a48      	ldr	r2, [pc, #288]	@ (800b840 <HAL_DMA_Init+0x68c>)
 800b71e:	4293      	cmp	r3, r2
 800b720:	d027      	beq.n	800b772 <HAL_DMA_Init+0x5be>
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	4a47      	ldr	r2, [pc, #284]	@ (800b844 <HAL_DMA_Init+0x690>)
 800b728:	4293      	cmp	r3, r2
 800b72a:	d022      	beq.n	800b772 <HAL_DMA_Init+0x5be>
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	4a45      	ldr	r2, [pc, #276]	@ (800b848 <HAL_DMA_Init+0x694>)
 800b732:	4293      	cmp	r3, r2
 800b734:	d01d      	beq.n	800b772 <HAL_DMA_Init+0x5be>
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	4a44      	ldr	r2, [pc, #272]	@ (800b84c <HAL_DMA_Init+0x698>)
 800b73c:	4293      	cmp	r3, r2
 800b73e:	d018      	beq.n	800b772 <HAL_DMA_Init+0x5be>
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	4a42      	ldr	r2, [pc, #264]	@ (800b850 <HAL_DMA_Init+0x69c>)
 800b746:	4293      	cmp	r3, r2
 800b748:	d013      	beq.n	800b772 <HAL_DMA_Init+0x5be>
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	4a41      	ldr	r2, [pc, #260]	@ (800b854 <HAL_DMA_Init+0x6a0>)
 800b750:	4293      	cmp	r3, r2
 800b752:	d00e      	beq.n	800b772 <HAL_DMA_Init+0x5be>
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	4a3f      	ldr	r2, [pc, #252]	@ (800b858 <HAL_DMA_Init+0x6a4>)
 800b75a:	4293      	cmp	r3, r2
 800b75c:	d009      	beq.n	800b772 <HAL_DMA_Init+0x5be>
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	4a3e      	ldr	r2, [pc, #248]	@ (800b85c <HAL_DMA_Init+0x6a8>)
 800b764:	4293      	cmp	r3, r2
 800b766:	d004      	beq.n	800b772 <HAL_DMA_Init+0x5be>
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	4a3c      	ldr	r2, [pc, #240]	@ (800b860 <HAL_DMA_Init+0x6ac>)
 800b76e:	4293      	cmp	r3, r2
 800b770:	d101      	bne.n	800b776 <HAL_DMA_Init+0x5c2>
 800b772:	2301      	movs	r3, #1
 800b774:	e000      	b.n	800b778 <HAL_DMA_Init+0x5c4>
 800b776:	2300      	movs	r3, #0
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d032      	beq.n	800b7e2 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800b77c:	6878      	ldr	r0, [r7, #4]
 800b77e:	f002 fa5d 	bl	800dc3c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	689b      	ldr	r3, [r3, #8]
 800b786:	2b80      	cmp	r3, #128	@ 0x80
 800b788:	d102      	bne.n	800b790 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	2200      	movs	r2, #0
 800b78e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	685a      	ldr	r2, [r3, #4]
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b798:	b2d2      	uxtb	r2, r2
 800b79a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b7a0:	687a      	ldr	r2, [r7, #4]
 800b7a2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800b7a4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	685b      	ldr	r3, [r3, #4]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d010      	beq.n	800b7d0 <HAL_DMA_Init+0x61c>
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	685b      	ldr	r3, [r3, #4]
 800b7b2:	2b08      	cmp	r3, #8
 800b7b4:	d80c      	bhi.n	800b7d0 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800b7b6:	6878      	ldr	r0, [r7, #4]
 800b7b8:	f002 fada 	bl	800dd70 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b7c0:	2200      	movs	r2, #0
 800b7c2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b7c8:	687a      	ldr	r2, [r7, #4]
 800b7ca:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800b7cc:	605a      	str	r2, [r3, #4]
 800b7ce:	e008      	b.n	800b7e2 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	2200      	movs	r2, #0
 800b7da:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	2200      	movs	r2, #0
 800b7e0:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	2200      	movs	r2, #0
 800b7e6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	2201      	movs	r2, #1
 800b7ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800b7f0:	2300      	movs	r3, #0
}
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	3718      	adds	r7, #24
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	bd80      	pop	{r7, pc}
 800b7fa:	bf00      	nop
 800b7fc:	a7fdabf8 	.word	0xa7fdabf8
 800b800:	cccccccd 	.word	0xcccccccd
 800b804:	40020010 	.word	0x40020010
 800b808:	40020028 	.word	0x40020028
 800b80c:	40020040 	.word	0x40020040
 800b810:	40020058 	.word	0x40020058
 800b814:	40020070 	.word	0x40020070
 800b818:	40020088 	.word	0x40020088
 800b81c:	400200a0 	.word	0x400200a0
 800b820:	400200b8 	.word	0x400200b8
 800b824:	40020410 	.word	0x40020410
 800b828:	40020428 	.word	0x40020428
 800b82c:	40020440 	.word	0x40020440
 800b830:	40020458 	.word	0x40020458
 800b834:	40020470 	.word	0x40020470
 800b838:	40020488 	.word	0x40020488
 800b83c:	400204a0 	.word	0x400204a0
 800b840:	400204b8 	.word	0x400204b8
 800b844:	58025408 	.word	0x58025408
 800b848:	5802541c 	.word	0x5802541c
 800b84c:	58025430 	.word	0x58025430
 800b850:	58025444 	.word	0x58025444
 800b854:	58025458 	.word	0x58025458
 800b858:	5802546c 	.word	0x5802546c
 800b85c:	58025480 	.word	0x58025480
 800b860:	58025494 	.word	0x58025494

0800b864 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b864:	b580      	push	{r7, lr}
 800b866:	b086      	sub	sp, #24
 800b868:	af00      	add	r7, sp, #0
 800b86a:	60f8      	str	r0, [r7, #12]
 800b86c:	60b9      	str	r1, [r7, #8]
 800b86e:	607a      	str	r2, [r7, #4]
 800b870:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b872:	2300      	movs	r3, #0
 800b874:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d101      	bne.n	800b880 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800b87c:	2301      	movs	r3, #1
 800b87e:	e226      	b.n	800bcce <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800b886:	2b01      	cmp	r3, #1
 800b888:	d101      	bne.n	800b88e <HAL_DMA_Start_IT+0x2a>
 800b88a:	2302      	movs	r3, #2
 800b88c:	e21f      	b.n	800bcce <HAL_DMA_Start_IT+0x46a>
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	2201      	movs	r2, #1
 800b892:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800b89c:	b2db      	uxtb	r3, r3
 800b89e:	2b01      	cmp	r3, #1
 800b8a0:	f040 820a 	bne.w	800bcb8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	2202      	movs	r2, #2
 800b8a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	2200      	movs	r2, #0
 800b8b0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	4a68      	ldr	r2, [pc, #416]	@ (800ba58 <HAL_DMA_Start_IT+0x1f4>)
 800b8b8:	4293      	cmp	r3, r2
 800b8ba:	d04a      	beq.n	800b952 <HAL_DMA_Start_IT+0xee>
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	4a66      	ldr	r2, [pc, #408]	@ (800ba5c <HAL_DMA_Start_IT+0x1f8>)
 800b8c2:	4293      	cmp	r3, r2
 800b8c4:	d045      	beq.n	800b952 <HAL_DMA_Start_IT+0xee>
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	4a65      	ldr	r2, [pc, #404]	@ (800ba60 <HAL_DMA_Start_IT+0x1fc>)
 800b8cc:	4293      	cmp	r3, r2
 800b8ce:	d040      	beq.n	800b952 <HAL_DMA_Start_IT+0xee>
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	4a63      	ldr	r2, [pc, #396]	@ (800ba64 <HAL_DMA_Start_IT+0x200>)
 800b8d6:	4293      	cmp	r3, r2
 800b8d8:	d03b      	beq.n	800b952 <HAL_DMA_Start_IT+0xee>
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	4a62      	ldr	r2, [pc, #392]	@ (800ba68 <HAL_DMA_Start_IT+0x204>)
 800b8e0:	4293      	cmp	r3, r2
 800b8e2:	d036      	beq.n	800b952 <HAL_DMA_Start_IT+0xee>
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	4a60      	ldr	r2, [pc, #384]	@ (800ba6c <HAL_DMA_Start_IT+0x208>)
 800b8ea:	4293      	cmp	r3, r2
 800b8ec:	d031      	beq.n	800b952 <HAL_DMA_Start_IT+0xee>
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	4a5f      	ldr	r2, [pc, #380]	@ (800ba70 <HAL_DMA_Start_IT+0x20c>)
 800b8f4:	4293      	cmp	r3, r2
 800b8f6:	d02c      	beq.n	800b952 <HAL_DMA_Start_IT+0xee>
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	4a5d      	ldr	r2, [pc, #372]	@ (800ba74 <HAL_DMA_Start_IT+0x210>)
 800b8fe:	4293      	cmp	r3, r2
 800b900:	d027      	beq.n	800b952 <HAL_DMA_Start_IT+0xee>
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	4a5c      	ldr	r2, [pc, #368]	@ (800ba78 <HAL_DMA_Start_IT+0x214>)
 800b908:	4293      	cmp	r3, r2
 800b90a:	d022      	beq.n	800b952 <HAL_DMA_Start_IT+0xee>
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	4a5a      	ldr	r2, [pc, #360]	@ (800ba7c <HAL_DMA_Start_IT+0x218>)
 800b912:	4293      	cmp	r3, r2
 800b914:	d01d      	beq.n	800b952 <HAL_DMA_Start_IT+0xee>
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	4a59      	ldr	r2, [pc, #356]	@ (800ba80 <HAL_DMA_Start_IT+0x21c>)
 800b91c:	4293      	cmp	r3, r2
 800b91e:	d018      	beq.n	800b952 <HAL_DMA_Start_IT+0xee>
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	4a57      	ldr	r2, [pc, #348]	@ (800ba84 <HAL_DMA_Start_IT+0x220>)
 800b926:	4293      	cmp	r3, r2
 800b928:	d013      	beq.n	800b952 <HAL_DMA_Start_IT+0xee>
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	4a56      	ldr	r2, [pc, #344]	@ (800ba88 <HAL_DMA_Start_IT+0x224>)
 800b930:	4293      	cmp	r3, r2
 800b932:	d00e      	beq.n	800b952 <HAL_DMA_Start_IT+0xee>
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	4a54      	ldr	r2, [pc, #336]	@ (800ba8c <HAL_DMA_Start_IT+0x228>)
 800b93a:	4293      	cmp	r3, r2
 800b93c:	d009      	beq.n	800b952 <HAL_DMA_Start_IT+0xee>
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	4a53      	ldr	r2, [pc, #332]	@ (800ba90 <HAL_DMA_Start_IT+0x22c>)
 800b944:	4293      	cmp	r3, r2
 800b946:	d004      	beq.n	800b952 <HAL_DMA_Start_IT+0xee>
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	4a51      	ldr	r2, [pc, #324]	@ (800ba94 <HAL_DMA_Start_IT+0x230>)
 800b94e:	4293      	cmp	r3, r2
 800b950:	d108      	bne.n	800b964 <HAL_DMA_Start_IT+0x100>
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	681a      	ldr	r2, [r3, #0]
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	f022 0201 	bic.w	r2, r2, #1
 800b960:	601a      	str	r2, [r3, #0]
 800b962:	e007      	b.n	800b974 <HAL_DMA_Start_IT+0x110>
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	681a      	ldr	r2, [r3, #0]
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	f022 0201 	bic.w	r2, r2, #1
 800b972:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800b974:	683b      	ldr	r3, [r7, #0]
 800b976:	687a      	ldr	r2, [r7, #4]
 800b978:	68b9      	ldr	r1, [r7, #8]
 800b97a:	68f8      	ldr	r0, [r7, #12]
 800b97c:	f001 fe84 	bl	800d688 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	4a34      	ldr	r2, [pc, #208]	@ (800ba58 <HAL_DMA_Start_IT+0x1f4>)
 800b986:	4293      	cmp	r3, r2
 800b988:	d04a      	beq.n	800ba20 <HAL_DMA_Start_IT+0x1bc>
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	4a33      	ldr	r2, [pc, #204]	@ (800ba5c <HAL_DMA_Start_IT+0x1f8>)
 800b990:	4293      	cmp	r3, r2
 800b992:	d045      	beq.n	800ba20 <HAL_DMA_Start_IT+0x1bc>
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	4a31      	ldr	r2, [pc, #196]	@ (800ba60 <HAL_DMA_Start_IT+0x1fc>)
 800b99a:	4293      	cmp	r3, r2
 800b99c:	d040      	beq.n	800ba20 <HAL_DMA_Start_IT+0x1bc>
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	4a30      	ldr	r2, [pc, #192]	@ (800ba64 <HAL_DMA_Start_IT+0x200>)
 800b9a4:	4293      	cmp	r3, r2
 800b9a6:	d03b      	beq.n	800ba20 <HAL_DMA_Start_IT+0x1bc>
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	4a2e      	ldr	r2, [pc, #184]	@ (800ba68 <HAL_DMA_Start_IT+0x204>)
 800b9ae:	4293      	cmp	r3, r2
 800b9b0:	d036      	beq.n	800ba20 <HAL_DMA_Start_IT+0x1bc>
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	4a2d      	ldr	r2, [pc, #180]	@ (800ba6c <HAL_DMA_Start_IT+0x208>)
 800b9b8:	4293      	cmp	r3, r2
 800b9ba:	d031      	beq.n	800ba20 <HAL_DMA_Start_IT+0x1bc>
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	4a2b      	ldr	r2, [pc, #172]	@ (800ba70 <HAL_DMA_Start_IT+0x20c>)
 800b9c2:	4293      	cmp	r3, r2
 800b9c4:	d02c      	beq.n	800ba20 <HAL_DMA_Start_IT+0x1bc>
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	4a2a      	ldr	r2, [pc, #168]	@ (800ba74 <HAL_DMA_Start_IT+0x210>)
 800b9cc:	4293      	cmp	r3, r2
 800b9ce:	d027      	beq.n	800ba20 <HAL_DMA_Start_IT+0x1bc>
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	4a28      	ldr	r2, [pc, #160]	@ (800ba78 <HAL_DMA_Start_IT+0x214>)
 800b9d6:	4293      	cmp	r3, r2
 800b9d8:	d022      	beq.n	800ba20 <HAL_DMA_Start_IT+0x1bc>
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	4a27      	ldr	r2, [pc, #156]	@ (800ba7c <HAL_DMA_Start_IT+0x218>)
 800b9e0:	4293      	cmp	r3, r2
 800b9e2:	d01d      	beq.n	800ba20 <HAL_DMA_Start_IT+0x1bc>
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	4a25      	ldr	r2, [pc, #148]	@ (800ba80 <HAL_DMA_Start_IT+0x21c>)
 800b9ea:	4293      	cmp	r3, r2
 800b9ec:	d018      	beq.n	800ba20 <HAL_DMA_Start_IT+0x1bc>
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	4a24      	ldr	r2, [pc, #144]	@ (800ba84 <HAL_DMA_Start_IT+0x220>)
 800b9f4:	4293      	cmp	r3, r2
 800b9f6:	d013      	beq.n	800ba20 <HAL_DMA_Start_IT+0x1bc>
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	4a22      	ldr	r2, [pc, #136]	@ (800ba88 <HAL_DMA_Start_IT+0x224>)
 800b9fe:	4293      	cmp	r3, r2
 800ba00:	d00e      	beq.n	800ba20 <HAL_DMA_Start_IT+0x1bc>
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	4a21      	ldr	r2, [pc, #132]	@ (800ba8c <HAL_DMA_Start_IT+0x228>)
 800ba08:	4293      	cmp	r3, r2
 800ba0a:	d009      	beq.n	800ba20 <HAL_DMA_Start_IT+0x1bc>
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	4a1f      	ldr	r2, [pc, #124]	@ (800ba90 <HAL_DMA_Start_IT+0x22c>)
 800ba12:	4293      	cmp	r3, r2
 800ba14:	d004      	beq.n	800ba20 <HAL_DMA_Start_IT+0x1bc>
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	4a1e      	ldr	r2, [pc, #120]	@ (800ba94 <HAL_DMA_Start_IT+0x230>)
 800ba1c:	4293      	cmp	r3, r2
 800ba1e:	d101      	bne.n	800ba24 <HAL_DMA_Start_IT+0x1c0>
 800ba20:	2301      	movs	r3, #1
 800ba22:	e000      	b.n	800ba26 <HAL_DMA_Start_IT+0x1c2>
 800ba24:	2300      	movs	r3, #0
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d036      	beq.n	800ba98 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	f023 021e 	bic.w	r2, r3, #30
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	f042 0216 	orr.w	r2, r2, #22
 800ba3c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d03e      	beq.n	800bac4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	681a      	ldr	r2, [r3, #0]
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	f042 0208 	orr.w	r2, r2, #8
 800ba54:	601a      	str	r2, [r3, #0]
 800ba56:	e035      	b.n	800bac4 <HAL_DMA_Start_IT+0x260>
 800ba58:	40020010 	.word	0x40020010
 800ba5c:	40020028 	.word	0x40020028
 800ba60:	40020040 	.word	0x40020040
 800ba64:	40020058 	.word	0x40020058
 800ba68:	40020070 	.word	0x40020070
 800ba6c:	40020088 	.word	0x40020088
 800ba70:	400200a0 	.word	0x400200a0
 800ba74:	400200b8 	.word	0x400200b8
 800ba78:	40020410 	.word	0x40020410
 800ba7c:	40020428 	.word	0x40020428
 800ba80:	40020440 	.word	0x40020440
 800ba84:	40020458 	.word	0x40020458
 800ba88:	40020470 	.word	0x40020470
 800ba8c:	40020488 	.word	0x40020488
 800ba90:	400204a0 	.word	0x400204a0
 800ba94:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	f023 020e 	bic.w	r2, r3, #14
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	f042 020a 	orr.w	r2, r2, #10
 800baaa:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d007      	beq.n	800bac4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	681a      	ldr	r2, [r3, #0]
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	f042 0204 	orr.w	r2, r2, #4
 800bac2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	4a83      	ldr	r2, [pc, #524]	@ (800bcd8 <HAL_DMA_Start_IT+0x474>)
 800baca:	4293      	cmp	r3, r2
 800bacc:	d072      	beq.n	800bbb4 <HAL_DMA_Start_IT+0x350>
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	4a82      	ldr	r2, [pc, #520]	@ (800bcdc <HAL_DMA_Start_IT+0x478>)
 800bad4:	4293      	cmp	r3, r2
 800bad6:	d06d      	beq.n	800bbb4 <HAL_DMA_Start_IT+0x350>
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	4a80      	ldr	r2, [pc, #512]	@ (800bce0 <HAL_DMA_Start_IT+0x47c>)
 800bade:	4293      	cmp	r3, r2
 800bae0:	d068      	beq.n	800bbb4 <HAL_DMA_Start_IT+0x350>
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	4a7f      	ldr	r2, [pc, #508]	@ (800bce4 <HAL_DMA_Start_IT+0x480>)
 800bae8:	4293      	cmp	r3, r2
 800baea:	d063      	beq.n	800bbb4 <HAL_DMA_Start_IT+0x350>
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	4a7d      	ldr	r2, [pc, #500]	@ (800bce8 <HAL_DMA_Start_IT+0x484>)
 800baf2:	4293      	cmp	r3, r2
 800baf4:	d05e      	beq.n	800bbb4 <HAL_DMA_Start_IT+0x350>
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	4a7c      	ldr	r2, [pc, #496]	@ (800bcec <HAL_DMA_Start_IT+0x488>)
 800bafc:	4293      	cmp	r3, r2
 800bafe:	d059      	beq.n	800bbb4 <HAL_DMA_Start_IT+0x350>
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	4a7a      	ldr	r2, [pc, #488]	@ (800bcf0 <HAL_DMA_Start_IT+0x48c>)
 800bb06:	4293      	cmp	r3, r2
 800bb08:	d054      	beq.n	800bbb4 <HAL_DMA_Start_IT+0x350>
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	4a79      	ldr	r2, [pc, #484]	@ (800bcf4 <HAL_DMA_Start_IT+0x490>)
 800bb10:	4293      	cmp	r3, r2
 800bb12:	d04f      	beq.n	800bbb4 <HAL_DMA_Start_IT+0x350>
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	4a77      	ldr	r2, [pc, #476]	@ (800bcf8 <HAL_DMA_Start_IT+0x494>)
 800bb1a:	4293      	cmp	r3, r2
 800bb1c:	d04a      	beq.n	800bbb4 <HAL_DMA_Start_IT+0x350>
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	4a76      	ldr	r2, [pc, #472]	@ (800bcfc <HAL_DMA_Start_IT+0x498>)
 800bb24:	4293      	cmp	r3, r2
 800bb26:	d045      	beq.n	800bbb4 <HAL_DMA_Start_IT+0x350>
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	4a74      	ldr	r2, [pc, #464]	@ (800bd00 <HAL_DMA_Start_IT+0x49c>)
 800bb2e:	4293      	cmp	r3, r2
 800bb30:	d040      	beq.n	800bbb4 <HAL_DMA_Start_IT+0x350>
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	4a73      	ldr	r2, [pc, #460]	@ (800bd04 <HAL_DMA_Start_IT+0x4a0>)
 800bb38:	4293      	cmp	r3, r2
 800bb3a:	d03b      	beq.n	800bbb4 <HAL_DMA_Start_IT+0x350>
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	4a71      	ldr	r2, [pc, #452]	@ (800bd08 <HAL_DMA_Start_IT+0x4a4>)
 800bb42:	4293      	cmp	r3, r2
 800bb44:	d036      	beq.n	800bbb4 <HAL_DMA_Start_IT+0x350>
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	4a70      	ldr	r2, [pc, #448]	@ (800bd0c <HAL_DMA_Start_IT+0x4a8>)
 800bb4c:	4293      	cmp	r3, r2
 800bb4e:	d031      	beq.n	800bbb4 <HAL_DMA_Start_IT+0x350>
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	4a6e      	ldr	r2, [pc, #440]	@ (800bd10 <HAL_DMA_Start_IT+0x4ac>)
 800bb56:	4293      	cmp	r3, r2
 800bb58:	d02c      	beq.n	800bbb4 <HAL_DMA_Start_IT+0x350>
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	4a6d      	ldr	r2, [pc, #436]	@ (800bd14 <HAL_DMA_Start_IT+0x4b0>)
 800bb60:	4293      	cmp	r3, r2
 800bb62:	d027      	beq.n	800bbb4 <HAL_DMA_Start_IT+0x350>
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	4a6b      	ldr	r2, [pc, #428]	@ (800bd18 <HAL_DMA_Start_IT+0x4b4>)
 800bb6a:	4293      	cmp	r3, r2
 800bb6c:	d022      	beq.n	800bbb4 <HAL_DMA_Start_IT+0x350>
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	4a6a      	ldr	r2, [pc, #424]	@ (800bd1c <HAL_DMA_Start_IT+0x4b8>)
 800bb74:	4293      	cmp	r3, r2
 800bb76:	d01d      	beq.n	800bbb4 <HAL_DMA_Start_IT+0x350>
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	4a68      	ldr	r2, [pc, #416]	@ (800bd20 <HAL_DMA_Start_IT+0x4bc>)
 800bb7e:	4293      	cmp	r3, r2
 800bb80:	d018      	beq.n	800bbb4 <HAL_DMA_Start_IT+0x350>
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	4a67      	ldr	r2, [pc, #412]	@ (800bd24 <HAL_DMA_Start_IT+0x4c0>)
 800bb88:	4293      	cmp	r3, r2
 800bb8a:	d013      	beq.n	800bbb4 <HAL_DMA_Start_IT+0x350>
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	4a65      	ldr	r2, [pc, #404]	@ (800bd28 <HAL_DMA_Start_IT+0x4c4>)
 800bb92:	4293      	cmp	r3, r2
 800bb94:	d00e      	beq.n	800bbb4 <HAL_DMA_Start_IT+0x350>
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	4a64      	ldr	r2, [pc, #400]	@ (800bd2c <HAL_DMA_Start_IT+0x4c8>)
 800bb9c:	4293      	cmp	r3, r2
 800bb9e:	d009      	beq.n	800bbb4 <HAL_DMA_Start_IT+0x350>
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	4a62      	ldr	r2, [pc, #392]	@ (800bd30 <HAL_DMA_Start_IT+0x4cc>)
 800bba6:	4293      	cmp	r3, r2
 800bba8:	d004      	beq.n	800bbb4 <HAL_DMA_Start_IT+0x350>
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	4a61      	ldr	r2, [pc, #388]	@ (800bd34 <HAL_DMA_Start_IT+0x4d0>)
 800bbb0:	4293      	cmp	r3, r2
 800bbb2:	d101      	bne.n	800bbb8 <HAL_DMA_Start_IT+0x354>
 800bbb4:	2301      	movs	r3, #1
 800bbb6:	e000      	b.n	800bbba <HAL_DMA_Start_IT+0x356>
 800bbb8:	2300      	movs	r3, #0
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d01a      	beq.n	800bbf4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d007      	beq.n	800bbdc <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bbd0:	681a      	ldr	r2, [r3, #0]
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bbd6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800bbda:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d007      	beq.n	800bbf4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bbe8:	681a      	ldr	r2, [r3, #0]
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bbee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800bbf2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	4a37      	ldr	r2, [pc, #220]	@ (800bcd8 <HAL_DMA_Start_IT+0x474>)
 800bbfa:	4293      	cmp	r3, r2
 800bbfc:	d04a      	beq.n	800bc94 <HAL_DMA_Start_IT+0x430>
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	4a36      	ldr	r2, [pc, #216]	@ (800bcdc <HAL_DMA_Start_IT+0x478>)
 800bc04:	4293      	cmp	r3, r2
 800bc06:	d045      	beq.n	800bc94 <HAL_DMA_Start_IT+0x430>
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	4a34      	ldr	r2, [pc, #208]	@ (800bce0 <HAL_DMA_Start_IT+0x47c>)
 800bc0e:	4293      	cmp	r3, r2
 800bc10:	d040      	beq.n	800bc94 <HAL_DMA_Start_IT+0x430>
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	4a33      	ldr	r2, [pc, #204]	@ (800bce4 <HAL_DMA_Start_IT+0x480>)
 800bc18:	4293      	cmp	r3, r2
 800bc1a:	d03b      	beq.n	800bc94 <HAL_DMA_Start_IT+0x430>
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	4a31      	ldr	r2, [pc, #196]	@ (800bce8 <HAL_DMA_Start_IT+0x484>)
 800bc22:	4293      	cmp	r3, r2
 800bc24:	d036      	beq.n	800bc94 <HAL_DMA_Start_IT+0x430>
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	4a30      	ldr	r2, [pc, #192]	@ (800bcec <HAL_DMA_Start_IT+0x488>)
 800bc2c:	4293      	cmp	r3, r2
 800bc2e:	d031      	beq.n	800bc94 <HAL_DMA_Start_IT+0x430>
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	4a2e      	ldr	r2, [pc, #184]	@ (800bcf0 <HAL_DMA_Start_IT+0x48c>)
 800bc36:	4293      	cmp	r3, r2
 800bc38:	d02c      	beq.n	800bc94 <HAL_DMA_Start_IT+0x430>
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	4a2d      	ldr	r2, [pc, #180]	@ (800bcf4 <HAL_DMA_Start_IT+0x490>)
 800bc40:	4293      	cmp	r3, r2
 800bc42:	d027      	beq.n	800bc94 <HAL_DMA_Start_IT+0x430>
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	4a2b      	ldr	r2, [pc, #172]	@ (800bcf8 <HAL_DMA_Start_IT+0x494>)
 800bc4a:	4293      	cmp	r3, r2
 800bc4c:	d022      	beq.n	800bc94 <HAL_DMA_Start_IT+0x430>
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	4a2a      	ldr	r2, [pc, #168]	@ (800bcfc <HAL_DMA_Start_IT+0x498>)
 800bc54:	4293      	cmp	r3, r2
 800bc56:	d01d      	beq.n	800bc94 <HAL_DMA_Start_IT+0x430>
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	4a28      	ldr	r2, [pc, #160]	@ (800bd00 <HAL_DMA_Start_IT+0x49c>)
 800bc5e:	4293      	cmp	r3, r2
 800bc60:	d018      	beq.n	800bc94 <HAL_DMA_Start_IT+0x430>
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	4a27      	ldr	r2, [pc, #156]	@ (800bd04 <HAL_DMA_Start_IT+0x4a0>)
 800bc68:	4293      	cmp	r3, r2
 800bc6a:	d013      	beq.n	800bc94 <HAL_DMA_Start_IT+0x430>
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	4a25      	ldr	r2, [pc, #148]	@ (800bd08 <HAL_DMA_Start_IT+0x4a4>)
 800bc72:	4293      	cmp	r3, r2
 800bc74:	d00e      	beq.n	800bc94 <HAL_DMA_Start_IT+0x430>
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	4a24      	ldr	r2, [pc, #144]	@ (800bd0c <HAL_DMA_Start_IT+0x4a8>)
 800bc7c:	4293      	cmp	r3, r2
 800bc7e:	d009      	beq.n	800bc94 <HAL_DMA_Start_IT+0x430>
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	4a22      	ldr	r2, [pc, #136]	@ (800bd10 <HAL_DMA_Start_IT+0x4ac>)
 800bc86:	4293      	cmp	r3, r2
 800bc88:	d004      	beq.n	800bc94 <HAL_DMA_Start_IT+0x430>
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	4a21      	ldr	r2, [pc, #132]	@ (800bd14 <HAL_DMA_Start_IT+0x4b0>)
 800bc90:	4293      	cmp	r3, r2
 800bc92:	d108      	bne.n	800bca6 <HAL_DMA_Start_IT+0x442>
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	681a      	ldr	r2, [r3, #0]
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	f042 0201 	orr.w	r2, r2, #1
 800bca2:	601a      	str	r2, [r3, #0]
 800bca4:	e012      	b.n	800bccc <HAL_DMA_Start_IT+0x468>
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	681a      	ldr	r2, [r3, #0]
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	f042 0201 	orr.w	r2, r2, #1
 800bcb4:	601a      	str	r2, [r3, #0]
 800bcb6:	e009      	b.n	800bccc <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bcbe:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	2200      	movs	r2, #0
 800bcc4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 800bcc8:	2301      	movs	r3, #1
 800bcca:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800bccc:	7dfb      	ldrb	r3, [r7, #23]
}
 800bcce:	4618      	mov	r0, r3
 800bcd0:	3718      	adds	r7, #24
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	bd80      	pop	{r7, pc}
 800bcd6:	bf00      	nop
 800bcd8:	40020010 	.word	0x40020010
 800bcdc:	40020028 	.word	0x40020028
 800bce0:	40020040 	.word	0x40020040
 800bce4:	40020058 	.word	0x40020058
 800bce8:	40020070 	.word	0x40020070
 800bcec:	40020088 	.word	0x40020088
 800bcf0:	400200a0 	.word	0x400200a0
 800bcf4:	400200b8 	.word	0x400200b8
 800bcf8:	40020410 	.word	0x40020410
 800bcfc:	40020428 	.word	0x40020428
 800bd00:	40020440 	.word	0x40020440
 800bd04:	40020458 	.word	0x40020458
 800bd08:	40020470 	.word	0x40020470
 800bd0c:	40020488 	.word	0x40020488
 800bd10:	400204a0 	.word	0x400204a0
 800bd14:	400204b8 	.word	0x400204b8
 800bd18:	58025408 	.word	0x58025408
 800bd1c:	5802541c 	.word	0x5802541c
 800bd20:	58025430 	.word	0x58025430
 800bd24:	58025444 	.word	0x58025444
 800bd28:	58025458 	.word	0x58025458
 800bd2c:	5802546c 	.word	0x5802546c
 800bd30:	58025480 	.word	0x58025480
 800bd34:	58025494 	.word	0x58025494

0800bd38 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	b086      	sub	sp, #24
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800bd40:	f7fd f8e0 	bl	8008f04 <HAL_GetTick>
 800bd44:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d101      	bne.n	800bd50 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800bd4c:	2301      	movs	r3, #1
 800bd4e:	e2dc      	b.n	800c30a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800bd56:	b2db      	uxtb	r3, r3
 800bd58:	2b02      	cmp	r3, #2
 800bd5a:	d008      	beq.n	800bd6e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	2280      	movs	r2, #128	@ 0x80
 800bd60:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	2200      	movs	r2, #0
 800bd66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800bd6a:	2301      	movs	r3, #1
 800bd6c:	e2cd      	b.n	800c30a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	4a76      	ldr	r2, [pc, #472]	@ (800bf4c <HAL_DMA_Abort+0x214>)
 800bd74:	4293      	cmp	r3, r2
 800bd76:	d04a      	beq.n	800be0e <HAL_DMA_Abort+0xd6>
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	4a74      	ldr	r2, [pc, #464]	@ (800bf50 <HAL_DMA_Abort+0x218>)
 800bd7e:	4293      	cmp	r3, r2
 800bd80:	d045      	beq.n	800be0e <HAL_DMA_Abort+0xd6>
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	4a73      	ldr	r2, [pc, #460]	@ (800bf54 <HAL_DMA_Abort+0x21c>)
 800bd88:	4293      	cmp	r3, r2
 800bd8a:	d040      	beq.n	800be0e <HAL_DMA_Abort+0xd6>
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	4a71      	ldr	r2, [pc, #452]	@ (800bf58 <HAL_DMA_Abort+0x220>)
 800bd92:	4293      	cmp	r3, r2
 800bd94:	d03b      	beq.n	800be0e <HAL_DMA_Abort+0xd6>
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	4a70      	ldr	r2, [pc, #448]	@ (800bf5c <HAL_DMA_Abort+0x224>)
 800bd9c:	4293      	cmp	r3, r2
 800bd9e:	d036      	beq.n	800be0e <HAL_DMA_Abort+0xd6>
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	4a6e      	ldr	r2, [pc, #440]	@ (800bf60 <HAL_DMA_Abort+0x228>)
 800bda6:	4293      	cmp	r3, r2
 800bda8:	d031      	beq.n	800be0e <HAL_DMA_Abort+0xd6>
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	4a6d      	ldr	r2, [pc, #436]	@ (800bf64 <HAL_DMA_Abort+0x22c>)
 800bdb0:	4293      	cmp	r3, r2
 800bdb2:	d02c      	beq.n	800be0e <HAL_DMA_Abort+0xd6>
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	4a6b      	ldr	r2, [pc, #428]	@ (800bf68 <HAL_DMA_Abort+0x230>)
 800bdba:	4293      	cmp	r3, r2
 800bdbc:	d027      	beq.n	800be0e <HAL_DMA_Abort+0xd6>
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	4a6a      	ldr	r2, [pc, #424]	@ (800bf6c <HAL_DMA_Abort+0x234>)
 800bdc4:	4293      	cmp	r3, r2
 800bdc6:	d022      	beq.n	800be0e <HAL_DMA_Abort+0xd6>
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	4a68      	ldr	r2, [pc, #416]	@ (800bf70 <HAL_DMA_Abort+0x238>)
 800bdce:	4293      	cmp	r3, r2
 800bdd0:	d01d      	beq.n	800be0e <HAL_DMA_Abort+0xd6>
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	4a67      	ldr	r2, [pc, #412]	@ (800bf74 <HAL_DMA_Abort+0x23c>)
 800bdd8:	4293      	cmp	r3, r2
 800bdda:	d018      	beq.n	800be0e <HAL_DMA_Abort+0xd6>
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	4a65      	ldr	r2, [pc, #404]	@ (800bf78 <HAL_DMA_Abort+0x240>)
 800bde2:	4293      	cmp	r3, r2
 800bde4:	d013      	beq.n	800be0e <HAL_DMA_Abort+0xd6>
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	4a64      	ldr	r2, [pc, #400]	@ (800bf7c <HAL_DMA_Abort+0x244>)
 800bdec:	4293      	cmp	r3, r2
 800bdee:	d00e      	beq.n	800be0e <HAL_DMA_Abort+0xd6>
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	4a62      	ldr	r2, [pc, #392]	@ (800bf80 <HAL_DMA_Abort+0x248>)
 800bdf6:	4293      	cmp	r3, r2
 800bdf8:	d009      	beq.n	800be0e <HAL_DMA_Abort+0xd6>
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	4a61      	ldr	r2, [pc, #388]	@ (800bf84 <HAL_DMA_Abort+0x24c>)
 800be00:	4293      	cmp	r3, r2
 800be02:	d004      	beq.n	800be0e <HAL_DMA_Abort+0xd6>
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	4a5f      	ldr	r2, [pc, #380]	@ (800bf88 <HAL_DMA_Abort+0x250>)
 800be0a:	4293      	cmp	r3, r2
 800be0c:	d101      	bne.n	800be12 <HAL_DMA_Abort+0xda>
 800be0e:	2301      	movs	r3, #1
 800be10:	e000      	b.n	800be14 <HAL_DMA_Abort+0xdc>
 800be12:	2300      	movs	r3, #0
 800be14:	2b00      	cmp	r3, #0
 800be16:	d013      	beq.n	800be40 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	681a      	ldr	r2, [r3, #0]
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	f022 021e 	bic.w	r2, r2, #30
 800be26:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	695a      	ldr	r2, [r3, #20]
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800be36:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	617b      	str	r3, [r7, #20]
 800be3e:	e00a      	b.n	800be56 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	681a      	ldr	r2, [r3, #0]
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	f022 020e 	bic.w	r2, r2, #14
 800be4e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	4a3c      	ldr	r2, [pc, #240]	@ (800bf4c <HAL_DMA_Abort+0x214>)
 800be5c:	4293      	cmp	r3, r2
 800be5e:	d072      	beq.n	800bf46 <HAL_DMA_Abort+0x20e>
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	4a3a      	ldr	r2, [pc, #232]	@ (800bf50 <HAL_DMA_Abort+0x218>)
 800be66:	4293      	cmp	r3, r2
 800be68:	d06d      	beq.n	800bf46 <HAL_DMA_Abort+0x20e>
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	4a39      	ldr	r2, [pc, #228]	@ (800bf54 <HAL_DMA_Abort+0x21c>)
 800be70:	4293      	cmp	r3, r2
 800be72:	d068      	beq.n	800bf46 <HAL_DMA_Abort+0x20e>
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	4a37      	ldr	r2, [pc, #220]	@ (800bf58 <HAL_DMA_Abort+0x220>)
 800be7a:	4293      	cmp	r3, r2
 800be7c:	d063      	beq.n	800bf46 <HAL_DMA_Abort+0x20e>
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	4a36      	ldr	r2, [pc, #216]	@ (800bf5c <HAL_DMA_Abort+0x224>)
 800be84:	4293      	cmp	r3, r2
 800be86:	d05e      	beq.n	800bf46 <HAL_DMA_Abort+0x20e>
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	4a34      	ldr	r2, [pc, #208]	@ (800bf60 <HAL_DMA_Abort+0x228>)
 800be8e:	4293      	cmp	r3, r2
 800be90:	d059      	beq.n	800bf46 <HAL_DMA_Abort+0x20e>
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	4a33      	ldr	r2, [pc, #204]	@ (800bf64 <HAL_DMA_Abort+0x22c>)
 800be98:	4293      	cmp	r3, r2
 800be9a:	d054      	beq.n	800bf46 <HAL_DMA_Abort+0x20e>
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	4a31      	ldr	r2, [pc, #196]	@ (800bf68 <HAL_DMA_Abort+0x230>)
 800bea2:	4293      	cmp	r3, r2
 800bea4:	d04f      	beq.n	800bf46 <HAL_DMA_Abort+0x20e>
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	4a30      	ldr	r2, [pc, #192]	@ (800bf6c <HAL_DMA_Abort+0x234>)
 800beac:	4293      	cmp	r3, r2
 800beae:	d04a      	beq.n	800bf46 <HAL_DMA_Abort+0x20e>
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	4a2e      	ldr	r2, [pc, #184]	@ (800bf70 <HAL_DMA_Abort+0x238>)
 800beb6:	4293      	cmp	r3, r2
 800beb8:	d045      	beq.n	800bf46 <HAL_DMA_Abort+0x20e>
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	4a2d      	ldr	r2, [pc, #180]	@ (800bf74 <HAL_DMA_Abort+0x23c>)
 800bec0:	4293      	cmp	r3, r2
 800bec2:	d040      	beq.n	800bf46 <HAL_DMA_Abort+0x20e>
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	4a2b      	ldr	r2, [pc, #172]	@ (800bf78 <HAL_DMA_Abort+0x240>)
 800beca:	4293      	cmp	r3, r2
 800becc:	d03b      	beq.n	800bf46 <HAL_DMA_Abort+0x20e>
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	4a2a      	ldr	r2, [pc, #168]	@ (800bf7c <HAL_DMA_Abort+0x244>)
 800bed4:	4293      	cmp	r3, r2
 800bed6:	d036      	beq.n	800bf46 <HAL_DMA_Abort+0x20e>
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	4a28      	ldr	r2, [pc, #160]	@ (800bf80 <HAL_DMA_Abort+0x248>)
 800bede:	4293      	cmp	r3, r2
 800bee0:	d031      	beq.n	800bf46 <HAL_DMA_Abort+0x20e>
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	4a27      	ldr	r2, [pc, #156]	@ (800bf84 <HAL_DMA_Abort+0x24c>)
 800bee8:	4293      	cmp	r3, r2
 800beea:	d02c      	beq.n	800bf46 <HAL_DMA_Abort+0x20e>
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	4a25      	ldr	r2, [pc, #148]	@ (800bf88 <HAL_DMA_Abort+0x250>)
 800bef2:	4293      	cmp	r3, r2
 800bef4:	d027      	beq.n	800bf46 <HAL_DMA_Abort+0x20e>
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	4a24      	ldr	r2, [pc, #144]	@ (800bf8c <HAL_DMA_Abort+0x254>)
 800befc:	4293      	cmp	r3, r2
 800befe:	d022      	beq.n	800bf46 <HAL_DMA_Abort+0x20e>
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	4a22      	ldr	r2, [pc, #136]	@ (800bf90 <HAL_DMA_Abort+0x258>)
 800bf06:	4293      	cmp	r3, r2
 800bf08:	d01d      	beq.n	800bf46 <HAL_DMA_Abort+0x20e>
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	4a21      	ldr	r2, [pc, #132]	@ (800bf94 <HAL_DMA_Abort+0x25c>)
 800bf10:	4293      	cmp	r3, r2
 800bf12:	d018      	beq.n	800bf46 <HAL_DMA_Abort+0x20e>
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	4a1f      	ldr	r2, [pc, #124]	@ (800bf98 <HAL_DMA_Abort+0x260>)
 800bf1a:	4293      	cmp	r3, r2
 800bf1c:	d013      	beq.n	800bf46 <HAL_DMA_Abort+0x20e>
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	4a1e      	ldr	r2, [pc, #120]	@ (800bf9c <HAL_DMA_Abort+0x264>)
 800bf24:	4293      	cmp	r3, r2
 800bf26:	d00e      	beq.n	800bf46 <HAL_DMA_Abort+0x20e>
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	4a1c      	ldr	r2, [pc, #112]	@ (800bfa0 <HAL_DMA_Abort+0x268>)
 800bf2e:	4293      	cmp	r3, r2
 800bf30:	d009      	beq.n	800bf46 <HAL_DMA_Abort+0x20e>
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	4a1b      	ldr	r2, [pc, #108]	@ (800bfa4 <HAL_DMA_Abort+0x26c>)
 800bf38:	4293      	cmp	r3, r2
 800bf3a:	d004      	beq.n	800bf46 <HAL_DMA_Abort+0x20e>
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	4a19      	ldr	r2, [pc, #100]	@ (800bfa8 <HAL_DMA_Abort+0x270>)
 800bf42:	4293      	cmp	r3, r2
 800bf44:	d132      	bne.n	800bfac <HAL_DMA_Abort+0x274>
 800bf46:	2301      	movs	r3, #1
 800bf48:	e031      	b.n	800bfae <HAL_DMA_Abort+0x276>
 800bf4a:	bf00      	nop
 800bf4c:	40020010 	.word	0x40020010
 800bf50:	40020028 	.word	0x40020028
 800bf54:	40020040 	.word	0x40020040
 800bf58:	40020058 	.word	0x40020058
 800bf5c:	40020070 	.word	0x40020070
 800bf60:	40020088 	.word	0x40020088
 800bf64:	400200a0 	.word	0x400200a0
 800bf68:	400200b8 	.word	0x400200b8
 800bf6c:	40020410 	.word	0x40020410
 800bf70:	40020428 	.word	0x40020428
 800bf74:	40020440 	.word	0x40020440
 800bf78:	40020458 	.word	0x40020458
 800bf7c:	40020470 	.word	0x40020470
 800bf80:	40020488 	.word	0x40020488
 800bf84:	400204a0 	.word	0x400204a0
 800bf88:	400204b8 	.word	0x400204b8
 800bf8c:	58025408 	.word	0x58025408
 800bf90:	5802541c 	.word	0x5802541c
 800bf94:	58025430 	.word	0x58025430
 800bf98:	58025444 	.word	0x58025444
 800bf9c:	58025458 	.word	0x58025458
 800bfa0:	5802546c 	.word	0x5802546c
 800bfa4:	58025480 	.word	0x58025480
 800bfa8:	58025494 	.word	0x58025494
 800bfac:	2300      	movs	r3, #0
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d007      	beq.n	800bfc2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bfb6:	681a      	ldr	r2, [r3, #0]
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bfbc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800bfc0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	4a6d      	ldr	r2, [pc, #436]	@ (800c17c <HAL_DMA_Abort+0x444>)
 800bfc8:	4293      	cmp	r3, r2
 800bfca:	d04a      	beq.n	800c062 <HAL_DMA_Abort+0x32a>
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	4a6b      	ldr	r2, [pc, #428]	@ (800c180 <HAL_DMA_Abort+0x448>)
 800bfd2:	4293      	cmp	r3, r2
 800bfd4:	d045      	beq.n	800c062 <HAL_DMA_Abort+0x32a>
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	4a6a      	ldr	r2, [pc, #424]	@ (800c184 <HAL_DMA_Abort+0x44c>)
 800bfdc:	4293      	cmp	r3, r2
 800bfde:	d040      	beq.n	800c062 <HAL_DMA_Abort+0x32a>
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	4a68      	ldr	r2, [pc, #416]	@ (800c188 <HAL_DMA_Abort+0x450>)
 800bfe6:	4293      	cmp	r3, r2
 800bfe8:	d03b      	beq.n	800c062 <HAL_DMA_Abort+0x32a>
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	4a67      	ldr	r2, [pc, #412]	@ (800c18c <HAL_DMA_Abort+0x454>)
 800bff0:	4293      	cmp	r3, r2
 800bff2:	d036      	beq.n	800c062 <HAL_DMA_Abort+0x32a>
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	4a65      	ldr	r2, [pc, #404]	@ (800c190 <HAL_DMA_Abort+0x458>)
 800bffa:	4293      	cmp	r3, r2
 800bffc:	d031      	beq.n	800c062 <HAL_DMA_Abort+0x32a>
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	4a64      	ldr	r2, [pc, #400]	@ (800c194 <HAL_DMA_Abort+0x45c>)
 800c004:	4293      	cmp	r3, r2
 800c006:	d02c      	beq.n	800c062 <HAL_DMA_Abort+0x32a>
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	4a62      	ldr	r2, [pc, #392]	@ (800c198 <HAL_DMA_Abort+0x460>)
 800c00e:	4293      	cmp	r3, r2
 800c010:	d027      	beq.n	800c062 <HAL_DMA_Abort+0x32a>
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	4a61      	ldr	r2, [pc, #388]	@ (800c19c <HAL_DMA_Abort+0x464>)
 800c018:	4293      	cmp	r3, r2
 800c01a:	d022      	beq.n	800c062 <HAL_DMA_Abort+0x32a>
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	4a5f      	ldr	r2, [pc, #380]	@ (800c1a0 <HAL_DMA_Abort+0x468>)
 800c022:	4293      	cmp	r3, r2
 800c024:	d01d      	beq.n	800c062 <HAL_DMA_Abort+0x32a>
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	4a5e      	ldr	r2, [pc, #376]	@ (800c1a4 <HAL_DMA_Abort+0x46c>)
 800c02c:	4293      	cmp	r3, r2
 800c02e:	d018      	beq.n	800c062 <HAL_DMA_Abort+0x32a>
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	4a5c      	ldr	r2, [pc, #368]	@ (800c1a8 <HAL_DMA_Abort+0x470>)
 800c036:	4293      	cmp	r3, r2
 800c038:	d013      	beq.n	800c062 <HAL_DMA_Abort+0x32a>
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	4a5b      	ldr	r2, [pc, #364]	@ (800c1ac <HAL_DMA_Abort+0x474>)
 800c040:	4293      	cmp	r3, r2
 800c042:	d00e      	beq.n	800c062 <HAL_DMA_Abort+0x32a>
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	4a59      	ldr	r2, [pc, #356]	@ (800c1b0 <HAL_DMA_Abort+0x478>)
 800c04a:	4293      	cmp	r3, r2
 800c04c:	d009      	beq.n	800c062 <HAL_DMA_Abort+0x32a>
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	4a58      	ldr	r2, [pc, #352]	@ (800c1b4 <HAL_DMA_Abort+0x47c>)
 800c054:	4293      	cmp	r3, r2
 800c056:	d004      	beq.n	800c062 <HAL_DMA_Abort+0x32a>
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	4a56      	ldr	r2, [pc, #344]	@ (800c1b8 <HAL_DMA_Abort+0x480>)
 800c05e:	4293      	cmp	r3, r2
 800c060:	d108      	bne.n	800c074 <HAL_DMA_Abort+0x33c>
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	681a      	ldr	r2, [r3, #0]
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	f022 0201 	bic.w	r2, r2, #1
 800c070:	601a      	str	r2, [r3, #0]
 800c072:	e007      	b.n	800c084 <HAL_DMA_Abort+0x34c>
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	681a      	ldr	r2, [r3, #0]
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	f022 0201 	bic.w	r2, r2, #1
 800c082:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800c084:	e013      	b.n	800c0ae <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800c086:	f7fc ff3d 	bl	8008f04 <HAL_GetTick>
 800c08a:	4602      	mov	r2, r0
 800c08c:	693b      	ldr	r3, [r7, #16]
 800c08e:	1ad3      	subs	r3, r2, r3
 800c090:	2b05      	cmp	r3, #5
 800c092:	d90c      	bls.n	800c0ae <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	2220      	movs	r2, #32
 800c098:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	2203      	movs	r2, #3
 800c09e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	2200      	movs	r2, #0
 800c0a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800c0aa:	2301      	movs	r3, #1
 800c0ac:	e12d      	b.n	800c30a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800c0ae:	697b      	ldr	r3, [r7, #20]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	f003 0301 	and.w	r3, r3, #1
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d1e5      	bne.n	800c086 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	4a2f      	ldr	r2, [pc, #188]	@ (800c17c <HAL_DMA_Abort+0x444>)
 800c0c0:	4293      	cmp	r3, r2
 800c0c2:	d04a      	beq.n	800c15a <HAL_DMA_Abort+0x422>
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	4a2d      	ldr	r2, [pc, #180]	@ (800c180 <HAL_DMA_Abort+0x448>)
 800c0ca:	4293      	cmp	r3, r2
 800c0cc:	d045      	beq.n	800c15a <HAL_DMA_Abort+0x422>
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	4a2c      	ldr	r2, [pc, #176]	@ (800c184 <HAL_DMA_Abort+0x44c>)
 800c0d4:	4293      	cmp	r3, r2
 800c0d6:	d040      	beq.n	800c15a <HAL_DMA_Abort+0x422>
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	4a2a      	ldr	r2, [pc, #168]	@ (800c188 <HAL_DMA_Abort+0x450>)
 800c0de:	4293      	cmp	r3, r2
 800c0e0:	d03b      	beq.n	800c15a <HAL_DMA_Abort+0x422>
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	4a29      	ldr	r2, [pc, #164]	@ (800c18c <HAL_DMA_Abort+0x454>)
 800c0e8:	4293      	cmp	r3, r2
 800c0ea:	d036      	beq.n	800c15a <HAL_DMA_Abort+0x422>
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	4a27      	ldr	r2, [pc, #156]	@ (800c190 <HAL_DMA_Abort+0x458>)
 800c0f2:	4293      	cmp	r3, r2
 800c0f4:	d031      	beq.n	800c15a <HAL_DMA_Abort+0x422>
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	4a26      	ldr	r2, [pc, #152]	@ (800c194 <HAL_DMA_Abort+0x45c>)
 800c0fc:	4293      	cmp	r3, r2
 800c0fe:	d02c      	beq.n	800c15a <HAL_DMA_Abort+0x422>
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	4a24      	ldr	r2, [pc, #144]	@ (800c198 <HAL_DMA_Abort+0x460>)
 800c106:	4293      	cmp	r3, r2
 800c108:	d027      	beq.n	800c15a <HAL_DMA_Abort+0x422>
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	4a23      	ldr	r2, [pc, #140]	@ (800c19c <HAL_DMA_Abort+0x464>)
 800c110:	4293      	cmp	r3, r2
 800c112:	d022      	beq.n	800c15a <HAL_DMA_Abort+0x422>
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	4a21      	ldr	r2, [pc, #132]	@ (800c1a0 <HAL_DMA_Abort+0x468>)
 800c11a:	4293      	cmp	r3, r2
 800c11c:	d01d      	beq.n	800c15a <HAL_DMA_Abort+0x422>
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	4a20      	ldr	r2, [pc, #128]	@ (800c1a4 <HAL_DMA_Abort+0x46c>)
 800c124:	4293      	cmp	r3, r2
 800c126:	d018      	beq.n	800c15a <HAL_DMA_Abort+0x422>
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	4a1e      	ldr	r2, [pc, #120]	@ (800c1a8 <HAL_DMA_Abort+0x470>)
 800c12e:	4293      	cmp	r3, r2
 800c130:	d013      	beq.n	800c15a <HAL_DMA_Abort+0x422>
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	4a1d      	ldr	r2, [pc, #116]	@ (800c1ac <HAL_DMA_Abort+0x474>)
 800c138:	4293      	cmp	r3, r2
 800c13a:	d00e      	beq.n	800c15a <HAL_DMA_Abort+0x422>
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	4a1b      	ldr	r2, [pc, #108]	@ (800c1b0 <HAL_DMA_Abort+0x478>)
 800c142:	4293      	cmp	r3, r2
 800c144:	d009      	beq.n	800c15a <HAL_DMA_Abort+0x422>
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	4a1a      	ldr	r2, [pc, #104]	@ (800c1b4 <HAL_DMA_Abort+0x47c>)
 800c14c:	4293      	cmp	r3, r2
 800c14e:	d004      	beq.n	800c15a <HAL_DMA_Abort+0x422>
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	4a18      	ldr	r2, [pc, #96]	@ (800c1b8 <HAL_DMA_Abort+0x480>)
 800c156:	4293      	cmp	r3, r2
 800c158:	d101      	bne.n	800c15e <HAL_DMA_Abort+0x426>
 800c15a:	2301      	movs	r3, #1
 800c15c:	e000      	b.n	800c160 <HAL_DMA_Abort+0x428>
 800c15e:	2300      	movs	r3, #0
 800c160:	2b00      	cmp	r3, #0
 800c162:	d02b      	beq.n	800c1bc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c168:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c16e:	f003 031f 	and.w	r3, r3, #31
 800c172:	223f      	movs	r2, #63	@ 0x3f
 800c174:	409a      	lsls	r2, r3
 800c176:	68bb      	ldr	r3, [r7, #8]
 800c178:	609a      	str	r2, [r3, #8]
 800c17a:	e02a      	b.n	800c1d2 <HAL_DMA_Abort+0x49a>
 800c17c:	40020010 	.word	0x40020010
 800c180:	40020028 	.word	0x40020028
 800c184:	40020040 	.word	0x40020040
 800c188:	40020058 	.word	0x40020058
 800c18c:	40020070 	.word	0x40020070
 800c190:	40020088 	.word	0x40020088
 800c194:	400200a0 	.word	0x400200a0
 800c198:	400200b8 	.word	0x400200b8
 800c19c:	40020410 	.word	0x40020410
 800c1a0:	40020428 	.word	0x40020428
 800c1a4:	40020440 	.word	0x40020440
 800c1a8:	40020458 	.word	0x40020458
 800c1ac:	40020470 	.word	0x40020470
 800c1b0:	40020488 	.word	0x40020488
 800c1b4:	400204a0 	.word	0x400204a0
 800c1b8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c1c0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c1c6:	f003 031f 	and.w	r3, r3, #31
 800c1ca:	2201      	movs	r2, #1
 800c1cc:	409a      	lsls	r2, r3
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	4a4f      	ldr	r2, [pc, #316]	@ (800c314 <HAL_DMA_Abort+0x5dc>)
 800c1d8:	4293      	cmp	r3, r2
 800c1da:	d072      	beq.n	800c2c2 <HAL_DMA_Abort+0x58a>
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	4a4d      	ldr	r2, [pc, #308]	@ (800c318 <HAL_DMA_Abort+0x5e0>)
 800c1e2:	4293      	cmp	r3, r2
 800c1e4:	d06d      	beq.n	800c2c2 <HAL_DMA_Abort+0x58a>
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	4a4c      	ldr	r2, [pc, #304]	@ (800c31c <HAL_DMA_Abort+0x5e4>)
 800c1ec:	4293      	cmp	r3, r2
 800c1ee:	d068      	beq.n	800c2c2 <HAL_DMA_Abort+0x58a>
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	4a4a      	ldr	r2, [pc, #296]	@ (800c320 <HAL_DMA_Abort+0x5e8>)
 800c1f6:	4293      	cmp	r3, r2
 800c1f8:	d063      	beq.n	800c2c2 <HAL_DMA_Abort+0x58a>
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	4a49      	ldr	r2, [pc, #292]	@ (800c324 <HAL_DMA_Abort+0x5ec>)
 800c200:	4293      	cmp	r3, r2
 800c202:	d05e      	beq.n	800c2c2 <HAL_DMA_Abort+0x58a>
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	4a47      	ldr	r2, [pc, #284]	@ (800c328 <HAL_DMA_Abort+0x5f0>)
 800c20a:	4293      	cmp	r3, r2
 800c20c:	d059      	beq.n	800c2c2 <HAL_DMA_Abort+0x58a>
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	4a46      	ldr	r2, [pc, #280]	@ (800c32c <HAL_DMA_Abort+0x5f4>)
 800c214:	4293      	cmp	r3, r2
 800c216:	d054      	beq.n	800c2c2 <HAL_DMA_Abort+0x58a>
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	4a44      	ldr	r2, [pc, #272]	@ (800c330 <HAL_DMA_Abort+0x5f8>)
 800c21e:	4293      	cmp	r3, r2
 800c220:	d04f      	beq.n	800c2c2 <HAL_DMA_Abort+0x58a>
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	4a43      	ldr	r2, [pc, #268]	@ (800c334 <HAL_DMA_Abort+0x5fc>)
 800c228:	4293      	cmp	r3, r2
 800c22a:	d04a      	beq.n	800c2c2 <HAL_DMA_Abort+0x58a>
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	4a41      	ldr	r2, [pc, #260]	@ (800c338 <HAL_DMA_Abort+0x600>)
 800c232:	4293      	cmp	r3, r2
 800c234:	d045      	beq.n	800c2c2 <HAL_DMA_Abort+0x58a>
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	4a40      	ldr	r2, [pc, #256]	@ (800c33c <HAL_DMA_Abort+0x604>)
 800c23c:	4293      	cmp	r3, r2
 800c23e:	d040      	beq.n	800c2c2 <HAL_DMA_Abort+0x58a>
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	4a3e      	ldr	r2, [pc, #248]	@ (800c340 <HAL_DMA_Abort+0x608>)
 800c246:	4293      	cmp	r3, r2
 800c248:	d03b      	beq.n	800c2c2 <HAL_DMA_Abort+0x58a>
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	4a3d      	ldr	r2, [pc, #244]	@ (800c344 <HAL_DMA_Abort+0x60c>)
 800c250:	4293      	cmp	r3, r2
 800c252:	d036      	beq.n	800c2c2 <HAL_DMA_Abort+0x58a>
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	4a3b      	ldr	r2, [pc, #236]	@ (800c348 <HAL_DMA_Abort+0x610>)
 800c25a:	4293      	cmp	r3, r2
 800c25c:	d031      	beq.n	800c2c2 <HAL_DMA_Abort+0x58a>
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	4a3a      	ldr	r2, [pc, #232]	@ (800c34c <HAL_DMA_Abort+0x614>)
 800c264:	4293      	cmp	r3, r2
 800c266:	d02c      	beq.n	800c2c2 <HAL_DMA_Abort+0x58a>
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	4a38      	ldr	r2, [pc, #224]	@ (800c350 <HAL_DMA_Abort+0x618>)
 800c26e:	4293      	cmp	r3, r2
 800c270:	d027      	beq.n	800c2c2 <HAL_DMA_Abort+0x58a>
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	4a37      	ldr	r2, [pc, #220]	@ (800c354 <HAL_DMA_Abort+0x61c>)
 800c278:	4293      	cmp	r3, r2
 800c27a:	d022      	beq.n	800c2c2 <HAL_DMA_Abort+0x58a>
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	4a35      	ldr	r2, [pc, #212]	@ (800c358 <HAL_DMA_Abort+0x620>)
 800c282:	4293      	cmp	r3, r2
 800c284:	d01d      	beq.n	800c2c2 <HAL_DMA_Abort+0x58a>
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	4a34      	ldr	r2, [pc, #208]	@ (800c35c <HAL_DMA_Abort+0x624>)
 800c28c:	4293      	cmp	r3, r2
 800c28e:	d018      	beq.n	800c2c2 <HAL_DMA_Abort+0x58a>
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	4a32      	ldr	r2, [pc, #200]	@ (800c360 <HAL_DMA_Abort+0x628>)
 800c296:	4293      	cmp	r3, r2
 800c298:	d013      	beq.n	800c2c2 <HAL_DMA_Abort+0x58a>
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	4a31      	ldr	r2, [pc, #196]	@ (800c364 <HAL_DMA_Abort+0x62c>)
 800c2a0:	4293      	cmp	r3, r2
 800c2a2:	d00e      	beq.n	800c2c2 <HAL_DMA_Abort+0x58a>
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	4a2f      	ldr	r2, [pc, #188]	@ (800c368 <HAL_DMA_Abort+0x630>)
 800c2aa:	4293      	cmp	r3, r2
 800c2ac:	d009      	beq.n	800c2c2 <HAL_DMA_Abort+0x58a>
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	4a2e      	ldr	r2, [pc, #184]	@ (800c36c <HAL_DMA_Abort+0x634>)
 800c2b4:	4293      	cmp	r3, r2
 800c2b6:	d004      	beq.n	800c2c2 <HAL_DMA_Abort+0x58a>
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	4a2c      	ldr	r2, [pc, #176]	@ (800c370 <HAL_DMA_Abort+0x638>)
 800c2be:	4293      	cmp	r3, r2
 800c2c0:	d101      	bne.n	800c2c6 <HAL_DMA_Abort+0x58e>
 800c2c2:	2301      	movs	r3, #1
 800c2c4:	e000      	b.n	800c2c8 <HAL_DMA_Abort+0x590>
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d015      	beq.n	800c2f8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c2d0:	687a      	ldr	r2, [r7, #4]
 800c2d2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800c2d4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d00c      	beq.n	800c2f8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c2e2:	681a      	ldr	r2, [r3, #0]
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c2e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c2ec:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c2f2:	687a      	ldr	r2, [r7, #4]
 800c2f4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800c2f6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	2201      	movs	r2, #1
 800c2fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	2200      	movs	r2, #0
 800c304:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 800c308:	2300      	movs	r3, #0
}
 800c30a:	4618      	mov	r0, r3
 800c30c:	3718      	adds	r7, #24
 800c30e:	46bd      	mov	sp, r7
 800c310:	bd80      	pop	{r7, pc}
 800c312:	bf00      	nop
 800c314:	40020010 	.word	0x40020010
 800c318:	40020028 	.word	0x40020028
 800c31c:	40020040 	.word	0x40020040
 800c320:	40020058 	.word	0x40020058
 800c324:	40020070 	.word	0x40020070
 800c328:	40020088 	.word	0x40020088
 800c32c:	400200a0 	.word	0x400200a0
 800c330:	400200b8 	.word	0x400200b8
 800c334:	40020410 	.word	0x40020410
 800c338:	40020428 	.word	0x40020428
 800c33c:	40020440 	.word	0x40020440
 800c340:	40020458 	.word	0x40020458
 800c344:	40020470 	.word	0x40020470
 800c348:	40020488 	.word	0x40020488
 800c34c:	400204a0 	.word	0x400204a0
 800c350:	400204b8 	.word	0x400204b8
 800c354:	58025408 	.word	0x58025408
 800c358:	5802541c 	.word	0x5802541c
 800c35c:	58025430 	.word	0x58025430
 800c360:	58025444 	.word	0x58025444
 800c364:	58025458 	.word	0x58025458
 800c368:	5802546c 	.word	0x5802546c
 800c36c:	58025480 	.word	0x58025480
 800c370:	58025494 	.word	0x58025494

0800c374 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800c374:	b580      	push	{r7, lr}
 800c376:	b084      	sub	sp, #16
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d101      	bne.n	800c386 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800c382:	2301      	movs	r3, #1
 800c384:	e237      	b.n	800c7f6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800c38c:	b2db      	uxtb	r3, r3
 800c38e:	2b02      	cmp	r3, #2
 800c390:	d004      	beq.n	800c39c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	2280      	movs	r2, #128	@ 0x80
 800c396:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800c398:	2301      	movs	r3, #1
 800c39a:	e22c      	b.n	800c7f6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	4a5c      	ldr	r2, [pc, #368]	@ (800c514 <HAL_DMA_Abort_IT+0x1a0>)
 800c3a2:	4293      	cmp	r3, r2
 800c3a4:	d04a      	beq.n	800c43c <HAL_DMA_Abort_IT+0xc8>
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	4a5b      	ldr	r2, [pc, #364]	@ (800c518 <HAL_DMA_Abort_IT+0x1a4>)
 800c3ac:	4293      	cmp	r3, r2
 800c3ae:	d045      	beq.n	800c43c <HAL_DMA_Abort_IT+0xc8>
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	4a59      	ldr	r2, [pc, #356]	@ (800c51c <HAL_DMA_Abort_IT+0x1a8>)
 800c3b6:	4293      	cmp	r3, r2
 800c3b8:	d040      	beq.n	800c43c <HAL_DMA_Abort_IT+0xc8>
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	4a58      	ldr	r2, [pc, #352]	@ (800c520 <HAL_DMA_Abort_IT+0x1ac>)
 800c3c0:	4293      	cmp	r3, r2
 800c3c2:	d03b      	beq.n	800c43c <HAL_DMA_Abort_IT+0xc8>
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	4a56      	ldr	r2, [pc, #344]	@ (800c524 <HAL_DMA_Abort_IT+0x1b0>)
 800c3ca:	4293      	cmp	r3, r2
 800c3cc:	d036      	beq.n	800c43c <HAL_DMA_Abort_IT+0xc8>
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	4a55      	ldr	r2, [pc, #340]	@ (800c528 <HAL_DMA_Abort_IT+0x1b4>)
 800c3d4:	4293      	cmp	r3, r2
 800c3d6:	d031      	beq.n	800c43c <HAL_DMA_Abort_IT+0xc8>
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	4a53      	ldr	r2, [pc, #332]	@ (800c52c <HAL_DMA_Abort_IT+0x1b8>)
 800c3de:	4293      	cmp	r3, r2
 800c3e0:	d02c      	beq.n	800c43c <HAL_DMA_Abort_IT+0xc8>
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	4a52      	ldr	r2, [pc, #328]	@ (800c530 <HAL_DMA_Abort_IT+0x1bc>)
 800c3e8:	4293      	cmp	r3, r2
 800c3ea:	d027      	beq.n	800c43c <HAL_DMA_Abort_IT+0xc8>
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	4a50      	ldr	r2, [pc, #320]	@ (800c534 <HAL_DMA_Abort_IT+0x1c0>)
 800c3f2:	4293      	cmp	r3, r2
 800c3f4:	d022      	beq.n	800c43c <HAL_DMA_Abort_IT+0xc8>
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	4a4f      	ldr	r2, [pc, #316]	@ (800c538 <HAL_DMA_Abort_IT+0x1c4>)
 800c3fc:	4293      	cmp	r3, r2
 800c3fe:	d01d      	beq.n	800c43c <HAL_DMA_Abort_IT+0xc8>
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	4a4d      	ldr	r2, [pc, #308]	@ (800c53c <HAL_DMA_Abort_IT+0x1c8>)
 800c406:	4293      	cmp	r3, r2
 800c408:	d018      	beq.n	800c43c <HAL_DMA_Abort_IT+0xc8>
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	4a4c      	ldr	r2, [pc, #304]	@ (800c540 <HAL_DMA_Abort_IT+0x1cc>)
 800c410:	4293      	cmp	r3, r2
 800c412:	d013      	beq.n	800c43c <HAL_DMA_Abort_IT+0xc8>
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	4a4a      	ldr	r2, [pc, #296]	@ (800c544 <HAL_DMA_Abort_IT+0x1d0>)
 800c41a:	4293      	cmp	r3, r2
 800c41c:	d00e      	beq.n	800c43c <HAL_DMA_Abort_IT+0xc8>
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	4a49      	ldr	r2, [pc, #292]	@ (800c548 <HAL_DMA_Abort_IT+0x1d4>)
 800c424:	4293      	cmp	r3, r2
 800c426:	d009      	beq.n	800c43c <HAL_DMA_Abort_IT+0xc8>
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	4a47      	ldr	r2, [pc, #284]	@ (800c54c <HAL_DMA_Abort_IT+0x1d8>)
 800c42e:	4293      	cmp	r3, r2
 800c430:	d004      	beq.n	800c43c <HAL_DMA_Abort_IT+0xc8>
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	4a46      	ldr	r2, [pc, #280]	@ (800c550 <HAL_DMA_Abort_IT+0x1dc>)
 800c438:	4293      	cmp	r3, r2
 800c43a:	d101      	bne.n	800c440 <HAL_DMA_Abort_IT+0xcc>
 800c43c:	2301      	movs	r3, #1
 800c43e:	e000      	b.n	800c442 <HAL_DMA_Abort_IT+0xce>
 800c440:	2300      	movs	r3, #0
 800c442:	2b00      	cmp	r3, #0
 800c444:	f000 8086 	beq.w	800c554 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	2204      	movs	r2, #4
 800c44c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	4a2f      	ldr	r2, [pc, #188]	@ (800c514 <HAL_DMA_Abort_IT+0x1a0>)
 800c456:	4293      	cmp	r3, r2
 800c458:	d04a      	beq.n	800c4f0 <HAL_DMA_Abort_IT+0x17c>
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	4a2e      	ldr	r2, [pc, #184]	@ (800c518 <HAL_DMA_Abort_IT+0x1a4>)
 800c460:	4293      	cmp	r3, r2
 800c462:	d045      	beq.n	800c4f0 <HAL_DMA_Abort_IT+0x17c>
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	4a2c      	ldr	r2, [pc, #176]	@ (800c51c <HAL_DMA_Abort_IT+0x1a8>)
 800c46a:	4293      	cmp	r3, r2
 800c46c:	d040      	beq.n	800c4f0 <HAL_DMA_Abort_IT+0x17c>
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	4a2b      	ldr	r2, [pc, #172]	@ (800c520 <HAL_DMA_Abort_IT+0x1ac>)
 800c474:	4293      	cmp	r3, r2
 800c476:	d03b      	beq.n	800c4f0 <HAL_DMA_Abort_IT+0x17c>
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	4a29      	ldr	r2, [pc, #164]	@ (800c524 <HAL_DMA_Abort_IT+0x1b0>)
 800c47e:	4293      	cmp	r3, r2
 800c480:	d036      	beq.n	800c4f0 <HAL_DMA_Abort_IT+0x17c>
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	4a28      	ldr	r2, [pc, #160]	@ (800c528 <HAL_DMA_Abort_IT+0x1b4>)
 800c488:	4293      	cmp	r3, r2
 800c48a:	d031      	beq.n	800c4f0 <HAL_DMA_Abort_IT+0x17c>
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	4a26      	ldr	r2, [pc, #152]	@ (800c52c <HAL_DMA_Abort_IT+0x1b8>)
 800c492:	4293      	cmp	r3, r2
 800c494:	d02c      	beq.n	800c4f0 <HAL_DMA_Abort_IT+0x17c>
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	4a25      	ldr	r2, [pc, #148]	@ (800c530 <HAL_DMA_Abort_IT+0x1bc>)
 800c49c:	4293      	cmp	r3, r2
 800c49e:	d027      	beq.n	800c4f0 <HAL_DMA_Abort_IT+0x17c>
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	4a23      	ldr	r2, [pc, #140]	@ (800c534 <HAL_DMA_Abort_IT+0x1c0>)
 800c4a6:	4293      	cmp	r3, r2
 800c4a8:	d022      	beq.n	800c4f0 <HAL_DMA_Abort_IT+0x17c>
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	4a22      	ldr	r2, [pc, #136]	@ (800c538 <HAL_DMA_Abort_IT+0x1c4>)
 800c4b0:	4293      	cmp	r3, r2
 800c4b2:	d01d      	beq.n	800c4f0 <HAL_DMA_Abort_IT+0x17c>
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	4a20      	ldr	r2, [pc, #128]	@ (800c53c <HAL_DMA_Abort_IT+0x1c8>)
 800c4ba:	4293      	cmp	r3, r2
 800c4bc:	d018      	beq.n	800c4f0 <HAL_DMA_Abort_IT+0x17c>
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	4a1f      	ldr	r2, [pc, #124]	@ (800c540 <HAL_DMA_Abort_IT+0x1cc>)
 800c4c4:	4293      	cmp	r3, r2
 800c4c6:	d013      	beq.n	800c4f0 <HAL_DMA_Abort_IT+0x17c>
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	4a1d      	ldr	r2, [pc, #116]	@ (800c544 <HAL_DMA_Abort_IT+0x1d0>)
 800c4ce:	4293      	cmp	r3, r2
 800c4d0:	d00e      	beq.n	800c4f0 <HAL_DMA_Abort_IT+0x17c>
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	4a1c      	ldr	r2, [pc, #112]	@ (800c548 <HAL_DMA_Abort_IT+0x1d4>)
 800c4d8:	4293      	cmp	r3, r2
 800c4da:	d009      	beq.n	800c4f0 <HAL_DMA_Abort_IT+0x17c>
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	4a1a      	ldr	r2, [pc, #104]	@ (800c54c <HAL_DMA_Abort_IT+0x1d8>)
 800c4e2:	4293      	cmp	r3, r2
 800c4e4:	d004      	beq.n	800c4f0 <HAL_DMA_Abort_IT+0x17c>
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	4a19      	ldr	r2, [pc, #100]	@ (800c550 <HAL_DMA_Abort_IT+0x1dc>)
 800c4ec:	4293      	cmp	r3, r2
 800c4ee:	d108      	bne.n	800c502 <HAL_DMA_Abort_IT+0x18e>
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	681a      	ldr	r2, [r3, #0]
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	f022 0201 	bic.w	r2, r2, #1
 800c4fe:	601a      	str	r2, [r3, #0]
 800c500:	e178      	b.n	800c7f4 <HAL_DMA_Abort_IT+0x480>
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	681a      	ldr	r2, [r3, #0]
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	f022 0201 	bic.w	r2, r2, #1
 800c510:	601a      	str	r2, [r3, #0]
 800c512:	e16f      	b.n	800c7f4 <HAL_DMA_Abort_IT+0x480>
 800c514:	40020010 	.word	0x40020010
 800c518:	40020028 	.word	0x40020028
 800c51c:	40020040 	.word	0x40020040
 800c520:	40020058 	.word	0x40020058
 800c524:	40020070 	.word	0x40020070
 800c528:	40020088 	.word	0x40020088
 800c52c:	400200a0 	.word	0x400200a0
 800c530:	400200b8 	.word	0x400200b8
 800c534:	40020410 	.word	0x40020410
 800c538:	40020428 	.word	0x40020428
 800c53c:	40020440 	.word	0x40020440
 800c540:	40020458 	.word	0x40020458
 800c544:	40020470 	.word	0x40020470
 800c548:	40020488 	.word	0x40020488
 800c54c:	400204a0 	.word	0x400204a0
 800c550:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	681a      	ldr	r2, [r3, #0]
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	f022 020e 	bic.w	r2, r2, #14
 800c562:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	4a6c      	ldr	r2, [pc, #432]	@ (800c71c <HAL_DMA_Abort_IT+0x3a8>)
 800c56a:	4293      	cmp	r3, r2
 800c56c:	d04a      	beq.n	800c604 <HAL_DMA_Abort_IT+0x290>
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	4a6b      	ldr	r2, [pc, #428]	@ (800c720 <HAL_DMA_Abort_IT+0x3ac>)
 800c574:	4293      	cmp	r3, r2
 800c576:	d045      	beq.n	800c604 <HAL_DMA_Abort_IT+0x290>
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	4a69      	ldr	r2, [pc, #420]	@ (800c724 <HAL_DMA_Abort_IT+0x3b0>)
 800c57e:	4293      	cmp	r3, r2
 800c580:	d040      	beq.n	800c604 <HAL_DMA_Abort_IT+0x290>
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	4a68      	ldr	r2, [pc, #416]	@ (800c728 <HAL_DMA_Abort_IT+0x3b4>)
 800c588:	4293      	cmp	r3, r2
 800c58a:	d03b      	beq.n	800c604 <HAL_DMA_Abort_IT+0x290>
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	4a66      	ldr	r2, [pc, #408]	@ (800c72c <HAL_DMA_Abort_IT+0x3b8>)
 800c592:	4293      	cmp	r3, r2
 800c594:	d036      	beq.n	800c604 <HAL_DMA_Abort_IT+0x290>
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	4a65      	ldr	r2, [pc, #404]	@ (800c730 <HAL_DMA_Abort_IT+0x3bc>)
 800c59c:	4293      	cmp	r3, r2
 800c59e:	d031      	beq.n	800c604 <HAL_DMA_Abort_IT+0x290>
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	4a63      	ldr	r2, [pc, #396]	@ (800c734 <HAL_DMA_Abort_IT+0x3c0>)
 800c5a6:	4293      	cmp	r3, r2
 800c5a8:	d02c      	beq.n	800c604 <HAL_DMA_Abort_IT+0x290>
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	4a62      	ldr	r2, [pc, #392]	@ (800c738 <HAL_DMA_Abort_IT+0x3c4>)
 800c5b0:	4293      	cmp	r3, r2
 800c5b2:	d027      	beq.n	800c604 <HAL_DMA_Abort_IT+0x290>
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	4a60      	ldr	r2, [pc, #384]	@ (800c73c <HAL_DMA_Abort_IT+0x3c8>)
 800c5ba:	4293      	cmp	r3, r2
 800c5bc:	d022      	beq.n	800c604 <HAL_DMA_Abort_IT+0x290>
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	4a5f      	ldr	r2, [pc, #380]	@ (800c740 <HAL_DMA_Abort_IT+0x3cc>)
 800c5c4:	4293      	cmp	r3, r2
 800c5c6:	d01d      	beq.n	800c604 <HAL_DMA_Abort_IT+0x290>
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	4a5d      	ldr	r2, [pc, #372]	@ (800c744 <HAL_DMA_Abort_IT+0x3d0>)
 800c5ce:	4293      	cmp	r3, r2
 800c5d0:	d018      	beq.n	800c604 <HAL_DMA_Abort_IT+0x290>
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	4a5c      	ldr	r2, [pc, #368]	@ (800c748 <HAL_DMA_Abort_IT+0x3d4>)
 800c5d8:	4293      	cmp	r3, r2
 800c5da:	d013      	beq.n	800c604 <HAL_DMA_Abort_IT+0x290>
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	4a5a      	ldr	r2, [pc, #360]	@ (800c74c <HAL_DMA_Abort_IT+0x3d8>)
 800c5e2:	4293      	cmp	r3, r2
 800c5e4:	d00e      	beq.n	800c604 <HAL_DMA_Abort_IT+0x290>
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	4a59      	ldr	r2, [pc, #356]	@ (800c750 <HAL_DMA_Abort_IT+0x3dc>)
 800c5ec:	4293      	cmp	r3, r2
 800c5ee:	d009      	beq.n	800c604 <HAL_DMA_Abort_IT+0x290>
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	4a57      	ldr	r2, [pc, #348]	@ (800c754 <HAL_DMA_Abort_IT+0x3e0>)
 800c5f6:	4293      	cmp	r3, r2
 800c5f8:	d004      	beq.n	800c604 <HAL_DMA_Abort_IT+0x290>
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	4a56      	ldr	r2, [pc, #344]	@ (800c758 <HAL_DMA_Abort_IT+0x3e4>)
 800c600:	4293      	cmp	r3, r2
 800c602:	d108      	bne.n	800c616 <HAL_DMA_Abort_IT+0x2a2>
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	681a      	ldr	r2, [r3, #0]
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	f022 0201 	bic.w	r2, r2, #1
 800c612:	601a      	str	r2, [r3, #0]
 800c614:	e007      	b.n	800c626 <HAL_DMA_Abort_IT+0x2b2>
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	681a      	ldr	r2, [r3, #0]
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	f022 0201 	bic.w	r2, r2, #1
 800c624:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	4a3c      	ldr	r2, [pc, #240]	@ (800c71c <HAL_DMA_Abort_IT+0x3a8>)
 800c62c:	4293      	cmp	r3, r2
 800c62e:	d072      	beq.n	800c716 <HAL_DMA_Abort_IT+0x3a2>
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	4a3a      	ldr	r2, [pc, #232]	@ (800c720 <HAL_DMA_Abort_IT+0x3ac>)
 800c636:	4293      	cmp	r3, r2
 800c638:	d06d      	beq.n	800c716 <HAL_DMA_Abort_IT+0x3a2>
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	4a39      	ldr	r2, [pc, #228]	@ (800c724 <HAL_DMA_Abort_IT+0x3b0>)
 800c640:	4293      	cmp	r3, r2
 800c642:	d068      	beq.n	800c716 <HAL_DMA_Abort_IT+0x3a2>
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	4a37      	ldr	r2, [pc, #220]	@ (800c728 <HAL_DMA_Abort_IT+0x3b4>)
 800c64a:	4293      	cmp	r3, r2
 800c64c:	d063      	beq.n	800c716 <HAL_DMA_Abort_IT+0x3a2>
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	4a36      	ldr	r2, [pc, #216]	@ (800c72c <HAL_DMA_Abort_IT+0x3b8>)
 800c654:	4293      	cmp	r3, r2
 800c656:	d05e      	beq.n	800c716 <HAL_DMA_Abort_IT+0x3a2>
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	4a34      	ldr	r2, [pc, #208]	@ (800c730 <HAL_DMA_Abort_IT+0x3bc>)
 800c65e:	4293      	cmp	r3, r2
 800c660:	d059      	beq.n	800c716 <HAL_DMA_Abort_IT+0x3a2>
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	4a33      	ldr	r2, [pc, #204]	@ (800c734 <HAL_DMA_Abort_IT+0x3c0>)
 800c668:	4293      	cmp	r3, r2
 800c66a:	d054      	beq.n	800c716 <HAL_DMA_Abort_IT+0x3a2>
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	4a31      	ldr	r2, [pc, #196]	@ (800c738 <HAL_DMA_Abort_IT+0x3c4>)
 800c672:	4293      	cmp	r3, r2
 800c674:	d04f      	beq.n	800c716 <HAL_DMA_Abort_IT+0x3a2>
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	4a30      	ldr	r2, [pc, #192]	@ (800c73c <HAL_DMA_Abort_IT+0x3c8>)
 800c67c:	4293      	cmp	r3, r2
 800c67e:	d04a      	beq.n	800c716 <HAL_DMA_Abort_IT+0x3a2>
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	4a2e      	ldr	r2, [pc, #184]	@ (800c740 <HAL_DMA_Abort_IT+0x3cc>)
 800c686:	4293      	cmp	r3, r2
 800c688:	d045      	beq.n	800c716 <HAL_DMA_Abort_IT+0x3a2>
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	4a2d      	ldr	r2, [pc, #180]	@ (800c744 <HAL_DMA_Abort_IT+0x3d0>)
 800c690:	4293      	cmp	r3, r2
 800c692:	d040      	beq.n	800c716 <HAL_DMA_Abort_IT+0x3a2>
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	4a2b      	ldr	r2, [pc, #172]	@ (800c748 <HAL_DMA_Abort_IT+0x3d4>)
 800c69a:	4293      	cmp	r3, r2
 800c69c:	d03b      	beq.n	800c716 <HAL_DMA_Abort_IT+0x3a2>
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	4a2a      	ldr	r2, [pc, #168]	@ (800c74c <HAL_DMA_Abort_IT+0x3d8>)
 800c6a4:	4293      	cmp	r3, r2
 800c6a6:	d036      	beq.n	800c716 <HAL_DMA_Abort_IT+0x3a2>
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	4a28      	ldr	r2, [pc, #160]	@ (800c750 <HAL_DMA_Abort_IT+0x3dc>)
 800c6ae:	4293      	cmp	r3, r2
 800c6b0:	d031      	beq.n	800c716 <HAL_DMA_Abort_IT+0x3a2>
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	4a27      	ldr	r2, [pc, #156]	@ (800c754 <HAL_DMA_Abort_IT+0x3e0>)
 800c6b8:	4293      	cmp	r3, r2
 800c6ba:	d02c      	beq.n	800c716 <HAL_DMA_Abort_IT+0x3a2>
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	4a25      	ldr	r2, [pc, #148]	@ (800c758 <HAL_DMA_Abort_IT+0x3e4>)
 800c6c2:	4293      	cmp	r3, r2
 800c6c4:	d027      	beq.n	800c716 <HAL_DMA_Abort_IT+0x3a2>
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	4a24      	ldr	r2, [pc, #144]	@ (800c75c <HAL_DMA_Abort_IT+0x3e8>)
 800c6cc:	4293      	cmp	r3, r2
 800c6ce:	d022      	beq.n	800c716 <HAL_DMA_Abort_IT+0x3a2>
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	4a22      	ldr	r2, [pc, #136]	@ (800c760 <HAL_DMA_Abort_IT+0x3ec>)
 800c6d6:	4293      	cmp	r3, r2
 800c6d8:	d01d      	beq.n	800c716 <HAL_DMA_Abort_IT+0x3a2>
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	4a21      	ldr	r2, [pc, #132]	@ (800c764 <HAL_DMA_Abort_IT+0x3f0>)
 800c6e0:	4293      	cmp	r3, r2
 800c6e2:	d018      	beq.n	800c716 <HAL_DMA_Abort_IT+0x3a2>
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	4a1f      	ldr	r2, [pc, #124]	@ (800c768 <HAL_DMA_Abort_IT+0x3f4>)
 800c6ea:	4293      	cmp	r3, r2
 800c6ec:	d013      	beq.n	800c716 <HAL_DMA_Abort_IT+0x3a2>
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	4a1e      	ldr	r2, [pc, #120]	@ (800c76c <HAL_DMA_Abort_IT+0x3f8>)
 800c6f4:	4293      	cmp	r3, r2
 800c6f6:	d00e      	beq.n	800c716 <HAL_DMA_Abort_IT+0x3a2>
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	4a1c      	ldr	r2, [pc, #112]	@ (800c770 <HAL_DMA_Abort_IT+0x3fc>)
 800c6fe:	4293      	cmp	r3, r2
 800c700:	d009      	beq.n	800c716 <HAL_DMA_Abort_IT+0x3a2>
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	4a1b      	ldr	r2, [pc, #108]	@ (800c774 <HAL_DMA_Abort_IT+0x400>)
 800c708:	4293      	cmp	r3, r2
 800c70a:	d004      	beq.n	800c716 <HAL_DMA_Abort_IT+0x3a2>
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	4a19      	ldr	r2, [pc, #100]	@ (800c778 <HAL_DMA_Abort_IT+0x404>)
 800c712:	4293      	cmp	r3, r2
 800c714:	d132      	bne.n	800c77c <HAL_DMA_Abort_IT+0x408>
 800c716:	2301      	movs	r3, #1
 800c718:	e031      	b.n	800c77e <HAL_DMA_Abort_IT+0x40a>
 800c71a:	bf00      	nop
 800c71c:	40020010 	.word	0x40020010
 800c720:	40020028 	.word	0x40020028
 800c724:	40020040 	.word	0x40020040
 800c728:	40020058 	.word	0x40020058
 800c72c:	40020070 	.word	0x40020070
 800c730:	40020088 	.word	0x40020088
 800c734:	400200a0 	.word	0x400200a0
 800c738:	400200b8 	.word	0x400200b8
 800c73c:	40020410 	.word	0x40020410
 800c740:	40020428 	.word	0x40020428
 800c744:	40020440 	.word	0x40020440
 800c748:	40020458 	.word	0x40020458
 800c74c:	40020470 	.word	0x40020470
 800c750:	40020488 	.word	0x40020488
 800c754:	400204a0 	.word	0x400204a0
 800c758:	400204b8 	.word	0x400204b8
 800c75c:	58025408 	.word	0x58025408
 800c760:	5802541c 	.word	0x5802541c
 800c764:	58025430 	.word	0x58025430
 800c768:	58025444 	.word	0x58025444
 800c76c:	58025458 	.word	0x58025458
 800c770:	5802546c 	.word	0x5802546c
 800c774:	58025480 	.word	0x58025480
 800c778:	58025494 	.word	0x58025494
 800c77c:	2300      	movs	r3, #0
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d028      	beq.n	800c7d4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c786:	681a      	ldr	r2, [r3, #0]
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c78c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c790:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c796:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c79c:	f003 031f 	and.w	r3, r3, #31
 800c7a0:	2201      	movs	r2, #1
 800c7a2:	409a      	lsls	r2, r3
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c7ac:	687a      	ldr	r2, [r7, #4]
 800c7ae:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800c7b0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d00c      	beq.n	800c7d4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c7be:	681a      	ldr	r2, [r3, #0]
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c7c4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c7c8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c7ce:	687a      	ldr	r2, [r7, #4]
 800c7d0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800c7d2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	2201      	movs	r2, #1
 800c7d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	2200      	movs	r2, #0
 800c7e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d003      	beq.n	800c7f4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c7f0:	6878      	ldr	r0, [r7, #4]
 800c7f2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800c7f4:	2300      	movs	r3, #0
}
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	3710      	adds	r7, #16
 800c7fa:	46bd      	mov	sp, r7
 800c7fc:	bd80      	pop	{r7, pc}
 800c7fe:	bf00      	nop

0800c800 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800c800:	b580      	push	{r7, lr}
 800c802:	b08a      	sub	sp, #40	@ 0x28
 800c804:	af00      	add	r7, sp, #0
 800c806:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800c808:	2300      	movs	r3, #0
 800c80a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800c80c:	4b67      	ldr	r3, [pc, #412]	@ (800c9ac <HAL_DMA_IRQHandler+0x1ac>)
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	4a67      	ldr	r2, [pc, #412]	@ (800c9b0 <HAL_DMA_IRQHandler+0x1b0>)
 800c812:	fba2 2303 	umull	r2, r3, r2, r3
 800c816:	0a9b      	lsrs	r3, r3, #10
 800c818:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c81e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c824:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800c826:	6a3b      	ldr	r3, [r7, #32]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800c82c:	69fb      	ldr	r3, [r7, #28]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	4a5f      	ldr	r2, [pc, #380]	@ (800c9b4 <HAL_DMA_IRQHandler+0x1b4>)
 800c838:	4293      	cmp	r3, r2
 800c83a:	d04a      	beq.n	800c8d2 <HAL_DMA_IRQHandler+0xd2>
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	4a5d      	ldr	r2, [pc, #372]	@ (800c9b8 <HAL_DMA_IRQHandler+0x1b8>)
 800c842:	4293      	cmp	r3, r2
 800c844:	d045      	beq.n	800c8d2 <HAL_DMA_IRQHandler+0xd2>
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	4a5c      	ldr	r2, [pc, #368]	@ (800c9bc <HAL_DMA_IRQHandler+0x1bc>)
 800c84c:	4293      	cmp	r3, r2
 800c84e:	d040      	beq.n	800c8d2 <HAL_DMA_IRQHandler+0xd2>
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	4a5a      	ldr	r2, [pc, #360]	@ (800c9c0 <HAL_DMA_IRQHandler+0x1c0>)
 800c856:	4293      	cmp	r3, r2
 800c858:	d03b      	beq.n	800c8d2 <HAL_DMA_IRQHandler+0xd2>
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	4a59      	ldr	r2, [pc, #356]	@ (800c9c4 <HAL_DMA_IRQHandler+0x1c4>)
 800c860:	4293      	cmp	r3, r2
 800c862:	d036      	beq.n	800c8d2 <HAL_DMA_IRQHandler+0xd2>
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	4a57      	ldr	r2, [pc, #348]	@ (800c9c8 <HAL_DMA_IRQHandler+0x1c8>)
 800c86a:	4293      	cmp	r3, r2
 800c86c:	d031      	beq.n	800c8d2 <HAL_DMA_IRQHandler+0xd2>
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	4a56      	ldr	r2, [pc, #344]	@ (800c9cc <HAL_DMA_IRQHandler+0x1cc>)
 800c874:	4293      	cmp	r3, r2
 800c876:	d02c      	beq.n	800c8d2 <HAL_DMA_IRQHandler+0xd2>
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	4a54      	ldr	r2, [pc, #336]	@ (800c9d0 <HAL_DMA_IRQHandler+0x1d0>)
 800c87e:	4293      	cmp	r3, r2
 800c880:	d027      	beq.n	800c8d2 <HAL_DMA_IRQHandler+0xd2>
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	4a53      	ldr	r2, [pc, #332]	@ (800c9d4 <HAL_DMA_IRQHandler+0x1d4>)
 800c888:	4293      	cmp	r3, r2
 800c88a:	d022      	beq.n	800c8d2 <HAL_DMA_IRQHandler+0xd2>
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	4a51      	ldr	r2, [pc, #324]	@ (800c9d8 <HAL_DMA_IRQHandler+0x1d8>)
 800c892:	4293      	cmp	r3, r2
 800c894:	d01d      	beq.n	800c8d2 <HAL_DMA_IRQHandler+0xd2>
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	4a50      	ldr	r2, [pc, #320]	@ (800c9dc <HAL_DMA_IRQHandler+0x1dc>)
 800c89c:	4293      	cmp	r3, r2
 800c89e:	d018      	beq.n	800c8d2 <HAL_DMA_IRQHandler+0xd2>
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	4a4e      	ldr	r2, [pc, #312]	@ (800c9e0 <HAL_DMA_IRQHandler+0x1e0>)
 800c8a6:	4293      	cmp	r3, r2
 800c8a8:	d013      	beq.n	800c8d2 <HAL_DMA_IRQHandler+0xd2>
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	4a4d      	ldr	r2, [pc, #308]	@ (800c9e4 <HAL_DMA_IRQHandler+0x1e4>)
 800c8b0:	4293      	cmp	r3, r2
 800c8b2:	d00e      	beq.n	800c8d2 <HAL_DMA_IRQHandler+0xd2>
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	4a4b      	ldr	r2, [pc, #300]	@ (800c9e8 <HAL_DMA_IRQHandler+0x1e8>)
 800c8ba:	4293      	cmp	r3, r2
 800c8bc:	d009      	beq.n	800c8d2 <HAL_DMA_IRQHandler+0xd2>
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	4a4a      	ldr	r2, [pc, #296]	@ (800c9ec <HAL_DMA_IRQHandler+0x1ec>)
 800c8c4:	4293      	cmp	r3, r2
 800c8c6:	d004      	beq.n	800c8d2 <HAL_DMA_IRQHandler+0xd2>
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	4a48      	ldr	r2, [pc, #288]	@ (800c9f0 <HAL_DMA_IRQHandler+0x1f0>)
 800c8ce:	4293      	cmp	r3, r2
 800c8d0:	d101      	bne.n	800c8d6 <HAL_DMA_IRQHandler+0xd6>
 800c8d2:	2301      	movs	r3, #1
 800c8d4:	e000      	b.n	800c8d8 <HAL_DMA_IRQHandler+0xd8>
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	f000 842b 	beq.w	800d134 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c8e2:	f003 031f 	and.w	r3, r3, #31
 800c8e6:	2208      	movs	r2, #8
 800c8e8:	409a      	lsls	r2, r3
 800c8ea:	69bb      	ldr	r3, [r7, #24]
 800c8ec:	4013      	ands	r3, r2
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	f000 80a2 	beq.w	800ca38 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	4a2e      	ldr	r2, [pc, #184]	@ (800c9b4 <HAL_DMA_IRQHandler+0x1b4>)
 800c8fa:	4293      	cmp	r3, r2
 800c8fc:	d04a      	beq.n	800c994 <HAL_DMA_IRQHandler+0x194>
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	4a2d      	ldr	r2, [pc, #180]	@ (800c9b8 <HAL_DMA_IRQHandler+0x1b8>)
 800c904:	4293      	cmp	r3, r2
 800c906:	d045      	beq.n	800c994 <HAL_DMA_IRQHandler+0x194>
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	4a2b      	ldr	r2, [pc, #172]	@ (800c9bc <HAL_DMA_IRQHandler+0x1bc>)
 800c90e:	4293      	cmp	r3, r2
 800c910:	d040      	beq.n	800c994 <HAL_DMA_IRQHandler+0x194>
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	4a2a      	ldr	r2, [pc, #168]	@ (800c9c0 <HAL_DMA_IRQHandler+0x1c0>)
 800c918:	4293      	cmp	r3, r2
 800c91a:	d03b      	beq.n	800c994 <HAL_DMA_IRQHandler+0x194>
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	4a28      	ldr	r2, [pc, #160]	@ (800c9c4 <HAL_DMA_IRQHandler+0x1c4>)
 800c922:	4293      	cmp	r3, r2
 800c924:	d036      	beq.n	800c994 <HAL_DMA_IRQHandler+0x194>
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	4a27      	ldr	r2, [pc, #156]	@ (800c9c8 <HAL_DMA_IRQHandler+0x1c8>)
 800c92c:	4293      	cmp	r3, r2
 800c92e:	d031      	beq.n	800c994 <HAL_DMA_IRQHandler+0x194>
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	4a25      	ldr	r2, [pc, #148]	@ (800c9cc <HAL_DMA_IRQHandler+0x1cc>)
 800c936:	4293      	cmp	r3, r2
 800c938:	d02c      	beq.n	800c994 <HAL_DMA_IRQHandler+0x194>
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	4a24      	ldr	r2, [pc, #144]	@ (800c9d0 <HAL_DMA_IRQHandler+0x1d0>)
 800c940:	4293      	cmp	r3, r2
 800c942:	d027      	beq.n	800c994 <HAL_DMA_IRQHandler+0x194>
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	4a22      	ldr	r2, [pc, #136]	@ (800c9d4 <HAL_DMA_IRQHandler+0x1d4>)
 800c94a:	4293      	cmp	r3, r2
 800c94c:	d022      	beq.n	800c994 <HAL_DMA_IRQHandler+0x194>
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	4a21      	ldr	r2, [pc, #132]	@ (800c9d8 <HAL_DMA_IRQHandler+0x1d8>)
 800c954:	4293      	cmp	r3, r2
 800c956:	d01d      	beq.n	800c994 <HAL_DMA_IRQHandler+0x194>
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	4a1f      	ldr	r2, [pc, #124]	@ (800c9dc <HAL_DMA_IRQHandler+0x1dc>)
 800c95e:	4293      	cmp	r3, r2
 800c960:	d018      	beq.n	800c994 <HAL_DMA_IRQHandler+0x194>
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	4a1e      	ldr	r2, [pc, #120]	@ (800c9e0 <HAL_DMA_IRQHandler+0x1e0>)
 800c968:	4293      	cmp	r3, r2
 800c96a:	d013      	beq.n	800c994 <HAL_DMA_IRQHandler+0x194>
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	4a1c      	ldr	r2, [pc, #112]	@ (800c9e4 <HAL_DMA_IRQHandler+0x1e4>)
 800c972:	4293      	cmp	r3, r2
 800c974:	d00e      	beq.n	800c994 <HAL_DMA_IRQHandler+0x194>
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	4a1b      	ldr	r2, [pc, #108]	@ (800c9e8 <HAL_DMA_IRQHandler+0x1e8>)
 800c97c:	4293      	cmp	r3, r2
 800c97e:	d009      	beq.n	800c994 <HAL_DMA_IRQHandler+0x194>
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	4a19      	ldr	r2, [pc, #100]	@ (800c9ec <HAL_DMA_IRQHandler+0x1ec>)
 800c986:	4293      	cmp	r3, r2
 800c988:	d004      	beq.n	800c994 <HAL_DMA_IRQHandler+0x194>
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	4a18      	ldr	r2, [pc, #96]	@ (800c9f0 <HAL_DMA_IRQHandler+0x1f0>)
 800c990:	4293      	cmp	r3, r2
 800c992:	d12f      	bne.n	800c9f4 <HAL_DMA_IRQHandler+0x1f4>
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	f003 0304 	and.w	r3, r3, #4
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	bf14      	ite	ne
 800c9a2:	2301      	movne	r3, #1
 800c9a4:	2300      	moveq	r3, #0
 800c9a6:	b2db      	uxtb	r3, r3
 800c9a8:	e02e      	b.n	800ca08 <HAL_DMA_IRQHandler+0x208>
 800c9aa:	bf00      	nop
 800c9ac:	24000004 	.word	0x24000004
 800c9b0:	1b4e81b5 	.word	0x1b4e81b5
 800c9b4:	40020010 	.word	0x40020010
 800c9b8:	40020028 	.word	0x40020028
 800c9bc:	40020040 	.word	0x40020040
 800c9c0:	40020058 	.word	0x40020058
 800c9c4:	40020070 	.word	0x40020070
 800c9c8:	40020088 	.word	0x40020088
 800c9cc:	400200a0 	.word	0x400200a0
 800c9d0:	400200b8 	.word	0x400200b8
 800c9d4:	40020410 	.word	0x40020410
 800c9d8:	40020428 	.word	0x40020428
 800c9dc:	40020440 	.word	0x40020440
 800c9e0:	40020458 	.word	0x40020458
 800c9e4:	40020470 	.word	0x40020470
 800c9e8:	40020488 	.word	0x40020488
 800c9ec:	400204a0 	.word	0x400204a0
 800c9f0:	400204b8 	.word	0x400204b8
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	f003 0308 	and.w	r3, r3, #8
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	bf14      	ite	ne
 800ca02:	2301      	movne	r3, #1
 800ca04:	2300      	moveq	r3, #0
 800ca06:	b2db      	uxtb	r3, r3
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d015      	beq.n	800ca38 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	681a      	ldr	r2, [r3, #0]
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	f022 0204 	bic.w	r2, r2, #4
 800ca1a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ca20:	f003 031f 	and.w	r3, r3, #31
 800ca24:	2208      	movs	r2, #8
 800ca26:	409a      	lsls	r2, r3
 800ca28:	6a3b      	ldr	r3, [r7, #32]
 800ca2a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ca30:	f043 0201 	orr.w	r2, r3, #1
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ca3c:	f003 031f 	and.w	r3, r3, #31
 800ca40:	69ba      	ldr	r2, [r7, #24]
 800ca42:	fa22 f303 	lsr.w	r3, r2, r3
 800ca46:	f003 0301 	and.w	r3, r3, #1
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d06e      	beq.n	800cb2c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	4a69      	ldr	r2, [pc, #420]	@ (800cbf8 <HAL_DMA_IRQHandler+0x3f8>)
 800ca54:	4293      	cmp	r3, r2
 800ca56:	d04a      	beq.n	800caee <HAL_DMA_IRQHandler+0x2ee>
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	4a67      	ldr	r2, [pc, #412]	@ (800cbfc <HAL_DMA_IRQHandler+0x3fc>)
 800ca5e:	4293      	cmp	r3, r2
 800ca60:	d045      	beq.n	800caee <HAL_DMA_IRQHandler+0x2ee>
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	4a66      	ldr	r2, [pc, #408]	@ (800cc00 <HAL_DMA_IRQHandler+0x400>)
 800ca68:	4293      	cmp	r3, r2
 800ca6a:	d040      	beq.n	800caee <HAL_DMA_IRQHandler+0x2ee>
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	4a64      	ldr	r2, [pc, #400]	@ (800cc04 <HAL_DMA_IRQHandler+0x404>)
 800ca72:	4293      	cmp	r3, r2
 800ca74:	d03b      	beq.n	800caee <HAL_DMA_IRQHandler+0x2ee>
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	4a63      	ldr	r2, [pc, #396]	@ (800cc08 <HAL_DMA_IRQHandler+0x408>)
 800ca7c:	4293      	cmp	r3, r2
 800ca7e:	d036      	beq.n	800caee <HAL_DMA_IRQHandler+0x2ee>
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	4a61      	ldr	r2, [pc, #388]	@ (800cc0c <HAL_DMA_IRQHandler+0x40c>)
 800ca86:	4293      	cmp	r3, r2
 800ca88:	d031      	beq.n	800caee <HAL_DMA_IRQHandler+0x2ee>
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	4a60      	ldr	r2, [pc, #384]	@ (800cc10 <HAL_DMA_IRQHandler+0x410>)
 800ca90:	4293      	cmp	r3, r2
 800ca92:	d02c      	beq.n	800caee <HAL_DMA_IRQHandler+0x2ee>
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	4a5e      	ldr	r2, [pc, #376]	@ (800cc14 <HAL_DMA_IRQHandler+0x414>)
 800ca9a:	4293      	cmp	r3, r2
 800ca9c:	d027      	beq.n	800caee <HAL_DMA_IRQHandler+0x2ee>
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	4a5d      	ldr	r2, [pc, #372]	@ (800cc18 <HAL_DMA_IRQHandler+0x418>)
 800caa4:	4293      	cmp	r3, r2
 800caa6:	d022      	beq.n	800caee <HAL_DMA_IRQHandler+0x2ee>
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	4a5b      	ldr	r2, [pc, #364]	@ (800cc1c <HAL_DMA_IRQHandler+0x41c>)
 800caae:	4293      	cmp	r3, r2
 800cab0:	d01d      	beq.n	800caee <HAL_DMA_IRQHandler+0x2ee>
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	4a5a      	ldr	r2, [pc, #360]	@ (800cc20 <HAL_DMA_IRQHandler+0x420>)
 800cab8:	4293      	cmp	r3, r2
 800caba:	d018      	beq.n	800caee <HAL_DMA_IRQHandler+0x2ee>
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	4a58      	ldr	r2, [pc, #352]	@ (800cc24 <HAL_DMA_IRQHandler+0x424>)
 800cac2:	4293      	cmp	r3, r2
 800cac4:	d013      	beq.n	800caee <HAL_DMA_IRQHandler+0x2ee>
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	4a57      	ldr	r2, [pc, #348]	@ (800cc28 <HAL_DMA_IRQHandler+0x428>)
 800cacc:	4293      	cmp	r3, r2
 800cace:	d00e      	beq.n	800caee <HAL_DMA_IRQHandler+0x2ee>
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	4a55      	ldr	r2, [pc, #340]	@ (800cc2c <HAL_DMA_IRQHandler+0x42c>)
 800cad6:	4293      	cmp	r3, r2
 800cad8:	d009      	beq.n	800caee <HAL_DMA_IRQHandler+0x2ee>
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	4a54      	ldr	r2, [pc, #336]	@ (800cc30 <HAL_DMA_IRQHandler+0x430>)
 800cae0:	4293      	cmp	r3, r2
 800cae2:	d004      	beq.n	800caee <HAL_DMA_IRQHandler+0x2ee>
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	4a52      	ldr	r2, [pc, #328]	@ (800cc34 <HAL_DMA_IRQHandler+0x434>)
 800caea:	4293      	cmp	r3, r2
 800caec:	d10a      	bne.n	800cb04 <HAL_DMA_IRQHandler+0x304>
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	695b      	ldr	r3, [r3, #20]
 800caf4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	bf14      	ite	ne
 800cafc:	2301      	movne	r3, #1
 800cafe:	2300      	moveq	r3, #0
 800cb00:	b2db      	uxtb	r3, r3
 800cb02:	e003      	b.n	800cb0c <HAL_DMA_IRQHandler+0x30c>
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d00d      	beq.n	800cb2c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cb14:	f003 031f 	and.w	r3, r3, #31
 800cb18:	2201      	movs	r2, #1
 800cb1a:	409a      	lsls	r2, r3
 800cb1c:	6a3b      	ldr	r3, [r7, #32]
 800cb1e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cb24:	f043 0202 	orr.w	r2, r3, #2
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cb30:	f003 031f 	and.w	r3, r3, #31
 800cb34:	2204      	movs	r2, #4
 800cb36:	409a      	lsls	r2, r3
 800cb38:	69bb      	ldr	r3, [r7, #24]
 800cb3a:	4013      	ands	r3, r2
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	f000 808f 	beq.w	800cc60 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	4a2c      	ldr	r2, [pc, #176]	@ (800cbf8 <HAL_DMA_IRQHandler+0x3f8>)
 800cb48:	4293      	cmp	r3, r2
 800cb4a:	d04a      	beq.n	800cbe2 <HAL_DMA_IRQHandler+0x3e2>
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	4a2a      	ldr	r2, [pc, #168]	@ (800cbfc <HAL_DMA_IRQHandler+0x3fc>)
 800cb52:	4293      	cmp	r3, r2
 800cb54:	d045      	beq.n	800cbe2 <HAL_DMA_IRQHandler+0x3e2>
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	4a29      	ldr	r2, [pc, #164]	@ (800cc00 <HAL_DMA_IRQHandler+0x400>)
 800cb5c:	4293      	cmp	r3, r2
 800cb5e:	d040      	beq.n	800cbe2 <HAL_DMA_IRQHandler+0x3e2>
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	4a27      	ldr	r2, [pc, #156]	@ (800cc04 <HAL_DMA_IRQHandler+0x404>)
 800cb66:	4293      	cmp	r3, r2
 800cb68:	d03b      	beq.n	800cbe2 <HAL_DMA_IRQHandler+0x3e2>
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	4a26      	ldr	r2, [pc, #152]	@ (800cc08 <HAL_DMA_IRQHandler+0x408>)
 800cb70:	4293      	cmp	r3, r2
 800cb72:	d036      	beq.n	800cbe2 <HAL_DMA_IRQHandler+0x3e2>
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	4a24      	ldr	r2, [pc, #144]	@ (800cc0c <HAL_DMA_IRQHandler+0x40c>)
 800cb7a:	4293      	cmp	r3, r2
 800cb7c:	d031      	beq.n	800cbe2 <HAL_DMA_IRQHandler+0x3e2>
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	4a23      	ldr	r2, [pc, #140]	@ (800cc10 <HAL_DMA_IRQHandler+0x410>)
 800cb84:	4293      	cmp	r3, r2
 800cb86:	d02c      	beq.n	800cbe2 <HAL_DMA_IRQHandler+0x3e2>
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	4a21      	ldr	r2, [pc, #132]	@ (800cc14 <HAL_DMA_IRQHandler+0x414>)
 800cb8e:	4293      	cmp	r3, r2
 800cb90:	d027      	beq.n	800cbe2 <HAL_DMA_IRQHandler+0x3e2>
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	4a20      	ldr	r2, [pc, #128]	@ (800cc18 <HAL_DMA_IRQHandler+0x418>)
 800cb98:	4293      	cmp	r3, r2
 800cb9a:	d022      	beq.n	800cbe2 <HAL_DMA_IRQHandler+0x3e2>
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	4a1e      	ldr	r2, [pc, #120]	@ (800cc1c <HAL_DMA_IRQHandler+0x41c>)
 800cba2:	4293      	cmp	r3, r2
 800cba4:	d01d      	beq.n	800cbe2 <HAL_DMA_IRQHandler+0x3e2>
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	4a1d      	ldr	r2, [pc, #116]	@ (800cc20 <HAL_DMA_IRQHandler+0x420>)
 800cbac:	4293      	cmp	r3, r2
 800cbae:	d018      	beq.n	800cbe2 <HAL_DMA_IRQHandler+0x3e2>
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	4a1b      	ldr	r2, [pc, #108]	@ (800cc24 <HAL_DMA_IRQHandler+0x424>)
 800cbb6:	4293      	cmp	r3, r2
 800cbb8:	d013      	beq.n	800cbe2 <HAL_DMA_IRQHandler+0x3e2>
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	4a1a      	ldr	r2, [pc, #104]	@ (800cc28 <HAL_DMA_IRQHandler+0x428>)
 800cbc0:	4293      	cmp	r3, r2
 800cbc2:	d00e      	beq.n	800cbe2 <HAL_DMA_IRQHandler+0x3e2>
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	4a18      	ldr	r2, [pc, #96]	@ (800cc2c <HAL_DMA_IRQHandler+0x42c>)
 800cbca:	4293      	cmp	r3, r2
 800cbcc:	d009      	beq.n	800cbe2 <HAL_DMA_IRQHandler+0x3e2>
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	4a17      	ldr	r2, [pc, #92]	@ (800cc30 <HAL_DMA_IRQHandler+0x430>)
 800cbd4:	4293      	cmp	r3, r2
 800cbd6:	d004      	beq.n	800cbe2 <HAL_DMA_IRQHandler+0x3e2>
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	4a15      	ldr	r2, [pc, #84]	@ (800cc34 <HAL_DMA_IRQHandler+0x434>)
 800cbde:	4293      	cmp	r3, r2
 800cbe0:	d12a      	bne.n	800cc38 <HAL_DMA_IRQHandler+0x438>
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	f003 0302 	and.w	r3, r3, #2
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	bf14      	ite	ne
 800cbf0:	2301      	movne	r3, #1
 800cbf2:	2300      	moveq	r3, #0
 800cbf4:	b2db      	uxtb	r3, r3
 800cbf6:	e023      	b.n	800cc40 <HAL_DMA_IRQHandler+0x440>
 800cbf8:	40020010 	.word	0x40020010
 800cbfc:	40020028 	.word	0x40020028
 800cc00:	40020040 	.word	0x40020040
 800cc04:	40020058 	.word	0x40020058
 800cc08:	40020070 	.word	0x40020070
 800cc0c:	40020088 	.word	0x40020088
 800cc10:	400200a0 	.word	0x400200a0
 800cc14:	400200b8 	.word	0x400200b8
 800cc18:	40020410 	.word	0x40020410
 800cc1c:	40020428 	.word	0x40020428
 800cc20:	40020440 	.word	0x40020440
 800cc24:	40020458 	.word	0x40020458
 800cc28:	40020470 	.word	0x40020470
 800cc2c:	40020488 	.word	0x40020488
 800cc30:	400204a0 	.word	0x400204a0
 800cc34:	400204b8 	.word	0x400204b8
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	2300      	movs	r3, #0
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d00d      	beq.n	800cc60 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cc48:	f003 031f 	and.w	r3, r3, #31
 800cc4c:	2204      	movs	r2, #4
 800cc4e:	409a      	lsls	r2, r3
 800cc50:	6a3b      	ldr	r3, [r7, #32]
 800cc52:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cc58:	f043 0204 	orr.w	r2, r3, #4
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cc64:	f003 031f 	and.w	r3, r3, #31
 800cc68:	2210      	movs	r2, #16
 800cc6a:	409a      	lsls	r2, r3
 800cc6c:	69bb      	ldr	r3, [r7, #24]
 800cc6e:	4013      	ands	r3, r2
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	f000 80a6 	beq.w	800cdc2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	4a85      	ldr	r2, [pc, #532]	@ (800ce90 <HAL_DMA_IRQHandler+0x690>)
 800cc7c:	4293      	cmp	r3, r2
 800cc7e:	d04a      	beq.n	800cd16 <HAL_DMA_IRQHandler+0x516>
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	4a83      	ldr	r2, [pc, #524]	@ (800ce94 <HAL_DMA_IRQHandler+0x694>)
 800cc86:	4293      	cmp	r3, r2
 800cc88:	d045      	beq.n	800cd16 <HAL_DMA_IRQHandler+0x516>
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	4a82      	ldr	r2, [pc, #520]	@ (800ce98 <HAL_DMA_IRQHandler+0x698>)
 800cc90:	4293      	cmp	r3, r2
 800cc92:	d040      	beq.n	800cd16 <HAL_DMA_IRQHandler+0x516>
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	4a80      	ldr	r2, [pc, #512]	@ (800ce9c <HAL_DMA_IRQHandler+0x69c>)
 800cc9a:	4293      	cmp	r3, r2
 800cc9c:	d03b      	beq.n	800cd16 <HAL_DMA_IRQHandler+0x516>
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	4a7f      	ldr	r2, [pc, #508]	@ (800cea0 <HAL_DMA_IRQHandler+0x6a0>)
 800cca4:	4293      	cmp	r3, r2
 800cca6:	d036      	beq.n	800cd16 <HAL_DMA_IRQHandler+0x516>
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	4a7d      	ldr	r2, [pc, #500]	@ (800cea4 <HAL_DMA_IRQHandler+0x6a4>)
 800ccae:	4293      	cmp	r3, r2
 800ccb0:	d031      	beq.n	800cd16 <HAL_DMA_IRQHandler+0x516>
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	4a7c      	ldr	r2, [pc, #496]	@ (800cea8 <HAL_DMA_IRQHandler+0x6a8>)
 800ccb8:	4293      	cmp	r3, r2
 800ccba:	d02c      	beq.n	800cd16 <HAL_DMA_IRQHandler+0x516>
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	4a7a      	ldr	r2, [pc, #488]	@ (800ceac <HAL_DMA_IRQHandler+0x6ac>)
 800ccc2:	4293      	cmp	r3, r2
 800ccc4:	d027      	beq.n	800cd16 <HAL_DMA_IRQHandler+0x516>
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	4a79      	ldr	r2, [pc, #484]	@ (800ceb0 <HAL_DMA_IRQHandler+0x6b0>)
 800cccc:	4293      	cmp	r3, r2
 800ccce:	d022      	beq.n	800cd16 <HAL_DMA_IRQHandler+0x516>
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	4a77      	ldr	r2, [pc, #476]	@ (800ceb4 <HAL_DMA_IRQHandler+0x6b4>)
 800ccd6:	4293      	cmp	r3, r2
 800ccd8:	d01d      	beq.n	800cd16 <HAL_DMA_IRQHandler+0x516>
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	4a76      	ldr	r2, [pc, #472]	@ (800ceb8 <HAL_DMA_IRQHandler+0x6b8>)
 800cce0:	4293      	cmp	r3, r2
 800cce2:	d018      	beq.n	800cd16 <HAL_DMA_IRQHandler+0x516>
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	4a74      	ldr	r2, [pc, #464]	@ (800cebc <HAL_DMA_IRQHandler+0x6bc>)
 800ccea:	4293      	cmp	r3, r2
 800ccec:	d013      	beq.n	800cd16 <HAL_DMA_IRQHandler+0x516>
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	4a73      	ldr	r2, [pc, #460]	@ (800cec0 <HAL_DMA_IRQHandler+0x6c0>)
 800ccf4:	4293      	cmp	r3, r2
 800ccf6:	d00e      	beq.n	800cd16 <HAL_DMA_IRQHandler+0x516>
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	4a71      	ldr	r2, [pc, #452]	@ (800cec4 <HAL_DMA_IRQHandler+0x6c4>)
 800ccfe:	4293      	cmp	r3, r2
 800cd00:	d009      	beq.n	800cd16 <HAL_DMA_IRQHandler+0x516>
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	4a70      	ldr	r2, [pc, #448]	@ (800cec8 <HAL_DMA_IRQHandler+0x6c8>)
 800cd08:	4293      	cmp	r3, r2
 800cd0a:	d004      	beq.n	800cd16 <HAL_DMA_IRQHandler+0x516>
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	4a6e      	ldr	r2, [pc, #440]	@ (800cecc <HAL_DMA_IRQHandler+0x6cc>)
 800cd12:	4293      	cmp	r3, r2
 800cd14:	d10a      	bne.n	800cd2c <HAL_DMA_IRQHandler+0x52c>
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	f003 0308 	and.w	r3, r3, #8
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	bf14      	ite	ne
 800cd24:	2301      	movne	r3, #1
 800cd26:	2300      	moveq	r3, #0
 800cd28:	b2db      	uxtb	r3, r3
 800cd2a:	e009      	b.n	800cd40 <HAL_DMA_IRQHandler+0x540>
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	f003 0304 	and.w	r3, r3, #4
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	bf14      	ite	ne
 800cd3a:	2301      	movne	r3, #1
 800cd3c:	2300      	moveq	r3, #0
 800cd3e:	b2db      	uxtb	r3, r3
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d03e      	beq.n	800cdc2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cd48:	f003 031f 	and.w	r3, r3, #31
 800cd4c:	2210      	movs	r2, #16
 800cd4e:	409a      	lsls	r2, r3
 800cd50:	6a3b      	ldr	r3, [r7, #32]
 800cd52:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d018      	beq.n	800cd94 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d108      	bne.n	800cd82 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d024      	beq.n	800cdc2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd7c:	6878      	ldr	r0, [r7, #4]
 800cd7e:	4798      	blx	r3
 800cd80:	e01f      	b.n	800cdc2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d01b      	beq.n	800cdc2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cd8e:	6878      	ldr	r0, [r7, #4]
 800cd90:	4798      	blx	r3
 800cd92:	e016      	b.n	800cdc2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d107      	bne.n	800cdb2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	681a      	ldr	r2, [r3, #0]
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	f022 0208 	bic.w	r2, r2, #8
 800cdb0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d003      	beq.n	800cdc2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cdbe:	6878      	ldr	r0, [r7, #4]
 800cdc0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cdc6:	f003 031f 	and.w	r3, r3, #31
 800cdca:	2220      	movs	r2, #32
 800cdcc:	409a      	lsls	r2, r3
 800cdce:	69bb      	ldr	r3, [r7, #24]
 800cdd0:	4013      	ands	r3, r2
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	f000 8110 	beq.w	800cff8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	4a2c      	ldr	r2, [pc, #176]	@ (800ce90 <HAL_DMA_IRQHandler+0x690>)
 800cdde:	4293      	cmp	r3, r2
 800cde0:	d04a      	beq.n	800ce78 <HAL_DMA_IRQHandler+0x678>
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	4a2b      	ldr	r2, [pc, #172]	@ (800ce94 <HAL_DMA_IRQHandler+0x694>)
 800cde8:	4293      	cmp	r3, r2
 800cdea:	d045      	beq.n	800ce78 <HAL_DMA_IRQHandler+0x678>
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	4a29      	ldr	r2, [pc, #164]	@ (800ce98 <HAL_DMA_IRQHandler+0x698>)
 800cdf2:	4293      	cmp	r3, r2
 800cdf4:	d040      	beq.n	800ce78 <HAL_DMA_IRQHandler+0x678>
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	4a28      	ldr	r2, [pc, #160]	@ (800ce9c <HAL_DMA_IRQHandler+0x69c>)
 800cdfc:	4293      	cmp	r3, r2
 800cdfe:	d03b      	beq.n	800ce78 <HAL_DMA_IRQHandler+0x678>
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	4a26      	ldr	r2, [pc, #152]	@ (800cea0 <HAL_DMA_IRQHandler+0x6a0>)
 800ce06:	4293      	cmp	r3, r2
 800ce08:	d036      	beq.n	800ce78 <HAL_DMA_IRQHandler+0x678>
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	4a25      	ldr	r2, [pc, #148]	@ (800cea4 <HAL_DMA_IRQHandler+0x6a4>)
 800ce10:	4293      	cmp	r3, r2
 800ce12:	d031      	beq.n	800ce78 <HAL_DMA_IRQHandler+0x678>
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	4a23      	ldr	r2, [pc, #140]	@ (800cea8 <HAL_DMA_IRQHandler+0x6a8>)
 800ce1a:	4293      	cmp	r3, r2
 800ce1c:	d02c      	beq.n	800ce78 <HAL_DMA_IRQHandler+0x678>
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	4a22      	ldr	r2, [pc, #136]	@ (800ceac <HAL_DMA_IRQHandler+0x6ac>)
 800ce24:	4293      	cmp	r3, r2
 800ce26:	d027      	beq.n	800ce78 <HAL_DMA_IRQHandler+0x678>
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	4a20      	ldr	r2, [pc, #128]	@ (800ceb0 <HAL_DMA_IRQHandler+0x6b0>)
 800ce2e:	4293      	cmp	r3, r2
 800ce30:	d022      	beq.n	800ce78 <HAL_DMA_IRQHandler+0x678>
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	4a1f      	ldr	r2, [pc, #124]	@ (800ceb4 <HAL_DMA_IRQHandler+0x6b4>)
 800ce38:	4293      	cmp	r3, r2
 800ce3a:	d01d      	beq.n	800ce78 <HAL_DMA_IRQHandler+0x678>
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	4a1d      	ldr	r2, [pc, #116]	@ (800ceb8 <HAL_DMA_IRQHandler+0x6b8>)
 800ce42:	4293      	cmp	r3, r2
 800ce44:	d018      	beq.n	800ce78 <HAL_DMA_IRQHandler+0x678>
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	4a1c      	ldr	r2, [pc, #112]	@ (800cebc <HAL_DMA_IRQHandler+0x6bc>)
 800ce4c:	4293      	cmp	r3, r2
 800ce4e:	d013      	beq.n	800ce78 <HAL_DMA_IRQHandler+0x678>
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	4a1a      	ldr	r2, [pc, #104]	@ (800cec0 <HAL_DMA_IRQHandler+0x6c0>)
 800ce56:	4293      	cmp	r3, r2
 800ce58:	d00e      	beq.n	800ce78 <HAL_DMA_IRQHandler+0x678>
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	4a19      	ldr	r2, [pc, #100]	@ (800cec4 <HAL_DMA_IRQHandler+0x6c4>)
 800ce60:	4293      	cmp	r3, r2
 800ce62:	d009      	beq.n	800ce78 <HAL_DMA_IRQHandler+0x678>
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	4a17      	ldr	r2, [pc, #92]	@ (800cec8 <HAL_DMA_IRQHandler+0x6c8>)
 800ce6a:	4293      	cmp	r3, r2
 800ce6c:	d004      	beq.n	800ce78 <HAL_DMA_IRQHandler+0x678>
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	4a16      	ldr	r2, [pc, #88]	@ (800cecc <HAL_DMA_IRQHandler+0x6cc>)
 800ce74:	4293      	cmp	r3, r2
 800ce76:	d12b      	bne.n	800ced0 <HAL_DMA_IRQHandler+0x6d0>
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	f003 0310 	and.w	r3, r3, #16
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	bf14      	ite	ne
 800ce86:	2301      	movne	r3, #1
 800ce88:	2300      	moveq	r3, #0
 800ce8a:	b2db      	uxtb	r3, r3
 800ce8c:	e02a      	b.n	800cee4 <HAL_DMA_IRQHandler+0x6e4>
 800ce8e:	bf00      	nop
 800ce90:	40020010 	.word	0x40020010
 800ce94:	40020028 	.word	0x40020028
 800ce98:	40020040 	.word	0x40020040
 800ce9c:	40020058 	.word	0x40020058
 800cea0:	40020070 	.word	0x40020070
 800cea4:	40020088 	.word	0x40020088
 800cea8:	400200a0 	.word	0x400200a0
 800ceac:	400200b8 	.word	0x400200b8
 800ceb0:	40020410 	.word	0x40020410
 800ceb4:	40020428 	.word	0x40020428
 800ceb8:	40020440 	.word	0x40020440
 800cebc:	40020458 	.word	0x40020458
 800cec0:	40020470 	.word	0x40020470
 800cec4:	40020488 	.word	0x40020488
 800cec8:	400204a0 	.word	0x400204a0
 800cecc:	400204b8 	.word	0x400204b8
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	f003 0302 	and.w	r3, r3, #2
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	bf14      	ite	ne
 800cede:	2301      	movne	r3, #1
 800cee0:	2300      	moveq	r3, #0
 800cee2:	b2db      	uxtb	r3, r3
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	f000 8087 	beq.w	800cff8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ceee:	f003 031f 	and.w	r3, r3, #31
 800cef2:	2220      	movs	r2, #32
 800cef4:	409a      	lsls	r2, r3
 800cef6:	6a3b      	ldr	r3, [r7, #32]
 800cef8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800cf00:	b2db      	uxtb	r3, r3
 800cf02:	2b04      	cmp	r3, #4
 800cf04:	d139      	bne.n	800cf7a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	681a      	ldr	r2, [r3, #0]
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	f022 0216 	bic.w	r2, r2, #22
 800cf14:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	695a      	ldr	r2, [r3, #20]
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800cf24:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d103      	bne.n	800cf36 <HAL_DMA_IRQHandler+0x736>
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d007      	beq.n	800cf46 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	681a      	ldr	r2, [r3, #0]
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	f022 0208 	bic.w	r2, r2, #8
 800cf44:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cf4a:	f003 031f 	and.w	r3, r3, #31
 800cf4e:	223f      	movs	r2, #63	@ 0x3f
 800cf50:	409a      	lsls	r2, r3
 800cf52:	6a3b      	ldr	r3, [r7, #32]
 800cf54:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	2201      	movs	r2, #1
 800cf5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	2200      	movs	r2, #0
 800cf62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	f000 834a 	beq.w	800d604 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cf74:	6878      	ldr	r0, [r7, #4]
 800cf76:	4798      	blx	r3
          }
          return;
 800cf78:	e344      	b.n	800d604 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d018      	beq.n	800cfba <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d108      	bne.n	800cfa8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d02c      	beq.n	800cff8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cfa2:	6878      	ldr	r0, [r7, #4]
 800cfa4:	4798      	blx	r3
 800cfa6:	e027      	b.n	800cff8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d023      	beq.n	800cff8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cfb4:	6878      	ldr	r0, [r7, #4]
 800cfb6:	4798      	blx	r3
 800cfb8:	e01e      	b.n	800cff8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d10f      	bne.n	800cfe8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	681a      	ldr	r2, [r3, #0]
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	f022 0210 	bic.w	r2, r2, #16
 800cfd6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	2201      	movs	r2, #1
 800cfdc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	2200      	movs	r2, #0
 800cfe4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d003      	beq.n	800cff8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cff4:	6878      	ldr	r0, [r7, #4]
 800cff6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	f000 8306 	beq.w	800d60e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d006:	f003 0301 	and.w	r3, r3, #1
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	f000 8088 	beq.w	800d120 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	2204      	movs	r2, #4
 800d014:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	4a7a      	ldr	r2, [pc, #488]	@ (800d208 <HAL_DMA_IRQHandler+0xa08>)
 800d01e:	4293      	cmp	r3, r2
 800d020:	d04a      	beq.n	800d0b8 <HAL_DMA_IRQHandler+0x8b8>
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	4a79      	ldr	r2, [pc, #484]	@ (800d20c <HAL_DMA_IRQHandler+0xa0c>)
 800d028:	4293      	cmp	r3, r2
 800d02a:	d045      	beq.n	800d0b8 <HAL_DMA_IRQHandler+0x8b8>
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	4a77      	ldr	r2, [pc, #476]	@ (800d210 <HAL_DMA_IRQHandler+0xa10>)
 800d032:	4293      	cmp	r3, r2
 800d034:	d040      	beq.n	800d0b8 <HAL_DMA_IRQHandler+0x8b8>
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	4a76      	ldr	r2, [pc, #472]	@ (800d214 <HAL_DMA_IRQHandler+0xa14>)
 800d03c:	4293      	cmp	r3, r2
 800d03e:	d03b      	beq.n	800d0b8 <HAL_DMA_IRQHandler+0x8b8>
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	4a74      	ldr	r2, [pc, #464]	@ (800d218 <HAL_DMA_IRQHandler+0xa18>)
 800d046:	4293      	cmp	r3, r2
 800d048:	d036      	beq.n	800d0b8 <HAL_DMA_IRQHandler+0x8b8>
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	4a73      	ldr	r2, [pc, #460]	@ (800d21c <HAL_DMA_IRQHandler+0xa1c>)
 800d050:	4293      	cmp	r3, r2
 800d052:	d031      	beq.n	800d0b8 <HAL_DMA_IRQHandler+0x8b8>
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	4a71      	ldr	r2, [pc, #452]	@ (800d220 <HAL_DMA_IRQHandler+0xa20>)
 800d05a:	4293      	cmp	r3, r2
 800d05c:	d02c      	beq.n	800d0b8 <HAL_DMA_IRQHandler+0x8b8>
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	4a70      	ldr	r2, [pc, #448]	@ (800d224 <HAL_DMA_IRQHandler+0xa24>)
 800d064:	4293      	cmp	r3, r2
 800d066:	d027      	beq.n	800d0b8 <HAL_DMA_IRQHandler+0x8b8>
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	4a6e      	ldr	r2, [pc, #440]	@ (800d228 <HAL_DMA_IRQHandler+0xa28>)
 800d06e:	4293      	cmp	r3, r2
 800d070:	d022      	beq.n	800d0b8 <HAL_DMA_IRQHandler+0x8b8>
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	4a6d      	ldr	r2, [pc, #436]	@ (800d22c <HAL_DMA_IRQHandler+0xa2c>)
 800d078:	4293      	cmp	r3, r2
 800d07a:	d01d      	beq.n	800d0b8 <HAL_DMA_IRQHandler+0x8b8>
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	4a6b      	ldr	r2, [pc, #428]	@ (800d230 <HAL_DMA_IRQHandler+0xa30>)
 800d082:	4293      	cmp	r3, r2
 800d084:	d018      	beq.n	800d0b8 <HAL_DMA_IRQHandler+0x8b8>
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	4a6a      	ldr	r2, [pc, #424]	@ (800d234 <HAL_DMA_IRQHandler+0xa34>)
 800d08c:	4293      	cmp	r3, r2
 800d08e:	d013      	beq.n	800d0b8 <HAL_DMA_IRQHandler+0x8b8>
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	4a68      	ldr	r2, [pc, #416]	@ (800d238 <HAL_DMA_IRQHandler+0xa38>)
 800d096:	4293      	cmp	r3, r2
 800d098:	d00e      	beq.n	800d0b8 <HAL_DMA_IRQHandler+0x8b8>
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	4a67      	ldr	r2, [pc, #412]	@ (800d23c <HAL_DMA_IRQHandler+0xa3c>)
 800d0a0:	4293      	cmp	r3, r2
 800d0a2:	d009      	beq.n	800d0b8 <HAL_DMA_IRQHandler+0x8b8>
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	4a65      	ldr	r2, [pc, #404]	@ (800d240 <HAL_DMA_IRQHandler+0xa40>)
 800d0aa:	4293      	cmp	r3, r2
 800d0ac:	d004      	beq.n	800d0b8 <HAL_DMA_IRQHandler+0x8b8>
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	4a64      	ldr	r2, [pc, #400]	@ (800d244 <HAL_DMA_IRQHandler+0xa44>)
 800d0b4:	4293      	cmp	r3, r2
 800d0b6:	d108      	bne.n	800d0ca <HAL_DMA_IRQHandler+0x8ca>
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	681a      	ldr	r2, [r3, #0]
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	f022 0201 	bic.w	r2, r2, #1
 800d0c6:	601a      	str	r2, [r3, #0]
 800d0c8:	e007      	b.n	800d0da <HAL_DMA_IRQHandler+0x8da>
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	681a      	ldr	r2, [r3, #0]
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	f022 0201 	bic.w	r2, r2, #1
 800d0d8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	3301      	adds	r3, #1
 800d0de:	60fb      	str	r3, [r7, #12]
 800d0e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d0e2:	429a      	cmp	r2, r3
 800d0e4:	d307      	bcc.n	800d0f6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	f003 0301 	and.w	r3, r3, #1
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d1f2      	bne.n	800d0da <HAL_DMA_IRQHandler+0x8da>
 800d0f4:	e000      	b.n	800d0f8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800d0f6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	f003 0301 	and.w	r3, r3, #1
 800d102:	2b00      	cmp	r3, #0
 800d104:	d004      	beq.n	800d110 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	2203      	movs	r2, #3
 800d10a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800d10e:	e003      	b.n	800d118 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	2201      	movs	r2, #1
 800d114:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	2200      	movs	r2, #0
 800d11c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d124:	2b00      	cmp	r3, #0
 800d126:	f000 8272 	beq.w	800d60e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d12e:	6878      	ldr	r0, [r7, #4]
 800d130:	4798      	blx	r3
 800d132:	e26c      	b.n	800d60e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	4a43      	ldr	r2, [pc, #268]	@ (800d248 <HAL_DMA_IRQHandler+0xa48>)
 800d13a:	4293      	cmp	r3, r2
 800d13c:	d022      	beq.n	800d184 <HAL_DMA_IRQHandler+0x984>
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	4a42      	ldr	r2, [pc, #264]	@ (800d24c <HAL_DMA_IRQHandler+0xa4c>)
 800d144:	4293      	cmp	r3, r2
 800d146:	d01d      	beq.n	800d184 <HAL_DMA_IRQHandler+0x984>
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	4a40      	ldr	r2, [pc, #256]	@ (800d250 <HAL_DMA_IRQHandler+0xa50>)
 800d14e:	4293      	cmp	r3, r2
 800d150:	d018      	beq.n	800d184 <HAL_DMA_IRQHandler+0x984>
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	4a3f      	ldr	r2, [pc, #252]	@ (800d254 <HAL_DMA_IRQHandler+0xa54>)
 800d158:	4293      	cmp	r3, r2
 800d15a:	d013      	beq.n	800d184 <HAL_DMA_IRQHandler+0x984>
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	4a3d      	ldr	r2, [pc, #244]	@ (800d258 <HAL_DMA_IRQHandler+0xa58>)
 800d162:	4293      	cmp	r3, r2
 800d164:	d00e      	beq.n	800d184 <HAL_DMA_IRQHandler+0x984>
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	4a3c      	ldr	r2, [pc, #240]	@ (800d25c <HAL_DMA_IRQHandler+0xa5c>)
 800d16c:	4293      	cmp	r3, r2
 800d16e:	d009      	beq.n	800d184 <HAL_DMA_IRQHandler+0x984>
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	4a3a      	ldr	r2, [pc, #232]	@ (800d260 <HAL_DMA_IRQHandler+0xa60>)
 800d176:	4293      	cmp	r3, r2
 800d178:	d004      	beq.n	800d184 <HAL_DMA_IRQHandler+0x984>
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	4a39      	ldr	r2, [pc, #228]	@ (800d264 <HAL_DMA_IRQHandler+0xa64>)
 800d180:	4293      	cmp	r3, r2
 800d182:	d101      	bne.n	800d188 <HAL_DMA_IRQHandler+0x988>
 800d184:	2301      	movs	r3, #1
 800d186:	e000      	b.n	800d18a <HAL_DMA_IRQHandler+0x98a>
 800d188:	2300      	movs	r3, #0
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	f000 823f 	beq.w	800d60e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d19c:	f003 031f 	and.w	r3, r3, #31
 800d1a0:	2204      	movs	r2, #4
 800d1a2:	409a      	lsls	r2, r3
 800d1a4:	697b      	ldr	r3, [r7, #20]
 800d1a6:	4013      	ands	r3, r2
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	f000 80cd 	beq.w	800d348 <HAL_DMA_IRQHandler+0xb48>
 800d1ae:	693b      	ldr	r3, [r7, #16]
 800d1b0:	f003 0304 	and.w	r3, r3, #4
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	f000 80c7 	beq.w	800d348 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d1be:	f003 031f 	and.w	r3, r3, #31
 800d1c2:	2204      	movs	r2, #4
 800d1c4:	409a      	lsls	r2, r3
 800d1c6:	69fb      	ldr	r3, [r7, #28]
 800d1c8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d1ca:	693b      	ldr	r3, [r7, #16]
 800d1cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d049      	beq.n	800d268 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800d1d4:	693b      	ldr	r3, [r7, #16]
 800d1d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d109      	bne.n	800d1f2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	f000 8210 	beq.w	800d608 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d1ec:	6878      	ldr	r0, [r7, #4]
 800d1ee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d1f0:	e20a      	b.n	800d608 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	f000 8206 	beq.w	800d608 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d200:	6878      	ldr	r0, [r7, #4]
 800d202:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d204:	e200      	b.n	800d608 <HAL_DMA_IRQHandler+0xe08>
 800d206:	bf00      	nop
 800d208:	40020010 	.word	0x40020010
 800d20c:	40020028 	.word	0x40020028
 800d210:	40020040 	.word	0x40020040
 800d214:	40020058 	.word	0x40020058
 800d218:	40020070 	.word	0x40020070
 800d21c:	40020088 	.word	0x40020088
 800d220:	400200a0 	.word	0x400200a0
 800d224:	400200b8 	.word	0x400200b8
 800d228:	40020410 	.word	0x40020410
 800d22c:	40020428 	.word	0x40020428
 800d230:	40020440 	.word	0x40020440
 800d234:	40020458 	.word	0x40020458
 800d238:	40020470 	.word	0x40020470
 800d23c:	40020488 	.word	0x40020488
 800d240:	400204a0 	.word	0x400204a0
 800d244:	400204b8 	.word	0x400204b8
 800d248:	58025408 	.word	0x58025408
 800d24c:	5802541c 	.word	0x5802541c
 800d250:	58025430 	.word	0x58025430
 800d254:	58025444 	.word	0x58025444
 800d258:	58025458 	.word	0x58025458
 800d25c:	5802546c 	.word	0x5802546c
 800d260:	58025480 	.word	0x58025480
 800d264:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800d268:	693b      	ldr	r3, [r7, #16]
 800d26a:	f003 0320 	and.w	r3, r3, #32
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d160      	bne.n	800d334 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	4a7f      	ldr	r2, [pc, #508]	@ (800d474 <HAL_DMA_IRQHandler+0xc74>)
 800d278:	4293      	cmp	r3, r2
 800d27a:	d04a      	beq.n	800d312 <HAL_DMA_IRQHandler+0xb12>
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	4a7d      	ldr	r2, [pc, #500]	@ (800d478 <HAL_DMA_IRQHandler+0xc78>)
 800d282:	4293      	cmp	r3, r2
 800d284:	d045      	beq.n	800d312 <HAL_DMA_IRQHandler+0xb12>
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	4a7c      	ldr	r2, [pc, #496]	@ (800d47c <HAL_DMA_IRQHandler+0xc7c>)
 800d28c:	4293      	cmp	r3, r2
 800d28e:	d040      	beq.n	800d312 <HAL_DMA_IRQHandler+0xb12>
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	4a7a      	ldr	r2, [pc, #488]	@ (800d480 <HAL_DMA_IRQHandler+0xc80>)
 800d296:	4293      	cmp	r3, r2
 800d298:	d03b      	beq.n	800d312 <HAL_DMA_IRQHandler+0xb12>
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	4a79      	ldr	r2, [pc, #484]	@ (800d484 <HAL_DMA_IRQHandler+0xc84>)
 800d2a0:	4293      	cmp	r3, r2
 800d2a2:	d036      	beq.n	800d312 <HAL_DMA_IRQHandler+0xb12>
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	4a77      	ldr	r2, [pc, #476]	@ (800d488 <HAL_DMA_IRQHandler+0xc88>)
 800d2aa:	4293      	cmp	r3, r2
 800d2ac:	d031      	beq.n	800d312 <HAL_DMA_IRQHandler+0xb12>
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	4a76      	ldr	r2, [pc, #472]	@ (800d48c <HAL_DMA_IRQHandler+0xc8c>)
 800d2b4:	4293      	cmp	r3, r2
 800d2b6:	d02c      	beq.n	800d312 <HAL_DMA_IRQHandler+0xb12>
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	4a74      	ldr	r2, [pc, #464]	@ (800d490 <HAL_DMA_IRQHandler+0xc90>)
 800d2be:	4293      	cmp	r3, r2
 800d2c0:	d027      	beq.n	800d312 <HAL_DMA_IRQHandler+0xb12>
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	4a73      	ldr	r2, [pc, #460]	@ (800d494 <HAL_DMA_IRQHandler+0xc94>)
 800d2c8:	4293      	cmp	r3, r2
 800d2ca:	d022      	beq.n	800d312 <HAL_DMA_IRQHandler+0xb12>
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	4a71      	ldr	r2, [pc, #452]	@ (800d498 <HAL_DMA_IRQHandler+0xc98>)
 800d2d2:	4293      	cmp	r3, r2
 800d2d4:	d01d      	beq.n	800d312 <HAL_DMA_IRQHandler+0xb12>
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	4a70      	ldr	r2, [pc, #448]	@ (800d49c <HAL_DMA_IRQHandler+0xc9c>)
 800d2dc:	4293      	cmp	r3, r2
 800d2de:	d018      	beq.n	800d312 <HAL_DMA_IRQHandler+0xb12>
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	4a6e      	ldr	r2, [pc, #440]	@ (800d4a0 <HAL_DMA_IRQHandler+0xca0>)
 800d2e6:	4293      	cmp	r3, r2
 800d2e8:	d013      	beq.n	800d312 <HAL_DMA_IRQHandler+0xb12>
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	4a6d      	ldr	r2, [pc, #436]	@ (800d4a4 <HAL_DMA_IRQHandler+0xca4>)
 800d2f0:	4293      	cmp	r3, r2
 800d2f2:	d00e      	beq.n	800d312 <HAL_DMA_IRQHandler+0xb12>
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	4a6b      	ldr	r2, [pc, #428]	@ (800d4a8 <HAL_DMA_IRQHandler+0xca8>)
 800d2fa:	4293      	cmp	r3, r2
 800d2fc:	d009      	beq.n	800d312 <HAL_DMA_IRQHandler+0xb12>
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	4a6a      	ldr	r2, [pc, #424]	@ (800d4ac <HAL_DMA_IRQHandler+0xcac>)
 800d304:	4293      	cmp	r3, r2
 800d306:	d004      	beq.n	800d312 <HAL_DMA_IRQHandler+0xb12>
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	4a68      	ldr	r2, [pc, #416]	@ (800d4b0 <HAL_DMA_IRQHandler+0xcb0>)
 800d30e:	4293      	cmp	r3, r2
 800d310:	d108      	bne.n	800d324 <HAL_DMA_IRQHandler+0xb24>
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	681a      	ldr	r2, [r3, #0]
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	f022 0208 	bic.w	r2, r2, #8
 800d320:	601a      	str	r2, [r3, #0]
 800d322:	e007      	b.n	800d334 <HAL_DMA_IRQHandler+0xb34>
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	681a      	ldr	r2, [r3, #0]
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	f022 0204 	bic.w	r2, r2, #4
 800d332:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d338:	2b00      	cmp	r3, #0
 800d33a:	f000 8165 	beq.w	800d608 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d342:	6878      	ldr	r0, [r7, #4]
 800d344:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d346:	e15f      	b.n	800d608 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d34c:	f003 031f 	and.w	r3, r3, #31
 800d350:	2202      	movs	r2, #2
 800d352:	409a      	lsls	r2, r3
 800d354:	697b      	ldr	r3, [r7, #20]
 800d356:	4013      	ands	r3, r2
 800d358:	2b00      	cmp	r3, #0
 800d35a:	f000 80c5 	beq.w	800d4e8 <HAL_DMA_IRQHandler+0xce8>
 800d35e:	693b      	ldr	r3, [r7, #16]
 800d360:	f003 0302 	and.w	r3, r3, #2
 800d364:	2b00      	cmp	r3, #0
 800d366:	f000 80bf 	beq.w	800d4e8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d36e:	f003 031f 	and.w	r3, r3, #31
 800d372:	2202      	movs	r2, #2
 800d374:	409a      	lsls	r2, r3
 800d376:	69fb      	ldr	r3, [r7, #28]
 800d378:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d37a:	693b      	ldr	r3, [r7, #16]
 800d37c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d380:	2b00      	cmp	r3, #0
 800d382:	d018      	beq.n	800d3b6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800d384:	693b      	ldr	r3, [r7, #16]
 800d386:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d109      	bne.n	800d3a2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d392:	2b00      	cmp	r3, #0
 800d394:	f000 813a 	beq.w	800d60c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d39c:	6878      	ldr	r0, [r7, #4]
 800d39e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d3a0:	e134      	b.n	800d60c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	f000 8130 	beq.w	800d60c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d3b0:	6878      	ldr	r0, [r7, #4]
 800d3b2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d3b4:	e12a      	b.n	800d60c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800d3b6:	693b      	ldr	r3, [r7, #16]
 800d3b8:	f003 0320 	and.w	r3, r3, #32
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	f040 8089 	bne.w	800d4d4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	4a2b      	ldr	r2, [pc, #172]	@ (800d474 <HAL_DMA_IRQHandler+0xc74>)
 800d3c8:	4293      	cmp	r3, r2
 800d3ca:	d04a      	beq.n	800d462 <HAL_DMA_IRQHandler+0xc62>
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	4a29      	ldr	r2, [pc, #164]	@ (800d478 <HAL_DMA_IRQHandler+0xc78>)
 800d3d2:	4293      	cmp	r3, r2
 800d3d4:	d045      	beq.n	800d462 <HAL_DMA_IRQHandler+0xc62>
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	4a28      	ldr	r2, [pc, #160]	@ (800d47c <HAL_DMA_IRQHandler+0xc7c>)
 800d3dc:	4293      	cmp	r3, r2
 800d3de:	d040      	beq.n	800d462 <HAL_DMA_IRQHandler+0xc62>
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	4a26      	ldr	r2, [pc, #152]	@ (800d480 <HAL_DMA_IRQHandler+0xc80>)
 800d3e6:	4293      	cmp	r3, r2
 800d3e8:	d03b      	beq.n	800d462 <HAL_DMA_IRQHandler+0xc62>
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	4a25      	ldr	r2, [pc, #148]	@ (800d484 <HAL_DMA_IRQHandler+0xc84>)
 800d3f0:	4293      	cmp	r3, r2
 800d3f2:	d036      	beq.n	800d462 <HAL_DMA_IRQHandler+0xc62>
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	4a23      	ldr	r2, [pc, #140]	@ (800d488 <HAL_DMA_IRQHandler+0xc88>)
 800d3fa:	4293      	cmp	r3, r2
 800d3fc:	d031      	beq.n	800d462 <HAL_DMA_IRQHandler+0xc62>
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	4a22      	ldr	r2, [pc, #136]	@ (800d48c <HAL_DMA_IRQHandler+0xc8c>)
 800d404:	4293      	cmp	r3, r2
 800d406:	d02c      	beq.n	800d462 <HAL_DMA_IRQHandler+0xc62>
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	4a20      	ldr	r2, [pc, #128]	@ (800d490 <HAL_DMA_IRQHandler+0xc90>)
 800d40e:	4293      	cmp	r3, r2
 800d410:	d027      	beq.n	800d462 <HAL_DMA_IRQHandler+0xc62>
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	4a1f      	ldr	r2, [pc, #124]	@ (800d494 <HAL_DMA_IRQHandler+0xc94>)
 800d418:	4293      	cmp	r3, r2
 800d41a:	d022      	beq.n	800d462 <HAL_DMA_IRQHandler+0xc62>
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	4a1d      	ldr	r2, [pc, #116]	@ (800d498 <HAL_DMA_IRQHandler+0xc98>)
 800d422:	4293      	cmp	r3, r2
 800d424:	d01d      	beq.n	800d462 <HAL_DMA_IRQHandler+0xc62>
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	4a1c      	ldr	r2, [pc, #112]	@ (800d49c <HAL_DMA_IRQHandler+0xc9c>)
 800d42c:	4293      	cmp	r3, r2
 800d42e:	d018      	beq.n	800d462 <HAL_DMA_IRQHandler+0xc62>
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	4a1a      	ldr	r2, [pc, #104]	@ (800d4a0 <HAL_DMA_IRQHandler+0xca0>)
 800d436:	4293      	cmp	r3, r2
 800d438:	d013      	beq.n	800d462 <HAL_DMA_IRQHandler+0xc62>
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	4a19      	ldr	r2, [pc, #100]	@ (800d4a4 <HAL_DMA_IRQHandler+0xca4>)
 800d440:	4293      	cmp	r3, r2
 800d442:	d00e      	beq.n	800d462 <HAL_DMA_IRQHandler+0xc62>
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	4a17      	ldr	r2, [pc, #92]	@ (800d4a8 <HAL_DMA_IRQHandler+0xca8>)
 800d44a:	4293      	cmp	r3, r2
 800d44c:	d009      	beq.n	800d462 <HAL_DMA_IRQHandler+0xc62>
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	4a16      	ldr	r2, [pc, #88]	@ (800d4ac <HAL_DMA_IRQHandler+0xcac>)
 800d454:	4293      	cmp	r3, r2
 800d456:	d004      	beq.n	800d462 <HAL_DMA_IRQHandler+0xc62>
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	4a14      	ldr	r2, [pc, #80]	@ (800d4b0 <HAL_DMA_IRQHandler+0xcb0>)
 800d45e:	4293      	cmp	r3, r2
 800d460:	d128      	bne.n	800d4b4 <HAL_DMA_IRQHandler+0xcb4>
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	681a      	ldr	r2, [r3, #0]
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	f022 0214 	bic.w	r2, r2, #20
 800d470:	601a      	str	r2, [r3, #0]
 800d472:	e027      	b.n	800d4c4 <HAL_DMA_IRQHandler+0xcc4>
 800d474:	40020010 	.word	0x40020010
 800d478:	40020028 	.word	0x40020028
 800d47c:	40020040 	.word	0x40020040
 800d480:	40020058 	.word	0x40020058
 800d484:	40020070 	.word	0x40020070
 800d488:	40020088 	.word	0x40020088
 800d48c:	400200a0 	.word	0x400200a0
 800d490:	400200b8 	.word	0x400200b8
 800d494:	40020410 	.word	0x40020410
 800d498:	40020428 	.word	0x40020428
 800d49c:	40020440 	.word	0x40020440
 800d4a0:	40020458 	.word	0x40020458
 800d4a4:	40020470 	.word	0x40020470
 800d4a8:	40020488 	.word	0x40020488
 800d4ac:	400204a0 	.word	0x400204a0
 800d4b0:	400204b8 	.word	0x400204b8
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	681a      	ldr	r2, [r3, #0]
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	f022 020a 	bic.w	r2, r2, #10
 800d4c2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	2201      	movs	r2, #1
 800d4c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	2200      	movs	r2, #0
 800d4d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	f000 8097 	beq.w	800d60c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d4e2:	6878      	ldr	r0, [r7, #4]
 800d4e4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d4e6:	e091      	b.n	800d60c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d4ec:	f003 031f 	and.w	r3, r3, #31
 800d4f0:	2208      	movs	r2, #8
 800d4f2:	409a      	lsls	r2, r3
 800d4f4:	697b      	ldr	r3, [r7, #20]
 800d4f6:	4013      	ands	r3, r2
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	f000 8088 	beq.w	800d60e <HAL_DMA_IRQHandler+0xe0e>
 800d4fe:	693b      	ldr	r3, [r7, #16]
 800d500:	f003 0308 	and.w	r3, r3, #8
 800d504:	2b00      	cmp	r3, #0
 800d506:	f000 8082 	beq.w	800d60e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	4a41      	ldr	r2, [pc, #260]	@ (800d614 <HAL_DMA_IRQHandler+0xe14>)
 800d510:	4293      	cmp	r3, r2
 800d512:	d04a      	beq.n	800d5aa <HAL_DMA_IRQHandler+0xdaa>
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	4a3f      	ldr	r2, [pc, #252]	@ (800d618 <HAL_DMA_IRQHandler+0xe18>)
 800d51a:	4293      	cmp	r3, r2
 800d51c:	d045      	beq.n	800d5aa <HAL_DMA_IRQHandler+0xdaa>
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	4a3e      	ldr	r2, [pc, #248]	@ (800d61c <HAL_DMA_IRQHandler+0xe1c>)
 800d524:	4293      	cmp	r3, r2
 800d526:	d040      	beq.n	800d5aa <HAL_DMA_IRQHandler+0xdaa>
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	4a3c      	ldr	r2, [pc, #240]	@ (800d620 <HAL_DMA_IRQHandler+0xe20>)
 800d52e:	4293      	cmp	r3, r2
 800d530:	d03b      	beq.n	800d5aa <HAL_DMA_IRQHandler+0xdaa>
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	4a3b      	ldr	r2, [pc, #236]	@ (800d624 <HAL_DMA_IRQHandler+0xe24>)
 800d538:	4293      	cmp	r3, r2
 800d53a:	d036      	beq.n	800d5aa <HAL_DMA_IRQHandler+0xdaa>
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	4a39      	ldr	r2, [pc, #228]	@ (800d628 <HAL_DMA_IRQHandler+0xe28>)
 800d542:	4293      	cmp	r3, r2
 800d544:	d031      	beq.n	800d5aa <HAL_DMA_IRQHandler+0xdaa>
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	4a38      	ldr	r2, [pc, #224]	@ (800d62c <HAL_DMA_IRQHandler+0xe2c>)
 800d54c:	4293      	cmp	r3, r2
 800d54e:	d02c      	beq.n	800d5aa <HAL_DMA_IRQHandler+0xdaa>
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	4a36      	ldr	r2, [pc, #216]	@ (800d630 <HAL_DMA_IRQHandler+0xe30>)
 800d556:	4293      	cmp	r3, r2
 800d558:	d027      	beq.n	800d5aa <HAL_DMA_IRQHandler+0xdaa>
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	4a35      	ldr	r2, [pc, #212]	@ (800d634 <HAL_DMA_IRQHandler+0xe34>)
 800d560:	4293      	cmp	r3, r2
 800d562:	d022      	beq.n	800d5aa <HAL_DMA_IRQHandler+0xdaa>
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	4a33      	ldr	r2, [pc, #204]	@ (800d638 <HAL_DMA_IRQHandler+0xe38>)
 800d56a:	4293      	cmp	r3, r2
 800d56c:	d01d      	beq.n	800d5aa <HAL_DMA_IRQHandler+0xdaa>
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	4a32      	ldr	r2, [pc, #200]	@ (800d63c <HAL_DMA_IRQHandler+0xe3c>)
 800d574:	4293      	cmp	r3, r2
 800d576:	d018      	beq.n	800d5aa <HAL_DMA_IRQHandler+0xdaa>
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	4a30      	ldr	r2, [pc, #192]	@ (800d640 <HAL_DMA_IRQHandler+0xe40>)
 800d57e:	4293      	cmp	r3, r2
 800d580:	d013      	beq.n	800d5aa <HAL_DMA_IRQHandler+0xdaa>
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	4a2f      	ldr	r2, [pc, #188]	@ (800d644 <HAL_DMA_IRQHandler+0xe44>)
 800d588:	4293      	cmp	r3, r2
 800d58a:	d00e      	beq.n	800d5aa <HAL_DMA_IRQHandler+0xdaa>
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	4a2d      	ldr	r2, [pc, #180]	@ (800d648 <HAL_DMA_IRQHandler+0xe48>)
 800d592:	4293      	cmp	r3, r2
 800d594:	d009      	beq.n	800d5aa <HAL_DMA_IRQHandler+0xdaa>
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	4a2c      	ldr	r2, [pc, #176]	@ (800d64c <HAL_DMA_IRQHandler+0xe4c>)
 800d59c:	4293      	cmp	r3, r2
 800d59e:	d004      	beq.n	800d5aa <HAL_DMA_IRQHandler+0xdaa>
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	4a2a      	ldr	r2, [pc, #168]	@ (800d650 <HAL_DMA_IRQHandler+0xe50>)
 800d5a6:	4293      	cmp	r3, r2
 800d5a8:	d108      	bne.n	800d5bc <HAL_DMA_IRQHandler+0xdbc>
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	681a      	ldr	r2, [r3, #0]
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	f022 021c 	bic.w	r2, r2, #28
 800d5b8:	601a      	str	r2, [r3, #0]
 800d5ba:	e007      	b.n	800d5cc <HAL_DMA_IRQHandler+0xdcc>
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	681a      	ldr	r2, [r3, #0]
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	f022 020e 	bic.w	r2, r2, #14
 800d5ca:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d5d0:	f003 031f 	and.w	r3, r3, #31
 800d5d4:	2201      	movs	r2, #1
 800d5d6:	409a      	lsls	r2, r3
 800d5d8:	69fb      	ldr	r3, [r7, #28]
 800d5da:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	2201      	movs	r2, #1
 800d5e0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	2201      	movs	r2, #1
 800d5e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	2200      	movs	r2, #0
 800d5ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d009      	beq.n	800d60e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d5fe:	6878      	ldr	r0, [r7, #4]
 800d600:	4798      	blx	r3
 800d602:	e004      	b.n	800d60e <HAL_DMA_IRQHandler+0xe0e>
          return;
 800d604:	bf00      	nop
 800d606:	e002      	b.n	800d60e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d608:	bf00      	nop
 800d60a:	e000      	b.n	800d60e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d60c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800d60e:	3728      	adds	r7, #40	@ 0x28
 800d610:	46bd      	mov	sp, r7
 800d612:	bd80      	pop	{r7, pc}
 800d614:	40020010 	.word	0x40020010
 800d618:	40020028 	.word	0x40020028
 800d61c:	40020040 	.word	0x40020040
 800d620:	40020058 	.word	0x40020058
 800d624:	40020070 	.word	0x40020070
 800d628:	40020088 	.word	0x40020088
 800d62c:	400200a0 	.word	0x400200a0
 800d630:	400200b8 	.word	0x400200b8
 800d634:	40020410 	.word	0x40020410
 800d638:	40020428 	.word	0x40020428
 800d63c:	40020440 	.word	0x40020440
 800d640:	40020458 	.word	0x40020458
 800d644:	40020470 	.word	0x40020470
 800d648:	40020488 	.word	0x40020488
 800d64c:	400204a0 	.word	0x400204a0
 800d650:	400204b8 	.word	0x400204b8

0800d654 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800d654:	b480      	push	{r7}
 800d656:	b083      	sub	sp, #12
 800d658:	af00      	add	r7, sp, #0
 800d65a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800d662:	b2db      	uxtb	r3, r3
}
 800d664:	4618      	mov	r0, r3
 800d666:	370c      	adds	r7, #12
 800d668:	46bd      	mov	sp, r7
 800d66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d66e:	4770      	bx	lr

0800d670 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800d670:	b480      	push	{r7}
 800d672:	b083      	sub	sp, #12
 800d674:	af00      	add	r7, sp, #0
 800d676:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 800d67c:	4618      	mov	r0, r3
 800d67e:	370c      	adds	r7, #12
 800d680:	46bd      	mov	sp, r7
 800d682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d686:	4770      	bx	lr

0800d688 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800d688:	b480      	push	{r7}
 800d68a:	b087      	sub	sp, #28
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	60f8      	str	r0, [r7, #12]
 800d690:	60b9      	str	r1, [r7, #8]
 800d692:	607a      	str	r2, [r7, #4]
 800d694:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d69a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d6a0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	4a7f      	ldr	r2, [pc, #508]	@ (800d8a4 <DMA_SetConfig+0x21c>)
 800d6a8:	4293      	cmp	r3, r2
 800d6aa:	d072      	beq.n	800d792 <DMA_SetConfig+0x10a>
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	4a7d      	ldr	r2, [pc, #500]	@ (800d8a8 <DMA_SetConfig+0x220>)
 800d6b2:	4293      	cmp	r3, r2
 800d6b4:	d06d      	beq.n	800d792 <DMA_SetConfig+0x10a>
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	4a7c      	ldr	r2, [pc, #496]	@ (800d8ac <DMA_SetConfig+0x224>)
 800d6bc:	4293      	cmp	r3, r2
 800d6be:	d068      	beq.n	800d792 <DMA_SetConfig+0x10a>
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	4a7a      	ldr	r2, [pc, #488]	@ (800d8b0 <DMA_SetConfig+0x228>)
 800d6c6:	4293      	cmp	r3, r2
 800d6c8:	d063      	beq.n	800d792 <DMA_SetConfig+0x10a>
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	4a79      	ldr	r2, [pc, #484]	@ (800d8b4 <DMA_SetConfig+0x22c>)
 800d6d0:	4293      	cmp	r3, r2
 800d6d2:	d05e      	beq.n	800d792 <DMA_SetConfig+0x10a>
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	4a77      	ldr	r2, [pc, #476]	@ (800d8b8 <DMA_SetConfig+0x230>)
 800d6da:	4293      	cmp	r3, r2
 800d6dc:	d059      	beq.n	800d792 <DMA_SetConfig+0x10a>
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	4a76      	ldr	r2, [pc, #472]	@ (800d8bc <DMA_SetConfig+0x234>)
 800d6e4:	4293      	cmp	r3, r2
 800d6e6:	d054      	beq.n	800d792 <DMA_SetConfig+0x10a>
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	4a74      	ldr	r2, [pc, #464]	@ (800d8c0 <DMA_SetConfig+0x238>)
 800d6ee:	4293      	cmp	r3, r2
 800d6f0:	d04f      	beq.n	800d792 <DMA_SetConfig+0x10a>
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	4a73      	ldr	r2, [pc, #460]	@ (800d8c4 <DMA_SetConfig+0x23c>)
 800d6f8:	4293      	cmp	r3, r2
 800d6fa:	d04a      	beq.n	800d792 <DMA_SetConfig+0x10a>
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	4a71      	ldr	r2, [pc, #452]	@ (800d8c8 <DMA_SetConfig+0x240>)
 800d702:	4293      	cmp	r3, r2
 800d704:	d045      	beq.n	800d792 <DMA_SetConfig+0x10a>
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	4a70      	ldr	r2, [pc, #448]	@ (800d8cc <DMA_SetConfig+0x244>)
 800d70c:	4293      	cmp	r3, r2
 800d70e:	d040      	beq.n	800d792 <DMA_SetConfig+0x10a>
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	4a6e      	ldr	r2, [pc, #440]	@ (800d8d0 <DMA_SetConfig+0x248>)
 800d716:	4293      	cmp	r3, r2
 800d718:	d03b      	beq.n	800d792 <DMA_SetConfig+0x10a>
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	4a6d      	ldr	r2, [pc, #436]	@ (800d8d4 <DMA_SetConfig+0x24c>)
 800d720:	4293      	cmp	r3, r2
 800d722:	d036      	beq.n	800d792 <DMA_SetConfig+0x10a>
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	4a6b      	ldr	r2, [pc, #428]	@ (800d8d8 <DMA_SetConfig+0x250>)
 800d72a:	4293      	cmp	r3, r2
 800d72c:	d031      	beq.n	800d792 <DMA_SetConfig+0x10a>
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	4a6a      	ldr	r2, [pc, #424]	@ (800d8dc <DMA_SetConfig+0x254>)
 800d734:	4293      	cmp	r3, r2
 800d736:	d02c      	beq.n	800d792 <DMA_SetConfig+0x10a>
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	4a68      	ldr	r2, [pc, #416]	@ (800d8e0 <DMA_SetConfig+0x258>)
 800d73e:	4293      	cmp	r3, r2
 800d740:	d027      	beq.n	800d792 <DMA_SetConfig+0x10a>
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	4a67      	ldr	r2, [pc, #412]	@ (800d8e4 <DMA_SetConfig+0x25c>)
 800d748:	4293      	cmp	r3, r2
 800d74a:	d022      	beq.n	800d792 <DMA_SetConfig+0x10a>
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	4a65      	ldr	r2, [pc, #404]	@ (800d8e8 <DMA_SetConfig+0x260>)
 800d752:	4293      	cmp	r3, r2
 800d754:	d01d      	beq.n	800d792 <DMA_SetConfig+0x10a>
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	4a64      	ldr	r2, [pc, #400]	@ (800d8ec <DMA_SetConfig+0x264>)
 800d75c:	4293      	cmp	r3, r2
 800d75e:	d018      	beq.n	800d792 <DMA_SetConfig+0x10a>
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	4a62      	ldr	r2, [pc, #392]	@ (800d8f0 <DMA_SetConfig+0x268>)
 800d766:	4293      	cmp	r3, r2
 800d768:	d013      	beq.n	800d792 <DMA_SetConfig+0x10a>
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	4a61      	ldr	r2, [pc, #388]	@ (800d8f4 <DMA_SetConfig+0x26c>)
 800d770:	4293      	cmp	r3, r2
 800d772:	d00e      	beq.n	800d792 <DMA_SetConfig+0x10a>
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	4a5f      	ldr	r2, [pc, #380]	@ (800d8f8 <DMA_SetConfig+0x270>)
 800d77a:	4293      	cmp	r3, r2
 800d77c:	d009      	beq.n	800d792 <DMA_SetConfig+0x10a>
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	4a5e      	ldr	r2, [pc, #376]	@ (800d8fc <DMA_SetConfig+0x274>)
 800d784:	4293      	cmp	r3, r2
 800d786:	d004      	beq.n	800d792 <DMA_SetConfig+0x10a>
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	4a5c      	ldr	r2, [pc, #368]	@ (800d900 <DMA_SetConfig+0x278>)
 800d78e:	4293      	cmp	r3, r2
 800d790:	d101      	bne.n	800d796 <DMA_SetConfig+0x10e>
 800d792:	2301      	movs	r3, #1
 800d794:	e000      	b.n	800d798 <DMA_SetConfig+0x110>
 800d796:	2300      	movs	r3, #0
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d00d      	beq.n	800d7b8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d7a0:	68fa      	ldr	r2, [r7, #12]
 800d7a2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800d7a4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d004      	beq.n	800d7b8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d7b2:	68fa      	ldr	r2, [r7, #12]
 800d7b4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800d7b6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	4a39      	ldr	r2, [pc, #228]	@ (800d8a4 <DMA_SetConfig+0x21c>)
 800d7be:	4293      	cmp	r3, r2
 800d7c0:	d04a      	beq.n	800d858 <DMA_SetConfig+0x1d0>
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	4a38      	ldr	r2, [pc, #224]	@ (800d8a8 <DMA_SetConfig+0x220>)
 800d7c8:	4293      	cmp	r3, r2
 800d7ca:	d045      	beq.n	800d858 <DMA_SetConfig+0x1d0>
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	4a36      	ldr	r2, [pc, #216]	@ (800d8ac <DMA_SetConfig+0x224>)
 800d7d2:	4293      	cmp	r3, r2
 800d7d4:	d040      	beq.n	800d858 <DMA_SetConfig+0x1d0>
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	4a35      	ldr	r2, [pc, #212]	@ (800d8b0 <DMA_SetConfig+0x228>)
 800d7dc:	4293      	cmp	r3, r2
 800d7de:	d03b      	beq.n	800d858 <DMA_SetConfig+0x1d0>
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	4a33      	ldr	r2, [pc, #204]	@ (800d8b4 <DMA_SetConfig+0x22c>)
 800d7e6:	4293      	cmp	r3, r2
 800d7e8:	d036      	beq.n	800d858 <DMA_SetConfig+0x1d0>
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	4a32      	ldr	r2, [pc, #200]	@ (800d8b8 <DMA_SetConfig+0x230>)
 800d7f0:	4293      	cmp	r3, r2
 800d7f2:	d031      	beq.n	800d858 <DMA_SetConfig+0x1d0>
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	4a30      	ldr	r2, [pc, #192]	@ (800d8bc <DMA_SetConfig+0x234>)
 800d7fa:	4293      	cmp	r3, r2
 800d7fc:	d02c      	beq.n	800d858 <DMA_SetConfig+0x1d0>
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	4a2f      	ldr	r2, [pc, #188]	@ (800d8c0 <DMA_SetConfig+0x238>)
 800d804:	4293      	cmp	r3, r2
 800d806:	d027      	beq.n	800d858 <DMA_SetConfig+0x1d0>
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	4a2d      	ldr	r2, [pc, #180]	@ (800d8c4 <DMA_SetConfig+0x23c>)
 800d80e:	4293      	cmp	r3, r2
 800d810:	d022      	beq.n	800d858 <DMA_SetConfig+0x1d0>
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	4a2c      	ldr	r2, [pc, #176]	@ (800d8c8 <DMA_SetConfig+0x240>)
 800d818:	4293      	cmp	r3, r2
 800d81a:	d01d      	beq.n	800d858 <DMA_SetConfig+0x1d0>
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	4a2a      	ldr	r2, [pc, #168]	@ (800d8cc <DMA_SetConfig+0x244>)
 800d822:	4293      	cmp	r3, r2
 800d824:	d018      	beq.n	800d858 <DMA_SetConfig+0x1d0>
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	4a29      	ldr	r2, [pc, #164]	@ (800d8d0 <DMA_SetConfig+0x248>)
 800d82c:	4293      	cmp	r3, r2
 800d82e:	d013      	beq.n	800d858 <DMA_SetConfig+0x1d0>
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	4a27      	ldr	r2, [pc, #156]	@ (800d8d4 <DMA_SetConfig+0x24c>)
 800d836:	4293      	cmp	r3, r2
 800d838:	d00e      	beq.n	800d858 <DMA_SetConfig+0x1d0>
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	4a26      	ldr	r2, [pc, #152]	@ (800d8d8 <DMA_SetConfig+0x250>)
 800d840:	4293      	cmp	r3, r2
 800d842:	d009      	beq.n	800d858 <DMA_SetConfig+0x1d0>
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	4a24      	ldr	r2, [pc, #144]	@ (800d8dc <DMA_SetConfig+0x254>)
 800d84a:	4293      	cmp	r3, r2
 800d84c:	d004      	beq.n	800d858 <DMA_SetConfig+0x1d0>
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	4a23      	ldr	r2, [pc, #140]	@ (800d8e0 <DMA_SetConfig+0x258>)
 800d854:	4293      	cmp	r3, r2
 800d856:	d101      	bne.n	800d85c <DMA_SetConfig+0x1d4>
 800d858:	2301      	movs	r3, #1
 800d85a:	e000      	b.n	800d85e <DMA_SetConfig+0x1d6>
 800d85c:	2300      	movs	r3, #0
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d059      	beq.n	800d916 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d866:	f003 031f 	and.w	r3, r3, #31
 800d86a:	223f      	movs	r2, #63	@ 0x3f
 800d86c:	409a      	lsls	r2, r3
 800d86e:	697b      	ldr	r3, [r7, #20]
 800d870:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	681a      	ldr	r2, [r3, #0]
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800d880:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	683a      	ldr	r2, [r7, #0]
 800d888:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	689b      	ldr	r3, [r3, #8]
 800d88e:	2b40      	cmp	r3, #64	@ 0x40
 800d890:	d138      	bne.n	800d904 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	687a      	ldr	r2, [r7, #4]
 800d898:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	68ba      	ldr	r2, [r7, #8]
 800d8a0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800d8a2:	e086      	b.n	800d9b2 <DMA_SetConfig+0x32a>
 800d8a4:	40020010 	.word	0x40020010
 800d8a8:	40020028 	.word	0x40020028
 800d8ac:	40020040 	.word	0x40020040
 800d8b0:	40020058 	.word	0x40020058
 800d8b4:	40020070 	.word	0x40020070
 800d8b8:	40020088 	.word	0x40020088
 800d8bc:	400200a0 	.word	0x400200a0
 800d8c0:	400200b8 	.word	0x400200b8
 800d8c4:	40020410 	.word	0x40020410
 800d8c8:	40020428 	.word	0x40020428
 800d8cc:	40020440 	.word	0x40020440
 800d8d0:	40020458 	.word	0x40020458
 800d8d4:	40020470 	.word	0x40020470
 800d8d8:	40020488 	.word	0x40020488
 800d8dc:	400204a0 	.word	0x400204a0
 800d8e0:	400204b8 	.word	0x400204b8
 800d8e4:	58025408 	.word	0x58025408
 800d8e8:	5802541c 	.word	0x5802541c
 800d8ec:	58025430 	.word	0x58025430
 800d8f0:	58025444 	.word	0x58025444
 800d8f4:	58025458 	.word	0x58025458
 800d8f8:	5802546c 	.word	0x5802546c
 800d8fc:	58025480 	.word	0x58025480
 800d900:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	68ba      	ldr	r2, [r7, #8]
 800d90a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	687a      	ldr	r2, [r7, #4]
 800d912:	60da      	str	r2, [r3, #12]
}
 800d914:	e04d      	b.n	800d9b2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	4a29      	ldr	r2, [pc, #164]	@ (800d9c0 <DMA_SetConfig+0x338>)
 800d91c:	4293      	cmp	r3, r2
 800d91e:	d022      	beq.n	800d966 <DMA_SetConfig+0x2de>
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	4a27      	ldr	r2, [pc, #156]	@ (800d9c4 <DMA_SetConfig+0x33c>)
 800d926:	4293      	cmp	r3, r2
 800d928:	d01d      	beq.n	800d966 <DMA_SetConfig+0x2de>
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	4a26      	ldr	r2, [pc, #152]	@ (800d9c8 <DMA_SetConfig+0x340>)
 800d930:	4293      	cmp	r3, r2
 800d932:	d018      	beq.n	800d966 <DMA_SetConfig+0x2de>
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	4a24      	ldr	r2, [pc, #144]	@ (800d9cc <DMA_SetConfig+0x344>)
 800d93a:	4293      	cmp	r3, r2
 800d93c:	d013      	beq.n	800d966 <DMA_SetConfig+0x2de>
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	4a23      	ldr	r2, [pc, #140]	@ (800d9d0 <DMA_SetConfig+0x348>)
 800d944:	4293      	cmp	r3, r2
 800d946:	d00e      	beq.n	800d966 <DMA_SetConfig+0x2de>
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	4a21      	ldr	r2, [pc, #132]	@ (800d9d4 <DMA_SetConfig+0x34c>)
 800d94e:	4293      	cmp	r3, r2
 800d950:	d009      	beq.n	800d966 <DMA_SetConfig+0x2de>
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	4a20      	ldr	r2, [pc, #128]	@ (800d9d8 <DMA_SetConfig+0x350>)
 800d958:	4293      	cmp	r3, r2
 800d95a:	d004      	beq.n	800d966 <DMA_SetConfig+0x2de>
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	4a1e      	ldr	r2, [pc, #120]	@ (800d9dc <DMA_SetConfig+0x354>)
 800d962:	4293      	cmp	r3, r2
 800d964:	d101      	bne.n	800d96a <DMA_SetConfig+0x2e2>
 800d966:	2301      	movs	r3, #1
 800d968:	e000      	b.n	800d96c <DMA_SetConfig+0x2e4>
 800d96a:	2300      	movs	r3, #0
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d020      	beq.n	800d9b2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d974:	f003 031f 	and.w	r3, r3, #31
 800d978:	2201      	movs	r2, #1
 800d97a:	409a      	lsls	r2, r3
 800d97c:	693b      	ldr	r3, [r7, #16]
 800d97e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	683a      	ldr	r2, [r7, #0]
 800d986:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	689b      	ldr	r3, [r3, #8]
 800d98c:	2b40      	cmp	r3, #64	@ 0x40
 800d98e:	d108      	bne.n	800d9a2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	687a      	ldr	r2, [r7, #4]
 800d996:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	68ba      	ldr	r2, [r7, #8]
 800d99e:	60da      	str	r2, [r3, #12]
}
 800d9a0:	e007      	b.n	800d9b2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	68ba      	ldr	r2, [r7, #8]
 800d9a8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	687a      	ldr	r2, [r7, #4]
 800d9b0:	60da      	str	r2, [r3, #12]
}
 800d9b2:	bf00      	nop
 800d9b4:	371c      	adds	r7, #28
 800d9b6:	46bd      	mov	sp, r7
 800d9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9bc:	4770      	bx	lr
 800d9be:	bf00      	nop
 800d9c0:	58025408 	.word	0x58025408
 800d9c4:	5802541c 	.word	0x5802541c
 800d9c8:	58025430 	.word	0x58025430
 800d9cc:	58025444 	.word	0x58025444
 800d9d0:	58025458 	.word	0x58025458
 800d9d4:	5802546c 	.word	0x5802546c
 800d9d8:	58025480 	.word	0x58025480
 800d9dc:	58025494 	.word	0x58025494

0800d9e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800d9e0:	b480      	push	{r7}
 800d9e2:	b085      	sub	sp, #20
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	4a42      	ldr	r2, [pc, #264]	@ (800daf8 <DMA_CalcBaseAndBitshift+0x118>)
 800d9ee:	4293      	cmp	r3, r2
 800d9f0:	d04a      	beq.n	800da88 <DMA_CalcBaseAndBitshift+0xa8>
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	4a41      	ldr	r2, [pc, #260]	@ (800dafc <DMA_CalcBaseAndBitshift+0x11c>)
 800d9f8:	4293      	cmp	r3, r2
 800d9fa:	d045      	beq.n	800da88 <DMA_CalcBaseAndBitshift+0xa8>
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	4a3f      	ldr	r2, [pc, #252]	@ (800db00 <DMA_CalcBaseAndBitshift+0x120>)
 800da02:	4293      	cmp	r3, r2
 800da04:	d040      	beq.n	800da88 <DMA_CalcBaseAndBitshift+0xa8>
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	4a3e      	ldr	r2, [pc, #248]	@ (800db04 <DMA_CalcBaseAndBitshift+0x124>)
 800da0c:	4293      	cmp	r3, r2
 800da0e:	d03b      	beq.n	800da88 <DMA_CalcBaseAndBitshift+0xa8>
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	4a3c      	ldr	r2, [pc, #240]	@ (800db08 <DMA_CalcBaseAndBitshift+0x128>)
 800da16:	4293      	cmp	r3, r2
 800da18:	d036      	beq.n	800da88 <DMA_CalcBaseAndBitshift+0xa8>
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	4a3b      	ldr	r2, [pc, #236]	@ (800db0c <DMA_CalcBaseAndBitshift+0x12c>)
 800da20:	4293      	cmp	r3, r2
 800da22:	d031      	beq.n	800da88 <DMA_CalcBaseAndBitshift+0xa8>
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	4a39      	ldr	r2, [pc, #228]	@ (800db10 <DMA_CalcBaseAndBitshift+0x130>)
 800da2a:	4293      	cmp	r3, r2
 800da2c:	d02c      	beq.n	800da88 <DMA_CalcBaseAndBitshift+0xa8>
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	4a38      	ldr	r2, [pc, #224]	@ (800db14 <DMA_CalcBaseAndBitshift+0x134>)
 800da34:	4293      	cmp	r3, r2
 800da36:	d027      	beq.n	800da88 <DMA_CalcBaseAndBitshift+0xa8>
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	4a36      	ldr	r2, [pc, #216]	@ (800db18 <DMA_CalcBaseAndBitshift+0x138>)
 800da3e:	4293      	cmp	r3, r2
 800da40:	d022      	beq.n	800da88 <DMA_CalcBaseAndBitshift+0xa8>
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	4a35      	ldr	r2, [pc, #212]	@ (800db1c <DMA_CalcBaseAndBitshift+0x13c>)
 800da48:	4293      	cmp	r3, r2
 800da4a:	d01d      	beq.n	800da88 <DMA_CalcBaseAndBitshift+0xa8>
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	4a33      	ldr	r2, [pc, #204]	@ (800db20 <DMA_CalcBaseAndBitshift+0x140>)
 800da52:	4293      	cmp	r3, r2
 800da54:	d018      	beq.n	800da88 <DMA_CalcBaseAndBitshift+0xa8>
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	4a32      	ldr	r2, [pc, #200]	@ (800db24 <DMA_CalcBaseAndBitshift+0x144>)
 800da5c:	4293      	cmp	r3, r2
 800da5e:	d013      	beq.n	800da88 <DMA_CalcBaseAndBitshift+0xa8>
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	4a30      	ldr	r2, [pc, #192]	@ (800db28 <DMA_CalcBaseAndBitshift+0x148>)
 800da66:	4293      	cmp	r3, r2
 800da68:	d00e      	beq.n	800da88 <DMA_CalcBaseAndBitshift+0xa8>
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	4a2f      	ldr	r2, [pc, #188]	@ (800db2c <DMA_CalcBaseAndBitshift+0x14c>)
 800da70:	4293      	cmp	r3, r2
 800da72:	d009      	beq.n	800da88 <DMA_CalcBaseAndBitshift+0xa8>
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	4a2d      	ldr	r2, [pc, #180]	@ (800db30 <DMA_CalcBaseAndBitshift+0x150>)
 800da7a:	4293      	cmp	r3, r2
 800da7c:	d004      	beq.n	800da88 <DMA_CalcBaseAndBitshift+0xa8>
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	4a2c      	ldr	r2, [pc, #176]	@ (800db34 <DMA_CalcBaseAndBitshift+0x154>)
 800da84:	4293      	cmp	r3, r2
 800da86:	d101      	bne.n	800da8c <DMA_CalcBaseAndBitshift+0xac>
 800da88:	2301      	movs	r3, #1
 800da8a:	e000      	b.n	800da8e <DMA_CalcBaseAndBitshift+0xae>
 800da8c:	2300      	movs	r3, #0
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d024      	beq.n	800dadc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	b2db      	uxtb	r3, r3
 800da98:	3b10      	subs	r3, #16
 800da9a:	4a27      	ldr	r2, [pc, #156]	@ (800db38 <DMA_CalcBaseAndBitshift+0x158>)
 800da9c:	fba2 2303 	umull	r2, r3, r2, r3
 800daa0:	091b      	lsrs	r3, r3, #4
 800daa2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	f003 0307 	and.w	r3, r3, #7
 800daaa:	4a24      	ldr	r2, [pc, #144]	@ (800db3c <DMA_CalcBaseAndBitshift+0x15c>)
 800daac:	5cd3      	ldrb	r3, [r2, r3]
 800daae:	461a      	mov	r2, r3
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	2b03      	cmp	r3, #3
 800dab8:	d908      	bls.n	800dacc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	461a      	mov	r2, r3
 800dac0:	4b1f      	ldr	r3, [pc, #124]	@ (800db40 <DMA_CalcBaseAndBitshift+0x160>)
 800dac2:	4013      	ands	r3, r2
 800dac4:	1d1a      	adds	r2, r3, #4
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	659a      	str	r2, [r3, #88]	@ 0x58
 800daca:	e00d      	b.n	800dae8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	461a      	mov	r2, r3
 800dad2:	4b1b      	ldr	r3, [pc, #108]	@ (800db40 <DMA_CalcBaseAndBitshift+0x160>)
 800dad4:	4013      	ands	r3, r2
 800dad6:	687a      	ldr	r2, [r7, #4]
 800dad8:	6593      	str	r3, [r2, #88]	@ 0x58
 800dada:	e005      	b.n	800dae8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800daec:	4618      	mov	r0, r3
 800daee:	3714      	adds	r7, #20
 800daf0:	46bd      	mov	sp, r7
 800daf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf6:	4770      	bx	lr
 800daf8:	40020010 	.word	0x40020010
 800dafc:	40020028 	.word	0x40020028
 800db00:	40020040 	.word	0x40020040
 800db04:	40020058 	.word	0x40020058
 800db08:	40020070 	.word	0x40020070
 800db0c:	40020088 	.word	0x40020088
 800db10:	400200a0 	.word	0x400200a0
 800db14:	400200b8 	.word	0x400200b8
 800db18:	40020410 	.word	0x40020410
 800db1c:	40020428 	.word	0x40020428
 800db20:	40020440 	.word	0x40020440
 800db24:	40020458 	.word	0x40020458
 800db28:	40020470 	.word	0x40020470
 800db2c:	40020488 	.word	0x40020488
 800db30:	400204a0 	.word	0x400204a0
 800db34:	400204b8 	.word	0x400204b8
 800db38:	aaaaaaab 	.word	0xaaaaaaab
 800db3c:	0801e5a4 	.word	0x0801e5a4
 800db40:	fffffc00 	.word	0xfffffc00

0800db44 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800db44:	b480      	push	{r7}
 800db46:	b085      	sub	sp, #20
 800db48:	af00      	add	r7, sp, #0
 800db4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800db4c:	2300      	movs	r3, #0
 800db4e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	699b      	ldr	r3, [r3, #24]
 800db54:	2b00      	cmp	r3, #0
 800db56:	d120      	bne.n	800db9a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db5c:	2b03      	cmp	r3, #3
 800db5e:	d858      	bhi.n	800dc12 <DMA_CheckFifoParam+0xce>
 800db60:	a201      	add	r2, pc, #4	@ (adr r2, 800db68 <DMA_CheckFifoParam+0x24>)
 800db62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db66:	bf00      	nop
 800db68:	0800db79 	.word	0x0800db79
 800db6c:	0800db8b 	.word	0x0800db8b
 800db70:	0800db79 	.word	0x0800db79
 800db74:	0800dc13 	.word	0x0800dc13
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db7c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800db80:	2b00      	cmp	r3, #0
 800db82:	d048      	beq.n	800dc16 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800db84:	2301      	movs	r3, #1
 800db86:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800db88:	e045      	b.n	800dc16 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db8e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800db92:	d142      	bne.n	800dc1a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800db94:	2301      	movs	r3, #1
 800db96:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800db98:	e03f      	b.n	800dc1a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	699b      	ldr	r3, [r3, #24]
 800db9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800dba2:	d123      	bne.n	800dbec <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dba8:	2b03      	cmp	r3, #3
 800dbaa:	d838      	bhi.n	800dc1e <DMA_CheckFifoParam+0xda>
 800dbac:	a201      	add	r2, pc, #4	@ (adr r2, 800dbb4 <DMA_CheckFifoParam+0x70>)
 800dbae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbb2:	bf00      	nop
 800dbb4:	0800dbc5 	.word	0x0800dbc5
 800dbb8:	0800dbcb 	.word	0x0800dbcb
 800dbbc:	0800dbc5 	.word	0x0800dbc5
 800dbc0:	0800dbdd 	.word	0x0800dbdd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800dbc4:	2301      	movs	r3, #1
 800dbc6:	73fb      	strb	r3, [r7, #15]
        break;
 800dbc8:	e030      	b.n	800dc2c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbce:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d025      	beq.n	800dc22 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800dbd6:	2301      	movs	r3, #1
 800dbd8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800dbda:	e022      	b.n	800dc22 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbe0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800dbe4:	d11f      	bne.n	800dc26 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800dbe6:	2301      	movs	r3, #1
 800dbe8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800dbea:	e01c      	b.n	800dc26 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dbf0:	2b02      	cmp	r3, #2
 800dbf2:	d902      	bls.n	800dbfa <DMA_CheckFifoParam+0xb6>
 800dbf4:	2b03      	cmp	r3, #3
 800dbf6:	d003      	beq.n	800dc00 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800dbf8:	e018      	b.n	800dc2c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800dbfa:	2301      	movs	r3, #1
 800dbfc:	73fb      	strb	r3, [r7, #15]
        break;
 800dbfe:	e015      	b.n	800dc2c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc04:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d00e      	beq.n	800dc2a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800dc0c:	2301      	movs	r3, #1
 800dc0e:	73fb      	strb	r3, [r7, #15]
    break;
 800dc10:	e00b      	b.n	800dc2a <DMA_CheckFifoParam+0xe6>
        break;
 800dc12:	bf00      	nop
 800dc14:	e00a      	b.n	800dc2c <DMA_CheckFifoParam+0xe8>
        break;
 800dc16:	bf00      	nop
 800dc18:	e008      	b.n	800dc2c <DMA_CheckFifoParam+0xe8>
        break;
 800dc1a:	bf00      	nop
 800dc1c:	e006      	b.n	800dc2c <DMA_CheckFifoParam+0xe8>
        break;
 800dc1e:	bf00      	nop
 800dc20:	e004      	b.n	800dc2c <DMA_CheckFifoParam+0xe8>
        break;
 800dc22:	bf00      	nop
 800dc24:	e002      	b.n	800dc2c <DMA_CheckFifoParam+0xe8>
        break;
 800dc26:	bf00      	nop
 800dc28:	e000      	b.n	800dc2c <DMA_CheckFifoParam+0xe8>
    break;
 800dc2a:	bf00      	nop
    }
  }

  return status;
 800dc2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc2e:	4618      	mov	r0, r3
 800dc30:	3714      	adds	r7, #20
 800dc32:	46bd      	mov	sp, r7
 800dc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc38:	4770      	bx	lr
 800dc3a:	bf00      	nop

0800dc3c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800dc3c:	b480      	push	{r7}
 800dc3e:	b085      	sub	sp, #20
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	4a38      	ldr	r2, [pc, #224]	@ (800dd30 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800dc50:	4293      	cmp	r3, r2
 800dc52:	d022      	beq.n	800dc9a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	4a36      	ldr	r2, [pc, #216]	@ (800dd34 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800dc5a:	4293      	cmp	r3, r2
 800dc5c:	d01d      	beq.n	800dc9a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	4a35      	ldr	r2, [pc, #212]	@ (800dd38 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800dc64:	4293      	cmp	r3, r2
 800dc66:	d018      	beq.n	800dc9a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	4a33      	ldr	r2, [pc, #204]	@ (800dd3c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800dc6e:	4293      	cmp	r3, r2
 800dc70:	d013      	beq.n	800dc9a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	4a32      	ldr	r2, [pc, #200]	@ (800dd40 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800dc78:	4293      	cmp	r3, r2
 800dc7a:	d00e      	beq.n	800dc9a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	4a30      	ldr	r2, [pc, #192]	@ (800dd44 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800dc82:	4293      	cmp	r3, r2
 800dc84:	d009      	beq.n	800dc9a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	4a2f      	ldr	r2, [pc, #188]	@ (800dd48 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800dc8c:	4293      	cmp	r3, r2
 800dc8e:	d004      	beq.n	800dc9a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	4a2d      	ldr	r2, [pc, #180]	@ (800dd4c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800dc96:	4293      	cmp	r3, r2
 800dc98:	d101      	bne.n	800dc9e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800dc9a:	2301      	movs	r3, #1
 800dc9c:	e000      	b.n	800dca0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800dc9e:	2300      	movs	r3, #0
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d01a      	beq.n	800dcda <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	b2db      	uxtb	r3, r3
 800dcaa:	3b08      	subs	r3, #8
 800dcac:	4a28      	ldr	r2, [pc, #160]	@ (800dd50 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800dcae:	fba2 2303 	umull	r2, r3, r2, r3
 800dcb2:	091b      	lsrs	r3, r3, #4
 800dcb4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800dcb6:	68fa      	ldr	r2, [r7, #12]
 800dcb8:	4b26      	ldr	r3, [pc, #152]	@ (800dd54 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800dcba:	4413      	add	r3, r2
 800dcbc:	009b      	lsls	r3, r3, #2
 800dcbe:	461a      	mov	r2, r3
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	4a24      	ldr	r2, [pc, #144]	@ (800dd58 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800dcc8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	f003 031f 	and.w	r3, r3, #31
 800dcd0:	2201      	movs	r2, #1
 800dcd2:	409a      	lsls	r2, r3
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800dcd8:	e024      	b.n	800dd24 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	b2db      	uxtb	r3, r3
 800dce0:	3b10      	subs	r3, #16
 800dce2:	4a1e      	ldr	r2, [pc, #120]	@ (800dd5c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800dce4:	fba2 2303 	umull	r2, r3, r2, r3
 800dce8:	091b      	lsrs	r3, r3, #4
 800dcea:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800dcec:	68bb      	ldr	r3, [r7, #8]
 800dcee:	4a1c      	ldr	r2, [pc, #112]	@ (800dd60 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800dcf0:	4293      	cmp	r3, r2
 800dcf2:	d806      	bhi.n	800dd02 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800dcf4:	68bb      	ldr	r3, [r7, #8]
 800dcf6:	4a1b      	ldr	r2, [pc, #108]	@ (800dd64 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800dcf8:	4293      	cmp	r3, r2
 800dcfa:	d902      	bls.n	800dd02 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	3308      	adds	r3, #8
 800dd00:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800dd02:	68fa      	ldr	r2, [r7, #12]
 800dd04:	4b18      	ldr	r3, [pc, #96]	@ (800dd68 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800dd06:	4413      	add	r3, r2
 800dd08:	009b      	lsls	r3, r3, #2
 800dd0a:	461a      	mov	r2, r3
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	4a16      	ldr	r2, [pc, #88]	@ (800dd6c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800dd14:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	f003 031f 	and.w	r3, r3, #31
 800dd1c:	2201      	movs	r2, #1
 800dd1e:	409a      	lsls	r2, r3
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800dd24:	bf00      	nop
 800dd26:	3714      	adds	r7, #20
 800dd28:	46bd      	mov	sp, r7
 800dd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd2e:	4770      	bx	lr
 800dd30:	58025408 	.word	0x58025408
 800dd34:	5802541c 	.word	0x5802541c
 800dd38:	58025430 	.word	0x58025430
 800dd3c:	58025444 	.word	0x58025444
 800dd40:	58025458 	.word	0x58025458
 800dd44:	5802546c 	.word	0x5802546c
 800dd48:	58025480 	.word	0x58025480
 800dd4c:	58025494 	.word	0x58025494
 800dd50:	cccccccd 	.word	0xcccccccd
 800dd54:	16009600 	.word	0x16009600
 800dd58:	58025880 	.word	0x58025880
 800dd5c:	aaaaaaab 	.word	0xaaaaaaab
 800dd60:	400204b8 	.word	0x400204b8
 800dd64:	4002040f 	.word	0x4002040f
 800dd68:	10008200 	.word	0x10008200
 800dd6c:	40020880 	.word	0x40020880

0800dd70 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800dd70:	b480      	push	{r7}
 800dd72:	b085      	sub	sp, #20
 800dd74:	af00      	add	r7, sp, #0
 800dd76:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	685b      	ldr	r3, [r3, #4]
 800dd7c:	b2db      	uxtb	r3, r3
 800dd7e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d04a      	beq.n	800de1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	2b08      	cmp	r3, #8
 800dd8a:	d847      	bhi.n	800de1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	4a25      	ldr	r2, [pc, #148]	@ (800de28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800dd92:	4293      	cmp	r3, r2
 800dd94:	d022      	beq.n	800dddc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	4a24      	ldr	r2, [pc, #144]	@ (800de2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800dd9c:	4293      	cmp	r3, r2
 800dd9e:	d01d      	beq.n	800dddc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	4a22      	ldr	r2, [pc, #136]	@ (800de30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800dda6:	4293      	cmp	r3, r2
 800dda8:	d018      	beq.n	800dddc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	4a21      	ldr	r2, [pc, #132]	@ (800de34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800ddb0:	4293      	cmp	r3, r2
 800ddb2:	d013      	beq.n	800dddc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	4a1f      	ldr	r2, [pc, #124]	@ (800de38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800ddba:	4293      	cmp	r3, r2
 800ddbc:	d00e      	beq.n	800dddc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	4a1e      	ldr	r2, [pc, #120]	@ (800de3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800ddc4:	4293      	cmp	r3, r2
 800ddc6:	d009      	beq.n	800dddc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	4a1c      	ldr	r2, [pc, #112]	@ (800de40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800ddce:	4293      	cmp	r3, r2
 800ddd0:	d004      	beq.n	800dddc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	4a1b      	ldr	r2, [pc, #108]	@ (800de44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800ddd8:	4293      	cmp	r3, r2
 800ddda:	d101      	bne.n	800dde0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800dddc:	2301      	movs	r3, #1
 800ddde:	e000      	b.n	800dde2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800dde0:	2300      	movs	r3, #0
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d00a      	beq.n	800ddfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800dde6:	68fa      	ldr	r2, [r7, #12]
 800dde8:	4b17      	ldr	r3, [pc, #92]	@ (800de48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800ddea:	4413      	add	r3, r2
 800ddec:	009b      	lsls	r3, r3, #2
 800ddee:	461a      	mov	r2, r3
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	4a15      	ldr	r2, [pc, #84]	@ (800de4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800ddf8:	671a      	str	r2, [r3, #112]	@ 0x70
 800ddfa:	e009      	b.n	800de10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800ddfc:	68fa      	ldr	r2, [r7, #12]
 800ddfe:	4b14      	ldr	r3, [pc, #80]	@ (800de50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800de00:	4413      	add	r3, r2
 800de02:	009b      	lsls	r3, r3, #2
 800de04:	461a      	mov	r2, r3
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	4a11      	ldr	r2, [pc, #68]	@ (800de54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800de0e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	3b01      	subs	r3, #1
 800de14:	2201      	movs	r2, #1
 800de16:	409a      	lsls	r2, r3
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800de1c:	bf00      	nop
 800de1e:	3714      	adds	r7, #20
 800de20:	46bd      	mov	sp, r7
 800de22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de26:	4770      	bx	lr
 800de28:	58025408 	.word	0x58025408
 800de2c:	5802541c 	.word	0x5802541c
 800de30:	58025430 	.word	0x58025430
 800de34:	58025444 	.word	0x58025444
 800de38:	58025458 	.word	0x58025458
 800de3c:	5802546c 	.word	0x5802546c
 800de40:	58025480 	.word	0x58025480
 800de44:	58025494 	.word	0x58025494
 800de48:	1600963f 	.word	0x1600963f
 800de4c:	58025940 	.word	0x58025940
 800de50:	1000823f 	.word	0x1000823f
 800de54:	40020940 	.word	0x40020940

0800de58 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800de58:	b480      	push	{r7}
 800de5a:	b089      	sub	sp, #36	@ 0x24
 800de5c:	af00      	add	r7, sp, #0
 800de5e:	6078      	str	r0, [r7, #4]
 800de60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800de62:	2300      	movs	r3, #0
 800de64:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800de66:	4b86      	ldr	r3, [pc, #536]	@ (800e080 <HAL_GPIO_Init+0x228>)
 800de68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800de6a:	e18c      	b.n	800e186 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800de6c:	683b      	ldr	r3, [r7, #0]
 800de6e:	681a      	ldr	r2, [r3, #0]
 800de70:	2101      	movs	r1, #1
 800de72:	69fb      	ldr	r3, [r7, #28]
 800de74:	fa01 f303 	lsl.w	r3, r1, r3
 800de78:	4013      	ands	r3, r2
 800de7a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800de7c:	693b      	ldr	r3, [r7, #16]
 800de7e:	2b00      	cmp	r3, #0
 800de80:	f000 817e 	beq.w	800e180 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800de84:	683b      	ldr	r3, [r7, #0]
 800de86:	685b      	ldr	r3, [r3, #4]
 800de88:	f003 0303 	and.w	r3, r3, #3
 800de8c:	2b01      	cmp	r3, #1
 800de8e:	d005      	beq.n	800de9c <HAL_GPIO_Init+0x44>
 800de90:	683b      	ldr	r3, [r7, #0]
 800de92:	685b      	ldr	r3, [r3, #4]
 800de94:	f003 0303 	and.w	r3, r3, #3
 800de98:	2b02      	cmp	r3, #2
 800de9a:	d130      	bne.n	800defe <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	689b      	ldr	r3, [r3, #8]
 800dea0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800dea2:	69fb      	ldr	r3, [r7, #28]
 800dea4:	005b      	lsls	r3, r3, #1
 800dea6:	2203      	movs	r2, #3
 800dea8:	fa02 f303 	lsl.w	r3, r2, r3
 800deac:	43db      	mvns	r3, r3
 800deae:	69ba      	ldr	r2, [r7, #24]
 800deb0:	4013      	ands	r3, r2
 800deb2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800deb4:	683b      	ldr	r3, [r7, #0]
 800deb6:	68da      	ldr	r2, [r3, #12]
 800deb8:	69fb      	ldr	r3, [r7, #28]
 800deba:	005b      	lsls	r3, r3, #1
 800debc:	fa02 f303 	lsl.w	r3, r2, r3
 800dec0:	69ba      	ldr	r2, [r7, #24]
 800dec2:	4313      	orrs	r3, r2
 800dec4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	69ba      	ldr	r2, [r7, #24]
 800deca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	685b      	ldr	r3, [r3, #4]
 800ded0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800ded2:	2201      	movs	r2, #1
 800ded4:	69fb      	ldr	r3, [r7, #28]
 800ded6:	fa02 f303 	lsl.w	r3, r2, r3
 800deda:	43db      	mvns	r3, r3
 800dedc:	69ba      	ldr	r2, [r7, #24]
 800dede:	4013      	ands	r3, r2
 800dee0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800dee2:	683b      	ldr	r3, [r7, #0]
 800dee4:	685b      	ldr	r3, [r3, #4]
 800dee6:	091b      	lsrs	r3, r3, #4
 800dee8:	f003 0201 	and.w	r2, r3, #1
 800deec:	69fb      	ldr	r3, [r7, #28]
 800deee:	fa02 f303 	lsl.w	r3, r2, r3
 800def2:	69ba      	ldr	r2, [r7, #24]
 800def4:	4313      	orrs	r3, r2
 800def6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	69ba      	ldr	r2, [r7, #24]
 800defc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800defe:	683b      	ldr	r3, [r7, #0]
 800df00:	685b      	ldr	r3, [r3, #4]
 800df02:	f003 0303 	and.w	r3, r3, #3
 800df06:	2b03      	cmp	r3, #3
 800df08:	d017      	beq.n	800df3a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	68db      	ldr	r3, [r3, #12]
 800df0e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800df10:	69fb      	ldr	r3, [r7, #28]
 800df12:	005b      	lsls	r3, r3, #1
 800df14:	2203      	movs	r2, #3
 800df16:	fa02 f303 	lsl.w	r3, r2, r3
 800df1a:	43db      	mvns	r3, r3
 800df1c:	69ba      	ldr	r2, [r7, #24]
 800df1e:	4013      	ands	r3, r2
 800df20:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800df22:	683b      	ldr	r3, [r7, #0]
 800df24:	689a      	ldr	r2, [r3, #8]
 800df26:	69fb      	ldr	r3, [r7, #28]
 800df28:	005b      	lsls	r3, r3, #1
 800df2a:	fa02 f303 	lsl.w	r3, r2, r3
 800df2e:	69ba      	ldr	r2, [r7, #24]
 800df30:	4313      	orrs	r3, r2
 800df32:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	69ba      	ldr	r2, [r7, #24]
 800df38:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800df3a:	683b      	ldr	r3, [r7, #0]
 800df3c:	685b      	ldr	r3, [r3, #4]
 800df3e:	f003 0303 	and.w	r3, r3, #3
 800df42:	2b02      	cmp	r3, #2
 800df44:	d123      	bne.n	800df8e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800df46:	69fb      	ldr	r3, [r7, #28]
 800df48:	08da      	lsrs	r2, r3, #3
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	3208      	adds	r2, #8
 800df4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800df54:	69fb      	ldr	r3, [r7, #28]
 800df56:	f003 0307 	and.w	r3, r3, #7
 800df5a:	009b      	lsls	r3, r3, #2
 800df5c:	220f      	movs	r2, #15
 800df5e:	fa02 f303 	lsl.w	r3, r2, r3
 800df62:	43db      	mvns	r3, r3
 800df64:	69ba      	ldr	r2, [r7, #24]
 800df66:	4013      	ands	r3, r2
 800df68:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800df6a:	683b      	ldr	r3, [r7, #0]
 800df6c:	691a      	ldr	r2, [r3, #16]
 800df6e:	69fb      	ldr	r3, [r7, #28]
 800df70:	f003 0307 	and.w	r3, r3, #7
 800df74:	009b      	lsls	r3, r3, #2
 800df76:	fa02 f303 	lsl.w	r3, r2, r3
 800df7a:	69ba      	ldr	r2, [r7, #24]
 800df7c:	4313      	orrs	r3, r2
 800df7e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800df80:	69fb      	ldr	r3, [r7, #28]
 800df82:	08da      	lsrs	r2, r3, #3
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	3208      	adds	r2, #8
 800df88:	69b9      	ldr	r1, [r7, #24]
 800df8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800df94:	69fb      	ldr	r3, [r7, #28]
 800df96:	005b      	lsls	r3, r3, #1
 800df98:	2203      	movs	r2, #3
 800df9a:	fa02 f303 	lsl.w	r3, r2, r3
 800df9e:	43db      	mvns	r3, r3
 800dfa0:	69ba      	ldr	r2, [r7, #24]
 800dfa2:	4013      	ands	r3, r2
 800dfa4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800dfa6:	683b      	ldr	r3, [r7, #0]
 800dfa8:	685b      	ldr	r3, [r3, #4]
 800dfaa:	f003 0203 	and.w	r2, r3, #3
 800dfae:	69fb      	ldr	r3, [r7, #28]
 800dfb0:	005b      	lsls	r3, r3, #1
 800dfb2:	fa02 f303 	lsl.w	r3, r2, r3
 800dfb6:	69ba      	ldr	r2, [r7, #24]
 800dfb8:	4313      	orrs	r3, r2
 800dfba:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	69ba      	ldr	r2, [r7, #24]
 800dfc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800dfc2:	683b      	ldr	r3, [r7, #0]
 800dfc4:	685b      	ldr	r3, [r3, #4]
 800dfc6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	f000 80d8 	beq.w	800e180 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800dfd0:	4b2c      	ldr	r3, [pc, #176]	@ (800e084 <HAL_GPIO_Init+0x22c>)
 800dfd2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800dfd6:	4a2b      	ldr	r2, [pc, #172]	@ (800e084 <HAL_GPIO_Init+0x22c>)
 800dfd8:	f043 0302 	orr.w	r3, r3, #2
 800dfdc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800dfe0:	4b28      	ldr	r3, [pc, #160]	@ (800e084 <HAL_GPIO_Init+0x22c>)
 800dfe2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800dfe6:	f003 0302 	and.w	r3, r3, #2
 800dfea:	60fb      	str	r3, [r7, #12]
 800dfec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800dfee:	4a26      	ldr	r2, [pc, #152]	@ (800e088 <HAL_GPIO_Init+0x230>)
 800dff0:	69fb      	ldr	r3, [r7, #28]
 800dff2:	089b      	lsrs	r3, r3, #2
 800dff4:	3302      	adds	r3, #2
 800dff6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dffa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800dffc:	69fb      	ldr	r3, [r7, #28]
 800dffe:	f003 0303 	and.w	r3, r3, #3
 800e002:	009b      	lsls	r3, r3, #2
 800e004:	220f      	movs	r2, #15
 800e006:	fa02 f303 	lsl.w	r3, r2, r3
 800e00a:	43db      	mvns	r3, r3
 800e00c:	69ba      	ldr	r2, [r7, #24]
 800e00e:	4013      	ands	r3, r2
 800e010:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	4a1d      	ldr	r2, [pc, #116]	@ (800e08c <HAL_GPIO_Init+0x234>)
 800e016:	4293      	cmp	r3, r2
 800e018:	d04a      	beq.n	800e0b0 <HAL_GPIO_Init+0x258>
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	4a1c      	ldr	r2, [pc, #112]	@ (800e090 <HAL_GPIO_Init+0x238>)
 800e01e:	4293      	cmp	r3, r2
 800e020:	d02b      	beq.n	800e07a <HAL_GPIO_Init+0x222>
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	4a1b      	ldr	r2, [pc, #108]	@ (800e094 <HAL_GPIO_Init+0x23c>)
 800e026:	4293      	cmp	r3, r2
 800e028:	d025      	beq.n	800e076 <HAL_GPIO_Init+0x21e>
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	4a1a      	ldr	r2, [pc, #104]	@ (800e098 <HAL_GPIO_Init+0x240>)
 800e02e:	4293      	cmp	r3, r2
 800e030:	d01f      	beq.n	800e072 <HAL_GPIO_Init+0x21a>
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	4a19      	ldr	r2, [pc, #100]	@ (800e09c <HAL_GPIO_Init+0x244>)
 800e036:	4293      	cmp	r3, r2
 800e038:	d019      	beq.n	800e06e <HAL_GPIO_Init+0x216>
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	4a18      	ldr	r2, [pc, #96]	@ (800e0a0 <HAL_GPIO_Init+0x248>)
 800e03e:	4293      	cmp	r3, r2
 800e040:	d013      	beq.n	800e06a <HAL_GPIO_Init+0x212>
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	4a17      	ldr	r2, [pc, #92]	@ (800e0a4 <HAL_GPIO_Init+0x24c>)
 800e046:	4293      	cmp	r3, r2
 800e048:	d00d      	beq.n	800e066 <HAL_GPIO_Init+0x20e>
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	4a16      	ldr	r2, [pc, #88]	@ (800e0a8 <HAL_GPIO_Init+0x250>)
 800e04e:	4293      	cmp	r3, r2
 800e050:	d007      	beq.n	800e062 <HAL_GPIO_Init+0x20a>
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	4a15      	ldr	r2, [pc, #84]	@ (800e0ac <HAL_GPIO_Init+0x254>)
 800e056:	4293      	cmp	r3, r2
 800e058:	d101      	bne.n	800e05e <HAL_GPIO_Init+0x206>
 800e05a:	2309      	movs	r3, #9
 800e05c:	e029      	b.n	800e0b2 <HAL_GPIO_Init+0x25a>
 800e05e:	230a      	movs	r3, #10
 800e060:	e027      	b.n	800e0b2 <HAL_GPIO_Init+0x25a>
 800e062:	2307      	movs	r3, #7
 800e064:	e025      	b.n	800e0b2 <HAL_GPIO_Init+0x25a>
 800e066:	2306      	movs	r3, #6
 800e068:	e023      	b.n	800e0b2 <HAL_GPIO_Init+0x25a>
 800e06a:	2305      	movs	r3, #5
 800e06c:	e021      	b.n	800e0b2 <HAL_GPIO_Init+0x25a>
 800e06e:	2304      	movs	r3, #4
 800e070:	e01f      	b.n	800e0b2 <HAL_GPIO_Init+0x25a>
 800e072:	2303      	movs	r3, #3
 800e074:	e01d      	b.n	800e0b2 <HAL_GPIO_Init+0x25a>
 800e076:	2302      	movs	r3, #2
 800e078:	e01b      	b.n	800e0b2 <HAL_GPIO_Init+0x25a>
 800e07a:	2301      	movs	r3, #1
 800e07c:	e019      	b.n	800e0b2 <HAL_GPIO_Init+0x25a>
 800e07e:	bf00      	nop
 800e080:	58000080 	.word	0x58000080
 800e084:	58024400 	.word	0x58024400
 800e088:	58000400 	.word	0x58000400
 800e08c:	58020000 	.word	0x58020000
 800e090:	58020400 	.word	0x58020400
 800e094:	58020800 	.word	0x58020800
 800e098:	58020c00 	.word	0x58020c00
 800e09c:	58021000 	.word	0x58021000
 800e0a0:	58021400 	.word	0x58021400
 800e0a4:	58021800 	.word	0x58021800
 800e0a8:	58021c00 	.word	0x58021c00
 800e0ac:	58022400 	.word	0x58022400
 800e0b0:	2300      	movs	r3, #0
 800e0b2:	69fa      	ldr	r2, [r7, #28]
 800e0b4:	f002 0203 	and.w	r2, r2, #3
 800e0b8:	0092      	lsls	r2, r2, #2
 800e0ba:	4093      	lsls	r3, r2
 800e0bc:	69ba      	ldr	r2, [r7, #24]
 800e0be:	4313      	orrs	r3, r2
 800e0c0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800e0c2:	4938      	ldr	r1, [pc, #224]	@ (800e1a4 <HAL_GPIO_Init+0x34c>)
 800e0c4:	69fb      	ldr	r3, [r7, #28]
 800e0c6:	089b      	lsrs	r3, r3, #2
 800e0c8:	3302      	adds	r3, #2
 800e0ca:	69ba      	ldr	r2, [r7, #24]
 800e0cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800e0d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800e0d8:	693b      	ldr	r3, [r7, #16]
 800e0da:	43db      	mvns	r3, r3
 800e0dc:	69ba      	ldr	r2, [r7, #24]
 800e0de:	4013      	ands	r3, r2
 800e0e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800e0e2:	683b      	ldr	r3, [r7, #0]
 800e0e4:	685b      	ldr	r3, [r3, #4]
 800e0e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d003      	beq.n	800e0f6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800e0ee:	69ba      	ldr	r2, [r7, #24]
 800e0f0:	693b      	ldr	r3, [r7, #16]
 800e0f2:	4313      	orrs	r3, r2
 800e0f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800e0f6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e0fa:	69bb      	ldr	r3, [r7, #24]
 800e0fc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800e0fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e102:	685b      	ldr	r3, [r3, #4]
 800e104:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800e106:	693b      	ldr	r3, [r7, #16]
 800e108:	43db      	mvns	r3, r3
 800e10a:	69ba      	ldr	r2, [r7, #24]
 800e10c:	4013      	ands	r3, r2
 800e10e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800e110:	683b      	ldr	r3, [r7, #0]
 800e112:	685b      	ldr	r3, [r3, #4]
 800e114:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d003      	beq.n	800e124 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800e11c:	69ba      	ldr	r2, [r7, #24]
 800e11e:	693b      	ldr	r3, [r7, #16]
 800e120:	4313      	orrs	r3, r2
 800e122:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800e124:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e128:	69bb      	ldr	r3, [r7, #24]
 800e12a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800e12c:	697b      	ldr	r3, [r7, #20]
 800e12e:	685b      	ldr	r3, [r3, #4]
 800e130:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800e132:	693b      	ldr	r3, [r7, #16]
 800e134:	43db      	mvns	r3, r3
 800e136:	69ba      	ldr	r2, [r7, #24]
 800e138:	4013      	ands	r3, r2
 800e13a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800e13c:	683b      	ldr	r3, [r7, #0]
 800e13e:	685b      	ldr	r3, [r3, #4]
 800e140:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e144:	2b00      	cmp	r3, #0
 800e146:	d003      	beq.n	800e150 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800e148:	69ba      	ldr	r2, [r7, #24]
 800e14a:	693b      	ldr	r3, [r7, #16]
 800e14c:	4313      	orrs	r3, r2
 800e14e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800e150:	697b      	ldr	r3, [r7, #20]
 800e152:	69ba      	ldr	r2, [r7, #24]
 800e154:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800e156:	697b      	ldr	r3, [r7, #20]
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800e15c:	693b      	ldr	r3, [r7, #16]
 800e15e:	43db      	mvns	r3, r3
 800e160:	69ba      	ldr	r2, [r7, #24]
 800e162:	4013      	ands	r3, r2
 800e164:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800e166:	683b      	ldr	r3, [r7, #0]
 800e168:	685b      	ldr	r3, [r3, #4]
 800e16a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d003      	beq.n	800e17a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800e172:	69ba      	ldr	r2, [r7, #24]
 800e174:	693b      	ldr	r3, [r7, #16]
 800e176:	4313      	orrs	r3, r2
 800e178:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800e17a:	697b      	ldr	r3, [r7, #20]
 800e17c:	69ba      	ldr	r2, [r7, #24]
 800e17e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800e180:	69fb      	ldr	r3, [r7, #28]
 800e182:	3301      	adds	r3, #1
 800e184:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800e186:	683b      	ldr	r3, [r7, #0]
 800e188:	681a      	ldr	r2, [r3, #0]
 800e18a:	69fb      	ldr	r3, [r7, #28]
 800e18c:	fa22 f303 	lsr.w	r3, r2, r3
 800e190:	2b00      	cmp	r3, #0
 800e192:	f47f ae6b 	bne.w	800de6c <HAL_GPIO_Init+0x14>
  }
}
 800e196:	bf00      	nop
 800e198:	bf00      	nop
 800e19a:	3724      	adds	r7, #36	@ 0x24
 800e19c:	46bd      	mov	sp, r7
 800e19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a2:	4770      	bx	lr
 800e1a4:	58000400 	.word	0x58000400

0800e1a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800e1a8:	b480      	push	{r7}
 800e1aa:	b085      	sub	sp, #20
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]
 800e1b0:	460b      	mov	r3, r1
 800e1b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	691a      	ldr	r2, [r3, #16]
 800e1b8:	887b      	ldrh	r3, [r7, #2]
 800e1ba:	4013      	ands	r3, r2
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d002      	beq.n	800e1c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800e1c0:	2301      	movs	r3, #1
 800e1c2:	73fb      	strb	r3, [r7, #15]
 800e1c4:	e001      	b.n	800e1ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800e1c6:	2300      	movs	r3, #0
 800e1c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800e1ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1cc:	4618      	mov	r0, r3
 800e1ce:	3714      	adds	r7, #20
 800e1d0:	46bd      	mov	sp, r7
 800e1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d6:	4770      	bx	lr

0800e1d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800e1d8:	b480      	push	{r7}
 800e1da:	b083      	sub	sp, #12
 800e1dc:	af00      	add	r7, sp, #0
 800e1de:	6078      	str	r0, [r7, #4]
 800e1e0:	460b      	mov	r3, r1
 800e1e2:	807b      	strh	r3, [r7, #2]
 800e1e4:	4613      	mov	r3, r2
 800e1e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800e1e8:	787b      	ldrb	r3, [r7, #1]
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d003      	beq.n	800e1f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800e1ee:	887a      	ldrh	r2, [r7, #2]
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800e1f4:	e003      	b.n	800e1fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800e1f6:	887b      	ldrh	r3, [r7, #2]
 800e1f8:	041a      	lsls	r2, r3, #16
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	619a      	str	r2, [r3, #24]
}
 800e1fe:	bf00      	nop
 800e200:	370c      	adds	r7, #12
 800e202:	46bd      	mov	sp, r7
 800e204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e208:	4770      	bx	lr

0800e20a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800e20a:	b580      	push	{r7, lr}
 800e20c:	b082      	sub	sp, #8
 800e20e:	af00      	add	r7, sp, #0
 800e210:	4603      	mov	r3, r0
 800e212:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800e214:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e218:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800e21c:	88fb      	ldrh	r3, [r7, #6]
 800e21e:	4013      	ands	r3, r2
 800e220:	2b00      	cmp	r3, #0
 800e222:	d008      	beq.n	800e236 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800e224:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e228:	88fb      	ldrh	r3, [r7, #6]
 800e22a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800e22e:	88fb      	ldrh	r3, [r7, #6]
 800e230:	4618      	mov	r0, r3
 800e232:	f7f7 ff5b 	bl	80060ec <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800e236:	bf00      	nop
 800e238:	3708      	adds	r7, #8
 800e23a:	46bd      	mov	sp, r7
 800e23c:	bd80      	pop	{r7, pc}
	...

0800e240 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800e240:	b580      	push	{r7, lr}
 800e242:	b082      	sub	sp, #8
 800e244:	af00      	add	r7, sp, #0
 800e246:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d101      	bne.n	800e252 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800e24e:	2301      	movs	r3, #1
 800e250:	e08b      	b.n	800e36a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e258:	b2db      	uxtb	r3, r3
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d106      	bne.n	800e26c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	2200      	movs	r2, #0
 800e262:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800e266:	6878      	ldr	r0, [r7, #4]
 800e268:	f7f6 fde2 	bl	8004e30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	2224      	movs	r2, #36	@ 0x24
 800e270:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	681a      	ldr	r2, [r3, #0]
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	f022 0201 	bic.w	r2, r2, #1
 800e282:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	685a      	ldr	r2, [r3, #4]
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800e290:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	689a      	ldr	r2, [r3, #8]
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800e2a0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	68db      	ldr	r3, [r3, #12]
 800e2a6:	2b01      	cmp	r3, #1
 800e2a8:	d107      	bne.n	800e2ba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	689a      	ldr	r2, [r3, #8]
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800e2b6:	609a      	str	r2, [r3, #8]
 800e2b8:	e006      	b.n	800e2c8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	689a      	ldr	r2, [r3, #8]
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800e2c6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	68db      	ldr	r3, [r3, #12]
 800e2cc:	2b02      	cmp	r3, #2
 800e2ce:	d108      	bne.n	800e2e2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	685a      	ldr	r2, [r3, #4]
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e2de:	605a      	str	r2, [r3, #4]
 800e2e0:	e007      	b.n	800e2f2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	685a      	ldr	r2, [r3, #4]
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800e2f0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	6859      	ldr	r1, [r3, #4]
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	681a      	ldr	r2, [r3, #0]
 800e2fc:	4b1d      	ldr	r3, [pc, #116]	@ (800e374 <HAL_I2C_Init+0x134>)
 800e2fe:	430b      	orrs	r3, r1
 800e300:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	68da      	ldr	r2, [r3, #12]
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800e310:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	691a      	ldr	r2, [r3, #16]
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	695b      	ldr	r3, [r3, #20]
 800e31a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	699b      	ldr	r3, [r3, #24]
 800e322:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	430a      	orrs	r2, r1
 800e32a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	69d9      	ldr	r1, [r3, #28]
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	6a1a      	ldr	r2, [r3, #32]
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	430a      	orrs	r2, r1
 800e33a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	681a      	ldr	r2, [r3, #0]
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	f042 0201 	orr.w	r2, r2, #1
 800e34a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	2200      	movs	r2, #0
 800e350:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	2220      	movs	r2, #32
 800e356:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	2200      	movs	r2, #0
 800e35e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	2200      	movs	r2, #0
 800e364:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800e368:	2300      	movs	r3, #0
}
 800e36a:	4618      	mov	r0, r3
 800e36c:	3708      	adds	r7, #8
 800e36e:	46bd      	mov	sp, r7
 800e370:	bd80      	pop	{r7, pc}
 800e372:	bf00      	nop
 800e374:	02008000 	.word	0x02008000

0800e378 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e378:	b580      	push	{r7, lr}
 800e37a:	b088      	sub	sp, #32
 800e37c:	af02      	add	r7, sp, #8
 800e37e:	60f8      	str	r0, [r7, #12]
 800e380:	4608      	mov	r0, r1
 800e382:	4611      	mov	r1, r2
 800e384:	461a      	mov	r2, r3
 800e386:	4603      	mov	r3, r0
 800e388:	817b      	strh	r3, [r7, #10]
 800e38a:	460b      	mov	r3, r1
 800e38c:	813b      	strh	r3, [r7, #8]
 800e38e:	4613      	mov	r3, r2
 800e390:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e398:	b2db      	uxtb	r3, r3
 800e39a:	2b20      	cmp	r3, #32
 800e39c:	f040 80f9 	bne.w	800e592 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800e3a0:	6a3b      	ldr	r3, [r7, #32]
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d002      	beq.n	800e3ac <HAL_I2C_Mem_Write+0x34>
 800e3a6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d105      	bne.n	800e3b8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e3b2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800e3b4:	2301      	movs	r3, #1
 800e3b6:	e0ed      	b.n	800e594 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e3be:	2b01      	cmp	r3, #1
 800e3c0:	d101      	bne.n	800e3c6 <HAL_I2C_Mem_Write+0x4e>
 800e3c2:	2302      	movs	r3, #2
 800e3c4:	e0e6      	b.n	800e594 <HAL_I2C_Mem_Write+0x21c>
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	2201      	movs	r2, #1
 800e3ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800e3ce:	f7fa fd99 	bl	8008f04 <HAL_GetTick>
 800e3d2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800e3d4:	697b      	ldr	r3, [r7, #20]
 800e3d6:	9300      	str	r3, [sp, #0]
 800e3d8:	2319      	movs	r3, #25
 800e3da:	2201      	movs	r2, #1
 800e3dc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800e3e0:	68f8      	ldr	r0, [r7, #12]
 800e3e2:	f002 f818 	bl	8010416 <I2C_WaitOnFlagUntilTimeout>
 800e3e6:	4603      	mov	r3, r0
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d001      	beq.n	800e3f0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800e3ec:	2301      	movs	r3, #1
 800e3ee:	e0d1      	b.n	800e594 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	2221      	movs	r2, #33	@ 0x21
 800e3f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	2240      	movs	r2, #64	@ 0x40
 800e3fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	2200      	movs	r2, #0
 800e404:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	6a3a      	ldr	r2, [r7, #32]
 800e40a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800e410:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	2200      	movs	r2, #0
 800e416:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800e418:	88f8      	ldrh	r0, [r7, #6]
 800e41a:	893a      	ldrh	r2, [r7, #8]
 800e41c:	8979      	ldrh	r1, [r7, #10]
 800e41e:	697b      	ldr	r3, [r7, #20]
 800e420:	9301      	str	r3, [sp, #4]
 800e422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e424:	9300      	str	r3, [sp, #0]
 800e426:	4603      	mov	r3, r0
 800e428:	68f8      	ldr	r0, [r7, #12]
 800e42a:	f001 f965 	bl	800f6f8 <I2C_RequestMemoryWrite>
 800e42e:	4603      	mov	r3, r0
 800e430:	2b00      	cmp	r3, #0
 800e432:	d005      	beq.n	800e440 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	2200      	movs	r2, #0
 800e438:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800e43c:	2301      	movs	r3, #1
 800e43e:	e0a9      	b.n	800e594 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e444:	b29b      	uxth	r3, r3
 800e446:	2bff      	cmp	r3, #255	@ 0xff
 800e448:	d90e      	bls.n	800e468 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	22ff      	movs	r2, #255	@ 0xff
 800e44e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e454:	b2da      	uxtb	r2, r3
 800e456:	8979      	ldrh	r1, [r7, #10]
 800e458:	2300      	movs	r3, #0
 800e45a:	9300      	str	r3, [sp, #0]
 800e45c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800e460:	68f8      	ldr	r0, [r7, #12]
 800e462:	f002 f99b 	bl	801079c <I2C_TransferConfig>
 800e466:	e00f      	b.n	800e488 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e46c:	b29a      	uxth	r2, r3
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e476:	b2da      	uxtb	r2, r3
 800e478:	8979      	ldrh	r1, [r7, #10]
 800e47a:	2300      	movs	r3, #0
 800e47c:	9300      	str	r3, [sp, #0]
 800e47e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800e482:	68f8      	ldr	r0, [r7, #12]
 800e484:	f002 f98a 	bl	801079c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e488:	697a      	ldr	r2, [r7, #20]
 800e48a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e48c:	68f8      	ldr	r0, [r7, #12]
 800e48e:	f002 f81b 	bl	80104c8 <I2C_WaitOnTXISFlagUntilTimeout>
 800e492:	4603      	mov	r3, r0
 800e494:	2b00      	cmp	r3, #0
 800e496:	d001      	beq.n	800e49c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800e498:	2301      	movs	r3, #1
 800e49a:	e07b      	b.n	800e594 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e4a0:	781a      	ldrb	r2, [r3, #0]
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e4ac:	1c5a      	adds	r2, r3, #1
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e4b6:	b29b      	uxth	r3, r3
 800e4b8:	3b01      	subs	r3, #1
 800e4ba:	b29a      	uxth	r2, r3
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e4c4:	3b01      	subs	r3, #1
 800e4c6:	b29a      	uxth	r2, r3
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e4d0:	b29b      	uxth	r3, r3
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d034      	beq.n	800e540 <HAL_I2C_Mem_Write+0x1c8>
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d130      	bne.n	800e540 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800e4de:	697b      	ldr	r3, [r7, #20]
 800e4e0:	9300      	str	r3, [sp, #0]
 800e4e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4e4:	2200      	movs	r2, #0
 800e4e6:	2180      	movs	r1, #128	@ 0x80
 800e4e8:	68f8      	ldr	r0, [r7, #12]
 800e4ea:	f001 ff94 	bl	8010416 <I2C_WaitOnFlagUntilTimeout>
 800e4ee:	4603      	mov	r3, r0
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d001      	beq.n	800e4f8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800e4f4:	2301      	movs	r3, #1
 800e4f6:	e04d      	b.n	800e594 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e4fc:	b29b      	uxth	r3, r3
 800e4fe:	2bff      	cmp	r3, #255	@ 0xff
 800e500:	d90e      	bls.n	800e520 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	22ff      	movs	r2, #255	@ 0xff
 800e506:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e50c:	b2da      	uxtb	r2, r3
 800e50e:	8979      	ldrh	r1, [r7, #10]
 800e510:	2300      	movs	r3, #0
 800e512:	9300      	str	r3, [sp, #0]
 800e514:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800e518:	68f8      	ldr	r0, [r7, #12]
 800e51a:	f002 f93f 	bl	801079c <I2C_TransferConfig>
 800e51e:	e00f      	b.n	800e540 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e524:	b29a      	uxth	r2, r3
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e52e:	b2da      	uxtb	r2, r3
 800e530:	8979      	ldrh	r1, [r7, #10]
 800e532:	2300      	movs	r3, #0
 800e534:	9300      	str	r3, [sp, #0]
 800e536:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800e53a:	68f8      	ldr	r0, [r7, #12]
 800e53c:	f002 f92e 	bl	801079c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e544:	b29b      	uxth	r3, r3
 800e546:	2b00      	cmp	r3, #0
 800e548:	d19e      	bne.n	800e488 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e54a:	697a      	ldr	r2, [r7, #20]
 800e54c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e54e:	68f8      	ldr	r0, [r7, #12]
 800e550:	f002 f801 	bl	8010556 <I2C_WaitOnSTOPFlagUntilTimeout>
 800e554:	4603      	mov	r3, r0
 800e556:	2b00      	cmp	r3, #0
 800e558:	d001      	beq.n	800e55e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800e55a:	2301      	movs	r3, #1
 800e55c:	e01a      	b.n	800e594 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	2220      	movs	r2, #32
 800e564:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	6859      	ldr	r1, [r3, #4]
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	681a      	ldr	r2, [r3, #0]
 800e570:	4b0a      	ldr	r3, [pc, #40]	@ (800e59c <HAL_I2C_Mem_Write+0x224>)
 800e572:	400b      	ands	r3, r1
 800e574:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	2220      	movs	r2, #32
 800e57a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	2200      	movs	r2, #0
 800e582:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	2200      	movs	r2, #0
 800e58a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800e58e:	2300      	movs	r3, #0
 800e590:	e000      	b.n	800e594 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800e592:	2302      	movs	r3, #2
  }
}
 800e594:	4618      	mov	r0, r3
 800e596:	3718      	adds	r7, #24
 800e598:	46bd      	mov	sp, r7
 800e59a:	bd80      	pop	{r7, pc}
 800e59c:	fe00e800 	.word	0xfe00e800

0800e5a0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e5a0:	b580      	push	{r7, lr}
 800e5a2:	b088      	sub	sp, #32
 800e5a4:	af02      	add	r7, sp, #8
 800e5a6:	60f8      	str	r0, [r7, #12]
 800e5a8:	4608      	mov	r0, r1
 800e5aa:	4611      	mov	r1, r2
 800e5ac:	461a      	mov	r2, r3
 800e5ae:	4603      	mov	r3, r0
 800e5b0:	817b      	strh	r3, [r7, #10]
 800e5b2:	460b      	mov	r3, r1
 800e5b4:	813b      	strh	r3, [r7, #8]
 800e5b6:	4613      	mov	r3, r2
 800e5b8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e5c0:	b2db      	uxtb	r3, r3
 800e5c2:	2b20      	cmp	r3, #32
 800e5c4:	f040 80fd 	bne.w	800e7c2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800e5c8:	6a3b      	ldr	r3, [r7, #32]
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d002      	beq.n	800e5d4 <HAL_I2C_Mem_Read+0x34>
 800e5ce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d105      	bne.n	800e5e0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e5da:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800e5dc:	2301      	movs	r3, #1
 800e5de:	e0f1      	b.n	800e7c4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e5e6:	2b01      	cmp	r3, #1
 800e5e8:	d101      	bne.n	800e5ee <HAL_I2C_Mem_Read+0x4e>
 800e5ea:	2302      	movs	r3, #2
 800e5ec:	e0ea      	b.n	800e7c4 <HAL_I2C_Mem_Read+0x224>
 800e5ee:	68fb      	ldr	r3, [r7, #12]
 800e5f0:	2201      	movs	r2, #1
 800e5f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800e5f6:	f7fa fc85 	bl	8008f04 <HAL_GetTick>
 800e5fa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800e5fc:	697b      	ldr	r3, [r7, #20]
 800e5fe:	9300      	str	r3, [sp, #0]
 800e600:	2319      	movs	r3, #25
 800e602:	2201      	movs	r2, #1
 800e604:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800e608:	68f8      	ldr	r0, [r7, #12]
 800e60a:	f001 ff04 	bl	8010416 <I2C_WaitOnFlagUntilTimeout>
 800e60e:	4603      	mov	r3, r0
 800e610:	2b00      	cmp	r3, #0
 800e612:	d001      	beq.n	800e618 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800e614:	2301      	movs	r3, #1
 800e616:	e0d5      	b.n	800e7c4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	2222      	movs	r2, #34	@ 0x22
 800e61c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	2240      	movs	r2, #64	@ 0x40
 800e624:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	2200      	movs	r2, #0
 800e62c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	6a3a      	ldr	r2, [r7, #32]
 800e632:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800e638:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	2200      	movs	r2, #0
 800e63e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800e640:	88f8      	ldrh	r0, [r7, #6]
 800e642:	893a      	ldrh	r2, [r7, #8]
 800e644:	8979      	ldrh	r1, [r7, #10]
 800e646:	697b      	ldr	r3, [r7, #20]
 800e648:	9301      	str	r3, [sp, #4]
 800e64a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e64c:	9300      	str	r3, [sp, #0]
 800e64e:	4603      	mov	r3, r0
 800e650:	68f8      	ldr	r0, [r7, #12]
 800e652:	f001 f8a5 	bl	800f7a0 <I2C_RequestMemoryRead>
 800e656:	4603      	mov	r3, r0
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d005      	beq.n	800e668 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	2200      	movs	r2, #0
 800e660:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800e664:	2301      	movs	r3, #1
 800e666:	e0ad      	b.n	800e7c4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e66c:	b29b      	uxth	r3, r3
 800e66e:	2bff      	cmp	r3, #255	@ 0xff
 800e670:	d90e      	bls.n	800e690 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	22ff      	movs	r2, #255	@ 0xff
 800e676:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e67c:	b2da      	uxtb	r2, r3
 800e67e:	8979      	ldrh	r1, [r7, #10]
 800e680:	4b52      	ldr	r3, [pc, #328]	@ (800e7cc <HAL_I2C_Mem_Read+0x22c>)
 800e682:	9300      	str	r3, [sp, #0]
 800e684:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800e688:	68f8      	ldr	r0, [r7, #12]
 800e68a:	f002 f887 	bl	801079c <I2C_TransferConfig>
 800e68e:	e00f      	b.n	800e6b0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e694:	b29a      	uxth	r2, r3
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e69e:	b2da      	uxtb	r2, r3
 800e6a0:	8979      	ldrh	r1, [r7, #10]
 800e6a2:	4b4a      	ldr	r3, [pc, #296]	@ (800e7cc <HAL_I2C_Mem_Read+0x22c>)
 800e6a4:	9300      	str	r3, [sp, #0]
 800e6a6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800e6aa:	68f8      	ldr	r0, [r7, #12]
 800e6ac:	f002 f876 	bl	801079c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800e6b0:	697b      	ldr	r3, [r7, #20]
 800e6b2:	9300      	str	r3, [sp, #0]
 800e6b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6b6:	2200      	movs	r2, #0
 800e6b8:	2104      	movs	r1, #4
 800e6ba:	68f8      	ldr	r0, [r7, #12]
 800e6bc:	f001 feab 	bl	8010416 <I2C_WaitOnFlagUntilTimeout>
 800e6c0:	4603      	mov	r3, r0
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d001      	beq.n	800e6ca <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800e6c6:	2301      	movs	r3, #1
 800e6c8:	e07c      	b.n	800e7c4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e6d4:	b2d2      	uxtb	r2, r2
 800e6d6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e6dc:	1c5a      	adds	r2, r3, #1
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e6e6:	3b01      	subs	r3, #1
 800e6e8:	b29a      	uxth	r2, r3
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e6f2:	b29b      	uxth	r3, r3
 800e6f4:	3b01      	subs	r3, #1
 800e6f6:	b29a      	uxth	r2, r3
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e700:	b29b      	uxth	r3, r3
 800e702:	2b00      	cmp	r3, #0
 800e704:	d034      	beq.n	800e770 <HAL_I2C_Mem_Read+0x1d0>
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d130      	bne.n	800e770 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800e70e:	697b      	ldr	r3, [r7, #20]
 800e710:	9300      	str	r3, [sp, #0]
 800e712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e714:	2200      	movs	r2, #0
 800e716:	2180      	movs	r1, #128	@ 0x80
 800e718:	68f8      	ldr	r0, [r7, #12]
 800e71a:	f001 fe7c 	bl	8010416 <I2C_WaitOnFlagUntilTimeout>
 800e71e:	4603      	mov	r3, r0
 800e720:	2b00      	cmp	r3, #0
 800e722:	d001      	beq.n	800e728 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800e724:	2301      	movs	r3, #1
 800e726:	e04d      	b.n	800e7c4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e72c:	b29b      	uxth	r3, r3
 800e72e:	2bff      	cmp	r3, #255	@ 0xff
 800e730:	d90e      	bls.n	800e750 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	22ff      	movs	r2, #255	@ 0xff
 800e736:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e73c:	b2da      	uxtb	r2, r3
 800e73e:	8979      	ldrh	r1, [r7, #10]
 800e740:	2300      	movs	r3, #0
 800e742:	9300      	str	r3, [sp, #0]
 800e744:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800e748:	68f8      	ldr	r0, [r7, #12]
 800e74a:	f002 f827 	bl	801079c <I2C_TransferConfig>
 800e74e:	e00f      	b.n	800e770 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e754:	b29a      	uxth	r2, r3
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e75e:	b2da      	uxtb	r2, r3
 800e760:	8979      	ldrh	r1, [r7, #10]
 800e762:	2300      	movs	r3, #0
 800e764:	9300      	str	r3, [sp, #0]
 800e766:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800e76a:	68f8      	ldr	r0, [r7, #12]
 800e76c:	f002 f816 	bl	801079c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e774:	b29b      	uxth	r3, r3
 800e776:	2b00      	cmp	r3, #0
 800e778:	d19a      	bne.n	800e6b0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e77a:	697a      	ldr	r2, [r7, #20]
 800e77c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e77e:	68f8      	ldr	r0, [r7, #12]
 800e780:	f001 fee9 	bl	8010556 <I2C_WaitOnSTOPFlagUntilTimeout>
 800e784:	4603      	mov	r3, r0
 800e786:	2b00      	cmp	r3, #0
 800e788:	d001      	beq.n	800e78e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800e78a:	2301      	movs	r3, #1
 800e78c:	e01a      	b.n	800e7c4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	2220      	movs	r2, #32
 800e794:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	6859      	ldr	r1, [r3, #4]
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	681a      	ldr	r2, [r3, #0]
 800e7a0:	4b0b      	ldr	r3, [pc, #44]	@ (800e7d0 <HAL_I2C_Mem_Read+0x230>)
 800e7a2:	400b      	ands	r3, r1
 800e7a4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	2220      	movs	r2, #32
 800e7aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	2200      	movs	r2, #0
 800e7b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	2200      	movs	r2, #0
 800e7ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800e7be:	2300      	movs	r3, #0
 800e7c0:	e000      	b.n	800e7c4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800e7c2:	2302      	movs	r3, #2
  }
}
 800e7c4:	4618      	mov	r0, r3
 800e7c6:	3718      	adds	r7, #24
 800e7c8:	46bd      	mov	sp, r7
 800e7ca:	bd80      	pop	{r7, pc}
 800e7cc:	80002400 	.word	0x80002400
 800e7d0:	fe00e800 	.word	0xfe00e800

0800e7d4 <HAL_I2C_Mem_Write_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800e7d4:	b580      	push	{r7, lr}
 800e7d6:	b086      	sub	sp, #24
 800e7d8:	af02      	add	r7, sp, #8
 800e7da:	60f8      	str	r0, [r7, #12]
 800e7dc:	4608      	mov	r0, r1
 800e7de:	4611      	mov	r1, r2
 800e7e0:	461a      	mov	r2, r3
 800e7e2:	4603      	mov	r3, r0
 800e7e4:	817b      	strh	r3, [r7, #10]
 800e7e6:	460b      	mov	r3, r1
 800e7e8:	813b      	strh	r3, [r7, #8]
 800e7ea:	4613      	mov	r3, r2
 800e7ec:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e7f4:	b2db      	uxtb	r3, r3
 800e7f6:	2b20      	cmp	r3, #32
 800e7f8:	d16a      	bne.n	800e8d0 <HAL_I2C_Mem_Write_IT+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800e7fa:	69bb      	ldr	r3, [r7, #24]
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d002      	beq.n	800e806 <HAL_I2C_Mem_Write_IT+0x32>
 800e800:	8bbb      	ldrh	r3, [r7, #28]
 800e802:	2b00      	cmp	r3, #0
 800e804:	d105      	bne.n	800e812 <HAL_I2C_Mem_Write_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e80c:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800e80e:	2301      	movs	r3, #1
 800e810:	e05f      	b.n	800e8d2 <HAL_I2C_Mem_Write_IT+0xfe>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	699b      	ldr	r3, [r3, #24]
 800e818:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e81c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e820:	d101      	bne.n	800e826 <HAL_I2C_Mem_Write_IT+0x52>
    {
      return HAL_BUSY;
 800e822:	2302      	movs	r3, #2
 800e824:	e055      	b.n	800e8d2 <HAL_I2C_Mem_Write_IT+0xfe>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e82c:	2b01      	cmp	r3, #1
 800e82e:	d101      	bne.n	800e834 <HAL_I2C_Mem_Write_IT+0x60>
 800e830:	2302      	movs	r3, #2
 800e832:	e04e      	b.n	800e8d2 <HAL_I2C_Mem_Write_IT+0xfe>
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	2201      	movs	r2, #1
 800e838:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	2221      	movs	r2, #33	@ 0x21
 800e840:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	2240      	movs	r2, #64	@ 0x40
 800e848:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	2200      	movs	r2, #0
 800e850:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->XferSize    = 0U;
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	2200      	movs	r2, #0
 800e856:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->pBuffPtr    = pData;
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	69ba      	ldr	r2, [r7, #24]
 800e85c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	8bba      	ldrh	r2, [r7, #28]
 800e862:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	4a1d      	ldr	r2, [pc, #116]	@ (800e8dc <HAL_I2C_Mem_Write_IT+0x108>)
 800e868:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	4a1c      	ldr	r2, [pc, #112]	@ (800e8e0 <HAL_I2C_Mem_Write_IT+0x10c>)
 800e86e:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 800e870:	897a      	ldrh	r2, [r7, #10]
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800e876:	88fb      	ldrh	r3, [r7, #6]
 800e878:	2b01      	cmp	r3, #1
 800e87a:	d109      	bne.n	800e890 <HAL_I2C_Mem_Write_IT+0xbc>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800e87c:	893b      	ldrh	r3, [r7, #8]
 800e87e:	b2da      	uxtb	r2, r3
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	f04f 32ff 	mov.w	r2, #4294967295
 800e88c:	651a      	str	r2, [r3, #80]	@ 0x50
 800e88e:	e00b      	b.n	800e8a8 <HAL_I2C_Mem_Write_IT+0xd4>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800e890:	893b      	ldrh	r3, [r7, #8]
 800e892:	0a1b      	lsrs	r3, r3, #8
 800e894:	b29b      	uxth	r3, r3
 800e896:	b2da      	uxtb	r2, r3
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 800e89e:	893b      	ldrh	r3, [r7, #8]
 800e8a0:	b2db      	uxtb	r3, r3
 800e8a2:	461a      	mov	r2, r3
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800e8a8:	88fb      	ldrh	r3, [r7, #6]
 800e8aa:	b2da      	uxtb	r2, r3
 800e8ac:	8979      	ldrh	r1, [r7, #10]
 800e8ae:	4b0d      	ldr	r3, [pc, #52]	@ (800e8e4 <HAL_I2C_Mem_Write_IT+0x110>)
 800e8b0:	9300      	str	r3, [sp, #0]
 800e8b2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800e8b6:	68f8      	ldr	r0, [r7, #12]
 800e8b8:	f001 ff70 	bl	801079c <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	2200      	movs	r2, #0
 800e8c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800e8c4:	2101      	movs	r1, #1
 800e8c6:	68f8      	ldr	r0, [r7, #12]
 800e8c8:	f001 ff9a 	bl	8010800 <I2C_Enable_IRQ>

    return HAL_OK;
 800e8cc:	2300      	movs	r3, #0
 800e8ce:	e000      	b.n	800e8d2 <HAL_I2C_Mem_Write_IT+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800e8d0:	2302      	movs	r3, #2
  }
}
 800e8d2:	4618      	mov	r0, r3
 800e8d4:	3710      	adds	r7, #16
 800e8d6:	46bd      	mov	sp, r7
 800e8d8:	bd80      	pop	{r7, pc}
 800e8da:	bf00      	nop
 800e8dc:	ffff0000 	.word	0xffff0000
 800e8e0:	0800eae5 	.word	0x0800eae5
 800e8e4:	80002000 	.word	0x80002000

0800e8e8 <HAL_I2C_Mem_Read_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                      uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800e8e8:	b580      	push	{r7, lr}
 800e8ea:	b086      	sub	sp, #24
 800e8ec:	af02      	add	r7, sp, #8
 800e8ee:	60f8      	str	r0, [r7, #12]
 800e8f0:	4608      	mov	r0, r1
 800e8f2:	4611      	mov	r1, r2
 800e8f4:	461a      	mov	r2, r3
 800e8f6:	4603      	mov	r3, r0
 800e8f8:	817b      	strh	r3, [r7, #10]
 800e8fa:	460b      	mov	r3, r1
 800e8fc:	813b      	strh	r3, [r7, #8]
 800e8fe:	4613      	mov	r3, r2
 800e900:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e908:	b2db      	uxtb	r3, r3
 800e90a:	2b20      	cmp	r3, #32
 800e90c:	d166      	bne.n	800e9dc <HAL_I2C_Mem_Read_IT+0xf4>
  {
    if ((pData == NULL) || (Size == 0U))
 800e90e:	69bb      	ldr	r3, [r7, #24]
 800e910:	2b00      	cmp	r3, #0
 800e912:	d002      	beq.n	800e91a <HAL_I2C_Mem_Read_IT+0x32>
 800e914:	8bbb      	ldrh	r3, [r7, #28]
 800e916:	2b00      	cmp	r3, #0
 800e918:	d105      	bne.n	800e926 <HAL_I2C_Mem_Read_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e920:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800e922:	2301      	movs	r3, #1
 800e924:	e05b      	b.n	800e9de <HAL_I2C_Mem_Read_IT+0xf6>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	699b      	ldr	r3, [r3, #24]
 800e92c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e930:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e934:	d101      	bne.n	800e93a <HAL_I2C_Mem_Read_IT+0x52>
    {
      return HAL_BUSY;
 800e936:	2302      	movs	r3, #2
 800e938:	e051      	b.n	800e9de <HAL_I2C_Mem_Read_IT+0xf6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e940:	2b01      	cmp	r3, #1
 800e942:	d101      	bne.n	800e948 <HAL_I2C_Mem_Read_IT+0x60>
 800e944:	2302      	movs	r3, #2
 800e946:	e04a      	b.n	800e9de <HAL_I2C_Mem_Read_IT+0xf6>
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	2201      	movs	r2, #1
 800e94c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	2222      	movs	r2, #34	@ 0x22
 800e954:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	2240      	movs	r2, #64	@ 0x40
 800e95c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	2200      	movs	r2, #0
 800e964:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	69ba      	ldr	r2, [r7, #24]
 800e96a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	8bba      	ldrh	r2, [r7, #28]
 800e970:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	4a1c      	ldr	r2, [pc, #112]	@ (800e9e8 <HAL_I2C_Mem_Read_IT+0x100>)
 800e976:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	4a1c      	ldr	r2, [pc, #112]	@ (800e9ec <HAL_I2C_Mem_Read_IT+0x104>)
 800e97c:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 800e97e:	897a      	ldrh	r2, [r7, #10]
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800e984:	88fb      	ldrh	r3, [r7, #6]
 800e986:	2b01      	cmp	r3, #1
 800e988:	d109      	bne.n	800e99e <HAL_I2C_Mem_Read_IT+0xb6>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800e98a:	893b      	ldrh	r3, [r7, #8]
 800e98c:	b2da      	uxtb	r2, r3
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	f04f 32ff 	mov.w	r2, #4294967295
 800e99a:	651a      	str	r2, [r3, #80]	@ 0x50
 800e99c:	e00b      	b.n	800e9b6 <HAL_I2C_Mem_Read_IT+0xce>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800e99e:	893b      	ldrh	r3, [r7, #8]
 800e9a0:	0a1b      	lsrs	r3, r3, #8
 800e9a2:	b29b      	uxth	r3, r3
 800e9a4:	b2da      	uxtb	r2, r3
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 800e9ac:	893b      	ldrh	r3, [r7, #8]
 800e9ae:	b2db      	uxtb	r3, r3
 800e9b0:	461a      	mov	r2, r3
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800e9b6:	88fb      	ldrh	r3, [r7, #6]
 800e9b8:	b2da      	uxtb	r2, r3
 800e9ba:	8979      	ldrh	r1, [r7, #10]
 800e9bc:	4b0c      	ldr	r3, [pc, #48]	@ (800e9f0 <HAL_I2C_Mem_Read_IT+0x108>)
 800e9be:	9300      	str	r3, [sp, #0]
 800e9c0:	2300      	movs	r3, #0
 800e9c2:	68f8      	ldr	r0, [r7, #12]
 800e9c4:	f001 feea 	bl	801079c <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	2200      	movs	r2, #0
 800e9cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800e9d0:	2101      	movs	r1, #1
 800e9d2:	68f8      	ldr	r0, [r7, #12]
 800e9d4:	f001 ff14 	bl	8010800 <I2C_Enable_IRQ>

    return HAL_OK;
 800e9d8:	2300      	movs	r3, #0
 800e9da:	e000      	b.n	800e9de <HAL_I2C_Mem_Read_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
 800e9dc:	2302      	movs	r3, #2
  }
}
 800e9de:	4618      	mov	r0, r3
 800e9e0:	3710      	adds	r7, #16
 800e9e2:	46bd      	mov	sp, r7
 800e9e4:	bd80      	pop	{r7, pc}
 800e9e6:	bf00      	nop
 800e9e8:	ffff0000 	.word	0xffff0000
 800e9ec:	0800eae5 	.word	0x0800eae5
 800e9f0:	80002000 	.word	0x80002000

0800e9f4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800e9f4:	b580      	push	{r7, lr}
 800e9f6:	b084      	sub	sp, #16
 800e9f8:	af00      	add	r7, sp, #0
 800e9fa:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	699b      	ldr	r3, [r3, #24]
 800ea02:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d005      	beq.n	800ea20 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ea18:	68ba      	ldr	r2, [r7, #8]
 800ea1a:	68f9      	ldr	r1, [r7, #12]
 800ea1c:	6878      	ldr	r0, [r7, #4]
 800ea1e:	4798      	blx	r3
  }
}
 800ea20:	bf00      	nop
 800ea22:	3710      	adds	r7, #16
 800ea24:	46bd      	mov	sp, r7
 800ea26:	bd80      	pop	{r7, pc}

0800ea28 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ea28:	b480      	push	{r7}
 800ea2a:	b083      	sub	sp, #12
 800ea2c:	af00      	add	r7, sp, #0
 800ea2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800ea30:	bf00      	nop
 800ea32:	370c      	adds	r7, #12
 800ea34:	46bd      	mov	sp, r7
 800ea36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea3a:	4770      	bx	lr

0800ea3c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ea3c:	b480      	push	{r7}
 800ea3e:	b083      	sub	sp, #12
 800ea40:	af00      	add	r7, sp, #0
 800ea42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800ea44:	bf00      	nop
 800ea46:	370c      	adds	r7, #12
 800ea48:	46bd      	mov	sp, r7
 800ea4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea4e:	4770      	bx	lr

0800ea50 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ea50:	b480      	push	{r7}
 800ea52:	b083      	sub	sp, #12
 800ea54:	af00      	add	r7, sp, #0
 800ea56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800ea58:	bf00      	nop
 800ea5a:	370c      	adds	r7, #12
 800ea5c:	46bd      	mov	sp, r7
 800ea5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea62:	4770      	bx	lr

0800ea64 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ea64:	b480      	push	{r7}
 800ea66:	b083      	sub	sp, #12
 800ea68:	af00      	add	r7, sp, #0
 800ea6a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800ea6c:	bf00      	nop
 800ea6e:	370c      	adds	r7, #12
 800ea70:	46bd      	mov	sp, r7
 800ea72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea76:	4770      	bx	lr

0800ea78 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800ea78:	b480      	push	{r7}
 800ea7a:	b083      	sub	sp, #12
 800ea7c:	af00      	add	r7, sp, #0
 800ea7e:	6078      	str	r0, [r7, #4]
 800ea80:	460b      	mov	r3, r1
 800ea82:	70fb      	strb	r3, [r7, #3]
 800ea84:	4613      	mov	r3, r2
 800ea86:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800ea88:	bf00      	nop
 800ea8a:	370c      	adds	r7, #12
 800ea8c:	46bd      	mov	sp, r7
 800ea8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea92:	4770      	bx	lr

0800ea94 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ea94:	b480      	push	{r7}
 800ea96:	b083      	sub	sp, #12
 800ea98:	af00      	add	r7, sp, #0
 800ea9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800ea9c:	bf00      	nop
 800ea9e:	370c      	adds	r7, #12
 800eaa0:	46bd      	mov	sp, r7
 800eaa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa6:	4770      	bx	lr

0800eaa8 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800eaa8:	b480      	push	{r7}
 800eaaa:	b083      	sub	sp, #12
 800eaac:	af00      	add	r7, sp, #0
 800eaae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800eab0:	bf00      	nop
 800eab2:	370c      	adds	r7, #12
 800eab4:	46bd      	mov	sp, r7
 800eab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaba:	4770      	bx	lr

0800eabc <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800eabc:	b480      	push	{r7}
 800eabe:	b083      	sub	sp, #12
 800eac0:	af00      	add	r7, sp, #0
 800eac2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800eac4:	bf00      	nop
 800eac6:	370c      	adds	r7, #12
 800eac8:	46bd      	mov	sp, r7
 800eaca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eace:	4770      	bx	lr

0800ead0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ead0:	b480      	push	{r7}
 800ead2:	b083      	sub	sp, #12
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800ead8:	bf00      	nop
 800eada:	370c      	adds	r7, #12
 800eadc:	46bd      	mov	sp, r7
 800eade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae2:	4770      	bx	lr

0800eae4 <I2C_Mem_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                        uint32_t ITSources)
{
 800eae4:	b580      	push	{r7, lr}
 800eae6:	b088      	sub	sp, #32
 800eae8:	af02      	add	r7, sp, #8
 800eaea:	60f8      	str	r0, [r7, #12]
 800eaec:	60b9      	str	r1, [r7, #8]
 800eaee:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800eaf0:	4b8d      	ldr	r3, [pc, #564]	@ (800ed28 <I2C_Mem_ISR_IT+0x244>)
 800eaf2:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800eaf4:	68bb      	ldr	r3, [r7, #8]
 800eaf6:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800eafe:	2b01      	cmp	r3, #1
 800eb00:	d101      	bne.n	800eb06 <I2C_Mem_ISR_IT+0x22>
 800eb02:	2302      	movs	r3, #2
 800eb04:	e10c      	b.n	800ed20 <I2C_Mem_ISR_IT+0x23c>
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	2201      	movs	r2, #1
 800eb0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800eb0e:	693b      	ldr	r3, [r7, #16]
 800eb10:	f003 0310 	and.w	r3, r3, #16
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d012      	beq.n	800eb3e <I2C_Mem_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d00d      	beq.n	800eb3e <I2C_Mem_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	2210      	movs	r2, #16
 800eb28:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800eb2e:	f043 0204 	orr.w	r2, r3, #4
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800eb36:	68f8      	ldr	r0, [r7, #12]
 800eb38:	f001 fc2b 	bl	8010392 <I2C_Flush_TXDR>
 800eb3c:	e0dd      	b.n	800ecfa <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800eb3e:	693b      	ldr	r3, [r7, #16]
 800eb40:	f003 0304 	and.w	r3, r3, #4
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d022      	beq.n	800eb8e <I2C_Mem_ISR_IT+0xaa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d01d      	beq.n	800eb8e <I2C_Mem_ISR_IT+0xaa>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800eb52:	693b      	ldr	r3, [r7, #16]
 800eb54:	f023 0304 	bic.w	r3, r3, #4
 800eb58:	613b      	str	r3, [r7, #16]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb64:	b2d2      	uxtb	r2, r2
 800eb66:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb6c:	1c5a      	adds	r2, r3, #1
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800eb76:	3b01      	subs	r3, #1
 800eb78:	b29a      	uxth	r2, r3
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800eb82:	b29b      	uxth	r3, r3
 800eb84:	3b01      	subs	r3, #1
 800eb86:	b29a      	uxth	r2, r3
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800eb8c:	e0b5      	b.n	800ecfa <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800eb8e:	693b      	ldr	r3, [r7, #16]
 800eb90:	f003 0302 	and.w	r3, r3, #2
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d02c      	beq.n	800ebf2 <I2C_Mem_ISR_IT+0x10e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d027      	beq.n	800ebf2 <I2C_Mem_ISR_IT+0x10e>
  {
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebaa:	d118      	bne.n	800ebde <I2C_Mem_ISR_IT+0xfa>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ebb0:	781a      	ldrb	r2, [r3, #0]
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ebbc:	1c5a      	adds	r2, r3, #1
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ebc6:	3b01      	subs	r3, #1
 800ebc8:	b29a      	uxth	r2, r3
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ebd2:	b29b      	uxth	r3, r3
 800ebd4:	3b01      	subs	r3, #1
 800ebd6:	b29a      	uxth	r2, r3
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 800ebdc:	e08d      	b.n	800ecfa <I2C_Mem_ISR_IT+0x216>
    }
    else
    {
      /* Write LSB part of Memory Address */
      hi2c->Instance->TXDR = hi2c->Memaddress;
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	68fa      	ldr	r2, [r7, #12]
 800ebe4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800ebe6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	f04f 32ff 	mov.w	r2, #4294967295
 800ebee:	651a      	str	r2, [r3, #80]	@ 0x50
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 800ebf0:	e083      	b.n	800ecfa <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800ebf2:	693b      	ldr	r3, [r7, #16]
 800ebf4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d03c      	beq.n	800ec76 <I2C_Mem_ISR_IT+0x192>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d037      	beq.n	800ec76 <I2C_Mem_ISR_IT+0x192>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ec0a:	b29b      	uxth	r3, r3
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d02c      	beq.n	800ec6a <I2C_Mem_ISR_IT+0x186>
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d128      	bne.n	800ec6a <I2C_Mem_ISR_IT+0x186>
    {
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ec1c:	b29b      	uxth	r3, r3
 800ec1e:	2bff      	cmp	r3, #255	@ 0xff
 800ec20:	d910      	bls.n	800ec44 <I2C_Mem_ISR_IT+0x160>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	22ff      	movs	r2, #255	@ 0xff
 800ec26:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ec2c:	b299      	uxth	r1, r3
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ec32:	b2da      	uxtb	r2, r3
 800ec34:	2300      	movs	r3, #0
 800ec36:	9300      	str	r3, [sp, #0]
 800ec38:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ec3c:	68f8      	ldr	r0, [r7, #12]
 800ec3e:	f001 fdad 	bl	801079c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ec42:	e017      	b.n	800ec74 <I2C_Mem_ISR_IT+0x190>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ec48:	b29a      	uxth	r2, r3
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ec52:	b299      	uxth	r1, r3
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ec58:	b2da      	uxtb	r2, r3
 800ec5a:	2300      	movs	r3, #0
 800ec5c:	9300      	str	r3, [sp, #0]
 800ec5e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ec62:	68f8      	ldr	r0, [r7, #12]
 800ec64:	f001 fd9a 	bl	801079c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ec68:	e004      	b.n	800ec74 <I2C_Mem_ISR_IT+0x190>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800ec6a:	2140      	movs	r1, #64	@ 0x40
 800ec6c:	68f8      	ldr	r0, [r7, #12]
 800ec6e:	f001 fa79 	bl	8010164 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ec72:	e042      	b.n	800ecfa <I2C_Mem_ISR_IT+0x216>
 800ec74:	e041      	b.n	800ecfa <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800ec76:	693b      	ldr	r3, [r7, #16]
 800ec78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d03c      	beq.n	800ecfa <I2C_Mem_ISR_IT+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d037      	beq.n	800ecfa <I2C_Mem_ISR_IT+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800ec8a:	2101      	movs	r1, #1
 800ec8c:	68f8      	ldr	r0, [r7, #12]
 800ec8e:	f001 fe3b 	bl	8010908 <I2C_Disable_IRQ>

    /* Enable ERR, TC, STOP, NACK and RXI interrupts */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 800ec92:	2102      	movs	r1, #2
 800ec94:	68f8      	ldr	r0, [r7, #12]
 800ec96:	f001 fdb3 	bl	8010800 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800eca0:	b2db      	uxtb	r3, r3
 800eca2:	2b22      	cmp	r3, #34	@ 0x22
 800eca4:	d101      	bne.n	800ecaa <I2C_Mem_ISR_IT+0x1c6>
    {
      direction = I2C_GENERATE_START_READ;
 800eca6:	4b21      	ldr	r3, [pc, #132]	@ (800ed2c <I2C_Mem_ISR_IT+0x248>)
 800eca8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ecae:	b29b      	uxth	r3, r3
 800ecb0:	2bff      	cmp	r3, #255	@ 0xff
 800ecb2:	d910      	bls.n	800ecd6 <I2C_Mem_ISR_IT+0x1f2>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	22ff      	movs	r2, #255	@ 0xff
 800ecb8:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ecbe:	b299      	uxth	r1, r3
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ecc4:	b2da      	uxtb	r2, r3
 800ecc6:	697b      	ldr	r3, [r7, #20]
 800ecc8:	9300      	str	r3, [sp, #0]
 800ecca:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ecce:	68f8      	ldr	r0, [r7, #12]
 800ecd0:	f001 fd64 	bl	801079c <I2C_TransferConfig>
 800ecd4:	e011      	b.n	800ecfa <I2C_Mem_ISR_IT+0x216>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ecda:	b29a      	uxth	r2, r3
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ece4:	b299      	uxth	r1, r3
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ecea:	b2da      	uxtb	r2, r3
 800ecec:	697b      	ldr	r3, [r7, #20]
 800ecee:	9300      	str	r3, [sp, #0]
 800ecf0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ecf4:	68f8      	ldr	r0, [r7, #12]
 800ecf6:	f001 fd51 	bl	801079c <I2C_TransferConfig>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800ecfa:	693b      	ldr	r3, [r7, #16]
 800ecfc:	f003 0320 	and.w	r3, r3, #32
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d008      	beq.n	800ed16 <I2C_Mem_ISR_IT+0x232>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d003      	beq.n	800ed16 <I2C_Mem_ISR_IT+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800ed0e:	6939      	ldr	r1, [r7, #16]
 800ed10:	68f8      	ldr	r0, [r7, #12]
 800ed12:	f000 feb7 	bl	800fa84 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	2200      	movs	r2, #0
 800ed1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800ed1e:	2300      	movs	r3, #0
}
 800ed20:	4618      	mov	r0, r3
 800ed22:	3718      	adds	r7, #24
 800ed24:	46bd      	mov	sp, r7
 800ed26:	bd80      	pop	{r7, pc}
 800ed28:	80002000 	.word	0x80002000
 800ed2c:	80002400 	.word	0x80002400

0800ed30 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800ed30:	b580      	push	{r7, lr}
 800ed32:	b086      	sub	sp, #24
 800ed34:	af00      	add	r7, sp, #0
 800ed36:	60f8      	str	r0, [r7, #12]
 800ed38:	60b9      	str	r1, [r7, #8]
 800ed3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed40:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800ed42:	68bb      	ldr	r3, [r7, #8]
 800ed44:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ed4c:	2b01      	cmp	r3, #1
 800ed4e:	d101      	bne.n	800ed54 <I2C_Slave_ISR_IT+0x24>
 800ed50:	2302      	movs	r3, #2
 800ed52:	e0e2      	b.n	800ef1a <I2C_Slave_ISR_IT+0x1ea>
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	2201      	movs	r2, #1
 800ed58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800ed5c:	693b      	ldr	r3, [r7, #16]
 800ed5e:	f003 0320 	and.w	r3, r3, #32
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d009      	beq.n	800ed7a <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d004      	beq.n	800ed7a <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800ed70:	6939      	ldr	r1, [r7, #16]
 800ed72:	68f8      	ldr	r0, [r7, #12]
 800ed74:	f000 ff4e 	bl	800fc14 <I2C_ITSlaveCplt>
 800ed78:	e0ca      	b.n	800ef10 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800ed7a:	693b      	ldr	r3, [r7, #16]
 800ed7c:	f003 0310 	and.w	r3, r3, #16
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d04b      	beq.n	800ee1c <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d046      	beq.n	800ee1c <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ed92:	b29b      	uxth	r3, r3
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d128      	bne.n	800edea <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ed9e:	b2db      	uxtb	r3, r3
 800eda0:	2b28      	cmp	r3, #40	@ 0x28
 800eda2:	d108      	bne.n	800edb6 <I2C_Slave_ISR_IT+0x86>
 800eda4:	697b      	ldr	r3, [r7, #20]
 800eda6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800edaa:	d104      	bne.n	800edb6 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800edac:	6939      	ldr	r1, [r7, #16]
 800edae:	68f8      	ldr	r0, [r7, #12]
 800edb0:	f001 f984 	bl	80100bc <I2C_ITListenCplt>
 800edb4:	e031      	b.n	800ee1a <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800edbc:	b2db      	uxtb	r3, r3
 800edbe:	2b29      	cmp	r3, #41	@ 0x29
 800edc0:	d10e      	bne.n	800ede0 <I2C_Slave_ISR_IT+0xb0>
 800edc2:	697b      	ldr	r3, [r7, #20]
 800edc4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800edc8:	d00a      	beq.n	800ede0 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	2210      	movs	r2, #16
 800edd0:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800edd2:	68f8      	ldr	r0, [r7, #12]
 800edd4:	f001 fadd 	bl	8010392 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800edd8:	68f8      	ldr	r0, [r7, #12]
 800edda:	f000 fdf6 	bl	800f9ca <I2C_ITSlaveSeqCplt>
 800edde:	e01c      	b.n	800ee1a <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	2210      	movs	r2, #16
 800ede6:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800ede8:	e08f      	b.n	800ef0a <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	2210      	movs	r2, #16
 800edf0:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800edf6:	f043 0204 	orr.w	r2, r3, #4
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800edfe:	697b      	ldr	r3, [r7, #20]
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d003      	beq.n	800ee0c <I2C_Slave_ISR_IT+0xdc>
 800ee04:	697b      	ldr	r3, [r7, #20]
 800ee06:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ee0a:	d17e      	bne.n	800ef0a <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ee10:	4619      	mov	r1, r3
 800ee12:	68f8      	ldr	r0, [r7, #12]
 800ee14:	f001 f9a6 	bl	8010164 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800ee18:	e077      	b.n	800ef0a <I2C_Slave_ISR_IT+0x1da>
 800ee1a:	e076      	b.n	800ef0a <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800ee1c:	693b      	ldr	r3, [r7, #16]
 800ee1e:	f003 0304 	and.w	r3, r3, #4
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d02f      	beq.n	800ee86 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d02a      	beq.n	800ee86 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ee34:	b29b      	uxth	r3, r3
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d018      	beq.n	800ee6c <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee44:	b2d2      	uxtb	r2, r2
 800ee46:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee4c:	1c5a      	adds	r2, r3, #1
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ee56:	3b01      	subs	r3, #1
 800ee58:	b29a      	uxth	r2, r3
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ee62:	b29b      	uxth	r3, r3
 800ee64:	3b01      	subs	r3, #1
 800ee66:	b29a      	uxth	r2, r3
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ee70:	b29b      	uxth	r3, r3
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d14b      	bne.n	800ef0e <I2C_Slave_ISR_IT+0x1de>
 800ee76:	697b      	ldr	r3, [r7, #20]
 800ee78:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800ee7c:	d047      	beq.n	800ef0e <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800ee7e:	68f8      	ldr	r0, [r7, #12]
 800ee80:	f000 fda3 	bl	800f9ca <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800ee84:	e043      	b.n	800ef0e <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800ee86:	693b      	ldr	r3, [r7, #16]
 800ee88:	f003 0308 	and.w	r3, r3, #8
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d009      	beq.n	800eea4 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d004      	beq.n	800eea4 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800ee9a:	6939      	ldr	r1, [r7, #16]
 800ee9c:	68f8      	ldr	r0, [r7, #12]
 800ee9e:	f000 fcd3 	bl	800f848 <I2C_ITAddrCplt>
 800eea2:	e035      	b.n	800ef10 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800eea4:	693b      	ldr	r3, [r7, #16]
 800eea6:	f003 0302 	and.w	r3, r3, #2
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d030      	beq.n	800ef10 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d02b      	beq.n	800ef10 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800eebc:	b29b      	uxth	r3, r3
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d018      	beq.n	800eef4 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800eec2:	68fb      	ldr	r3, [r7, #12]
 800eec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eec6:	781a      	ldrb	r2, [r3, #0]
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eed2:	1c5a      	adds	r2, r3, #1
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800eedc:	b29b      	uxth	r3, r3
 800eede:	3b01      	subs	r3, #1
 800eee0:	b29a      	uxth	r2, r3
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800eeea:	3b01      	subs	r3, #1
 800eeec:	b29a      	uxth	r2, r3
 800eeee:	68fb      	ldr	r3, [r7, #12]
 800eef0:	851a      	strh	r2, [r3, #40]	@ 0x28
 800eef2:	e00d      	b.n	800ef10 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800eef4:	697b      	ldr	r3, [r7, #20]
 800eef6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800eefa:	d002      	beq.n	800ef02 <I2C_Slave_ISR_IT+0x1d2>
 800eefc:	697b      	ldr	r3, [r7, #20]
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d106      	bne.n	800ef10 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800ef02:	68f8      	ldr	r0, [r7, #12]
 800ef04:	f000 fd61 	bl	800f9ca <I2C_ITSlaveSeqCplt>
 800ef08:	e002      	b.n	800ef10 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 800ef0a:	bf00      	nop
 800ef0c:	e000      	b.n	800ef10 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 800ef0e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	2200      	movs	r2, #0
 800ef14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800ef18:	2300      	movs	r3, #0
}
 800ef1a:	4618      	mov	r0, r3
 800ef1c:	3718      	adds	r7, #24
 800ef1e:	46bd      	mov	sp, r7
 800ef20:	bd80      	pop	{r7, pc}

0800ef22 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800ef22:	b580      	push	{r7, lr}
 800ef24:	b088      	sub	sp, #32
 800ef26:	af02      	add	r7, sp, #8
 800ef28:	60f8      	str	r0, [r7, #12]
 800ef2a:	60b9      	str	r1, [r7, #8]
 800ef2c:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ef34:	2b01      	cmp	r3, #1
 800ef36:	d101      	bne.n	800ef3c <I2C_Master_ISR_DMA+0x1a>
 800ef38:	2302      	movs	r3, #2
 800ef3a:	e0d9      	b.n	800f0f0 <I2C_Master_ISR_DMA+0x1ce>
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	2201      	movs	r2, #1
 800ef40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800ef44:	68bb      	ldr	r3, [r7, #8]
 800ef46:	f003 0310 	and.w	r3, r3, #16
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d016      	beq.n	800ef7c <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d011      	beq.n	800ef7c <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	2210      	movs	r2, #16
 800ef5e:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ef64:	f043 0204 	orr.w	r2, r3, #4
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800ef6c:	2120      	movs	r1, #32
 800ef6e:	68f8      	ldr	r0, [r7, #12]
 800ef70:	f001 fc46 	bl	8010800 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800ef74:	68f8      	ldr	r0, [r7, #12]
 800ef76:	f001 fa0c 	bl	8010392 <I2C_Flush_TXDR>
 800ef7a:	e0b4      	b.n	800f0e6 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800ef7c:	68bb      	ldr	r3, [r7, #8]
 800ef7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d071      	beq.n	800f06a <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d06c      	beq.n	800f06a <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	681a      	ldr	r2, [r3, #0]
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ef9e:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800efa4:	b29b      	uxth	r3, r3
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d04e      	beq.n	800f048 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	685b      	ldr	r3, [r3, #4]
 800efb0:	b29b      	uxth	r3, r3
 800efb2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800efb6:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800efbc:	b29b      	uxth	r3, r3
 800efbe:	2bff      	cmp	r3, #255	@ 0xff
 800efc0:	d906      	bls.n	800efd0 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	22ff      	movs	r2, #255	@ 0xff
 800efc6:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 800efc8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800efcc:	617b      	str	r3, [r7, #20]
 800efce:	e010      	b.n	800eff2 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800efd4:	b29a      	uxth	r2, r3
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800efde:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800efe2:	d003      	beq.n	800efec <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800efe8:	617b      	str	r3, [r7, #20]
 800efea:	e002      	b.n	800eff2 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800efec:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800eff0:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800eff6:	b2da      	uxtb	r2, r3
 800eff8:	8a79      	ldrh	r1, [r7, #18]
 800effa:	2300      	movs	r3, #0
 800effc:	9300      	str	r3, [sp, #0]
 800effe:	697b      	ldr	r3, [r7, #20]
 800f000:	68f8      	ldr	r0, [r7, #12]
 800f002:	f001 fbcb 	bl	801079c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f00a:	b29a      	uxth	r2, r3
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f010:	1ad3      	subs	r3, r2, r3
 800f012:	b29a      	uxth	r2, r3
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f01e:	b2db      	uxtb	r3, r3
 800f020:	2b22      	cmp	r3, #34	@ 0x22
 800f022:	d108      	bne.n	800f036 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	681a      	ldr	r2, [r3, #0]
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800f032:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800f034:	e057      	b.n	800f0e6 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	681a      	ldr	r2, [r3, #0]
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f044:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800f046:	e04e      	b.n	800f0e6 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	685b      	ldr	r3, [r3, #4]
 800f04e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f052:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f056:	d003      	beq.n	800f060 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800f058:	68f8      	ldr	r0, [r7, #12]
 800f05a:	f000 fc79 	bl	800f950 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800f05e:	e042      	b.n	800f0e6 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800f060:	2140      	movs	r1, #64	@ 0x40
 800f062:	68f8      	ldr	r0, [r7, #12]
 800f064:	f001 f87e 	bl	8010164 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800f068:	e03d      	b.n	800f0e6 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800f06a:	68bb      	ldr	r3, [r7, #8]
 800f06c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f070:	2b00      	cmp	r3, #0
 800f072:	d028      	beq.n	800f0c6 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d023      	beq.n	800f0c6 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f082:	b29b      	uxth	r3, r3
 800f084:	2b00      	cmp	r3, #0
 800f086:	d119      	bne.n	800f0bc <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	685b      	ldr	r3, [r3, #4]
 800f08e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f092:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f096:	d025      	beq.n	800f0e4 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f09c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800f0a0:	d108      	bne.n	800f0b4 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	685a      	ldr	r2, [r3, #4]
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f0b0:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800f0b2:	e017      	b.n	800f0e4 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800f0b4:	68f8      	ldr	r0, [r7, #12]
 800f0b6:	f000 fc4b 	bl	800f950 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800f0ba:	e013      	b.n	800f0e4 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800f0bc:	2140      	movs	r1, #64	@ 0x40
 800f0be:	68f8      	ldr	r0, [r7, #12]
 800f0c0:	f001 f850 	bl	8010164 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800f0c4:	e00e      	b.n	800f0e4 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f0c6:	68bb      	ldr	r3, [r7, #8]
 800f0c8:	f003 0320 	and.w	r3, r3, #32
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d00a      	beq.n	800f0e6 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d005      	beq.n	800f0e6 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800f0da:	68b9      	ldr	r1, [r7, #8]
 800f0dc:	68f8      	ldr	r0, [r7, #12]
 800f0de:	f000 fcd1 	bl	800fa84 <I2C_ITMasterCplt>
 800f0e2:	e000      	b.n	800f0e6 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 800f0e4:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	2200      	movs	r2, #0
 800f0ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800f0ee:	2300      	movs	r3, #0
}
 800f0f0:	4618      	mov	r0, r3
 800f0f2:	3718      	adds	r7, #24
 800f0f4:	46bd      	mov	sp, r7
 800f0f6:	bd80      	pop	{r7, pc}

0800f0f8 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800f0f8:	b580      	push	{r7, lr}
 800f0fa:	b088      	sub	sp, #32
 800f0fc:	af02      	add	r7, sp, #8
 800f0fe:	60f8      	str	r0, [r7, #12]
 800f100:	60b9      	str	r1, [r7, #8]
 800f102:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800f104:	4b8d      	ldr	r3, [pc, #564]	@ (800f33c <I2C_Mem_ISR_DMA+0x244>)
 800f106:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f10e:	2b01      	cmp	r3, #1
 800f110:	d101      	bne.n	800f116 <I2C_Mem_ISR_DMA+0x1e>
 800f112:	2302      	movs	r3, #2
 800f114:	e10e      	b.n	800f334 <I2C_Mem_ISR_DMA+0x23c>
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	2201      	movs	r2, #1
 800f11a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800f11e:	68bb      	ldr	r3, [r7, #8]
 800f120:	f003 0310 	and.w	r3, r3, #16
 800f124:	2b00      	cmp	r3, #0
 800f126:	d016      	beq.n	800f156 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d011      	beq.n	800f156 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	2210      	movs	r2, #16
 800f138:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f13e:	f043 0204 	orr.w	r2, r3, #4
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800f146:	2120      	movs	r1, #32
 800f148:	68f8      	ldr	r0, [r7, #12]
 800f14a:	f001 fb59 	bl	8010800 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800f14e:	68f8      	ldr	r0, [r7, #12]
 800f150:	f001 f91f 	bl	8010392 <I2C_Flush_TXDR>
 800f154:	e0e9      	b.n	800f32a <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800f156:	68bb      	ldr	r3, [r7, #8]
 800f158:	f003 0302 	and.w	r3, r3, #2
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d00e      	beq.n	800f17e <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800f166:	2b00      	cmp	r3, #0
 800f168:	d009      	beq.n	800f17e <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	68fa      	ldr	r2, [r7, #12]
 800f170:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800f172:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	f04f 32ff 	mov.w	r2, #4294967295
 800f17a:	651a      	str	r2, [r3, #80]	@ 0x50
 800f17c:	e0d5      	b.n	800f32a <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800f17e:	68bb      	ldr	r3, [r7, #8]
 800f180:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f184:	2b00      	cmp	r3, #0
 800f186:	d05f      	beq.n	800f248 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d05a      	beq.n	800f248 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800f192:	2101      	movs	r1, #1
 800f194:	68f8      	ldr	r0, [r7, #12]
 800f196:	f001 fbb7 	bl	8010908 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800f19a:	2110      	movs	r1, #16
 800f19c:	68f8      	ldr	r0, [r7, #12]
 800f19e:	f001 fb2f 	bl	8010800 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f1a6:	b29b      	uxth	r3, r3
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d048      	beq.n	800f23e <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f1b0:	b29b      	uxth	r3, r3
 800f1b2:	2bff      	cmp	r3, #255	@ 0xff
 800f1b4:	d910      	bls.n	800f1d8 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	22ff      	movs	r2, #255	@ 0xff
 800f1ba:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f1c0:	b299      	uxth	r1, r3
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f1c6:	b2da      	uxtb	r2, r3
 800f1c8:	2300      	movs	r3, #0
 800f1ca:	9300      	str	r3, [sp, #0]
 800f1cc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800f1d0:	68f8      	ldr	r0, [r7, #12]
 800f1d2:	f001 fae3 	bl	801079c <I2C_TransferConfig>
 800f1d6:	e011      	b.n	800f1fc <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f1dc:	b29a      	uxth	r2, r3
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f1e6:	b299      	uxth	r1, r3
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f1ec:	b2da      	uxtb	r2, r3
 800f1ee:	2300      	movs	r3, #0
 800f1f0:	9300      	str	r3, [sp, #0]
 800f1f2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800f1f6:	68f8      	ldr	r0, [r7, #12]
 800f1f8:	f001 fad0 	bl	801079c <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f200:	b29a      	uxth	r2, r3
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f206:	1ad3      	subs	r3, r2, r3
 800f208:	b29a      	uxth	r2, r3
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f214:	b2db      	uxtb	r3, r3
 800f216:	2b22      	cmp	r3, #34	@ 0x22
 800f218:	d108      	bne.n	800f22c <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	681a      	ldr	r2, [r3, #0]
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800f228:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800f22a:	e07e      	b.n	800f32a <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	681a      	ldr	r2, [r3, #0]
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f23a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800f23c:	e075      	b.n	800f32a <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800f23e:	2140      	movs	r1, #64	@ 0x40
 800f240:	68f8      	ldr	r0, [r7, #12]
 800f242:	f000 ff8f 	bl	8010164 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800f246:	e070      	b.n	800f32a <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800f248:	68bb      	ldr	r3, [r7, #8]
 800f24a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d05d      	beq.n	800f30e <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d058      	beq.n	800f30e <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800f25c:	2101      	movs	r1, #1
 800f25e:	68f8      	ldr	r0, [r7, #12]
 800f260:	f001 fb52 	bl	8010908 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800f264:	2110      	movs	r1, #16
 800f266:	68f8      	ldr	r0, [r7, #12]
 800f268:	f001 faca 	bl	8010800 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f272:	b2db      	uxtb	r3, r3
 800f274:	2b22      	cmp	r3, #34	@ 0x22
 800f276:	d101      	bne.n	800f27c <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 800f278:	4b31      	ldr	r3, [pc, #196]	@ (800f340 <I2C_Mem_ISR_DMA+0x248>)
 800f27a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f280:	b29b      	uxth	r3, r3
 800f282:	2bff      	cmp	r3, #255	@ 0xff
 800f284:	d910      	bls.n	800f2a8 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800f286:	68fb      	ldr	r3, [r7, #12]
 800f288:	22ff      	movs	r2, #255	@ 0xff
 800f28a:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f290:	b299      	uxth	r1, r3
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f296:	b2da      	uxtb	r2, r3
 800f298:	697b      	ldr	r3, [r7, #20]
 800f29a:	9300      	str	r3, [sp, #0]
 800f29c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800f2a0:	68f8      	ldr	r0, [r7, #12]
 800f2a2:	f001 fa7b 	bl	801079c <I2C_TransferConfig>
 800f2a6:	e011      	b.n	800f2cc <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f2ac:	b29a      	uxth	r2, r3
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f2b6:	b299      	uxth	r1, r3
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f2bc:	b2da      	uxtb	r2, r3
 800f2be:	697b      	ldr	r3, [r7, #20]
 800f2c0:	9300      	str	r3, [sp, #0]
 800f2c2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800f2c6:	68f8      	ldr	r0, [r7, #12]
 800f2c8:	f001 fa68 	bl	801079c <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f2d0:	b29a      	uxth	r2, r3
 800f2d2:	68fb      	ldr	r3, [r7, #12]
 800f2d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f2d6:	1ad3      	subs	r3, r2, r3
 800f2d8:	b29a      	uxth	r2, r3
 800f2da:	68fb      	ldr	r3, [r7, #12]
 800f2dc:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f2e4:	b2db      	uxtb	r3, r3
 800f2e6:	2b22      	cmp	r3, #34	@ 0x22
 800f2e8:	d108      	bne.n	800f2fc <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800f2ea:	68fb      	ldr	r3, [r7, #12]
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	681a      	ldr	r2, [r3, #0]
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800f2f8:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f2fa:	e016      	b.n	800f32a <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	681a      	ldr	r2, [r3, #0]
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f30a:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f30c:	e00d      	b.n	800f32a <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f30e:	68bb      	ldr	r3, [r7, #8]
 800f310:	f003 0320 	and.w	r3, r3, #32
 800f314:	2b00      	cmp	r3, #0
 800f316:	d008      	beq.n	800f32a <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d003      	beq.n	800f32a <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800f322:	68b9      	ldr	r1, [r7, #8]
 800f324:	68f8      	ldr	r0, [r7, #12]
 800f326:	f000 fbad 	bl	800fa84 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800f32a:	68fb      	ldr	r3, [r7, #12]
 800f32c:	2200      	movs	r2, #0
 800f32e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800f332:	2300      	movs	r3, #0
}
 800f334:	4618      	mov	r0, r3
 800f336:	3718      	adds	r7, #24
 800f338:	46bd      	mov	sp, r7
 800f33a:	bd80      	pop	{r7, pc}
 800f33c:	80002000 	.word	0x80002000
 800f340:	80002400 	.word	0x80002400

0800f344 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800f344:	b580      	push	{r7, lr}
 800f346:	b088      	sub	sp, #32
 800f348:	af00      	add	r7, sp, #0
 800f34a:	60f8      	str	r0, [r7, #12]
 800f34c:	60b9      	str	r1, [r7, #8]
 800f34e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f354:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800f356:	2300      	movs	r3, #0
 800f358:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f360:	2b01      	cmp	r3, #1
 800f362:	d101      	bne.n	800f368 <I2C_Slave_ISR_DMA+0x24>
 800f364:	2302      	movs	r3, #2
 800f366:	e1c2      	b.n	800f6ee <I2C_Slave_ISR_DMA+0x3aa>
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	2201      	movs	r2, #1
 800f36c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f370:	68bb      	ldr	r3, [r7, #8]
 800f372:	f003 0320 	and.w	r3, r3, #32
 800f376:	2b00      	cmp	r3, #0
 800f378:	d009      	beq.n	800f38e <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f380:	2b00      	cmp	r3, #0
 800f382:	d004      	beq.n	800f38e <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800f384:	68b9      	ldr	r1, [r7, #8]
 800f386:	68f8      	ldr	r0, [r7, #12]
 800f388:	f000 fc44 	bl	800fc14 <I2C_ITSlaveCplt>
 800f38c:	e1aa      	b.n	800f6e4 <I2C_Slave_ISR_DMA+0x3a0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800f38e:	68bb      	ldr	r3, [r7, #8]
 800f390:	f003 0310 	and.w	r3, r3, #16
 800f394:	2b00      	cmp	r3, #0
 800f396:	f000 8197 	beq.w	800f6c8 <I2C_Slave_ISR_DMA+0x384>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	f000 8191 	beq.w	800f6c8 <I2C_Slave_ISR_DMA+0x384>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d105      	bne.n	800f3bc <I2C_Slave_ISR_DMA+0x78>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	f000 817f 	beq.w	800f6ba <I2C_Slave_ISR_DMA+0x376>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d07b      	beq.n	800f4bc <I2C_Slave_ISR_DMA+0x178>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d076      	beq.n	800f4bc <I2C_Slave_ISR_DMA+0x178>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	4a74      	ldr	r2, [pc, #464]	@ (800f5a8 <I2C_Slave_ISR_DMA+0x264>)
 800f3d6:	4293      	cmp	r3, r2
 800f3d8:	d059      	beq.n	800f48e <I2C_Slave_ISR_DMA+0x14a>
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f3de:	681b      	ldr	r3, [r3, #0]
 800f3e0:	4a72      	ldr	r2, [pc, #456]	@ (800f5ac <I2C_Slave_ISR_DMA+0x268>)
 800f3e2:	4293      	cmp	r3, r2
 800f3e4:	d053      	beq.n	800f48e <I2C_Slave_ISR_DMA+0x14a>
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	4a70      	ldr	r2, [pc, #448]	@ (800f5b0 <I2C_Slave_ISR_DMA+0x26c>)
 800f3ee:	4293      	cmp	r3, r2
 800f3f0:	d04d      	beq.n	800f48e <I2C_Slave_ISR_DMA+0x14a>
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	4a6e      	ldr	r2, [pc, #440]	@ (800f5b4 <I2C_Slave_ISR_DMA+0x270>)
 800f3fa:	4293      	cmp	r3, r2
 800f3fc:	d047      	beq.n	800f48e <I2C_Slave_ISR_DMA+0x14a>
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f402:	681b      	ldr	r3, [r3, #0]
 800f404:	4a6c      	ldr	r2, [pc, #432]	@ (800f5b8 <I2C_Slave_ISR_DMA+0x274>)
 800f406:	4293      	cmp	r3, r2
 800f408:	d041      	beq.n	800f48e <I2C_Slave_ISR_DMA+0x14a>
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f40e:	681b      	ldr	r3, [r3, #0]
 800f410:	4a6a      	ldr	r2, [pc, #424]	@ (800f5bc <I2C_Slave_ISR_DMA+0x278>)
 800f412:	4293      	cmp	r3, r2
 800f414:	d03b      	beq.n	800f48e <I2C_Slave_ISR_DMA+0x14a>
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	4a68      	ldr	r2, [pc, #416]	@ (800f5c0 <I2C_Slave_ISR_DMA+0x27c>)
 800f41e:	4293      	cmp	r3, r2
 800f420:	d035      	beq.n	800f48e <I2C_Slave_ISR_DMA+0x14a>
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	4a66      	ldr	r2, [pc, #408]	@ (800f5c4 <I2C_Slave_ISR_DMA+0x280>)
 800f42a:	4293      	cmp	r3, r2
 800f42c:	d02f      	beq.n	800f48e <I2C_Slave_ISR_DMA+0x14a>
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	4a64      	ldr	r2, [pc, #400]	@ (800f5c8 <I2C_Slave_ISR_DMA+0x284>)
 800f436:	4293      	cmp	r3, r2
 800f438:	d029      	beq.n	800f48e <I2C_Slave_ISR_DMA+0x14a>
 800f43a:	68fb      	ldr	r3, [r7, #12]
 800f43c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	4a62      	ldr	r2, [pc, #392]	@ (800f5cc <I2C_Slave_ISR_DMA+0x288>)
 800f442:	4293      	cmp	r3, r2
 800f444:	d023      	beq.n	800f48e <I2C_Slave_ISR_DMA+0x14a>
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f44a:	681b      	ldr	r3, [r3, #0]
 800f44c:	4a60      	ldr	r2, [pc, #384]	@ (800f5d0 <I2C_Slave_ISR_DMA+0x28c>)
 800f44e:	4293      	cmp	r3, r2
 800f450:	d01d      	beq.n	800f48e <I2C_Slave_ISR_DMA+0x14a>
 800f452:	68fb      	ldr	r3, [r7, #12]
 800f454:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	4a5e      	ldr	r2, [pc, #376]	@ (800f5d4 <I2C_Slave_ISR_DMA+0x290>)
 800f45a:	4293      	cmp	r3, r2
 800f45c:	d017      	beq.n	800f48e <I2C_Slave_ISR_DMA+0x14a>
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	4a5c      	ldr	r2, [pc, #368]	@ (800f5d8 <I2C_Slave_ISR_DMA+0x294>)
 800f466:	4293      	cmp	r3, r2
 800f468:	d011      	beq.n	800f48e <I2C_Slave_ISR_DMA+0x14a>
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	4a5a      	ldr	r2, [pc, #360]	@ (800f5dc <I2C_Slave_ISR_DMA+0x298>)
 800f472:	4293      	cmp	r3, r2
 800f474:	d00b      	beq.n	800f48e <I2C_Slave_ISR_DMA+0x14a>
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	4a58      	ldr	r2, [pc, #352]	@ (800f5e0 <I2C_Slave_ISR_DMA+0x29c>)
 800f47e:	4293      	cmp	r3, r2
 800f480:	d005      	beq.n	800f48e <I2C_Slave_ISR_DMA+0x14a>
 800f482:	68fb      	ldr	r3, [r7, #12]
 800f484:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	4a56      	ldr	r2, [pc, #344]	@ (800f5e4 <I2C_Slave_ISR_DMA+0x2a0>)
 800f48a:	4293      	cmp	r3, r2
 800f48c:	d109      	bne.n	800f4a2 <I2C_Slave_ISR_DMA+0x15e>
 800f48e:	68fb      	ldr	r3, [r7, #12]
 800f490:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	685b      	ldr	r3, [r3, #4]
 800f496:	2b00      	cmp	r3, #0
 800f498:	bf0c      	ite	eq
 800f49a:	2301      	moveq	r3, #1
 800f49c:	2300      	movne	r3, #0
 800f49e:	b2db      	uxtb	r3, r3
 800f4a0:	e008      	b.n	800f4b4 <I2C_Slave_ISR_DMA+0x170>
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	685b      	ldr	r3, [r3, #4]
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	bf0c      	ite	eq
 800f4ae:	2301      	moveq	r3, #1
 800f4b0:	2300      	movne	r3, #0
 800f4b2:	b2db      	uxtb	r3, r3
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d001      	beq.n	800f4bc <I2C_Slave_ISR_DMA+0x178>
          {
            treatdmanack = 1U;
 800f4b8:	2301      	movs	r3, #1
 800f4ba:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	f000 809e 	beq.w	800f602 <I2C_Slave_ISR_DMA+0x2be>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	f000 8098 	beq.w	800f602 <I2C_Slave_ISR_DMA+0x2be>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	4a33      	ldr	r2, [pc, #204]	@ (800f5a8 <I2C_Slave_ISR_DMA+0x264>)
 800f4da:	4293      	cmp	r3, r2
 800f4dc:	d059      	beq.n	800f592 <I2C_Slave_ISR_DMA+0x24e>
 800f4de:	68fb      	ldr	r3, [r7, #12]
 800f4e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	4a31      	ldr	r2, [pc, #196]	@ (800f5ac <I2C_Slave_ISR_DMA+0x268>)
 800f4e6:	4293      	cmp	r3, r2
 800f4e8:	d053      	beq.n	800f592 <I2C_Slave_ISR_DMA+0x24e>
 800f4ea:	68fb      	ldr	r3, [r7, #12]
 800f4ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	4a2f      	ldr	r2, [pc, #188]	@ (800f5b0 <I2C_Slave_ISR_DMA+0x26c>)
 800f4f2:	4293      	cmp	r3, r2
 800f4f4:	d04d      	beq.n	800f592 <I2C_Slave_ISR_DMA+0x24e>
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	4a2d      	ldr	r2, [pc, #180]	@ (800f5b4 <I2C_Slave_ISR_DMA+0x270>)
 800f4fe:	4293      	cmp	r3, r2
 800f500:	d047      	beq.n	800f592 <I2C_Slave_ISR_DMA+0x24e>
 800f502:	68fb      	ldr	r3, [r7, #12]
 800f504:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f506:	681b      	ldr	r3, [r3, #0]
 800f508:	4a2b      	ldr	r2, [pc, #172]	@ (800f5b8 <I2C_Slave_ISR_DMA+0x274>)
 800f50a:	4293      	cmp	r3, r2
 800f50c:	d041      	beq.n	800f592 <I2C_Slave_ISR_DMA+0x24e>
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	4a29      	ldr	r2, [pc, #164]	@ (800f5bc <I2C_Slave_ISR_DMA+0x278>)
 800f516:	4293      	cmp	r3, r2
 800f518:	d03b      	beq.n	800f592 <I2C_Slave_ISR_DMA+0x24e>
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	4a27      	ldr	r2, [pc, #156]	@ (800f5c0 <I2C_Slave_ISR_DMA+0x27c>)
 800f522:	4293      	cmp	r3, r2
 800f524:	d035      	beq.n	800f592 <I2C_Slave_ISR_DMA+0x24e>
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	4a25      	ldr	r2, [pc, #148]	@ (800f5c4 <I2C_Slave_ISR_DMA+0x280>)
 800f52e:	4293      	cmp	r3, r2
 800f530:	d02f      	beq.n	800f592 <I2C_Slave_ISR_DMA+0x24e>
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	4a23      	ldr	r2, [pc, #140]	@ (800f5c8 <I2C_Slave_ISR_DMA+0x284>)
 800f53a:	4293      	cmp	r3, r2
 800f53c:	d029      	beq.n	800f592 <I2C_Slave_ISR_DMA+0x24e>
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	4a21      	ldr	r2, [pc, #132]	@ (800f5cc <I2C_Slave_ISR_DMA+0x288>)
 800f546:	4293      	cmp	r3, r2
 800f548:	d023      	beq.n	800f592 <I2C_Slave_ISR_DMA+0x24e>
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	4a1f      	ldr	r2, [pc, #124]	@ (800f5d0 <I2C_Slave_ISR_DMA+0x28c>)
 800f552:	4293      	cmp	r3, r2
 800f554:	d01d      	beq.n	800f592 <I2C_Slave_ISR_DMA+0x24e>
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	4a1d      	ldr	r2, [pc, #116]	@ (800f5d4 <I2C_Slave_ISR_DMA+0x290>)
 800f55e:	4293      	cmp	r3, r2
 800f560:	d017      	beq.n	800f592 <I2C_Slave_ISR_DMA+0x24e>
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	4a1b      	ldr	r2, [pc, #108]	@ (800f5d8 <I2C_Slave_ISR_DMA+0x294>)
 800f56a:	4293      	cmp	r3, r2
 800f56c:	d011      	beq.n	800f592 <I2C_Slave_ISR_DMA+0x24e>
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	4a19      	ldr	r2, [pc, #100]	@ (800f5dc <I2C_Slave_ISR_DMA+0x298>)
 800f576:	4293      	cmp	r3, r2
 800f578:	d00b      	beq.n	800f592 <I2C_Slave_ISR_DMA+0x24e>
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	4a17      	ldr	r2, [pc, #92]	@ (800f5e0 <I2C_Slave_ISR_DMA+0x29c>)
 800f582:	4293      	cmp	r3, r2
 800f584:	d005      	beq.n	800f592 <I2C_Slave_ISR_DMA+0x24e>
 800f586:	68fb      	ldr	r3, [r7, #12]
 800f588:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	4a15      	ldr	r2, [pc, #84]	@ (800f5e4 <I2C_Slave_ISR_DMA+0x2a0>)
 800f58e:	4293      	cmp	r3, r2
 800f590:	d12a      	bne.n	800f5e8 <I2C_Slave_ISR_DMA+0x2a4>
 800f592:	68fb      	ldr	r3, [r7, #12]
 800f594:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	685b      	ldr	r3, [r3, #4]
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	bf0c      	ite	eq
 800f59e:	2301      	moveq	r3, #1
 800f5a0:	2300      	movne	r3, #0
 800f5a2:	b2db      	uxtb	r3, r3
 800f5a4:	e029      	b.n	800f5fa <I2C_Slave_ISR_DMA+0x2b6>
 800f5a6:	bf00      	nop
 800f5a8:	40020010 	.word	0x40020010
 800f5ac:	40020028 	.word	0x40020028
 800f5b0:	40020040 	.word	0x40020040
 800f5b4:	40020058 	.word	0x40020058
 800f5b8:	40020070 	.word	0x40020070
 800f5bc:	40020088 	.word	0x40020088
 800f5c0:	400200a0 	.word	0x400200a0
 800f5c4:	400200b8 	.word	0x400200b8
 800f5c8:	40020410 	.word	0x40020410
 800f5cc:	40020428 	.word	0x40020428
 800f5d0:	40020440 	.word	0x40020440
 800f5d4:	40020458 	.word	0x40020458
 800f5d8:	40020470 	.word	0x40020470
 800f5dc:	40020488 	.word	0x40020488
 800f5e0:	400204a0 	.word	0x400204a0
 800f5e4:	400204b8 	.word	0x400204b8
 800f5e8:	68fb      	ldr	r3, [r7, #12]
 800f5ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	685b      	ldr	r3, [r3, #4]
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	bf0c      	ite	eq
 800f5f4:	2301      	moveq	r3, #1
 800f5f6:	2300      	movne	r3, #0
 800f5f8:	b2db      	uxtb	r3, r3
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d001      	beq.n	800f602 <I2C_Slave_ISR_DMA+0x2be>
          {
            treatdmanack = 1U;
 800f5fe:	2301      	movs	r3, #1
 800f600:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800f602:	69fb      	ldr	r3, [r7, #28]
 800f604:	2b01      	cmp	r3, #1
 800f606:	d128      	bne.n	800f65a <I2C_Slave_ISR_DMA+0x316>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f60e:	b2db      	uxtb	r3, r3
 800f610:	2b28      	cmp	r3, #40	@ 0x28
 800f612:	d108      	bne.n	800f626 <I2C_Slave_ISR_DMA+0x2e2>
 800f614:	69bb      	ldr	r3, [r7, #24]
 800f616:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f61a:	d104      	bne.n	800f626 <I2C_Slave_ISR_DMA+0x2e2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800f61c:	68b9      	ldr	r1, [r7, #8]
 800f61e:	68f8      	ldr	r0, [r7, #12]
 800f620:	f000 fd4c 	bl	80100bc <I2C_ITListenCplt>
 800f624:	e048      	b.n	800f6b8 <I2C_Slave_ISR_DMA+0x374>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f62c:	b2db      	uxtb	r3, r3
 800f62e:	2b29      	cmp	r3, #41	@ 0x29
 800f630:	d10e      	bne.n	800f650 <I2C_Slave_ISR_DMA+0x30c>
 800f632:	69bb      	ldr	r3, [r7, #24]
 800f634:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800f638:	d00a      	beq.n	800f650 <I2C_Slave_ISR_DMA+0x30c>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f63a:	68fb      	ldr	r3, [r7, #12]
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	2210      	movs	r2, #16
 800f640:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800f642:	68f8      	ldr	r0, [r7, #12]
 800f644:	f000 fea5 	bl	8010392 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800f648:	68f8      	ldr	r0, [r7, #12]
 800f64a:	f000 f9be 	bl	800f9ca <I2C_ITSlaveSeqCplt>
 800f64e:	e033      	b.n	800f6b8 <I2C_Slave_ISR_DMA+0x374>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f650:	68fb      	ldr	r3, [r7, #12]
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	2210      	movs	r2, #16
 800f656:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800f658:	e034      	b.n	800f6c4 <I2C_Slave_ISR_DMA+0x380>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f65a:	68fb      	ldr	r3, [r7, #12]
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	2210      	movs	r2, #16
 800f660:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800f662:	68fb      	ldr	r3, [r7, #12]
 800f664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f666:	f043 0204 	orr.w	r2, r3, #4
 800f66a:	68fb      	ldr	r3, [r7, #12]
 800f66c:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f674:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800f676:	69bb      	ldr	r3, [r7, #24]
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d003      	beq.n	800f684 <I2C_Slave_ISR_DMA+0x340>
 800f67c:	69bb      	ldr	r3, [r7, #24]
 800f67e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f682:	d11f      	bne.n	800f6c4 <I2C_Slave_ISR_DMA+0x380>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800f684:	7dfb      	ldrb	r3, [r7, #23]
 800f686:	2b21      	cmp	r3, #33	@ 0x21
 800f688:	d002      	beq.n	800f690 <I2C_Slave_ISR_DMA+0x34c>
 800f68a:	7dfb      	ldrb	r3, [r7, #23]
 800f68c:	2b29      	cmp	r3, #41	@ 0x29
 800f68e:	d103      	bne.n	800f698 <I2C_Slave_ISR_DMA+0x354>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	2221      	movs	r2, #33	@ 0x21
 800f694:	631a      	str	r2, [r3, #48]	@ 0x30
 800f696:	e008      	b.n	800f6aa <I2C_Slave_ISR_DMA+0x366>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800f698:	7dfb      	ldrb	r3, [r7, #23]
 800f69a:	2b22      	cmp	r3, #34	@ 0x22
 800f69c:	d002      	beq.n	800f6a4 <I2C_Slave_ISR_DMA+0x360>
 800f69e:	7dfb      	ldrb	r3, [r7, #23]
 800f6a0:	2b2a      	cmp	r3, #42	@ 0x2a
 800f6a2:	d102      	bne.n	800f6aa <I2C_Slave_ISR_DMA+0x366>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	2222      	movs	r2, #34	@ 0x22
 800f6a8:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f6ae:	4619      	mov	r1, r3
 800f6b0:	68f8      	ldr	r0, [r7, #12]
 800f6b2:	f000 fd57 	bl	8010164 <I2C_ITError>
      if (treatdmanack == 1U)
 800f6b6:	e005      	b.n	800f6c4 <I2C_Slave_ISR_DMA+0x380>
 800f6b8:	e004      	b.n	800f6c4 <I2C_Slave_ISR_DMA+0x380>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	681b      	ldr	r3, [r3, #0]
 800f6be:	2210      	movs	r2, #16
 800f6c0:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800f6c2:	e00f      	b.n	800f6e4 <I2C_Slave_ISR_DMA+0x3a0>
      if (treatdmanack == 1U)
 800f6c4:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800f6c6:	e00d      	b.n	800f6e4 <I2C_Slave_ISR_DMA+0x3a0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800f6c8:	68bb      	ldr	r3, [r7, #8]
 800f6ca:	f003 0308 	and.w	r3, r3, #8
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d008      	beq.n	800f6e4 <I2C_Slave_ISR_DMA+0x3a0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d003      	beq.n	800f6e4 <I2C_Slave_ISR_DMA+0x3a0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800f6dc:	68b9      	ldr	r1, [r7, #8]
 800f6de:	68f8      	ldr	r0, [r7, #12]
 800f6e0:	f000 f8b2 	bl	800f848 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	2200      	movs	r2, #0
 800f6e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800f6ec:	2300      	movs	r3, #0
}
 800f6ee:	4618      	mov	r0, r3
 800f6f0:	3720      	adds	r7, #32
 800f6f2:	46bd      	mov	sp, r7
 800f6f4:	bd80      	pop	{r7, pc}
 800f6f6:	bf00      	nop

0800f6f8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800f6f8:	b580      	push	{r7, lr}
 800f6fa:	b086      	sub	sp, #24
 800f6fc:	af02      	add	r7, sp, #8
 800f6fe:	60f8      	str	r0, [r7, #12]
 800f700:	4608      	mov	r0, r1
 800f702:	4611      	mov	r1, r2
 800f704:	461a      	mov	r2, r3
 800f706:	4603      	mov	r3, r0
 800f708:	817b      	strh	r3, [r7, #10]
 800f70a:	460b      	mov	r3, r1
 800f70c:	813b      	strh	r3, [r7, #8]
 800f70e:	4613      	mov	r3, r2
 800f710:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800f712:	88fb      	ldrh	r3, [r7, #6]
 800f714:	b2da      	uxtb	r2, r3
 800f716:	8979      	ldrh	r1, [r7, #10]
 800f718:	4b20      	ldr	r3, [pc, #128]	@ (800f79c <I2C_RequestMemoryWrite+0xa4>)
 800f71a:	9300      	str	r3, [sp, #0]
 800f71c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800f720:	68f8      	ldr	r0, [r7, #12]
 800f722:	f001 f83b 	bl	801079c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800f726:	69fa      	ldr	r2, [r7, #28]
 800f728:	69b9      	ldr	r1, [r7, #24]
 800f72a:	68f8      	ldr	r0, [r7, #12]
 800f72c:	f000 fecc 	bl	80104c8 <I2C_WaitOnTXISFlagUntilTimeout>
 800f730:	4603      	mov	r3, r0
 800f732:	2b00      	cmp	r3, #0
 800f734:	d001      	beq.n	800f73a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800f736:	2301      	movs	r3, #1
 800f738:	e02c      	b.n	800f794 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800f73a:	88fb      	ldrh	r3, [r7, #6]
 800f73c:	2b01      	cmp	r3, #1
 800f73e:	d105      	bne.n	800f74c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800f740:	893b      	ldrh	r3, [r7, #8]
 800f742:	b2da      	uxtb	r2, r3
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	629a      	str	r2, [r3, #40]	@ 0x28
 800f74a:	e015      	b.n	800f778 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800f74c:	893b      	ldrh	r3, [r7, #8]
 800f74e:	0a1b      	lsrs	r3, r3, #8
 800f750:	b29b      	uxth	r3, r3
 800f752:	b2da      	uxtb	r2, r3
 800f754:	68fb      	ldr	r3, [r7, #12]
 800f756:	681b      	ldr	r3, [r3, #0]
 800f758:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800f75a:	69fa      	ldr	r2, [r7, #28]
 800f75c:	69b9      	ldr	r1, [r7, #24]
 800f75e:	68f8      	ldr	r0, [r7, #12]
 800f760:	f000 feb2 	bl	80104c8 <I2C_WaitOnTXISFlagUntilTimeout>
 800f764:	4603      	mov	r3, r0
 800f766:	2b00      	cmp	r3, #0
 800f768:	d001      	beq.n	800f76e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800f76a:	2301      	movs	r3, #1
 800f76c:	e012      	b.n	800f794 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800f76e:	893b      	ldrh	r3, [r7, #8]
 800f770:	b2da      	uxtb	r2, r3
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	681b      	ldr	r3, [r3, #0]
 800f776:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800f778:	69fb      	ldr	r3, [r7, #28]
 800f77a:	9300      	str	r3, [sp, #0]
 800f77c:	69bb      	ldr	r3, [r7, #24]
 800f77e:	2200      	movs	r2, #0
 800f780:	2180      	movs	r1, #128	@ 0x80
 800f782:	68f8      	ldr	r0, [r7, #12]
 800f784:	f000 fe47 	bl	8010416 <I2C_WaitOnFlagUntilTimeout>
 800f788:	4603      	mov	r3, r0
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d001      	beq.n	800f792 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800f78e:	2301      	movs	r3, #1
 800f790:	e000      	b.n	800f794 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800f792:	2300      	movs	r3, #0
}
 800f794:	4618      	mov	r0, r3
 800f796:	3710      	adds	r7, #16
 800f798:	46bd      	mov	sp, r7
 800f79a:	bd80      	pop	{r7, pc}
 800f79c:	80002000 	.word	0x80002000

0800f7a0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800f7a0:	b580      	push	{r7, lr}
 800f7a2:	b086      	sub	sp, #24
 800f7a4:	af02      	add	r7, sp, #8
 800f7a6:	60f8      	str	r0, [r7, #12]
 800f7a8:	4608      	mov	r0, r1
 800f7aa:	4611      	mov	r1, r2
 800f7ac:	461a      	mov	r2, r3
 800f7ae:	4603      	mov	r3, r0
 800f7b0:	817b      	strh	r3, [r7, #10]
 800f7b2:	460b      	mov	r3, r1
 800f7b4:	813b      	strh	r3, [r7, #8]
 800f7b6:	4613      	mov	r3, r2
 800f7b8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800f7ba:	88fb      	ldrh	r3, [r7, #6]
 800f7bc:	b2da      	uxtb	r2, r3
 800f7be:	8979      	ldrh	r1, [r7, #10]
 800f7c0:	4b20      	ldr	r3, [pc, #128]	@ (800f844 <I2C_RequestMemoryRead+0xa4>)
 800f7c2:	9300      	str	r3, [sp, #0]
 800f7c4:	2300      	movs	r3, #0
 800f7c6:	68f8      	ldr	r0, [r7, #12]
 800f7c8:	f000 ffe8 	bl	801079c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800f7cc:	69fa      	ldr	r2, [r7, #28]
 800f7ce:	69b9      	ldr	r1, [r7, #24]
 800f7d0:	68f8      	ldr	r0, [r7, #12]
 800f7d2:	f000 fe79 	bl	80104c8 <I2C_WaitOnTXISFlagUntilTimeout>
 800f7d6:	4603      	mov	r3, r0
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d001      	beq.n	800f7e0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800f7dc:	2301      	movs	r3, #1
 800f7de:	e02c      	b.n	800f83a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800f7e0:	88fb      	ldrh	r3, [r7, #6]
 800f7e2:	2b01      	cmp	r3, #1
 800f7e4:	d105      	bne.n	800f7f2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800f7e6:	893b      	ldrh	r3, [r7, #8]
 800f7e8:	b2da      	uxtb	r2, r3
 800f7ea:	68fb      	ldr	r3, [r7, #12]
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	629a      	str	r2, [r3, #40]	@ 0x28
 800f7f0:	e015      	b.n	800f81e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800f7f2:	893b      	ldrh	r3, [r7, #8]
 800f7f4:	0a1b      	lsrs	r3, r3, #8
 800f7f6:	b29b      	uxth	r3, r3
 800f7f8:	b2da      	uxtb	r2, r3
 800f7fa:	68fb      	ldr	r3, [r7, #12]
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800f800:	69fa      	ldr	r2, [r7, #28]
 800f802:	69b9      	ldr	r1, [r7, #24]
 800f804:	68f8      	ldr	r0, [r7, #12]
 800f806:	f000 fe5f 	bl	80104c8 <I2C_WaitOnTXISFlagUntilTimeout>
 800f80a:	4603      	mov	r3, r0
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d001      	beq.n	800f814 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800f810:	2301      	movs	r3, #1
 800f812:	e012      	b.n	800f83a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800f814:	893b      	ldrh	r3, [r7, #8]
 800f816:	b2da      	uxtb	r2, r3
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800f81e:	69fb      	ldr	r3, [r7, #28]
 800f820:	9300      	str	r3, [sp, #0]
 800f822:	69bb      	ldr	r3, [r7, #24]
 800f824:	2200      	movs	r2, #0
 800f826:	2140      	movs	r1, #64	@ 0x40
 800f828:	68f8      	ldr	r0, [r7, #12]
 800f82a:	f000 fdf4 	bl	8010416 <I2C_WaitOnFlagUntilTimeout>
 800f82e:	4603      	mov	r3, r0
 800f830:	2b00      	cmp	r3, #0
 800f832:	d001      	beq.n	800f838 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800f834:	2301      	movs	r3, #1
 800f836:	e000      	b.n	800f83a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800f838:	2300      	movs	r3, #0
}
 800f83a:	4618      	mov	r0, r3
 800f83c:	3710      	adds	r7, #16
 800f83e:	46bd      	mov	sp, r7
 800f840:	bd80      	pop	{r7, pc}
 800f842:	bf00      	nop
 800f844:	80002000 	.word	0x80002000

0800f848 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800f848:	b580      	push	{r7, lr}
 800f84a:	b084      	sub	sp, #16
 800f84c:	af00      	add	r7, sp, #0
 800f84e:	6078      	str	r0, [r7, #4]
 800f850:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f858:	b2db      	uxtb	r3, r3
 800f85a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800f85e:	2b28      	cmp	r3, #40	@ 0x28
 800f860:	d16a      	bne.n	800f938 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	699b      	ldr	r3, [r3, #24]
 800f868:	0c1b      	lsrs	r3, r3, #16
 800f86a:	b2db      	uxtb	r3, r3
 800f86c:	f003 0301 	and.w	r3, r3, #1
 800f870:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	699b      	ldr	r3, [r3, #24]
 800f878:	0c1b      	lsrs	r3, r3, #16
 800f87a:	b29b      	uxth	r3, r3
 800f87c:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800f880:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	689b      	ldr	r3, [r3, #8]
 800f888:	b29b      	uxth	r3, r3
 800f88a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f88e:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	68db      	ldr	r3, [r3, #12]
 800f896:	b29b      	uxth	r3, r3
 800f898:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800f89c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	68db      	ldr	r3, [r3, #12]
 800f8a2:	2b02      	cmp	r3, #2
 800f8a4:	d138      	bne.n	800f918 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800f8a6:	897b      	ldrh	r3, [r7, #10]
 800f8a8:	09db      	lsrs	r3, r3, #7
 800f8aa:	b29a      	uxth	r2, r3
 800f8ac:	89bb      	ldrh	r3, [r7, #12]
 800f8ae:	4053      	eors	r3, r2
 800f8b0:	b29b      	uxth	r3, r3
 800f8b2:	f003 0306 	and.w	r3, r3, #6
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d11c      	bne.n	800f8f4 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800f8ba:	897b      	ldrh	r3, [r7, #10]
 800f8bc:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f8c2:	1c5a      	adds	r2, r3, #1
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f8cc:	2b02      	cmp	r3, #2
 800f8ce:	d13b      	bne.n	800f948 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	2200      	movs	r2, #0
 800f8d4:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	2208      	movs	r2, #8
 800f8dc:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	2200      	movs	r2, #0
 800f8e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800f8e6:	89ba      	ldrh	r2, [r7, #12]
 800f8e8:	7bfb      	ldrb	r3, [r7, #15]
 800f8ea:	4619      	mov	r1, r3
 800f8ec:	6878      	ldr	r0, [r7, #4]
 800f8ee:	f7ff f8c3 	bl	800ea78 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800f8f2:	e029      	b.n	800f948 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800f8f4:	893b      	ldrh	r3, [r7, #8]
 800f8f6:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800f8f8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800f8fc:	6878      	ldr	r0, [r7, #4]
 800f8fe:	f001 f803 	bl	8010908 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	2200      	movs	r2, #0
 800f906:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800f90a:	89ba      	ldrh	r2, [r7, #12]
 800f90c:	7bfb      	ldrb	r3, [r7, #15]
 800f90e:	4619      	mov	r1, r3
 800f910:	6878      	ldr	r0, [r7, #4]
 800f912:	f7ff f8b1 	bl	800ea78 <HAL_I2C_AddrCallback>
}
 800f916:	e017      	b.n	800f948 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800f918:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800f91c:	6878      	ldr	r0, [r7, #4]
 800f91e:	f000 fff3 	bl	8010908 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	2200      	movs	r2, #0
 800f926:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800f92a:	89ba      	ldrh	r2, [r7, #12]
 800f92c:	7bfb      	ldrb	r3, [r7, #15]
 800f92e:	4619      	mov	r1, r3
 800f930:	6878      	ldr	r0, [r7, #4]
 800f932:	f7ff f8a1 	bl	800ea78 <HAL_I2C_AddrCallback>
}
 800f936:	e007      	b.n	800f948 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	681b      	ldr	r3, [r3, #0]
 800f93c:	2208      	movs	r2, #8
 800f93e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	2200      	movs	r2, #0
 800f944:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 800f948:	bf00      	nop
 800f94a:	3710      	adds	r7, #16
 800f94c:	46bd      	mov	sp, r7
 800f94e:	bd80      	pop	{r7, pc}

0800f950 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800f950:	b580      	push	{r7, lr}
 800f952:	b082      	sub	sp, #8
 800f954:	af00      	add	r7, sp, #0
 800f956:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	2200      	movs	r2, #0
 800f95c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f966:	b2db      	uxtb	r3, r3
 800f968:	2b21      	cmp	r3, #33	@ 0x21
 800f96a:	d115      	bne.n	800f998 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	2220      	movs	r2, #32
 800f970:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	2211      	movs	r2, #17
 800f978:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	2200      	movs	r2, #0
 800f97e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800f980:	2101      	movs	r1, #1
 800f982:	6878      	ldr	r0, [r7, #4]
 800f984:	f000 ffc0 	bl	8010908 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	2200      	movs	r2, #0
 800f98c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800f990:	6878      	ldr	r0, [r7, #4]
 800f992:	f7ff f849 	bl	800ea28 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800f996:	e014      	b.n	800f9c2 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	2220      	movs	r2, #32
 800f99c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	2212      	movs	r2, #18
 800f9a4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	2200      	movs	r2, #0
 800f9aa:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800f9ac:	2102      	movs	r1, #2
 800f9ae:	6878      	ldr	r0, [r7, #4]
 800f9b0:	f000 ffaa 	bl	8010908 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	2200      	movs	r2, #0
 800f9b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800f9bc:	6878      	ldr	r0, [r7, #4]
 800f9be:	f7ff f83d 	bl	800ea3c <HAL_I2C_MasterRxCpltCallback>
}
 800f9c2:	bf00      	nop
 800f9c4:	3708      	adds	r7, #8
 800f9c6:	46bd      	mov	sp, r7
 800f9c8:	bd80      	pop	{r7, pc}

0800f9ca <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800f9ca:	b580      	push	{r7, lr}
 800f9cc:	b084      	sub	sp, #16
 800f9ce:	af00      	add	r7, sp, #0
 800f9d0:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	2200      	movs	r2, #0
 800f9de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800f9e2:	68fb      	ldr	r3, [r7, #12]
 800f9e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d008      	beq.n	800f9fe <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	681a      	ldr	r2, [r3, #0]
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800f9fa:	601a      	str	r2, [r3, #0]
 800f9fc:	e00c      	b.n	800fa18 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800f9fe:	68fb      	ldr	r3, [r7, #12]
 800fa00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d007      	beq.n	800fa18 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	681a      	ldr	r2, [r3, #0]
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800fa16:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fa1e:	b2db      	uxtb	r3, r3
 800fa20:	2b29      	cmp	r3, #41	@ 0x29
 800fa22:	d112      	bne.n	800fa4a <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	2228      	movs	r2, #40	@ 0x28
 800fa28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	2221      	movs	r2, #33	@ 0x21
 800fa30:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800fa32:	2101      	movs	r1, #1
 800fa34:	6878      	ldr	r0, [r7, #4]
 800fa36:	f000 ff67 	bl	8010908 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	2200      	movs	r2, #0
 800fa3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800fa42:	6878      	ldr	r0, [r7, #4]
 800fa44:	f7ff f804 	bl	800ea50 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800fa48:	e017      	b.n	800fa7a <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fa50:	b2db      	uxtb	r3, r3
 800fa52:	2b2a      	cmp	r3, #42	@ 0x2a
 800fa54:	d111      	bne.n	800fa7a <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	2228      	movs	r2, #40	@ 0x28
 800fa5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	2222      	movs	r2, #34	@ 0x22
 800fa62:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800fa64:	2102      	movs	r1, #2
 800fa66:	6878      	ldr	r0, [r7, #4]
 800fa68:	f000 ff4e 	bl	8010908 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	2200      	movs	r2, #0
 800fa70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800fa74:	6878      	ldr	r0, [r7, #4]
 800fa76:	f7fe fff5 	bl	800ea64 <HAL_I2C_SlaveRxCpltCallback>
}
 800fa7a:	bf00      	nop
 800fa7c:	3710      	adds	r7, #16
 800fa7e:	46bd      	mov	sp, r7
 800fa80:	bd80      	pop	{r7, pc}
	...

0800fa84 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800fa84:	b580      	push	{r7, lr}
 800fa86:	b086      	sub	sp, #24
 800fa88:	af00      	add	r7, sp, #0
 800fa8a:	6078      	str	r0, [r7, #4]
 800fa8c:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800fa8e:	683b      	ldr	r3, [r7, #0]
 800fa90:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	2220      	movs	r2, #32
 800fa98:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800faa0:	b2db      	uxtb	r3, r3
 800faa2:	2b21      	cmp	r3, #33	@ 0x21
 800faa4:	d107      	bne.n	800fab6 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800faa6:	2101      	movs	r1, #1
 800faa8:	6878      	ldr	r0, [r7, #4]
 800faaa:	f000 ff2d 	bl	8010908 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	2211      	movs	r2, #17
 800fab2:	631a      	str	r2, [r3, #48]	@ 0x30
 800fab4:	e00c      	b.n	800fad0 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fabc:	b2db      	uxtb	r3, r3
 800fabe:	2b22      	cmp	r3, #34	@ 0x22
 800fac0:	d106      	bne.n	800fad0 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800fac2:	2102      	movs	r1, #2
 800fac4:	6878      	ldr	r0, [r7, #4]
 800fac6:	f000 ff1f 	bl	8010908 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	2212      	movs	r2, #18
 800face:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	6859      	ldr	r1, [r3, #4]
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	681a      	ldr	r2, [r3, #0]
 800fada:	4b4c      	ldr	r3, [pc, #304]	@ (800fc0c <I2C_ITMasterCplt+0x188>)
 800fadc:	400b      	ands	r3, r1
 800fade:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	2200      	movs	r2, #0
 800fae4:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	4a49      	ldr	r2, [pc, #292]	@ (800fc10 <I2C_ITMasterCplt+0x18c>)
 800faea:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800faec:	697b      	ldr	r3, [r7, #20]
 800faee:	f003 0310 	and.w	r3, r3, #16
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d009      	beq.n	800fb0a <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	2210      	movs	r2, #16
 800fafc:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fb02:	f043 0204 	orr.w	r2, r3, #4
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fb10:	b2db      	uxtb	r3, r3
 800fb12:	2b60      	cmp	r3, #96	@ 0x60
 800fb14:	d10a      	bne.n	800fb2c <I2C_ITMasterCplt+0xa8>
 800fb16:	697b      	ldr	r3, [r7, #20]
 800fb18:	f003 0304 	and.w	r3, r3, #4
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d005      	beq.n	800fb2c <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fb26:	b2db      	uxtb	r3, r3
 800fb28:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800fb2a:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800fb2c:	6878      	ldr	r0, [r7, #4]
 800fb2e:	f000 fc30 	bl	8010392 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fb36:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fb3e:	b2db      	uxtb	r3, r3
 800fb40:	2b60      	cmp	r3, #96	@ 0x60
 800fb42:	d002      	beq.n	800fb4a <I2C_ITMasterCplt+0xc6>
 800fb44:	693b      	ldr	r3, [r7, #16]
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d006      	beq.n	800fb58 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fb4e:	4619      	mov	r1, r3
 800fb50:	6878      	ldr	r0, [r7, #4]
 800fb52:	f000 fb07 	bl	8010164 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800fb56:	e054      	b.n	800fc02 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fb5e:	b2db      	uxtb	r3, r3
 800fb60:	2b21      	cmp	r3, #33	@ 0x21
 800fb62:	d124      	bne.n	800fbae <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	2220      	movs	r2, #32
 800fb68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	2200      	movs	r2, #0
 800fb70:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800fb78:	b2db      	uxtb	r3, r3
 800fb7a:	2b40      	cmp	r3, #64	@ 0x40
 800fb7c:	d10b      	bne.n	800fb96 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	2200      	movs	r2, #0
 800fb82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	2200      	movs	r2, #0
 800fb8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800fb8e:	6878      	ldr	r0, [r7, #4]
 800fb90:	f7fe ff8a 	bl	800eaa8 <HAL_I2C_MemTxCpltCallback>
}
 800fb94:	e035      	b.n	800fc02 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	2200      	movs	r2, #0
 800fb9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	2200      	movs	r2, #0
 800fba2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800fba6:	6878      	ldr	r0, [r7, #4]
 800fba8:	f7fe ff3e 	bl	800ea28 <HAL_I2C_MasterTxCpltCallback>
}
 800fbac:	e029      	b.n	800fc02 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fbb4:	b2db      	uxtb	r3, r3
 800fbb6:	2b22      	cmp	r3, #34	@ 0x22
 800fbb8:	d123      	bne.n	800fc02 <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	2220      	movs	r2, #32
 800fbbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	2200      	movs	r2, #0
 800fbc6:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800fbce:	b2db      	uxtb	r3, r3
 800fbd0:	2b40      	cmp	r3, #64	@ 0x40
 800fbd2:	d10b      	bne.n	800fbec <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	2200      	movs	r2, #0
 800fbd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	2200      	movs	r2, #0
 800fbe0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800fbe4:	6878      	ldr	r0, [r7, #4]
 800fbe6:	f7f6 fc47 	bl	8006478 <HAL_I2C_MemRxCpltCallback>
}
 800fbea:	e00a      	b.n	800fc02 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	2200      	movs	r2, #0
 800fbf0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	2200      	movs	r2, #0
 800fbf8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800fbfc:	6878      	ldr	r0, [r7, #4]
 800fbfe:	f7fe ff1d 	bl	800ea3c <HAL_I2C_MasterRxCpltCallback>
}
 800fc02:	bf00      	nop
 800fc04:	3718      	adds	r7, #24
 800fc06:	46bd      	mov	sp, r7
 800fc08:	bd80      	pop	{r7, pc}
 800fc0a:	bf00      	nop
 800fc0c:	fe00e800 	.word	0xfe00e800
 800fc10:	ffff0000 	.word	0xffff0000

0800fc14 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800fc14:	b580      	push	{r7, lr}
 800fc16:	b086      	sub	sp, #24
 800fc18:	af00      	add	r7, sp, #0
 800fc1a:	6078      	str	r0, [r7, #4]
 800fc1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800fc26:	683b      	ldr	r3, [r7, #0]
 800fc28:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc2e:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fc36:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	2220      	movs	r2, #32
 800fc3e:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800fc40:	7afb      	ldrb	r3, [r7, #11]
 800fc42:	2b21      	cmp	r3, #33	@ 0x21
 800fc44:	d002      	beq.n	800fc4c <I2C_ITSlaveCplt+0x38>
 800fc46:	7afb      	ldrb	r3, [r7, #11]
 800fc48:	2b29      	cmp	r3, #41	@ 0x29
 800fc4a:	d108      	bne.n	800fc5e <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800fc4c:	f248 0101 	movw	r1, #32769	@ 0x8001
 800fc50:	6878      	ldr	r0, [r7, #4]
 800fc52:	f000 fe59 	bl	8010908 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	2221      	movs	r2, #33	@ 0x21
 800fc5a:	631a      	str	r2, [r3, #48]	@ 0x30
 800fc5c:	e019      	b.n	800fc92 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800fc5e:	7afb      	ldrb	r3, [r7, #11]
 800fc60:	2b22      	cmp	r3, #34	@ 0x22
 800fc62:	d002      	beq.n	800fc6a <I2C_ITSlaveCplt+0x56>
 800fc64:	7afb      	ldrb	r3, [r7, #11]
 800fc66:	2b2a      	cmp	r3, #42	@ 0x2a
 800fc68:	d108      	bne.n	800fc7c <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800fc6a:	f248 0102 	movw	r1, #32770	@ 0x8002
 800fc6e:	6878      	ldr	r0, [r7, #4]
 800fc70:	f000 fe4a 	bl	8010908 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	2222      	movs	r2, #34	@ 0x22
 800fc78:	631a      	str	r2, [r3, #48]	@ 0x30
 800fc7a:	e00a      	b.n	800fc92 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800fc7c:	7afb      	ldrb	r3, [r7, #11]
 800fc7e:	2b28      	cmp	r3, #40	@ 0x28
 800fc80:	d107      	bne.n	800fc92 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800fc82:	f248 0103 	movw	r1, #32771	@ 0x8003
 800fc86:	6878      	ldr	r0, [r7, #4]
 800fc88:	f000 fe3e 	bl	8010908 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	2200      	movs	r2, #0
 800fc90:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	681b      	ldr	r3, [r3, #0]
 800fc96:	685a      	ldr	r2, [r3, #4]
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800fca0:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	681b      	ldr	r3, [r3, #0]
 800fca6:	6859      	ldr	r1, [r3, #4]
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	681a      	ldr	r2, [r3, #0]
 800fcac:	4b7f      	ldr	r3, [pc, #508]	@ (800feac <I2C_ITSlaveCplt+0x298>)
 800fcae:	400b      	ands	r3, r1
 800fcb0:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800fcb2:	6878      	ldr	r0, [r7, #4]
 800fcb4:	f000 fb6d 	bl	8010392 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800fcb8:	693b      	ldr	r3, [r7, #16]
 800fcba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d07a      	beq.n	800fdb8 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	681a      	ldr	r2, [r3, #0]
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800fcd0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	f000 8111 	beq.w	800fefe <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fce0:	681b      	ldr	r3, [r3, #0]
 800fce2:	4a73      	ldr	r2, [pc, #460]	@ (800feb0 <I2C_ITSlaveCplt+0x29c>)
 800fce4:	4293      	cmp	r3, r2
 800fce6:	d059      	beq.n	800fd9c <I2C_ITSlaveCplt+0x188>
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fcec:	681b      	ldr	r3, [r3, #0]
 800fcee:	4a71      	ldr	r2, [pc, #452]	@ (800feb4 <I2C_ITSlaveCplt+0x2a0>)
 800fcf0:	4293      	cmp	r3, r2
 800fcf2:	d053      	beq.n	800fd9c <I2C_ITSlaveCplt+0x188>
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fcf8:	681b      	ldr	r3, [r3, #0]
 800fcfa:	4a6f      	ldr	r2, [pc, #444]	@ (800feb8 <I2C_ITSlaveCplt+0x2a4>)
 800fcfc:	4293      	cmp	r3, r2
 800fcfe:	d04d      	beq.n	800fd9c <I2C_ITSlaveCplt+0x188>
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fd04:	681b      	ldr	r3, [r3, #0]
 800fd06:	4a6d      	ldr	r2, [pc, #436]	@ (800febc <I2C_ITSlaveCplt+0x2a8>)
 800fd08:	4293      	cmp	r3, r2
 800fd0a:	d047      	beq.n	800fd9c <I2C_ITSlaveCplt+0x188>
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	4a6b      	ldr	r2, [pc, #428]	@ (800fec0 <I2C_ITSlaveCplt+0x2ac>)
 800fd14:	4293      	cmp	r3, r2
 800fd16:	d041      	beq.n	800fd9c <I2C_ITSlaveCplt+0x188>
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	4a69      	ldr	r2, [pc, #420]	@ (800fec4 <I2C_ITSlaveCplt+0x2b0>)
 800fd20:	4293      	cmp	r3, r2
 800fd22:	d03b      	beq.n	800fd9c <I2C_ITSlaveCplt+0x188>
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	4a67      	ldr	r2, [pc, #412]	@ (800fec8 <I2C_ITSlaveCplt+0x2b4>)
 800fd2c:	4293      	cmp	r3, r2
 800fd2e:	d035      	beq.n	800fd9c <I2C_ITSlaveCplt+0x188>
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	4a65      	ldr	r2, [pc, #404]	@ (800fecc <I2C_ITSlaveCplt+0x2b8>)
 800fd38:	4293      	cmp	r3, r2
 800fd3a:	d02f      	beq.n	800fd9c <I2C_ITSlaveCplt+0x188>
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	4a63      	ldr	r2, [pc, #396]	@ (800fed0 <I2C_ITSlaveCplt+0x2bc>)
 800fd44:	4293      	cmp	r3, r2
 800fd46:	d029      	beq.n	800fd9c <I2C_ITSlaveCplt+0x188>
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fd4c:	681b      	ldr	r3, [r3, #0]
 800fd4e:	4a61      	ldr	r2, [pc, #388]	@ (800fed4 <I2C_ITSlaveCplt+0x2c0>)
 800fd50:	4293      	cmp	r3, r2
 800fd52:	d023      	beq.n	800fd9c <I2C_ITSlaveCplt+0x188>
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	4a5f      	ldr	r2, [pc, #380]	@ (800fed8 <I2C_ITSlaveCplt+0x2c4>)
 800fd5c:	4293      	cmp	r3, r2
 800fd5e:	d01d      	beq.n	800fd9c <I2C_ITSlaveCplt+0x188>
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fd64:	681b      	ldr	r3, [r3, #0]
 800fd66:	4a5d      	ldr	r2, [pc, #372]	@ (800fedc <I2C_ITSlaveCplt+0x2c8>)
 800fd68:	4293      	cmp	r3, r2
 800fd6a:	d017      	beq.n	800fd9c <I2C_ITSlaveCplt+0x188>
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	4a5b      	ldr	r2, [pc, #364]	@ (800fee0 <I2C_ITSlaveCplt+0x2cc>)
 800fd74:	4293      	cmp	r3, r2
 800fd76:	d011      	beq.n	800fd9c <I2C_ITSlaveCplt+0x188>
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fd7c:	681b      	ldr	r3, [r3, #0]
 800fd7e:	4a59      	ldr	r2, [pc, #356]	@ (800fee4 <I2C_ITSlaveCplt+0x2d0>)
 800fd80:	4293      	cmp	r3, r2
 800fd82:	d00b      	beq.n	800fd9c <I2C_ITSlaveCplt+0x188>
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	4a57      	ldr	r2, [pc, #348]	@ (800fee8 <I2C_ITSlaveCplt+0x2d4>)
 800fd8c:	4293      	cmp	r3, r2
 800fd8e:	d005      	beq.n	800fd9c <I2C_ITSlaveCplt+0x188>
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	4a55      	ldr	r2, [pc, #340]	@ (800feec <I2C_ITSlaveCplt+0x2d8>)
 800fd98:	4293      	cmp	r3, r2
 800fd9a:	d105      	bne.n	800fda8 <I2C_ITSlaveCplt+0x194>
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	685b      	ldr	r3, [r3, #4]
 800fda4:	b29b      	uxth	r3, r3
 800fda6:	e004      	b.n	800fdb2 <I2C_ITSlaveCplt+0x19e>
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fdac:	681b      	ldr	r3, [r3, #0]
 800fdae:	685b      	ldr	r3, [r3, #4]
 800fdb0:	b29b      	uxth	r3, r3
 800fdb2:	687a      	ldr	r2, [r7, #4]
 800fdb4:	8553      	strh	r3, [r2, #42]	@ 0x2a
 800fdb6:	e0a2      	b.n	800fefe <I2C_ITSlaveCplt+0x2ea>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800fdb8:	693b      	ldr	r3, [r7, #16]
 800fdba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	f000 809d 	beq.w	800fefe <I2C_ITSlaveCplt+0x2ea>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	681a      	ldr	r2, [r3, #0]
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	681b      	ldr	r3, [r3, #0]
 800fdce:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800fdd2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	f000 8090 	beq.w	800fefe <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	4a32      	ldr	r2, [pc, #200]	@ (800feb0 <I2C_ITSlaveCplt+0x29c>)
 800fde6:	4293      	cmp	r3, r2
 800fde8:	d059      	beq.n	800fe9e <I2C_ITSlaveCplt+0x28a>
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	4a30      	ldr	r2, [pc, #192]	@ (800feb4 <I2C_ITSlaveCplt+0x2a0>)
 800fdf2:	4293      	cmp	r3, r2
 800fdf4:	d053      	beq.n	800fe9e <I2C_ITSlaveCplt+0x28a>
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	4a2e      	ldr	r2, [pc, #184]	@ (800feb8 <I2C_ITSlaveCplt+0x2a4>)
 800fdfe:	4293      	cmp	r3, r2
 800fe00:	d04d      	beq.n	800fe9e <I2C_ITSlaveCplt+0x28a>
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fe06:	681b      	ldr	r3, [r3, #0]
 800fe08:	4a2c      	ldr	r2, [pc, #176]	@ (800febc <I2C_ITSlaveCplt+0x2a8>)
 800fe0a:	4293      	cmp	r3, r2
 800fe0c:	d047      	beq.n	800fe9e <I2C_ITSlaveCplt+0x28a>
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fe12:	681b      	ldr	r3, [r3, #0]
 800fe14:	4a2a      	ldr	r2, [pc, #168]	@ (800fec0 <I2C_ITSlaveCplt+0x2ac>)
 800fe16:	4293      	cmp	r3, r2
 800fe18:	d041      	beq.n	800fe9e <I2C_ITSlaveCplt+0x28a>
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	4a28      	ldr	r2, [pc, #160]	@ (800fec4 <I2C_ITSlaveCplt+0x2b0>)
 800fe22:	4293      	cmp	r3, r2
 800fe24:	d03b      	beq.n	800fe9e <I2C_ITSlaveCplt+0x28a>
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fe2a:	681b      	ldr	r3, [r3, #0]
 800fe2c:	4a26      	ldr	r2, [pc, #152]	@ (800fec8 <I2C_ITSlaveCplt+0x2b4>)
 800fe2e:	4293      	cmp	r3, r2
 800fe30:	d035      	beq.n	800fe9e <I2C_ITSlaveCplt+0x28a>
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fe36:	681b      	ldr	r3, [r3, #0]
 800fe38:	4a24      	ldr	r2, [pc, #144]	@ (800fecc <I2C_ITSlaveCplt+0x2b8>)
 800fe3a:	4293      	cmp	r3, r2
 800fe3c:	d02f      	beq.n	800fe9e <I2C_ITSlaveCplt+0x28a>
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fe42:	681b      	ldr	r3, [r3, #0]
 800fe44:	4a22      	ldr	r2, [pc, #136]	@ (800fed0 <I2C_ITSlaveCplt+0x2bc>)
 800fe46:	4293      	cmp	r3, r2
 800fe48:	d029      	beq.n	800fe9e <I2C_ITSlaveCplt+0x28a>
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	4a20      	ldr	r2, [pc, #128]	@ (800fed4 <I2C_ITSlaveCplt+0x2c0>)
 800fe52:	4293      	cmp	r3, r2
 800fe54:	d023      	beq.n	800fe9e <I2C_ITSlaveCplt+0x28a>
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fe5a:	681b      	ldr	r3, [r3, #0]
 800fe5c:	4a1e      	ldr	r2, [pc, #120]	@ (800fed8 <I2C_ITSlaveCplt+0x2c4>)
 800fe5e:	4293      	cmp	r3, r2
 800fe60:	d01d      	beq.n	800fe9e <I2C_ITSlaveCplt+0x28a>
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fe66:	681b      	ldr	r3, [r3, #0]
 800fe68:	4a1c      	ldr	r2, [pc, #112]	@ (800fedc <I2C_ITSlaveCplt+0x2c8>)
 800fe6a:	4293      	cmp	r3, r2
 800fe6c:	d017      	beq.n	800fe9e <I2C_ITSlaveCplt+0x28a>
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fe72:	681b      	ldr	r3, [r3, #0]
 800fe74:	4a1a      	ldr	r2, [pc, #104]	@ (800fee0 <I2C_ITSlaveCplt+0x2cc>)
 800fe76:	4293      	cmp	r3, r2
 800fe78:	d011      	beq.n	800fe9e <I2C_ITSlaveCplt+0x28a>
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fe7e:	681b      	ldr	r3, [r3, #0]
 800fe80:	4a18      	ldr	r2, [pc, #96]	@ (800fee4 <I2C_ITSlaveCplt+0x2d0>)
 800fe82:	4293      	cmp	r3, r2
 800fe84:	d00b      	beq.n	800fe9e <I2C_ITSlaveCplt+0x28a>
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fe8a:	681b      	ldr	r3, [r3, #0]
 800fe8c:	4a16      	ldr	r2, [pc, #88]	@ (800fee8 <I2C_ITSlaveCplt+0x2d4>)
 800fe8e:	4293      	cmp	r3, r2
 800fe90:	d005      	beq.n	800fe9e <I2C_ITSlaveCplt+0x28a>
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	4a14      	ldr	r2, [pc, #80]	@ (800feec <I2C_ITSlaveCplt+0x2d8>)
 800fe9a:	4293      	cmp	r3, r2
 800fe9c:	d128      	bne.n	800fef0 <I2C_ITSlaveCplt+0x2dc>
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fea2:	681b      	ldr	r3, [r3, #0]
 800fea4:	685b      	ldr	r3, [r3, #4]
 800fea6:	b29b      	uxth	r3, r3
 800fea8:	e027      	b.n	800fefa <I2C_ITSlaveCplt+0x2e6>
 800feaa:	bf00      	nop
 800feac:	fe00e800 	.word	0xfe00e800
 800feb0:	40020010 	.word	0x40020010
 800feb4:	40020028 	.word	0x40020028
 800feb8:	40020040 	.word	0x40020040
 800febc:	40020058 	.word	0x40020058
 800fec0:	40020070 	.word	0x40020070
 800fec4:	40020088 	.word	0x40020088
 800fec8:	400200a0 	.word	0x400200a0
 800fecc:	400200b8 	.word	0x400200b8
 800fed0:	40020410 	.word	0x40020410
 800fed4:	40020428 	.word	0x40020428
 800fed8:	40020440 	.word	0x40020440
 800fedc:	40020458 	.word	0x40020458
 800fee0:	40020470 	.word	0x40020470
 800fee4:	40020488 	.word	0x40020488
 800fee8:	400204a0 	.word	0x400204a0
 800feec:	400204b8 	.word	0x400204b8
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fef4:	681b      	ldr	r3, [r3, #0]
 800fef6:	685b      	ldr	r3, [r3, #4]
 800fef8:	b29b      	uxth	r3, r3
 800fefa:	687a      	ldr	r2, [r7, #4]
 800fefc:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800fefe:	697b      	ldr	r3, [r7, #20]
 800ff00:	f003 0304 	and.w	r3, r3, #4
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	d020      	beq.n	800ff4a <I2C_ITSlaveCplt+0x336>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800ff08:	697b      	ldr	r3, [r7, #20]
 800ff0a:	f023 0304 	bic.w	r3, r3, #4
 800ff0e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ff1a:	b2d2      	uxtb	r2, r2
 800ff1c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ff22:	1c5a      	adds	r2, r3, #1
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d00c      	beq.n	800ff4a <I2C_ITSlaveCplt+0x336>
    {
      hi2c->XferSize--;
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ff34:	3b01      	subs	r3, #1
 800ff36:	b29a      	uxth	r2, r3
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ff40:	b29b      	uxth	r3, r3
 800ff42:	3b01      	subs	r3, #1
 800ff44:	b29a      	uxth	r2, r3
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ff4e:	b29b      	uxth	r3, r3
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d005      	beq.n	800ff60 <I2C_ITSlaveCplt+0x34c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ff58:	f043 0204 	orr.w	r2, r3, #4
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800ff60:	697b      	ldr	r3, [r7, #20]
 800ff62:	f003 0310 	and.w	r3, r3, #16
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d049      	beq.n	800fffe <I2C_ITSlaveCplt+0x3ea>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800ff6a:	693b      	ldr	r3, [r7, #16]
 800ff6c:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d044      	beq.n	800fffe <I2C_ITSlaveCplt+0x3ea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ff78:	b29b      	uxth	r3, r3
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d128      	bne.n	800ffd0 <I2C_ITSlaveCplt+0x3bc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ff84:	b2db      	uxtb	r3, r3
 800ff86:	2b28      	cmp	r3, #40	@ 0x28
 800ff88:	d108      	bne.n	800ff9c <I2C_ITSlaveCplt+0x388>
 800ff8a:	68fb      	ldr	r3, [r7, #12]
 800ff8c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ff90:	d104      	bne.n	800ff9c <I2C_ITSlaveCplt+0x388>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800ff92:	6979      	ldr	r1, [r7, #20]
 800ff94:	6878      	ldr	r0, [r7, #4]
 800ff96:	f000 f891 	bl	80100bc <I2C_ITListenCplt>
 800ff9a:	e030      	b.n	800fffe <I2C_ITSlaveCplt+0x3ea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ffa2:	b2db      	uxtb	r3, r3
 800ffa4:	2b29      	cmp	r3, #41	@ 0x29
 800ffa6:	d10e      	bne.n	800ffc6 <I2C_ITSlaveCplt+0x3b2>
 800ffa8:	68fb      	ldr	r3, [r7, #12]
 800ffaa:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800ffae:	d00a      	beq.n	800ffc6 <I2C_ITSlaveCplt+0x3b2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	2210      	movs	r2, #16
 800ffb6:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800ffb8:	6878      	ldr	r0, [r7, #4]
 800ffba:	f000 f9ea 	bl	8010392 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800ffbe:	6878      	ldr	r0, [r7, #4]
 800ffc0:	f7ff fd03 	bl	800f9ca <I2C_ITSlaveSeqCplt>
 800ffc4:	e01b      	b.n	800fffe <I2C_ITSlaveCplt+0x3ea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	2210      	movs	r2, #16
 800ffcc:	61da      	str	r2, [r3, #28]
 800ffce:	e016      	b.n	800fffe <I2C_ITSlaveCplt+0x3ea>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	2210      	movs	r2, #16
 800ffd6:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ffdc:	f043 0204 	orr.w	r2, r3, #4
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800ffe4:	68fb      	ldr	r3, [r7, #12]
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	d003      	beq.n	800fff2 <I2C_ITSlaveCplt+0x3de>
 800ffea:	68fb      	ldr	r3, [r7, #12]
 800ffec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800fff0:	d105      	bne.n	800fffe <I2C_ITSlaveCplt+0x3ea>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fff6:	4619      	mov	r1, r3
 800fff8:	6878      	ldr	r0, [r7, #4]
 800fffa:	f000 f8b3 	bl	8010164 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	2200      	movs	r2, #0
 8010002:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	2200      	movs	r2, #0
 801000a:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010010:	2b00      	cmp	r3, #0
 8010012:	d010      	beq.n	8010036 <I2C_ITSlaveCplt+0x422>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010018:	4619      	mov	r1, r3
 801001a:	6878      	ldr	r0, [r7, #4]
 801001c:	f000 f8a2 	bl	8010164 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010026:	b2db      	uxtb	r3, r3
 8010028:	2b28      	cmp	r3, #40	@ 0x28
 801002a:	d141      	bne.n	80100b0 <I2C_ITSlaveCplt+0x49c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 801002c:	6979      	ldr	r1, [r7, #20]
 801002e:	6878      	ldr	r0, [r7, #4]
 8010030:	f000 f844 	bl	80100bc <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8010034:	e03c      	b.n	80100b0 <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801003a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 801003e:	d014      	beq.n	801006a <I2C_ITSlaveCplt+0x456>
    I2C_ITSlaveSeqCplt(hi2c);
 8010040:	6878      	ldr	r0, [r7, #4]
 8010042:	f7ff fcc2 	bl	800f9ca <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	4a1b      	ldr	r2, [pc, #108]	@ (80100b8 <I2C_ITSlaveCplt+0x4a4>)
 801004a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	2220      	movs	r2, #32
 8010050:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	2200      	movs	r2, #0
 8010058:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	2200      	movs	r2, #0
 801005e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8010062:	6878      	ldr	r0, [r7, #4]
 8010064:	f7fe fd16 	bl	800ea94 <HAL_I2C_ListenCpltCallback>
}
 8010068:	e022      	b.n	80100b0 <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010070:	b2db      	uxtb	r3, r3
 8010072:	2b22      	cmp	r3, #34	@ 0x22
 8010074:	d10e      	bne.n	8010094 <I2C_ITSlaveCplt+0x480>
    hi2c->State = HAL_I2C_STATE_READY;
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	2220      	movs	r2, #32
 801007a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	2200      	movs	r2, #0
 8010082:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	2200      	movs	r2, #0
 8010088:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 801008c:	6878      	ldr	r0, [r7, #4]
 801008e:	f7fe fce9 	bl	800ea64 <HAL_I2C_SlaveRxCpltCallback>
}
 8010092:	e00d      	b.n	80100b0 <I2C_ITSlaveCplt+0x49c>
    hi2c->State = HAL_I2C_STATE_READY;
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	2220      	movs	r2, #32
 8010098:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	2200      	movs	r2, #0
 80100a0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	2200      	movs	r2, #0
 80100a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80100aa:	6878      	ldr	r0, [r7, #4]
 80100ac:	f7fe fcd0 	bl	800ea50 <HAL_I2C_SlaveTxCpltCallback>
}
 80100b0:	bf00      	nop
 80100b2:	3718      	adds	r7, #24
 80100b4:	46bd      	mov	sp, r7
 80100b6:	bd80      	pop	{r7, pc}
 80100b8:	ffff0000 	.word	0xffff0000

080100bc <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80100bc:	b580      	push	{r7, lr}
 80100be:	b082      	sub	sp, #8
 80100c0:	af00      	add	r7, sp, #0
 80100c2:	6078      	str	r0, [r7, #4]
 80100c4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	4a25      	ldr	r2, [pc, #148]	@ (8010160 <I2C_ITListenCplt+0xa4>)
 80100ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	2200      	movs	r2, #0
 80100d0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	2220      	movs	r2, #32
 80100d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	2200      	movs	r2, #0
 80100de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	2200      	movs	r2, #0
 80100e6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80100e8:	683b      	ldr	r3, [r7, #0]
 80100ea:	f003 0304 	and.w	r3, r3, #4
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d022      	beq.n	8010138 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	681b      	ldr	r3, [r3, #0]
 80100f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80100fc:	b2d2      	uxtb	r2, r2
 80100fe:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010104:	1c5a      	adds	r2, r3, #1
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801010e:	2b00      	cmp	r3, #0
 8010110:	d012      	beq.n	8010138 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010116:	3b01      	subs	r3, #1
 8010118:	b29a      	uxth	r2, r3
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010122:	b29b      	uxth	r3, r3
 8010124:	3b01      	subs	r3, #1
 8010126:	b29a      	uxth	r2, r3
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010130:	f043 0204 	orr.w	r2, r3, #4
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8010138:	f248 0103 	movw	r1, #32771	@ 0x8003
 801013c:	6878      	ldr	r0, [r7, #4]
 801013e:	f000 fbe3 	bl	8010908 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	2210      	movs	r2, #16
 8010148:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	2200      	movs	r2, #0
 801014e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8010152:	6878      	ldr	r0, [r7, #4]
 8010154:	f7fe fc9e 	bl	800ea94 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8010158:	bf00      	nop
 801015a:	3708      	adds	r7, #8
 801015c:	46bd      	mov	sp, r7
 801015e:	bd80      	pop	{r7, pc}
 8010160:	ffff0000 	.word	0xffff0000

08010164 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8010164:	b580      	push	{r7, lr}
 8010166:	b084      	sub	sp, #16
 8010168:	af00      	add	r7, sp, #0
 801016a:	6078      	str	r0, [r7, #4]
 801016c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010174:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	2200      	movs	r2, #0
 801017a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	4a6d      	ldr	r2, [pc, #436]	@ (8010338 <I2C_ITError+0x1d4>)
 8010182:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	2200      	movs	r2, #0
 8010188:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801018e:	683b      	ldr	r3, [r7, #0]
 8010190:	431a      	orrs	r2, r3
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8010196:	7bfb      	ldrb	r3, [r7, #15]
 8010198:	2b28      	cmp	r3, #40	@ 0x28
 801019a:	d005      	beq.n	80101a8 <I2C_ITError+0x44>
 801019c:	7bfb      	ldrb	r3, [r7, #15]
 801019e:	2b29      	cmp	r3, #41	@ 0x29
 80101a0:	d002      	beq.n	80101a8 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80101a2:	7bfb      	ldrb	r3, [r7, #15]
 80101a4:	2b2a      	cmp	r3, #42	@ 0x2a
 80101a6:	d10b      	bne.n	80101c0 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80101a8:	2103      	movs	r1, #3
 80101aa:	6878      	ldr	r0, [r7, #4]
 80101ac:	f000 fbac 	bl	8010908 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	2228      	movs	r2, #40	@ 0x28
 80101b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	4a60      	ldr	r2, [pc, #384]	@ (801033c <I2C_ITError+0x1d8>)
 80101bc:	635a      	str	r2, [r3, #52]	@ 0x34
 80101be:	e030      	b.n	8010222 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80101c0:	f248 0103 	movw	r1, #32771	@ 0x8003
 80101c4:	6878      	ldr	r0, [r7, #4]
 80101c6:	f000 fb9f 	bl	8010908 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80101ca:	6878      	ldr	r0, [r7, #4]
 80101cc:	f000 f8e1 	bl	8010392 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80101d6:	b2db      	uxtb	r3, r3
 80101d8:	2b60      	cmp	r3, #96	@ 0x60
 80101da:	d01f      	beq.n	801021c <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	2220      	movs	r2, #32
 80101e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	699b      	ldr	r3, [r3, #24]
 80101ea:	f003 0320 	and.w	r3, r3, #32
 80101ee:	2b20      	cmp	r3, #32
 80101f0:	d114      	bne.n	801021c <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	699b      	ldr	r3, [r3, #24]
 80101f8:	f003 0310 	and.w	r3, r3, #16
 80101fc:	2b10      	cmp	r3, #16
 80101fe:	d109      	bne.n	8010214 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	681b      	ldr	r3, [r3, #0]
 8010204:	2210      	movs	r2, #16
 8010206:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801020c:	f043 0204 	orr.w	r2, r3, #4
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	2220      	movs	r2, #32
 801021a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	2200      	movs	r2, #0
 8010220:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010226:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801022c:	2b00      	cmp	r3, #0
 801022e:	d039      	beq.n	80102a4 <I2C_ITError+0x140>
 8010230:	68bb      	ldr	r3, [r7, #8]
 8010232:	2b11      	cmp	r3, #17
 8010234:	d002      	beq.n	801023c <I2C_ITError+0xd8>
 8010236:	68bb      	ldr	r3, [r7, #8]
 8010238:	2b21      	cmp	r3, #33	@ 0x21
 801023a:	d133      	bne.n	80102a4 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	681b      	ldr	r3, [r3, #0]
 8010242:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010246:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801024a:	d107      	bne.n	801025c <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	681a      	ldr	r2, [r3, #0]
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	681b      	ldr	r3, [r3, #0]
 8010256:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 801025a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010260:	4618      	mov	r0, r3
 8010262:	f7fd f9f7 	bl	800d654 <HAL_DMA_GetState>
 8010266:	4603      	mov	r3, r0
 8010268:	2b01      	cmp	r3, #1
 801026a:	d017      	beq.n	801029c <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010270:	4a33      	ldr	r2, [pc, #204]	@ (8010340 <I2C_ITError+0x1dc>)
 8010272:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	2200      	movs	r2, #0
 8010278:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010280:	4618      	mov	r0, r3
 8010282:	f7fc f877 	bl	800c374 <HAL_DMA_Abort_IT>
 8010286:	4603      	mov	r3, r0
 8010288:	2b00      	cmp	r3, #0
 801028a:	d04d      	beq.n	8010328 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010290:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010292:	687a      	ldr	r2, [r7, #4]
 8010294:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8010296:	4610      	mov	r0, r2
 8010298:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 801029a:	e045      	b.n	8010328 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 801029c:	6878      	ldr	r0, [r7, #4]
 801029e:	f000 f851 	bl	8010344 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80102a2:	e041      	b.n	8010328 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	d039      	beq.n	8010320 <I2C_ITError+0x1bc>
 80102ac:	68bb      	ldr	r3, [r7, #8]
 80102ae:	2b12      	cmp	r3, #18
 80102b0:	d002      	beq.n	80102b8 <I2C_ITError+0x154>
 80102b2:	68bb      	ldr	r3, [r7, #8]
 80102b4:	2b22      	cmp	r3, #34	@ 0x22
 80102b6:	d133      	bne.n	8010320 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	681b      	ldr	r3, [r3, #0]
 80102bc:	681b      	ldr	r3, [r3, #0]
 80102be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80102c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80102c6:	d107      	bne.n	80102d8 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	681b      	ldr	r3, [r3, #0]
 80102cc:	681a      	ldr	r2, [r3, #0]
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	681b      	ldr	r3, [r3, #0]
 80102d2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80102d6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80102dc:	4618      	mov	r0, r3
 80102de:	f7fd f9b9 	bl	800d654 <HAL_DMA_GetState>
 80102e2:	4603      	mov	r3, r0
 80102e4:	2b01      	cmp	r3, #1
 80102e6:	d017      	beq.n	8010318 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80102ec:	4a14      	ldr	r2, [pc, #80]	@ (8010340 <I2C_ITError+0x1dc>)
 80102ee:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	2200      	movs	r2, #0
 80102f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80102fc:	4618      	mov	r0, r3
 80102fe:	f7fc f839 	bl	800c374 <HAL_DMA_Abort_IT>
 8010302:	4603      	mov	r3, r0
 8010304:	2b00      	cmp	r3, #0
 8010306:	d011      	beq.n	801032c <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801030c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801030e:	687a      	ldr	r2, [r7, #4]
 8010310:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8010312:	4610      	mov	r0, r2
 8010314:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8010316:	e009      	b.n	801032c <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8010318:	6878      	ldr	r0, [r7, #4]
 801031a:	f000 f813 	bl	8010344 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801031e:	e005      	b.n	801032c <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8010320:	6878      	ldr	r0, [r7, #4]
 8010322:	f000 f80f 	bl	8010344 <I2C_TreatErrorCallback>
  }
}
 8010326:	e002      	b.n	801032e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8010328:	bf00      	nop
 801032a:	e000      	b.n	801032e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801032c:	bf00      	nop
}
 801032e:	bf00      	nop
 8010330:	3710      	adds	r7, #16
 8010332:	46bd      	mov	sp, r7
 8010334:	bd80      	pop	{r7, pc}
 8010336:	bf00      	nop
 8010338:	ffff0000 	.word	0xffff0000
 801033c:	0800ed31 	.word	0x0800ed31
 8010340:	080103db 	.word	0x080103db

08010344 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8010344:	b580      	push	{r7, lr}
 8010346:	b082      	sub	sp, #8
 8010348:	af00      	add	r7, sp, #0
 801034a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010352:	b2db      	uxtb	r3, r3
 8010354:	2b60      	cmp	r3, #96	@ 0x60
 8010356:	d10e      	bne.n	8010376 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	2220      	movs	r2, #32
 801035c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	2200      	movs	r2, #0
 8010364:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	2200      	movs	r2, #0
 801036a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 801036e:	6878      	ldr	r0, [r7, #4]
 8010370:	f7fe fbae 	bl	800ead0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8010374:	e009      	b.n	801038a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	2200      	movs	r2, #0
 801037a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	2200      	movs	r2, #0
 8010380:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8010384:	6878      	ldr	r0, [r7, #4]
 8010386:	f7fe fb99 	bl	800eabc <HAL_I2C_ErrorCallback>
}
 801038a:	bf00      	nop
 801038c:	3708      	adds	r7, #8
 801038e:	46bd      	mov	sp, r7
 8010390:	bd80      	pop	{r7, pc}

08010392 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8010392:	b480      	push	{r7}
 8010394:	b083      	sub	sp, #12
 8010396:	af00      	add	r7, sp, #0
 8010398:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	681b      	ldr	r3, [r3, #0]
 801039e:	699b      	ldr	r3, [r3, #24]
 80103a0:	f003 0302 	and.w	r3, r3, #2
 80103a4:	2b02      	cmp	r3, #2
 80103a6:	d103      	bne.n	80103b0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	681b      	ldr	r3, [r3, #0]
 80103ac:	2200      	movs	r2, #0
 80103ae:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	681b      	ldr	r3, [r3, #0]
 80103b4:	699b      	ldr	r3, [r3, #24]
 80103b6:	f003 0301 	and.w	r3, r3, #1
 80103ba:	2b01      	cmp	r3, #1
 80103bc:	d007      	beq.n	80103ce <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	681b      	ldr	r3, [r3, #0]
 80103c2:	699a      	ldr	r2, [r3, #24]
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	681b      	ldr	r3, [r3, #0]
 80103c8:	f042 0201 	orr.w	r2, r2, #1
 80103cc:	619a      	str	r2, [r3, #24]
  }
}
 80103ce:	bf00      	nop
 80103d0:	370c      	adds	r7, #12
 80103d2:	46bd      	mov	sp, r7
 80103d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103d8:	4770      	bx	lr

080103da <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80103da:	b580      	push	{r7, lr}
 80103dc:	b084      	sub	sp, #16
 80103de:	af00      	add	r7, sp, #0
 80103e0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80103e6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80103e8:	68fb      	ldr	r3, [r7, #12]
 80103ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d003      	beq.n	80103f8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80103f0:	68fb      	ldr	r3, [r7, #12]
 80103f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80103f4:	2200      	movs	r2, #0
 80103f6:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 80103f8:	68fb      	ldr	r3, [r7, #12]
 80103fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d003      	beq.n	8010408 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8010400:	68fb      	ldr	r3, [r7, #12]
 8010402:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010404:	2200      	movs	r2, #0
 8010406:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8010408:	68f8      	ldr	r0, [r7, #12]
 801040a:	f7ff ff9b 	bl	8010344 <I2C_TreatErrorCallback>
}
 801040e:	bf00      	nop
 8010410:	3710      	adds	r7, #16
 8010412:	46bd      	mov	sp, r7
 8010414:	bd80      	pop	{r7, pc}

08010416 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8010416:	b580      	push	{r7, lr}
 8010418:	b084      	sub	sp, #16
 801041a:	af00      	add	r7, sp, #0
 801041c:	60f8      	str	r0, [r7, #12]
 801041e:	60b9      	str	r1, [r7, #8]
 8010420:	603b      	str	r3, [r7, #0]
 8010422:	4613      	mov	r3, r2
 8010424:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8010426:	e03b      	b.n	80104a0 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8010428:	69ba      	ldr	r2, [r7, #24]
 801042a:	6839      	ldr	r1, [r7, #0]
 801042c:	68f8      	ldr	r0, [r7, #12]
 801042e:	f000 f8d5 	bl	80105dc <I2C_IsErrorOccurred>
 8010432:	4603      	mov	r3, r0
 8010434:	2b00      	cmp	r3, #0
 8010436:	d001      	beq.n	801043c <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8010438:	2301      	movs	r3, #1
 801043a:	e041      	b.n	80104c0 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801043c:	683b      	ldr	r3, [r7, #0]
 801043e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010442:	d02d      	beq.n	80104a0 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010444:	f7f8 fd5e 	bl	8008f04 <HAL_GetTick>
 8010448:	4602      	mov	r2, r0
 801044a:	69bb      	ldr	r3, [r7, #24]
 801044c:	1ad3      	subs	r3, r2, r3
 801044e:	683a      	ldr	r2, [r7, #0]
 8010450:	429a      	cmp	r2, r3
 8010452:	d302      	bcc.n	801045a <I2C_WaitOnFlagUntilTimeout+0x44>
 8010454:	683b      	ldr	r3, [r7, #0]
 8010456:	2b00      	cmp	r3, #0
 8010458:	d122      	bne.n	80104a0 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 801045a:	68fb      	ldr	r3, [r7, #12]
 801045c:	681b      	ldr	r3, [r3, #0]
 801045e:	699a      	ldr	r2, [r3, #24]
 8010460:	68bb      	ldr	r3, [r7, #8]
 8010462:	4013      	ands	r3, r2
 8010464:	68ba      	ldr	r2, [r7, #8]
 8010466:	429a      	cmp	r2, r3
 8010468:	bf0c      	ite	eq
 801046a:	2301      	moveq	r3, #1
 801046c:	2300      	movne	r3, #0
 801046e:	b2db      	uxtb	r3, r3
 8010470:	461a      	mov	r2, r3
 8010472:	79fb      	ldrb	r3, [r7, #7]
 8010474:	429a      	cmp	r2, r3
 8010476:	d113      	bne.n	80104a0 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010478:	68fb      	ldr	r3, [r7, #12]
 801047a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801047c:	f043 0220 	orr.w	r2, r3, #32
 8010480:	68fb      	ldr	r3, [r7, #12]
 8010482:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8010484:	68fb      	ldr	r3, [r7, #12]
 8010486:	2220      	movs	r2, #32
 8010488:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801048c:	68fb      	ldr	r3, [r7, #12]
 801048e:	2200      	movs	r2, #0
 8010490:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8010494:	68fb      	ldr	r3, [r7, #12]
 8010496:	2200      	movs	r2, #0
 8010498:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 801049c:	2301      	movs	r3, #1
 801049e:	e00f      	b.n	80104c0 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80104a0:	68fb      	ldr	r3, [r7, #12]
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	699a      	ldr	r2, [r3, #24]
 80104a6:	68bb      	ldr	r3, [r7, #8]
 80104a8:	4013      	ands	r3, r2
 80104aa:	68ba      	ldr	r2, [r7, #8]
 80104ac:	429a      	cmp	r2, r3
 80104ae:	bf0c      	ite	eq
 80104b0:	2301      	moveq	r3, #1
 80104b2:	2300      	movne	r3, #0
 80104b4:	b2db      	uxtb	r3, r3
 80104b6:	461a      	mov	r2, r3
 80104b8:	79fb      	ldrb	r3, [r7, #7]
 80104ba:	429a      	cmp	r2, r3
 80104bc:	d0b4      	beq.n	8010428 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80104be:	2300      	movs	r3, #0
}
 80104c0:	4618      	mov	r0, r3
 80104c2:	3710      	adds	r7, #16
 80104c4:	46bd      	mov	sp, r7
 80104c6:	bd80      	pop	{r7, pc}

080104c8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80104c8:	b580      	push	{r7, lr}
 80104ca:	b084      	sub	sp, #16
 80104cc:	af00      	add	r7, sp, #0
 80104ce:	60f8      	str	r0, [r7, #12]
 80104d0:	60b9      	str	r1, [r7, #8]
 80104d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80104d4:	e033      	b.n	801053e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80104d6:	687a      	ldr	r2, [r7, #4]
 80104d8:	68b9      	ldr	r1, [r7, #8]
 80104da:	68f8      	ldr	r0, [r7, #12]
 80104dc:	f000 f87e 	bl	80105dc <I2C_IsErrorOccurred>
 80104e0:	4603      	mov	r3, r0
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d001      	beq.n	80104ea <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80104e6:	2301      	movs	r3, #1
 80104e8:	e031      	b.n	801054e <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80104ea:	68bb      	ldr	r3, [r7, #8]
 80104ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80104f0:	d025      	beq.n	801053e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80104f2:	f7f8 fd07 	bl	8008f04 <HAL_GetTick>
 80104f6:	4602      	mov	r2, r0
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	1ad3      	subs	r3, r2, r3
 80104fc:	68ba      	ldr	r2, [r7, #8]
 80104fe:	429a      	cmp	r2, r3
 8010500:	d302      	bcc.n	8010508 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8010502:	68bb      	ldr	r3, [r7, #8]
 8010504:	2b00      	cmp	r3, #0
 8010506:	d11a      	bne.n	801053e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8010508:	68fb      	ldr	r3, [r7, #12]
 801050a:	681b      	ldr	r3, [r3, #0]
 801050c:	699b      	ldr	r3, [r3, #24]
 801050e:	f003 0302 	and.w	r3, r3, #2
 8010512:	2b02      	cmp	r3, #2
 8010514:	d013      	beq.n	801053e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010516:	68fb      	ldr	r3, [r7, #12]
 8010518:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801051a:	f043 0220 	orr.w	r2, r3, #32
 801051e:	68fb      	ldr	r3, [r7, #12]
 8010520:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8010522:	68fb      	ldr	r3, [r7, #12]
 8010524:	2220      	movs	r2, #32
 8010526:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801052a:	68fb      	ldr	r3, [r7, #12]
 801052c:	2200      	movs	r2, #0
 801052e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8010532:	68fb      	ldr	r3, [r7, #12]
 8010534:	2200      	movs	r2, #0
 8010536:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 801053a:	2301      	movs	r3, #1
 801053c:	e007      	b.n	801054e <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 801053e:	68fb      	ldr	r3, [r7, #12]
 8010540:	681b      	ldr	r3, [r3, #0]
 8010542:	699b      	ldr	r3, [r3, #24]
 8010544:	f003 0302 	and.w	r3, r3, #2
 8010548:	2b02      	cmp	r3, #2
 801054a:	d1c4      	bne.n	80104d6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 801054c:	2300      	movs	r3, #0
}
 801054e:	4618      	mov	r0, r3
 8010550:	3710      	adds	r7, #16
 8010552:	46bd      	mov	sp, r7
 8010554:	bd80      	pop	{r7, pc}

08010556 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8010556:	b580      	push	{r7, lr}
 8010558:	b084      	sub	sp, #16
 801055a:	af00      	add	r7, sp, #0
 801055c:	60f8      	str	r0, [r7, #12]
 801055e:	60b9      	str	r1, [r7, #8]
 8010560:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8010562:	e02f      	b.n	80105c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8010564:	687a      	ldr	r2, [r7, #4]
 8010566:	68b9      	ldr	r1, [r7, #8]
 8010568:	68f8      	ldr	r0, [r7, #12]
 801056a:	f000 f837 	bl	80105dc <I2C_IsErrorOccurred>
 801056e:	4603      	mov	r3, r0
 8010570:	2b00      	cmp	r3, #0
 8010572:	d001      	beq.n	8010578 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8010574:	2301      	movs	r3, #1
 8010576:	e02d      	b.n	80105d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010578:	f7f8 fcc4 	bl	8008f04 <HAL_GetTick>
 801057c:	4602      	mov	r2, r0
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	1ad3      	subs	r3, r2, r3
 8010582:	68ba      	ldr	r2, [r7, #8]
 8010584:	429a      	cmp	r2, r3
 8010586:	d302      	bcc.n	801058e <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8010588:	68bb      	ldr	r3, [r7, #8]
 801058a:	2b00      	cmp	r3, #0
 801058c:	d11a      	bne.n	80105c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 801058e:	68fb      	ldr	r3, [r7, #12]
 8010590:	681b      	ldr	r3, [r3, #0]
 8010592:	699b      	ldr	r3, [r3, #24]
 8010594:	f003 0320 	and.w	r3, r3, #32
 8010598:	2b20      	cmp	r3, #32
 801059a:	d013      	beq.n	80105c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801059c:	68fb      	ldr	r3, [r7, #12]
 801059e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80105a0:	f043 0220 	orr.w	r2, r3, #32
 80105a4:	68fb      	ldr	r3, [r7, #12]
 80105a6:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	2220      	movs	r2, #32
 80105ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80105b0:	68fb      	ldr	r3, [r7, #12]
 80105b2:	2200      	movs	r2, #0
 80105b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80105b8:	68fb      	ldr	r3, [r7, #12]
 80105ba:	2200      	movs	r2, #0
 80105bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80105c0:	2301      	movs	r3, #1
 80105c2:	e007      	b.n	80105d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80105c4:	68fb      	ldr	r3, [r7, #12]
 80105c6:	681b      	ldr	r3, [r3, #0]
 80105c8:	699b      	ldr	r3, [r3, #24]
 80105ca:	f003 0320 	and.w	r3, r3, #32
 80105ce:	2b20      	cmp	r3, #32
 80105d0:	d1c8      	bne.n	8010564 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80105d2:	2300      	movs	r3, #0
}
 80105d4:	4618      	mov	r0, r3
 80105d6:	3710      	adds	r7, #16
 80105d8:	46bd      	mov	sp, r7
 80105da:	bd80      	pop	{r7, pc}

080105dc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80105dc:	b580      	push	{r7, lr}
 80105de:	b08a      	sub	sp, #40	@ 0x28
 80105e0:	af00      	add	r7, sp, #0
 80105e2:	60f8      	str	r0, [r7, #12]
 80105e4:	60b9      	str	r1, [r7, #8]
 80105e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80105e8:	2300      	movs	r3, #0
 80105ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80105ee:	68fb      	ldr	r3, [r7, #12]
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	699b      	ldr	r3, [r3, #24]
 80105f4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80105f6:	2300      	movs	r3, #0
 80105f8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80105fe:	69bb      	ldr	r3, [r7, #24]
 8010600:	f003 0310 	and.w	r3, r3, #16
 8010604:	2b00      	cmp	r3, #0
 8010606:	d068      	beq.n	80106da <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010608:	68fb      	ldr	r3, [r7, #12]
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	2210      	movs	r2, #16
 801060e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8010610:	e049      	b.n	80106a6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8010612:	68bb      	ldr	r3, [r7, #8]
 8010614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010618:	d045      	beq.n	80106a6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 801061a:	f7f8 fc73 	bl	8008f04 <HAL_GetTick>
 801061e:	4602      	mov	r2, r0
 8010620:	69fb      	ldr	r3, [r7, #28]
 8010622:	1ad3      	subs	r3, r2, r3
 8010624:	68ba      	ldr	r2, [r7, #8]
 8010626:	429a      	cmp	r2, r3
 8010628:	d302      	bcc.n	8010630 <I2C_IsErrorOccurred+0x54>
 801062a:	68bb      	ldr	r3, [r7, #8]
 801062c:	2b00      	cmp	r3, #0
 801062e:	d13a      	bne.n	80106a6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	681b      	ldr	r3, [r3, #0]
 8010634:	685b      	ldr	r3, [r3, #4]
 8010636:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801063a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 801063c:	68fb      	ldr	r3, [r7, #12]
 801063e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8010642:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8010644:	68fb      	ldr	r3, [r7, #12]
 8010646:	681b      	ldr	r3, [r3, #0]
 8010648:	699b      	ldr	r3, [r3, #24]
 801064a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801064e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010652:	d121      	bne.n	8010698 <I2C_IsErrorOccurred+0xbc>
 8010654:	697b      	ldr	r3, [r7, #20]
 8010656:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801065a:	d01d      	beq.n	8010698 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 801065c:	7cfb      	ldrb	r3, [r7, #19]
 801065e:	2b20      	cmp	r3, #32
 8010660:	d01a      	beq.n	8010698 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8010662:	68fb      	ldr	r3, [r7, #12]
 8010664:	681b      	ldr	r3, [r3, #0]
 8010666:	685a      	ldr	r2, [r3, #4]
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	681b      	ldr	r3, [r3, #0]
 801066c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8010670:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8010672:	f7f8 fc47 	bl	8008f04 <HAL_GetTick>
 8010676:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8010678:	e00e      	b.n	8010698 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 801067a:	f7f8 fc43 	bl	8008f04 <HAL_GetTick>
 801067e:	4602      	mov	r2, r0
 8010680:	69fb      	ldr	r3, [r7, #28]
 8010682:	1ad3      	subs	r3, r2, r3
 8010684:	2b19      	cmp	r3, #25
 8010686:	d907      	bls.n	8010698 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8010688:	6a3b      	ldr	r3, [r7, #32]
 801068a:	f043 0320 	orr.w	r3, r3, #32
 801068e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8010690:	2301      	movs	r3, #1
 8010692:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8010696:	e006      	b.n	80106a6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8010698:	68fb      	ldr	r3, [r7, #12]
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	699b      	ldr	r3, [r3, #24]
 801069e:	f003 0320 	and.w	r3, r3, #32
 80106a2:	2b20      	cmp	r3, #32
 80106a4:	d1e9      	bne.n	801067a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80106a6:	68fb      	ldr	r3, [r7, #12]
 80106a8:	681b      	ldr	r3, [r3, #0]
 80106aa:	699b      	ldr	r3, [r3, #24]
 80106ac:	f003 0320 	and.w	r3, r3, #32
 80106b0:	2b20      	cmp	r3, #32
 80106b2:	d003      	beq.n	80106bc <I2C_IsErrorOccurred+0xe0>
 80106b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d0aa      	beq.n	8010612 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80106bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	d103      	bne.n	80106cc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80106c4:	68fb      	ldr	r3, [r7, #12]
 80106c6:	681b      	ldr	r3, [r3, #0]
 80106c8:	2220      	movs	r2, #32
 80106ca:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80106cc:	6a3b      	ldr	r3, [r7, #32]
 80106ce:	f043 0304 	orr.w	r3, r3, #4
 80106d2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80106d4:	2301      	movs	r3, #1
 80106d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80106da:	68fb      	ldr	r3, [r7, #12]
 80106dc:	681b      	ldr	r3, [r3, #0]
 80106de:	699b      	ldr	r3, [r3, #24]
 80106e0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80106e2:	69bb      	ldr	r3, [r7, #24]
 80106e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d00b      	beq.n	8010704 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80106ec:	6a3b      	ldr	r3, [r7, #32]
 80106ee:	f043 0301 	orr.w	r3, r3, #1
 80106f2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80106f4:	68fb      	ldr	r3, [r7, #12]
 80106f6:	681b      	ldr	r3, [r3, #0]
 80106f8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80106fc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80106fe:	2301      	movs	r3, #1
 8010700:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8010704:	69bb      	ldr	r3, [r7, #24]
 8010706:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801070a:	2b00      	cmp	r3, #0
 801070c:	d00b      	beq.n	8010726 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 801070e:	6a3b      	ldr	r3, [r7, #32]
 8010710:	f043 0308 	orr.w	r3, r3, #8
 8010714:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8010716:	68fb      	ldr	r3, [r7, #12]
 8010718:	681b      	ldr	r3, [r3, #0]
 801071a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801071e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8010720:	2301      	movs	r3, #1
 8010722:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8010726:	69bb      	ldr	r3, [r7, #24]
 8010728:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801072c:	2b00      	cmp	r3, #0
 801072e:	d00b      	beq.n	8010748 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8010730:	6a3b      	ldr	r3, [r7, #32]
 8010732:	f043 0302 	orr.w	r3, r3, #2
 8010736:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8010738:	68fb      	ldr	r3, [r7, #12]
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010740:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8010742:	2301      	movs	r3, #1
 8010744:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8010748:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801074c:	2b00      	cmp	r3, #0
 801074e:	d01c      	beq.n	801078a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8010750:	68f8      	ldr	r0, [r7, #12]
 8010752:	f7ff fe1e 	bl	8010392 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8010756:	68fb      	ldr	r3, [r7, #12]
 8010758:	681b      	ldr	r3, [r3, #0]
 801075a:	6859      	ldr	r1, [r3, #4]
 801075c:	68fb      	ldr	r3, [r7, #12]
 801075e:	681a      	ldr	r2, [r3, #0]
 8010760:	4b0d      	ldr	r3, [pc, #52]	@ (8010798 <I2C_IsErrorOccurred+0x1bc>)
 8010762:	400b      	ands	r3, r1
 8010764:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8010766:	68fb      	ldr	r3, [r7, #12]
 8010768:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801076a:	6a3b      	ldr	r3, [r7, #32]
 801076c:	431a      	orrs	r2, r3
 801076e:	68fb      	ldr	r3, [r7, #12]
 8010770:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8010772:	68fb      	ldr	r3, [r7, #12]
 8010774:	2220      	movs	r2, #32
 8010776:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 801077a:	68fb      	ldr	r3, [r7, #12]
 801077c:	2200      	movs	r2, #0
 801077e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010782:	68fb      	ldr	r3, [r7, #12]
 8010784:	2200      	movs	r2, #0
 8010786:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 801078a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 801078e:	4618      	mov	r0, r3
 8010790:	3728      	adds	r7, #40	@ 0x28
 8010792:	46bd      	mov	sp, r7
 8010794:	bd80      	pop	{r7, pc}
 8010796:	bf00      	nop
 8010798:	fe00e800 	.word	0xfe00e800

0801079c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 801079c:	b480      	push	{r7}
 801079e:	b087      	sub	sp, #28
 80107a0:	af00      	add	r7, sp, #0
 80107a2:	60f8      	str	r0, [r7, #12]
 80107a4:	607b      	str	r3, [r7, #4]
 80107a6:	460b      	mov	r3, r1
 80107a8:	817b      	strh	r3, [r7, #10]
 80107aa:	4613      	mov	r3, r2
 80107ac:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80107ae:	897b      	ldrh	r3, [r7, #10]
 80107b0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80107b4:	7a7b      	ldrb	r3, [r7, #9]
 80107b6:	041b      	lsls	r3, r3, #16
 80107b8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80107bc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80107c2:	6a3b      	ldr	r3, [r7, #32]
 80107c4:	4313      	orrs	r3, r2
 80107c6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80107ca:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80107cc:	68fb      	ldr	r3, [r7, #12]
 80107ce:	681b      	ldr	r3, [r3, #0]
 80107d0:	685a      	ldr	r2, [r3, #4]
 80107d2:	6a3b      	ldr	r3, [r7, #32]
 80107d4:	0d5b      	lsrs	r3, r3, #21
 80107d6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80107da:	4b08      	ldr	r3, [pc, #32]	@ (80107fc <I2C_TransferConfig+0x60>)
 80107dc:	430b      	orrs	r3, r1
 80107de:	43db      	mvns	r3, r3
 80107e0:	ea02 0103 	and.w	r1, r2, r3
 80107e4:	68fb      	ldr	r3, [r7, #12]
 80107e6:	681b      	ldr	r3, [r3, #0]
 80107e8:	697a      	ldr	r2, [r7, #20]
 80107ea:	430a      	orrs	r2, r1
 80107ec:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80107ee:	bf00      	nop
 80107f0:	371c      	adds	r7, #28
 80107f2:	46bd      	mov	sp, r7
 80107f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107f8:	4770      	bx	lr
 80107fa:	bf00      	nop
 80107fc:	03ff63ff 	.word	0x03ff63ff

08010800 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8010800:	b480      	push	{r7}
 8010802:	b085      	sub	sp, #20
 8010804:	af00      	add	r7, sp, #0
 8010806:	6078      	str	r0, [r7, #4]
 8010808:	460b      	mov	r3, r1
 801080a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 801080c:	2300      	movs	r3, #0
 801080e:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010814:	4a39      	ldr	r2, [pc, #228]	@ (80108fc <I2C_Enable_IRQ+0xfc>)
 8010816:	4293      	cmp	r3, r2
 8010818:	d032      	beq.n	8010880 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 801081e:	4a38      	ldr	r2, [pc, #224]	@ (8010900 <I2C_Enable_IRQ+0x100>)
 8010820:	4293      	cmp	r3, r2
 8010822:	d02d      	beq.n	8010880 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8010828:	4a36      	ldr	r2, [pc, #216]	@ (8010904 <I2C_Enable_IRQ+0x104>)
 801082a:	4293      	cmp	r3, r2
 801082c:	d028      	beq.n	8010880 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 801082e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010832:	2b00      	cmp	r3, #0
 8010834:	da03      	bge.n	801083e <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 801083c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 801083e:	887b      	ldrh	r3, [r7, #2]
 8010840:	f003 0301 	and.w	r3, r3, #1
 8010844:	2b00      	cmp	r3, #0
 8010846:	d003      	beq.n	8010850 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8010848:	68fb      	ldr	r3, [r7, #12]
 801084a:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 801084e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8010850:	887b      	ldrh	r3, [r7, #2]
 8010852:	f003 0302 	and.w	r3, r3, #2
 8010856:	2b00      	cmp	r3, #0
 8010858:	d003      	beq.n	8010862 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8010860:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8010862:	887b      	ldrh	r3, [r7, #2]
 8010864:	2b10      	cmp	r3, #16
 8010866:	d103      	bne.n	8010870 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8010868:	68fb      	ldr	r3, [r7, #12]
 801086a:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 801086e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8010870:	887b      	ldrh	r3, [r7, #2]
 8010872:	2b20      	cmp	r3, #32
 8010874:	d133      	bne.n	80108de <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8010876:	68fb      	ldr	r3, [r7, #12]
 8010878:	f043 0320 	orr.w	r3, r3, #32
 801087c:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 801087e:	e02e      	b.n	80108de <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8010880:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010884:	2b00      	cmp	r3, #0
 8010886:	da03      	bge.n	8010890 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8010888:	68fb      	ldr	r3, [r7, #12]
 801088a:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 801088e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8010890:	887b      	ldrh	r3, [r7, #2]
 8010892:	f003 0301 	and.w	r3, r3, #1
 8010896:	2b00      	cmp	r3, #0
 8010898:	d003      	beq.n	80108a2 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 801089a:	68fb      	ldr	r3, [r7, #12]
 801089c:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 80108a0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80108a2:	887b      	ldrh	r3, [r7, #2]
 80108a4:	f003 0302 	and.w	r3, r3, #2
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d003      	beq.n	80108b4 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 80108b2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80108b4:	887b      	ldrh	r3, [r7, #2]
 80108b6:	2b10      	cmp	r3, #16
 80108b8:	d103      	bne.n	80108c2 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80108ba:	68fb      	ldr	r3, [r7, #12]
 80108bc:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80108c0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80108c2:	887b      	ldrh	r3, [r7, #2]
 80108c4:	2b20      	cmp	r3, #32
 80108c6:	d103      	bne.n	80108d0 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80108c8:	68fb      	ldr	r3, [r7, #12]
 80108ca:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80108ce:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80108d0:	887b      	ldrh	r3, [r7, #2]
 80108d2:	2b40      	cmp	r3, #64	@ 0x40
 80108d4:	d103      	bne.n	80108de <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80108d6:	68fb      	ldr	r3, [r7, #12]
 80108d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80108dc:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	681b      	ldr	r3, [r3, #0]
 80108e2:	6819      	ldr	r1, [r3, #0]
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	681b      	ldr	r3, [r3, #0]
 80108e8:	68fa      	ldr	r2, [r7, #12]
 80108ea:	430a      	orrs	r2, r1
 80108ec:	601a      	str	r2, [r3, #0]
}
 80108ee:	bf00      	nop
 80108f0:	3714      	adds	r7, #20
 80108f2:	46bd      	mov	sp, r7
 80108f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108f8:	4770      	bx	lr
 80108fa:	bf00      	nop
 80108fc:	0800ef23 	.word	0x0800ef23
 8010900:	0800f345 	.word	0x0800f345
 8010904:	0800f0f9 	.word	0x0800f0f9

08010908 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8010908:	b480      	push	{r7}
 801090a:	b085      	sub	sp, #20
 801090c:	af00      	add	r7, sp, #0
 801090e:	6078      	str	r0, [r7, #4]
 8010910:	460b      	mov	r3, r1
 8010912:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8010914:	2300      	movs	r3, #0
 8010916:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8010918:	887b      	ldrh	r3, [r7, #2]
 801091a:	f003 0301 	and.w	r3, r3, #1
 801091e:	2b00      	cmp	r3, #0
 8010920:	d00f      	beq.n	8010942 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8010922:	68fb      	ldr	r3, [r7, #12]
 8010924:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8010928:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010930:	b2db      	uxtb	r3, r3
 8010932:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8010936:	2b28      	cmp	r3, #40	@ 0x28
 8010938:	d003      	beq.n	8010942 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 801093a:	68fb      	ldr	r3, [r7, #12]
 801093c:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8010940:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8010942:	887b      	ldrh	r3, [r7, #2]
 8010944:	f003 0302 	and.w	r3, r3, #2
 8010948:	2b00      	cmp	r3, #0
 801094a:	d00f      	beq.n	801096c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 801094c:	68fb      	ldr	r3, [r7, #12]
 801094e:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8010952:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801095a:	b2db      	uxtb	r3, r3
 801095c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8010960:	2b28      	cmp	r3, #40	@ 0x28
 8010962:	d003      	beq.n	801096c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8010964:	68fb      	ldr	r3, [r7, #12]
 8010966:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 801096a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 801096c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010970:	2b00      	cmp	r3, #0
 8010972:	da03      	bge.n	801097c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8010974:	68fb      	ldr	r3, [r7, #12]
 8010976:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 801097a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 801097c:	887b      	ldrh	r3, [r7, #2]
 801097e:	2b10      	cmp	r3, #16
 8010980:	d103      	bne.n	801098a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8010982:	68fb      	ldr	r3, [r7, #12]
 8010984:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8010988:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 801098a:	887b      	ldrh	r3, [r7, #2]
 801098c:	2b20      	cmp	r3, #32
 801098e:	d103      	bne.n	8010998 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8010990:	68fb      	ldr	r3, [r7, #12]
 8010992:	f043 0320 	orr.w	r3, r3, #32
 8010996:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8010998:	887b      	ldrh	r3, [r7, #2]
 801099a:	2b40      	cmp	r3, #64	@ 0x40
 801099c:	d103      	bne.n	80109a6 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 801099e:	68fb      	ldr	r3, [r7, #12]
 80109a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80109a4:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	681b      	ldr	r3, [r3, #0]
 80109aa:	6819      	ldr	r1, [r3, #0]
 80109ac:	68fb      	ldr	r3, [r7, #12]
 80109ae:	43da      	mvns	r2, r3
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	681b      	ldr	r3, [r3, #0]
 80109b4:	400a      	ands	r2, r1
 80109b6:	601a      	str	r2, [r3, #0]
}
 80109b8:	bf00      	nop
 80109ba:	3714      	adds	r7, #20
 80109bc:	46bd      	mov	sp, r7
 80109be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109c2:	4770      	bx	lr

080109c4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80109c4:	b480      	push	{r7}
 80109c6:	b083      	sub	sp, #12
 80109c8:	af00      	add	r7, sp, #0
 80109ca:	6078      	str	r0, [r7, #4]
 80109cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80109d4:	b2db      	uxtb	r3, r3
 80109d6:	2b20      	cmp	r3, #32
 80109d8:	d138      	bne.n	8010a4c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80109e0:	2b01      	cmp	r3, #1
 80109e2:	d101      	bne.n	80109e8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80109e4:	2302      	movs	r3, #2
 80109e6:	e032      	b.n	8010a4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	2201      	movs	r2, #1
 80109ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	2224      	movs	r2, #36	@ 0x24
 80109f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	681b      	ldr	r3, [r3, #0]
 80109fc:	681a      	ldr	r2, [r3, #0]
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	681b      	ldr	r3, [r3, #0]
 8010a02:	f022 0201 	bic.w	r2, r2, #1
 8010a06:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	681b      	ldr	r3, [r3, #0]
 8010a0c:	681a      	ldr	r2, [r3, #0]
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	681b      	ldr	r3, [r3, #0]
 8010a12:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8010a16:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	6819      	ldr	r1, [r3, #0]
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	681b      	ldr	r3, [r3, #0]
 8010a22:	683a      	ldr	r2, [r7, #0]
 8010a24:	430a      	orrs	r2, r1
 8010a26:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	681b      	ldr	r3, [r3, #0]
 8010a2c:	681a      	ldr	r2, [r3, #0]
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	681b      	ldr	r3, [r3, #0]
 8010a32:	f042 0201 	orr.w	r2, r2, #1
 8010a36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	2220      	movs	r2, #32
 8010a3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	2200      	movs	r2, #0
 8010a44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8010a48:	2300      	movs	r3, #0
 8010a4a:	e000      	b.n	8010a4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8010a4c:	2302      	movs	r3, #2
  }
}
 8010a4e:	4618      	mov	r0, r3
 8010a50:	370c      	adds	r7, #12
 8010a52:	46bd      	mov	sp, r7
 8010a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a58:	4770      	bx	lr

08010a5a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8010a5a:	b480      	push	{r7}
 8010a5c:	b085      	sub	sp, #20
 8010a5e:	af00      	add	r7, sp, #0
 8010a60:	6078      	str	r0, [r7, #4]
 8010a62:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010a6a:	b2db      	uxtb	r3, r3
 8010a6c:	2b20      	cmp	r3, #32
 8010a6e:	d139      	bne.n	8010ae4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010a76:	2b01      	cmp	r3, #1
 8010a78:	d101      	bne.n	8010a7e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8010a7a:	2302      	movs	r3, #2
 8010a7c:	e033      	b.n	8010ae6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	2201      	movs	r2, #1
 8010a82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	2224      	movs	r2, #36	@ 0x24
 8010a8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	681b      	ldr	r3, [r3, #0]
 8010a92:	681a      	ldr	r2, [r3, #0]
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	681b      	ldr	r3, [r3, #0]
 8010a98:	f022 0201 	bic.w	r2, r2, #1
 8010a9c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	681b      	ldr	r3, [r3, #0]
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8010aa6:	68fb      	ldr	r3, [r7, #12]
 8010aa8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8010aac:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8010aae:	683b      	ldr	r3, [r7, #0]
 8010ab0:	021b      	lsls	r3, r3, #8
 8010ab2:	68fa      	ldr	r2, [r7, #12]
 8010ab4:	4313      	orrs	r3, r2
 8010ab6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	68fa      	ldr	r2, [r7, #12]
 8010abe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	681b      	ldr	r3, [r3, #0]
 8010ac4:	681a      	ldr	r2, [r3, #0]
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	681b      	ldr	r3, [r3, #0]
 8010aca:	f042 0201 	orr.w	r2, r2, #1
 8010ace:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	2220      	movs	r2, #32
 8010ad4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	2200      	movs	r2, #0
 8010adc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8010ae0:	2300      	movs	r3, #0
 8010ae2:	e000      	b.n	8010ae6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8010ae4:	2302      	movs	r3, #2
  }
}
 8010ae6:	4618      	mov	r0, r3
 8010ae8:	3714      	adds	r7, #20
 8010aea:	46bd      	mov	sp, r7
 8010aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010af0:	4770      	bx	lr
	...

08010af4 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8010af4:	b480      	push	{r7}
 8010af6:	b085      	sub	sp, #20
 8010af8:	af00      	add	r7, sp, #0
 8010afa:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010afc:	4b0d      	ldr	r3, [pc, #52]	@ (8010b34 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8010afe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8010b02:	4a0c      	ldr	r2, [pc, #48]	@ (8010b34 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8010b04:	f043 0302 	orr.w	r3, r3, #2
 8010b08:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8010b0c:	4b09      	ldr	r3, [pc, #36]	@ (8010b34 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8010b0e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8010b12:	f003 0302 	and.w	r3, r3, #2
 8010b16:	60fb      	str	r3, [r7, #12]
 8010b18:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 8010b1a:	4b07      	ldr	r3, [pc, #28]	@ (8010b38 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8010b1c:	685a      	ldr	r2, [r3, #4]
 8010b1e:	4906      	ldr	r1, [pc, #24]	@ (8010b38 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	4313      	orrs	r3, r2
 8010b24:	604b      	str	r3, [r1, #4]
}
 8010b26:	bf00      	nop
 8010b28:	3714      	adds	r7, #20
 8010b2a:	46bd      	mov	sp, r7
 8010b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b30:	4770      	bx	lr
 8010b32:	bf00      	nop
 8010b34:	58024400 	.word	0x58024400
 8010b38:	58000400 	.word	0x58000400

08010b3c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8010b3c:	b580      	push	{r7, lr}
 8010b3e:	b084      	sub	sp, #16
 8010b40:	af00      	add	r7, sp, #0
 8010b42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8010b44:	4b19      	ldr	r3, [pc, #100]	@ (8010bac <HAL_PWREx_ConfigSupply+0x70>)
 8010b46:	68db      	ldr	r3, [r3, #12]
 8010b48:	f003 0304 	and.w	r3, r3, #4
 8010b4c:	2b04      	cmp	r3, #4
 8010b4e:	d00a      	beq.n	8010b66 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8010b50:	4b16      	ldr	r3, [pc, #88]	@ (8010bac <HAL_PWREx_ConfigSupply+0x70>)
 8010b52:	68db      	ldr	r3, [r3, #12]
 8010b54:	f003 0307 	and.w	r3, r3, #7
 8010b58:	687a      	ldr	r2, [r7, #4]
 8010b5a:	429a      	cmp	r2, r3
 8010b5c:	d001      	beq.n	8010b62 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8010b5e:	2301      	movs	r3, #1
 8010b60:	e01f      	b.n	8010ba2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8010b62:	2300      	movs	r3, #0
 8010b64:	e01d      	b.n	8010ba2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8010b66:	4b11      	ldr	r3, [pc, #68]	@ (8010bac <HAL_PWREx_ConfigSupply+0x70>)
 8010b68:	68db      	ldr	r3, [r3, #12]
 8010b6a:	f023 0207 	bic.w	r2, r3, #7
 8010b6e:	490f      	ldr	r1, [pc, #60]	@ (8010bac <HAL_PWREx_ConfigSupply+0x70>)
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	4313      	orrs	r3, r2
 8010b74:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8010b76:	f7f8 f9c5 	bl	8008f04 <HAL_GetTick>
 8010b7a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8010b7c:	e009      	b.n	8010b92 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8010b7e:	f7f8 f9c1 	bl	8008f04 <HAL_GetTick>
 8010b82:	4602      	mov	r2, r0
 8010b84:	68fb      	ldr	r3, [r7, #12]
 8010b86:	1ad3      	subs	r3, r2, r3
 8010b88:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8010b8c:	d901      	bls.n	8010b92 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8010b8e:	2301      	movs	r3, #1
 8010b90:	e007      	b.n	8010ba2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8010b92:	4b06      	ldr	r3, [pc, #24]	@ (8010bac <HAL_PWREx_ConfigSupply+0x70>)
 8010b94:	685b      	ldr	r3, [r3, #4]
 8010b96:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010b9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010b9e:	d1ee      	bne.n	8010b7e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8010ba0:	2300      	movs	r3, #0
}
 8010ba2:	4618      	mov	r0, r3
 8010ba4:	3710      	adds	r7, #16
 8010ba6:	46bd      	mov	sp, r7
 8010ba8:	bd80      	pop	{r7, pc}
 8010baa:	bf00      	nop
 8010bac:	58024800 	.word	0x58024800

08010bb0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8010bb0:	b580      	push	{r7, lr}
 8010bb2:	b08c      	sub	sp, #48	@ 0x30
 8010bb4:	af00      	add	r7, sp, #0
 8010bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d101      	bne.n	8010bc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8010bbe:	2301      	movs	r3, #1
 8010bc0:	e3c8      	b.n	8011354 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	681b      	ldr	r3, [r3, #0]
 8010bc6:	f003 0301 	and.w	r3, r3, #1
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	f000 8087 	beq.w	8010cde <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8010bd0:	4b88      	ldr	r3, [pc, #544]	@ (8010df4 <HAL_RCC_OscConfig+0x244>)
 8010bd2:	691b      	ldr	r3, [r3, #16]
 8010bd4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010bd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8010bda:	4b86      	ldr	r3, [pc, #536]	@ (8010df4 <HAL_RCC_OscConfig+0x244>)
 8010bdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010bde:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8010be0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010be2:	2b10      	cmp	r3, #16
 8010be4:	d007      	beq.n	8010bf6 <HAL_RCC_OscConfig+0x46>
 8010be6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010be8:	2b18      	cmp	r3, #24
 8010bea:	d110      	bne.n	8010c0e <HAL_RCC_OscConfig+0x5e>
 8010bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010bee:	f003 0303 	and.w	r3, r3, #3
 8010bf2:	2b02      	cmp	r3, #2
 8010bf4:	d10b      	bne.n	8010c0e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010bf6:	4b7f      	ldr	r3, [pc, #508]	@ (8010df4 <HAL_RCC_OscConfig+0x244>)
 8010bf8:	681b      	ldr	r3, [r3, #0]
 8010bfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d06c      	beq.n	8010cdc <HAL_RCC_OscConfig+0x12c>
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	685b      	ldr	r3, [r3, #4]
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	d168      	bne.n	8010cdc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8010c0a:	2301      	movs	r3, #1
 8010c0c:	e3a2      	b.n	8011354 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	685b      	ldr	r3, [r3, #4]
 8010c12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010c16:	d106      	bne.n	8010c26 <HAL_RCC_OscConfig+0x76>
 8010c18:	4b76      	ldr	r3, [pc, #472]	@ (8010df4 <HAL_RCC_OscConfig+0x244>)
 8010c1a:	681b      	ldr	r3, [r3, #0]
 8010c1c:	4a75      	ldr	r2, [pc, #468]	@ (8010df4 <HAL_RCC_OscConfig+0x244>)
 8010c1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8010c22:	6013      	str	r3, [r2, #0]
 8010c24:	e02e      	b.n	8010c84 <HAL_RCC_OscConfig+0xd4>
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	685b      	ldr	r3, [r3, #4]
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d10c      	bne.n	8010c48 <HAL_RCC_OscConfig+0x98>
 8010c2e:	4b71      	ldr	r3, [pc, #452]	@ (8010df4 <HAL_RCC_OscConfig+0x244>)
 8010c30:	681b      	ldr	r3, [r3, #0]
 8010c32:	4a70      	ldr	r2, [pc, #448]	@ (8010df4 <HAL_RCC_OscConfig+0x244>)
 8010c34:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8010c38:	6013      	str	r3, [r2, #0]
 8010c3a:	4b6e      	ldr	r3, [pc, #440]	@ (8010df4 <HAL_RCC_OscConfig+0x244>)
 8010c3c:	681b      	ldr	r3, [r3, #0]
 8010c3e:	4a6d      	ldr	r2, [pc, #436]	@ (8010df4 <HAL_RCC_OscConfig+0x244>)
 8010c40:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8010c44:	6013      	str	r3, [r2, #0]
 8010c46:	e01d      	b.n	8010c84 <HAL_RCC_OscConfig+0xd4>
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	685b      	ldr	r3, [r3, #4]
 8010c4c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8010c50:	d10c      	bne.n	8010c6c <HAL_RCC_OscConfig+0xbc>
 8010c52:	4b68      	ldr	r3, [pc, #416]	@ (8010df4 <HAL_RCC_OscConfig+0x244>)
 8010c54:	681b      	ldr	r3, [r3, #0]
 8010c56:	4a67      	ldr	r2, [pc, #412]	@ (8010df4 <HAL_RCC_OscConfig+0x244>)
 8010c58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8010c5c:	6013      	str	r3, [r2, #0]
 8010c5e:	4b65      	ldr	r3, [pc, #404]	@ (8010df4 <HAL_RCC_OscConfig+0x244>)
 8010c60:	681b      	ldr	r3, [r3, #0]
 8010c62:	4a64      	ldr	r2, [pc, #400]	@ (8010df4 <HAL_RCC_OscConfig+0x244>)
 8010c64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8010c68:	6013      	str	r3, [r2, #0]
 8010c6a:	e00b      	b.n	8010c84 <HAL_RCC_OscConfig+0xd4>
 8010c6c:	4b61      	ldr	r3, [pc, #388]	@ (8010df4 <HAL_RCC_OscConfig+0x244>)
 8010c6e:	681b      	ldr	r3, [r3, #0]
 8010c70:	4a60      	ldr	r2, [pc, #384]	@ (8010df4 <HAL_RCC_OscConfig+0x244>)
 8010c72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8010c76:	6013      	str	r3, [r2, #0]
 8010c78:	4b5e      	ldr	r3, [pc, #376]	@ (8010df4 <HAL_RCC_OscConfig+0x244>)
 8010c7a:	681b      	ldr	r3, [r3, #0]
 8010c7c:	4a5d      	ldr	r2, [pc, #372]	@ (8010df4 <HAL_RCC_OscConfig+0x244>)
 8010c7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8010c82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	685b      	ldr	r3, [r3, #4]
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	d013      	beq.n	8010cb4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010c8c:	f7f8 f93a 	bl	8008f04 <HAL_GetTick>
 8010c90:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8010c92:	e008      	b.n	8010ca6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8010c94:	f7f8 f936 	bl	8008f04 <HAL_GetTick>
 8010c98:	4602      	mov	r2, r0
 8010c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c9c:	1ad3      	subs	r3, r2, r3
 8010c9e:	2b64      	cmp	r3, #100	@ 0x64
 8010ca0:	d901      	bls.n	8010ca6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8010ca2:	2303      	movs	r3, #3
 8010ca4:	e356      	b.n	8011354 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8010ca6:	4b53      	ldr	r3, [pc, #332]	@ (8010df4 <HAL_RCC_OscConfig+0x244>)
 8010ca8:	681b      	ldr	r3, [r3, #0]
 8010caa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d0f0      	beq.n	8010c94 <HAL_RCC_OscConfig+0xe4>
 8010cb2:	e014      	b.n	8010cde <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010cb4:	f7f8 f926 	bl	8008f04 <HAL_GetTick>
 8010cb8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8010cba:	e008      	b.n	8010cce <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8010cbc:	f7f8 f922 	bl	8008f04 <HAL_GetTick>
 8010cc0:	4602      	mov	r2, r0
 8010cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010cc4:	1ad3      	subs	r3, r2, r3
 8010cc6:	2b64      	cmp	r3, #100	@ 0x64
 8010cc8:	d901      	bls.n	8010cce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8010cca:	2303      	movs	r3, #3
 8010ccc:	e342      	b.n	8011354 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8010cce:	4b49      	ldr	r3, [pc, #292]	@ (8010df4 <HAL_RCC_OscConfig+0x244>)
 8010cd0:	681b      	ldr	r3, [r3, #0]
 8010cd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d1f0      	bne.n	8010cbc <HAL_RCC_OscConfig+0x10c>
 8010cda:	e000      	b.n	8010cde <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010cdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	681b      	ldr	r3, [r3, #0]
 8010ce2:	f003 0302 	and.w	r3, r3, #2
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	f000 808c 	beq.w	8010e04 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8010cec:	4b41      	ldr	r3, [pc, #260]	@ (8010df4 <HAL_RCC_OscConfig+0x244>)
 8010cee:	691b      	ldr	r3, [r3, #16]
 8010cf0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010cf4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8010cf6:	4b3f      	ldr	r3, [pc, #252]	@ (8010df4 <HAL_RCC_OscConfig+0x244>)
 8010cf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010cfa:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8010cfc:	6a3b      	ldr	r3, [r7, #32]
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d007      	beq.n	8010d12 <HAL_RCC_OscConfig+0x162>
 8010d02:	6a3b      	ldr	r3, [r7, #32]
 8010d04:	2b18      	cmp	r3, #24
 8010d06:	d137      	bne.n	8010d78 <HAL_RCC_OscConfig+0x1c8>
 8010d08:	69fb      	ldr	r3, [r7, #28]
 8010d0a:	f003 0303 	and.w	r3, r3, #3
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d132      	bne.n	8010d78 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8010d12:	4b38      	ldr	r3, [pc, #224]	@ (8010df4 <HAL_RCC_OscConfig+0x244>)
 8010d14:	681b      	ldr	r3, [r3, #0]
 8010d16:	f003 0304 	and.w	r3, r3, #4
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	d005      	beq.n	8010d2a <HAL_RCC_OscConfig+0x17a>
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	68db      	ldr	r3, [r3, #12]
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d101      	bne.n	8010d2a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8010d26:	2301      	movs	r3, #1
 8010d28:	e314      	b.n	8011354 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8010d2a:	4b32      	ldr	r3, [pc, #200]	@ (8010df4 <HAL_RCC_OscConfig+0x244>)
 8010d2c:	681b      	ldr	r3, [r3, #0]
 8010d2e:	f023 0219 	bic.w	r2, r3, #25
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	68db      	ldr	r3, [r3, #12]
 8010d36:	492f      	ldr	r1, [pc, #188]	@ (8010df4 <HAL_RCC_OscConfig+0x244>)
 8010d38:	4313      	orrs	r3, r2
 8010d3a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010d3c:	f7f8 f8e2 	bl	8008f04 <HAL_GetTick>
 8010d40:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8010d42:	e008      	b.n	8010d56 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8010d44:	f7f8 f8de 	bl	8008f04 <HAL_GetTick>
 8010d48:	4602      	mov	r2, r0
 8010d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d4c:	1ad3      	subs	r3, r2, r3
 8010d4e:	2b02      	cmp	r3, #2
 8010d50:	d901      	bls.n	8010d56 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8010d52:	2303      	movs	r3, #3
 8010d54:	e2fe      	b.n	8011354 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8010d56:	4b27      	ldr	r3, [pc, #156]	@ (8010df4 <HAL_RCC_OscConfig+0x244>)
 8010d58:	681b      	ldr	r3, [r3, #0]
 8010d5a:	f003 0304 	and.w	r3, r3, #4
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d0f0      	beq.n	8010d44 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010d62:	4b24      	ldr	r3, [pc, #144]	@ (8010df4 <HAL_RCC_OscConfig+0x244>)
 8010d64:	685b      	ldr	r3, [r3, #4]
 8010d66:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	691b      	ldr	r3, [r3, #16]
 8010d6e:	061b      	lsls	r3, r3, #24
 8010d70:	4920      	ldr	r1, [pc, #128]	@ (8010df4 <HAL_RCC_OscConfig+0x244>)
 8010d72:	4313      	orrs	r3, r2
 8010d74:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8010d76:	e045      	b.n	8010e04 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	68db      	ldr	r3, [r3, #12]
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d026      	beq.n	8010dce <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8010d80:	4b1c      	ldr	r3, [pc, #112]	@ (8010df4 <HAL_RCC_OscConfig+0x244>)
 8010d82:	681b      	ldr	r3, [r3, #0]
 8010d84:	f023 0219 	bic.w	r2, r3, #25
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	68db      	ldr	r3, [r3, #12]
 8010d8c:	4919      	ldr	r1, [pc, #100]	@ (8010df4 <HAL_RCC_OscConfig+0x244>)
 8010d8e:	4313      	orrs	r3, r2
 8010d90:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010d92:	f7f8 f8b7 	bl	8008f04 <HAL_GetTick>
 8010d96:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8010d98:	e008      	b.n	8010dac <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8010d9a:	f7f8 f8b3 	bl	8008f04 <HAL_GetTick>
 8010d9e:	4602      	mov	r2, r0
 8010da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010da2:	1ad3      	subs	r3, r2, r3
 8010da4:	2b02      	cmp	r3, #2
 8010da6:	d901      	bls.n	8010dac <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8010da8:	2303      	movs	r3, #3
 8010daa:	e2d3      	b.n	8011354 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8010dac:	4b11      	ldr	r3, [pc, #68]	@ (8010df4 <HAL_RCC_OscConfig+0x244>)
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	f003 0304 	and.w	r3, r3, #4
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	d0f0      	beq.n	8010d9a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010db8:	4b0e      	ldr	r3, [pc, #56]	@ (8010df4 <HAL_RCC_OscConfig+0x244>)
 8010dba:	685b      	ldr	r3, [r3, #4]
 8010dbc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	691b      	ldr	r3, [r3, #16]
 8010dc4:	061b      	lsls	r3, r3, #24
 8010dc6:	490b      	ldr	r1, [pc, #44]	@ (8010df4 <HAL_RCC_OscConfig+0x244>)
 8010dc8:	4313      	orrs	r3, r2
 8010dca:	604b      	str	r3, [r1, #4]
 8010dcc:	e01a      	b.n	8010e04 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8010dce:	4b09      	ldr	r3, [pc, #36]	@ (8010df4 <HAL_RCC_OscConfig+0x244>)
 8010dd0:	681b      	ldr	r3, [r3, #0]
 8010dd2:	4a08      	ldr	r2, [pc, #32]	@ (8010df4 <HAL_RCC_OscConfig+0x244>)
 8010dd4:	f023 0301 	bic.w	r3, r3, #1
 8010dd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010dda:	f7f8 f893 	bl	8008f04 <HAL_GetTick>
 8010dde:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8010de0:	e00a      	b.n	8010df8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8010de2:	f7f8 f88f 	bl	8008f04 <HAL_GetTick>
 8010de6:	4602      	mov	r2, r0
 8010de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010dea:	1ad3      	subs	r3, r2, r3
 8010dec:	2b02      	cmp	r3, #2
 8010dee:	d903      	bls.n	8010df8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8010df0:	2303      	movs	r3, #3
 8010df2:	e2af      	b.n	8011354 <HAL_RCC_OscConfig+0x7a4>
 8010df4:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8010df8:	4b96      	ldr	r3, [pc, #600]	@ (8011054 <HAL_RCC_OscConfig+0x4a4>)
 8010dfa:	681b      	ldr	r3, [r3, #0]
 8010dfc:	f003 0304 	and.w	r3, r3, #4
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	d1ee      	bne.n	8010de2 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	681b      	ldr	r3, [r3, #0]
 8010e08:	f003 0310 	and.w	r3, r3, #16
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	d06a      	beq.n	8010ee6 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8010e10:	4b90      	ldr	r3, [pc, #576]	@ (8011054 <HAL_RCC_OscConfig+0x4a4>)
 8010e12:	691b      	ldr	r3, [r3, #16]
 8010e14:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010e18:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8010e1a:	4b8e      	ldr	r3, [pc, #568]	@ (8011054 <HAL_RCC_OscConfig+0x4a4>)
 8010e1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010e1e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8010e20:	69bb      	ldr	r3, [r7, #24]
 8010e22:	2b08      	cmp	r3, #8
 8010e24:	d007      	beq.n	8010e36 <HAL_RCC_OscConfig+0x286>
 8010e26:	69bb      	ldr	r3, [r7, #24]
 8010e28:	2b18      	cmp	r3, #24
 8010e2a:	d11b      	bne.n	8010e64 <HAL_RCC_OscConfig+0x2b4>
 8010e2c:	697b      	ldr	r3, [r7, #20]
 8010e2e:	f003 0303 	and.w	r3, r3, #3
 8010e32:	2b01      	cmp	r3, #1
 8010e34:	d116      	bne.n	8010e64 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8010e36:	4b87      	ldr	r3, [pc, #540]	@ (8011054 <HAL_RCC_OscConfig+0x4a4>)
 8010e38:	681b      	ldr	r3, [r3, #0]
 8010e3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d005      	beq.n	8010e4e <HAL_RCC_OscConfig+0x29e>
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	69db      	ldr	r3, [r3, #28]
 8010e46:	2b80      	cmp	r3, #128	@ 0x80
 8010e48:	d001      	beq.n	8010e4e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8010e4a:	2301      	movs	r3, #1
 8010e4c:	e282      	b.n	8011354 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8010e4e:	4b81      	ldr	r3, [pc, #516]	@ (8011054 <HAL_RCC_OscConfig+0x4a4>)
 8010e50:	68db      	ldr	r3, [r3, #12]
 8010e52:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	6a1b      	ldr	r3, [r3, #32]
 8010e5a:	061b      	lsls	r3, r3, #24
 8010e5c:	497d      	ldr	r1, [pc, #500]	@ (8011054 <HAL_RCC_OscConfig+0x4a4>)
 8010e5e:	4313      	orrs	r3, r2
 8010e60:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8010e62:	e040      	b.n	8010ee6 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	69db      	ldr	r3, [r3, #28]
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	d023      	beq.n	8010eb4 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8010e6c:	4b79      	ldr	r3, [pc, #484]	@ (8011054 <HAL_RCC_OscConfig+0x4a4>)
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	4a78      	ldr	r2, [pc, #480]	@ (8011054 <HAL_RCC_OscConfig+0x4a4>)
 8010e72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010e76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010e78:	f7f8 f844 	bl	8008f04 <HAL_GetTick>
 8010e7c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8010e7e:	e008      	b.n	8010e92 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8010e80:	f7f8 f840 	bl	8008f04 <HAL_GetTick>
 8010e84:	4602      	mov	r2, r0
 8010e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e88:	1ad3      	subs	r3, r2, r3
 8010e8a:	2b02      	cmp	r3, #2
 8010e8c:	d901      	bls.n	8010e92 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8010e8e:	2303      	movs	r3, #3
 8010e90:	e260      	b.n	8011354 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8010e92:	4b70      	ldr	r3, [pc, #448]	@ (8011054 <HAL_RCC_OscConfig+0x4a4>)
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	d0f0      	beq.n	8010e80 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8010e9e:	4b6d      	ldr	r3, [pc, #436]	@ (8011054 <HAL_RCC_OscConfig+0x4a4>)
 8010ea0:	68db      	ldr	r3, [r3, #12]
 8010ea2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	6a1b      	ldr	r3, [r3, #32]
 8010eaa:	061b      	lsls	r3, r3, #24
 8010eac:	4969      	ldr	r1, [pc, #420]	@ (8011054 <HAL_RCC_OscConfig+0x4a4>)
 8010eae:	4313      	orrs	r3, r2
 8010eb0:	60cb      	str	r3, [r1, #12]
 8010eb2:	e018      	b.n	8010ee6 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8010eb4:	4b67      	ldr	r3, [pc, #412]	@ (8011054 <HAL_RCC_OscConfig+0x4a4>)
 8010eb6:	681b      	ldr	r3, [r3, #0]
 8010eb8:	4a66      	ldr	r2, [pc, #408]	@ (8011054 <HAL_RCC_OscConfig+0x4a4>)
 8010eba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010ebe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010ec0:	f7f8 f820 	bl	8008f04 <HAL_GetTick>
 8010ec4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8010ec6:	e008      	b.n	8010eda <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8010ec8:	f7f8 f81c 	bl	8008f04 <HAL_GetTick>
 8010ecc:	4602      	mov	r2, r0
 8010ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ed0:	1ad3      	subs	r3, r2, r3
 8010ed2:	2b02      	cmp	r3, #2
 8010ed4:	d901      	bls.n	8010eda <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8010ed6:	2303      	movs	r3, #3
 8010ed8:	e23c      	b.n	8011354 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8010eda:	4b5e      	ldr	r3, [pc, #376]	@ (8011054 <HAL_RCC_OscConfig+0x4a4>)
 8010edc:	681b      	ldr	r3, [r3, #0]
 8010ede:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d1f0      	bne.n	8010ec8 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	681b      	ldr	r3, [r3, #0]
 8010eea:	f003 0308 	and.w	r3, r3, #8
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	d036      	beq.n	8010f60 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	695b      	ldr	r3, [r3, #20]
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d019      	beq.n	8010f2e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8010efa:	4b56      	ldr	r3, [pc, #344]	@ (8011054 <HAL_RCC_OscConfig+0x4a4>)
 8010efc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010efe:	4a55      	ldr	r2, [pc, #340]	@ (8011054 <HAL_RCC_OscConfig+0x4a4>)
 8010f00:	f043 0301 	orr.w	r3, r3, #1
 8010f04:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010f06:	f7f7 fffd 	bl	8008f04 <HAL_GetTick>
 8010f0a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8010f0c:	e008      	b.n	8010f20 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8010f0e:	f7f7 fff9 	bl	8008f04 <HAL_GetTick>
 8010f12:	4602      	mov	r2, r0
 8010f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f16:	1ad3      	subs	r3, r2, r3
 8010f18:	2b02      	cmp	r3, #2
 8010f1a:	d901      	bls.n	8010f20 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8010f1c:	2303      	movs	r3, #3
 8010f1e:	e219      	b.n	8011354 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8010f20:	4b4c      	ldr	r3, [pc, #304]	@ (8011054 <HAL_RCC_OscConfig+0x4a4>)
 8010f22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010f24:	f003 0302 	and.w	r3, r3, #2
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d0f0      	beq.n	8010f0e <HAL_RCC_OscConfig+0x35e>
 8010f2c:	e018      	b.n	8010f60 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8010f2e:	4b49      	ldr	r3, [pc, #292]	@ (8011054 <HAL_RCC_OscConfig+0x4a4>)
 8010f30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010f32:	4a48      	ldr	r2, [pc, #288]	@ (8011054 <HAL_RCC_OscConfig+0x4a4>)
 8010f34:	f023 0301 	bic.w	r3, r3, #1
 8010f38:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010f3a:	f7f7 ffe3 	bl	8008f04 <HAL_GetTick>
 8010f3e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8010f40:	e008      	b.n	8010f54 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8010f42:	f7f7 ffdf 	bl	8008f04 <HAL_GetTick>
 8010f46:	4602      	mov	r2, r0
 8010f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f4a:	1ad3      	subs	r3, r2, r3
 8010f4c:	2b02      	cmp	r3, #2
 8010f4e:	d901      	bls.n	8010f54 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8010f50:	2303      	movs	r3, #3
 8010f52:	e1ff      	b.n	8011354 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8010f54:	4b3f      	ldr	r3, [pc, #252]	@ (8011054 <HAL_RCC_OscConfig+0x4a4>)
 8010f56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010f58:	f003 0302 	and.w	r3, r3, #2
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	d1f0      	bne.n	8010f42 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	681b      	ldr	r3, [r3, #0]
 8010f64:	f003 0320 	and.w	r3, r3, #32
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	d036      	beq.n	8010fda <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	699b      	ldr	r3, [r3, #24]
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	d019      	beq.n	8010fa8 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8010f74:	4b37      	ldr	r3, [pc, #220]	@ (8011054 <HAL_RCC_OscConfig+0x4a4>)
 8010f76:	681b      	ldr	r3, [r3, #0]
 8010f78:	4a36      	ldr	r2, [pc, #216]	@ (8011054 <HAL_RCC_OscConfig+0x4a4>)
 8010f7a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8010f7e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8010f80:	f7f7 ffc0 	bl	8008f04 <HAL_GetTick>
 8010f84:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8010f86:	e008      	b.n	8010f9a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8010f88:	f7f7 ffbc 	bl	8008f04 <HAL_GetTick>
 8010f8c:	4602      	mov	r2, r0
 8010f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f90:	1ad3      	subs	r3, r2, r3
 8010f92:	2b02      	cmp	r3, #2
 8010f94:	d901      	bls.n	8010f9a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8010f96:	2303      	movs	r3, #3
 8010f98:	e1dc      	b.n	8011354 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8010f9a:	4b2e      	ldr	r3, [pc, #184]	@ (8011054 <HAL_RCC_OscConfig+0x4a4>)
 8010f9c:	681b      	ldr	r3, [r3, #0]
 8010f9e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	d0f0      	beq.n	8010f88 <HAL_RCC_OscConfig+0x3d8>
 8010fa6:	e018      	b.n	8010fda <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8010fa8:	4b2a      	ldr	r3, [pc, #168]	@ (8011054 <HAL_RCC_OscConfig+0x4a4>)
 8010faa:	681b      	ldr	r3, [r3, #0]
 8010fac:	4a29      	ldr	r2, [pc, #164]	@ (8011054 <HAL_RCC_OscConfig+0x4a4>)
 8010fae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010fb2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8010fb4:	f7f7 ffa6 	bl	8008f04 <HAL_GetTick>
 8010fb8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8010fba:	e008      	b.n	8010fce <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8010fbc:	f7f7 ffa2 	bl	8008f04 <HAL_GetTick>
 8010fc0:	4602      	mov	r2, r0
 8010fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fc4:	1ad3      	subs	r3, r2, r3
 8010fc6:	2b02      	cmp	r3, #2
 8010fc8:	d901      	bls.n	8010fce <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8010fca:	2303      	movs	r3, #3
 8010fcc:	e1c2      	b.n	8011354 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8010fce:	4b21      	ldr	r3, [pc, #132]	@ (8011054 <HAL_RCC_OscConfig+0x4a4>)
 8010fd0:	681b      	ldr	r3, [r3, #0]
 8010fd2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	d1f0      	bne.n	8010fbc <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	681b      	ldr	r3, [r3, #0]
 8010fde:	f003 0304 	and.w	r3, r3, #4
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	f000 8086 	beq.w	80110f4 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8010fe8:	4b1b      	ldr	r3, [pc, #108]	@ (8011058 <HAL_RCC_OscConfig+0x4a8>)
 8010fea:	681b      	ldr	r3, [r3, #0]
 8010fec:	4a1a      	ldr	r2, [pc, #104]	@ (8011058 <HAL_RCC_OscConfig+0x4a8>)
 8010fee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8010ff2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8010ff4:	f7f7 ff86 	bl	8008f04 <HAL_GetTick>
 8010ff8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8010ffa:	e008      	b.n	801100e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8010ffc:	f7f7 ff82 	bl	8008f04 <HAL_GetTick>
 8011000:	4602      	mov	r2, r0
 8011002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011004:	1ad3      	subs	r3, r2, r3
 8011006:	2b64      	cmp	r3, #100	@ 0x64
 8011008:	d901      	bls.n	801100e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 801100a:	2303      	movs	r3, #3
 801100c:	e1a2      	b.n	8011354 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801100e:	4b12      	ldr	r3, [pc, #72]	@ (8011058 <HAL_RCC_OscConfig+0x4a8>)
 8011010:	681b      	ldr	r3, [r3, #0]
 8011012:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011016:	2b00      	cmp	r3, #0
 8011018:	d0f0      	beq.n	8010ffc <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	689b      	ldr	r3, [r3, #8]
 801101e:	2b01      	cmp	r3, #1
 8011020:	d106      	bne.n	8011030 <HAL_RCC_OscConfig+0x480>
 8011022:	4b0c      	ldr	r3, [pc, #48]	@ (8011054 <HAL_RCC_OscConfig+0x4a4>)
 8011024:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011026:	4a0b      	ldr	r2, [pc, #44]	@ (8011054 <HAL_RCC_OscConfig+0x4a4>)
 8011028:	f043 0301 	orr.w	r3, r3, #1
 801102c:	6713      	str	r3, [r2, #112]	@ 0x70
 801102e:	e032      	b.n	8011096 <HAL_RCC_OscConfig+0x4e6>
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	689b      	ldr	r3, [r3, #8]
 8011034:	2b00      	cmp	r3, #0
 8011036:	d111      	bne.n	801105c <HAL_RCC_OscConfig+0x4ac>
 8011038:	4b06      	ldr	r3, [pc, #24]	@ (8011054 <HAL_RCC_OscConfig+0x4a4>)
 801103a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801103c:	4a05      	ldr	r2, [pc, #20]	@ (8011054 <HAL_RCC_OscConfig+0x4a4>)
 801103e:	f023 0301 	bic.w	r3, r3, #1
 8011042:	6713      	str	r3, [r2, #112]	@ 0x70
 8011044:	4b03      	ldr	r3, [pc, #12]	@ (8011054 <HAL_RCC_OscConfig+0x4a4>)
 8011046:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011048:	4a02      	ldr	r2, [pc, #8]	@ (8011054 <HAL_RCC_OscConfig+0x4a4>)
 801104a:	f023 0304 	bic.w	r3, r3, #4
 801104e:	6713      	str	r3, [r2, #112]	@ 0x70
 8011050:	e021      	b.n	8011096 <HAL_RCC_OscConfig+0x4e6>
 8011052:	bf00      	nop
 8011054:	58024400 	.word	0x58024400
 8011058:	58024800 	.word	0x58024800
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	689b      	ldr	r3, [r3, #8]
 8011060:	2b05      	cmp	r3, #5
 8011062:	d10c      	bne.n	801107e <HAL_RCC_OscConfig+0x4ce>
 8011064:	4b83      	ldr	r3, [pc, #524]	@ (8011274 <HAL_RCC_OscConfig+0x6c4>)
 8011066:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011068:	4a82      	ldr	r2, [pc, #520]	@ (8011274 <HAL_RCC_OscConfig+0x6c4>)
 801106a:	f043 0304 	orr.w	r3, r3, #4
 801106e:	6713      	str	r3, [r2, #112]	@ 0x70
 8011070:	4b80      	ldr	r3, [pc, #512]	@ (8011274 <HAL_RCC_OscConfig+0x6c4>)
 8011072:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011074:	4a7f      	ldr	r2, [pc, #508]	@ (8011274 <HAL_RCC_OscConfig+0x6c4>)
 8011076:	f043 0301 	orr.w	r3, r3, #1
 801107a:	6713      	str	r3, [r2, #112]	@ 0x70
 801107c:	e00b      	b.n	8011096 <HAL_RCC_OscConfig+0x4e6>
 801107e:	4b7d      	ldr	r3, [pc, #500]	@ (8011274 <HAL_RCC_OscConfig+0x6c4>)
 8011080:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011082:	4a7c      	ldr	r2, [pc, #496]	@ (8011274 <HAL_RCC_OscConfig+0x6c4>)
 8011084:	f023 0301 	bic.w	r3, r3, #1
 8011088:	6713      	str	r3, [r2, #112]	@ 0x70
 801108a:	4b7a      	ldr	r3, [pc, #488]	@ (8011274 <HAL_RCC_OscConfig+0x6c4>)
 801108c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801108e:	4a79      	ldr	r2, [pc, #484]	@ (8011274 <HAL_RCC_OscConfig+0x6c4>)
 8011090:	f023 0304 	bic.w	r3, r3, #4
 8011094:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	689b      	ldr	r3, [r3, #8]
 801109a:	2b00      	cmp	r3, #0
 801109c:	d015      	beq.n	80110ca <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801109e:	f7f7 ff31 	bl	8008f04 <HAL_GetTick>
 80110a2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80110a4:	e00a      	b.n	80110bc <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80110a6:	f7f7 ff2d 	bl	8008f04 <HAL_GetTick>
 80110aa:	4602      	mov	r2, r0
 80110ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110ae:	1ad3      	subs	r3, r2, r3
 80110b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80110b4:	4293      	cmp	r3, r2
 80110b6:	d901      	bls.n	80110bc <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80110b8:	2303      	movs	r3, #3
 80110ba:	e14b      	b.n	8011354 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80110bc:	4b6d      	ldr	r3, [pc, #436]	@ (8011274 <HAL_RCC_OscConfig+0x6c4>)
 80110be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80110c0:	f003 0302 	and.w	r3, r3, #2
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d0ee      	beq.n	80110a6 <HAL_RCC_OscConfig+0x4f6>
 80110c8:	e014      	b.n	80110f4 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80110ca:	f7f7 ff1b 	bl	8008f04 <HAL_GetTick>
 80110ce:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80110d0:	e00a      	b.n	80110e8 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80110d2:	f7f7 ff17 	bl	8008f04 <HAL_GetTick>
 80110d6:	4602      	mov	r2, r0
 80110d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110da:	1ad3      	subs	r3, r2, r3
 80110dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80110e0:	4293      	cmp	r3, r2
 80110e2:	d901      	bls.n	80110e8 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80110e4:	2303      	movs	r3, #3
 80110e6:	e135      	b.n	8011354 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80110e8:	4b62      	ldr	r3, [pc, #392]	@ (8011274 <HAL_RCC_OscConfig+0x6c4>)
 80110ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80110ec:	f003 0302 	and.w	r3, r3, #2
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	d1ee      	bne.n	80110d2 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	f000 812a 	beq.w	8011352 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80110fe:	4b5d      	ldr	r3, [pc, #372]	@ (8011274 <HAL_RCC_OscConfig+0x6c4>)
 8011100:	691b      	ldr	r3, [r3, #16]
 8011102:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8011106:	2b18      	cmp	r3, #24
 8011108:	f000 80ba 	beq.w	8011280 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011110:	2b02      	cmp	r3, #2
 8011112:	f040 8095 	bne.w	8011240 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8011116:	4b57      	ldr	r3, [pc, #348]	@ (8011274 <HAL_RCC_OscConfig+0x6c4>)
 8011118:	681b      	ldr	r3, [r3, #0]
 801111a:	4a56      	ldr	r2, [pc, #344]	@ (8011274 <HAL_RCC_OscConfig+0x6c4>)
 801111c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8011120:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011122:	f7f7 feef 	bl	8008f04 <HAL_GetTick>
 8011126:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8011128:	e008      	b.n	801113c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801112a:	f7f7 feeb 	bl	8008f04 <HAL_GetTick>
 801112e:	4602      	mov	r2, r0
 8011130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011132:	1ad3      	subs	r3, r2, r3
 8011134:	2b02      	cmp	r3, #2
 8011136:	d901      	bls.n	801113c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8011138:	2303      	movs	r3, #3
 801113a:	e10b      	b.n	8011354 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801113c:	4b4d      	ldr	r3, [pc, #308]	@ (8011274 <HAL_RCC_OscConfig+0x6c4>)
 801113e:	681b      	ldr	r3, [r3, #0]
 8011140:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8011144:	2b00      	cmp	r3, #0
 8011146:	d1f0      	bne.n	801112a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8011148:	4b4a      	ldr	r3, [pc, #296]	@ (8011274 <HAL_RCC_OscConfig+0x6c4>)
 801114a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801114c:	4b4a      	ldr	r3, [pc, #296]	@ (8011278 <HAL_RCC_OscConfig+0x6c8>)
 801114e:	4013      	ands	r3, r2
 8011150:	687a      	ldr	r2, [r7, #4]
 8011152:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8011154:	687a      	ldr	r2, [r7, #4]
 8011156:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8011158:	0112      	lsls	r2, r2, #4
 801115a:	430a      	orrs	r2, r1
 801115c:	4945      	ldr	r1, [pc, #276]	@ (8011274 <HAL_RCC_OscConfig+0x6c4>)
 801115e:	4313      	orrs	r3, r2
 8011160:	628b      	str	r3, [r1, #40]	@ 0x28
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011166:	3b01      	subs	r3, #1
 8011168:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011170:	3b01      	subs	r3, #1
 8011172:	025b      	lsls	r3, r3, #9
 8011174:	b29b      	uxth	r3, r3
 8011176:	431a      	orrs	r2, r3
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801117c:	3b01      	subs	r3, #1
 801117e:	041b      	lsls	r3, r3, #16
 8011180:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8011184:	431a      	orrs	r2, r3
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801118a:	3b01      	subs	r3, #1
 801118c:	061b      	lsls	r3, r3, #24
 801118e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8011192:	4938      	ldr	r1, [pc, #224]	@ (8011274 <HAL_RCC_OscConfig+0x6c4>)
 8011194:	4313      	orrs	r3, r2
 8011196:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8011198:	4b36      	ldr	r3, [pc, #216]	@ (8011274 <HAL_RCC_OscConfig+0x6c4>)
 801119a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801119c:	4a35      	ldr	r2, [pc, #212]	@ (8011274 <HAL_RCC_OscConfig+0x6c4>)
 801119e:	f023 0301 	bic.w	r3, r3, #1
 80111a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80111a4:	4b33      	ldr	r3, [pc, #204]	@ (8011274 <HAL_RCC_OscConfig+0x6c4>)
 80111a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80111a8:	4b34      	ldr	r3, [pc, #208]	@ (801127c <HAL_RCC_OscConfig+0x6cc>)
 80111aa:	4013      	ands	r3, r2
 80111ac:	687a      	ldr	r2, [r7, #4]
 80111ae:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80111b0:	00d2      	lsls	r2, r2, #3
 80111b2:	4930      	ldr	r1, [pc, #192]	@ (8011274 <HAL_RCC_OscConfig+0x6c4>)
 80111b4:	4313      	orrs	r3, r2
 80111b6:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80111b8:	4b2e      	ldr	r3, [pc, #184]	@ (8011274 <HAL_RCC_OscConfig+0x6c4>)
 80111ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80111bc:	f023 020c 	bic.w	r2, r3, #12
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80111c4:	492b      	ldr	r1, [pc, #172]	@ (8011274 <HAL_RCC_OscConfig+0x6c4>)
 80111c6:	4313      	orrs	r3, r2
 80111c8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80111ca:	4b2a      	ldr	r3, [pc, #168]	@ (8011274 <HAL_RCC_OscConfig+0x6c4>)
 80111cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80111ce:	f023 0202 	bic.w	r2, r3, #2
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80111d6:	4927      	ldr	r1, [pc, #156]	@ (8011274 <HAL_RCC_OscConfig+0x6c4>)
 80111d8:	4313      	orrs	r3, r2
 80111da:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80111dc:	4b25      	ldr	r3, [pc, #148]	@ (8011274 <HAL_RCC_OscConfig+0x6c4>)
 80111de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80111e0:	4a24      	ldr	r2, [pc, #144]	@ (8011274 <HAL_RCC_OscConfig+0x6c4>)
 80111e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80111e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80111e8:	4b22      	ldr	r3, [pc, #136]	@ (8011274 <HAL_RCC_OscConfig+0x6c4>)
 80111ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80111ec:	4a21      	ldr	r2, [pc, #132]	@ (8011274 <HAL_RCC_OscConfig+0x6c4>)
 80111ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80111f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80111f4:	4b1f      	ldr	r3, [pc, #124]	@ (8011274 <HAL_RCC_OscConfig+0x6c4>)
 80111f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80111f8:	4a1e      	ldr	r2, [pc, #120]	@ (8011274 <HAL_RCC_OscConfig+0x6c4>)
 80111fa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80111fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8011200:	4b1c      	ldr	r3, [pc, #112]	@ (8011274 <HAL_RCC_OscConfig+0x6c4>)
 8011202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011204:	4a1b      	ldr	r2, [pc, #108]	@ (8011274 <HAL_RCC_OscConfig+0x6c4>)
 8011206:	f043 0301 	orr.w	r3, r3, #1
 801120a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801120c:	4b19      	ldr	r3, [pc, #100]	@ (8011274 <HAL_RCC_OscConfig+0x6c4>)
 801120e:	681b      	ldr	r3, [r3, #0]
 8011210:	4a18      	ldr	r2, [pc, #96]	@ (8011274 <HAL_RCC_OscConfig+0x6c4>)
 8011212:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8011216:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011218:	f7f7 fe74 	bl	8008f04 <HAL_GetTick>
 801121c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801121e:	e008      	b.n	8011232 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8011220:	f7f7 fe70 	bl	8008f04 <HAL_GetTick>
 8011224:	4602      	mov	r2, r0
 8011226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011228:	1ad3      	subs	r3, r2, r3
 801122a:	2b02      	cmp	r3, #2
 801122c:	d901      	bls.n	8011232 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 801122e:	2303      	movs	r3, #3
 8011230:	e090      	b.n	8011354 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8011232:	4b10      	ldr	r3, [pc, #64]	@ (8011274 <HAL_RCC_OscConfig+0x6c4>)
 8011234:	681b      	ldr	r3, [r3, #0]
 8011236:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801123a:	2b00      	cmp	r3, #0
 801123c:	d0f0      	beq.n	8011220 <HAL_RCC_OscConfig+0x670>
 801123e:	e088      	b.n	8011352 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8011240:	4b0c      	ldr	r3, [pc, #48]	@ (8011274 <HAL_RCC_OscConfig+0x6c4>)
 8011242:	681b      	ldr	r3, [r3, #0]
 8011244:	4a0b      	ldr	r2, [pc, #44]	@ (8011274 <HAL_RCC_OscConfig+0x6c4>)
 8011246:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801124a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801124c:	f7f7 fe5a 	bl	8008f04 <HAL_GetTick>
 8011250:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8011252:	e008      	b.n	8011266 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8011254:	f7f7 fe56 	bl	8008f04 <HAL_GetTick>
 8011258:	4602      	mov	r2, r0
 801125a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801125c:	1ad3      	subs	r3, r2, r3
 801125e:	2b02      	cmp	r3, #2
 8011260:	d901      	bls.n	8011266 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8011262:	2303      	movs	r3, #3
 8011264:	e076      	b.n	8011354 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8011266:	4b03      	ldr	r3, [pc, #12]	@ (8011274 <HAL_RCC_OscConfig+0x6c4>)
 8011268:	681b      	ldr	r3, [r3, #0]
 801126a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801126e:	2b00      	cmp	r3, #0
 8011270:	d1f0      	bne.n	8011254 <HAL_RCC_OscConfig+0x6a4>
 8011272:	e06e      	b.n	8011352 <HAL_RCC_OscConfig+0x7a2>
 8011274:	58024400 	.word	0x58024400
 8011278:	fffffc0c 	.word	0xfffffc0c
 801127c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8011280:	4b36      	ldr	r3, [pc, #216]	@ (801135c <HAL_RCC_OscConfig+0x7ac>)
 8011282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011284:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8011286:	4b35      	ldr	r3, [pc, #212]	@ (801135c <HAL_RCC_OscConfig+0x7ac>)
 8011288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801128a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011290:	2b01      	cmp	r3, #1
 8011292:	d031      	beq.n	80112f8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8011294:	693b      	ldr	r3, [r7, #16]
 8011296:	f003 0203 	and.w	r2, r3, #3
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801129e:	429a      	cmp	r2, r3
 80112a0:	d12a      	bne.n	80112f8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80112a2:	693b      	ldr	r3, [r7, #16]
 80112a4:	091b      	lsrs	r3, r3, #4
 80112a6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80112ae:	429a      	cmp	r2, r3
 80112b0:	d122      	bne.n	80112f8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80112b2:	68fb      	ldr	r3, [r7, #12]
 80112b4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80112bc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80112be:	429a      	cmp	r2, r3
 80112c0:	d11a      	bne.n	80112f8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80112c2:	68fb      	ldr	r3, [r7, #12]
 80112c4:	0a5b      	lsrs	r3, r3, #9
 80112c6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80112ce:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80112d0:	429a      	cmp	r2, r3
 80112d2:	d111      	bne.n	80112f8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80112d4:	68fb      	ldr	r3, [r7, #12]
 80112d6:	0c1b      	lsrs	r3, r3, #16
 80112d8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80112e0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80112e2:	429a      	cmp	r2, r3
 80112e4:	d108      	bne.n	80112f8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80112e6:	68fb      	ldr	r3, [r7, #12]
 80112e8:	0e1b      	lsrs	r3, r3, #24
 80112ea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80112f2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80112f4:	429a      	cmp	r2, r3
 80112f6:	d001      	beq.n	80112fc <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80112f8:	2301      	movs	r3, #1
 80112fa:	e02b      	b.n	8011354 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80112fc:	4b17      	ldr	r3, [pc, #92]	@ (801135c <HAL_RCC_OscConfig+0x7ac>)
 80112fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011300:	08db      	lsrs	r3, r3, #3
 8011302:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011306:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801130c:	693a      	ldr	r2, [r7, #16]
 801130e:	429a      	cmp	r2, r3
 8011310:	d01f      	beq.n	8011352 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8011312:	4b12      	ldr	r3, [pc, #72]	@ (801135c <HAL_RCC_OscConfig+0x7ac>)
 8011314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011316:	4a11      	ldr	r2, [pc, #68]	@ (801135c <HAL_RCC_OscConfig+0x7ac>)
 8011318:	f023 0301 	bic.w	r3, r3, #1
 801131c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 801131e:	f7f7 fdf1 	bl	8008f04 <HAL_GetTick>
 8011322:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8011324:	bf00      	nop
 8011326:	f7f7 fded 	bl	8008f04 <HAL_GetTick>
 801132a:	4602      	mov	r2, r0
 801132c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801132e:	4293      	cmp	r3, r2
 8011330:	d0f9      	beq.n	8011326 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8011332:	4b0a      	ldr	r3, [pc, #40]	@ (801135c <HAL_RCC_OscConfig+0x7ac>)
 8011334:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011336:	4b0a      	ldr	r3, [pc, #40]	@ (8011360 <HAL_RCC_OscConfig+0x7b0>)
 8011338:	4013      	ands	r3, r2
 801133a:	687a      	ldr	r2, [r7, #4]
 801133c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 801133e:	00d2      	lsls	r2, r2, #3
 8011340:	4906      	ldr	r1, [pc, #24]	@ (801135c <HAL_RCC_OscConfig+0x7ac>)
 8011342:	4313      	orrs	r3, r2
 8011344:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8011346:	4b05      	ldr	r3, [pc, #20]	@ (801135c <HAL_RCC_OscConfig+0x7ac>)
 8011348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801134a:	4a04      	ldr	r2, [pc, #16]	@ (801135c <HAL_RCC_OscConfig+0x7ac>)
 801134c:	f043 0301 	orr.w	r3, r3, #1
 8011350:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8011352:	2300      	movs	r3, #0
}
 8011354:	4618      	mov	r0, r3
 8011356:	3730      	adds	r7, #48	@ 0x30
 8011358:	46bd      	mov	sp, r7
 801135a:	bd80      	pop	{r7, pc}
 801135c:	58024400 	.word	0x58024400
 8011360:	ffff0007 	.word	0xffff0007

08011364 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8011364:	b580      	push	{r7, lr}
 8011366:	b086      	sub	sp, #24
 8011368:	af00      	add	r7, sp, #0
 801136a:	6078      	str	r0, [r7, #4]
 801136c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	2b00      	cmp	r3, #0
 8011372:	d101      	bne.n	8011378 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8011374:	2301      	movs	r3, #1
 8011376:	e19c      	b.n	80116b2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8011378:	4b8a      	ldr	r3, [pc, #552]	@ (80115a4 <HAL_RCC_ClockConfig+0x240>)
 801137a:	681b      	ldr	r3, [r3, #0]
 801137c:	f003 030f 	and.w	r3, r3, #15
 8011380:	683a      	ldr	r2, [r7, #0]
 8011382:	429a      	cmp	r2, r3
 8011384:	d910      	bls.n	80113a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011386:	4b87      	ldr	r3, [pc, #540]	@ (80115a4 <HAL_RCC_ClockConfig+0x240>)
 8011388:	681b      	ldr	r3, [r3, #0]
 801138a:	f023 020f 	bic.w	r2, r3, #15
 801138e:	4985      	ldr	r1, [pc, #532]	@ (80115a4 <HAL_RCC_ClockConfig+0x240>)
 8011390:	683b      	ldr	r3, [r7, #0]
 8011392:	4313      	orrs	r3, r2
 8011394:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8011396:	4b83      	ldr	r3, [pc, #524]	@ (80115a4 <HAL_RCC_ClockConfig+0x240>)
 8011398:	681b      	ldr	r3, [r3, #0]
 801139a:	f003 030f 	and.w	r3, r3, #15
 801139e:	683a      	ldr	r2, [r7, #0]
 80113a0:	429a      	cmp	r2, r3
 80113a2:	d001      	beq.n	80113a8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80113a4:	2301      	movs	r3, #1
 80113a6:	e184      	b.n	80116b2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	681b      	ldr	r3, [r3, #0]
 80113ac:	f003 0304 	and.w	r3, r3, #4
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	d010      	beq.n	80113d6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	691a      	ldr	r2, [r3, #16]
 80113b8:	4b7b      	ldr	r3, [pc, #492]	@ (80115a8 <HAL_RCC_ClockConfig+0x244>)
 80113ba:	699b      	ldr	r3, [r3, #24]
 80113bc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80113c0:	429a      	cmp	r2, r3
 80113c2:	d908      	bls.n	80113d6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80113c4:	4b78      	ldr	r3, [pc, #480]	@ (80115a8 <HAL_RCC_ClockConfig+0x244>)
 80113c6:	699b      	ldr	r3, [r3, #24]
 80113c8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	691b      	ldr	r3, [r3, #16]
 80113d0:	4975      	ldr	r1, [pc, #468]	@ (80115a8 <HAL_RCC_ClockConfig+0x244>)
 80113d2:	4313      	orrs	r3, r2
 80113d4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	681b      	ldr	r3, [r3, #0]
 80113da:	f003 0308 	and.w	r3, r3, #8
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d010      	beq.n	8011404 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	695a      	ldr	r2, [r3, #20]
 80113e6:	4b70      	ldr	r3, [pc, #448]	@ (80115a8 <HAL_RCC_ClockConfig+0x244>)
 80113e8:	69db      	ldr	r3, [r3, #28]
 80113ea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80113ee:	429a      	cmp	r2, r3
 80113f0:	d908      	bls.n	8011404 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80113f2:	4b6d      	ldr	r3, [pc, #436]	@ (80115a8 <HAL_RCC_ClockConfig+0x244>)
 80113f4:	69db      	ldr	r3, [r3, #28]
 80113f6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	695b      	ldr	r3, [r3, #20]
 80113fe:	496a      	ldr	r1, [pc, #424]	@ (80115a8 <HAL_RCC_ClockConfig+0x244>)
 8011400:	4313      	orrs	r3, r2
 8011402:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	681b      	ldr	r3, [r3, #0]
 8011408:	f003 0310 	and.w	r3, r3, #16
 801140c:	2b00      	cmp	r3, #0
 801140e:	d010      	beq.n	8011432 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	699a      	ldr	r2, [r3, #24]
 8011414:	4b64      	ldr	r3, [pc, #400]	@ (80115a8 <HAL_RCC_ClockConfig+0x244>)
 8011416:	69db      	ldr	r3, [r3, #28]
 8011418:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801141c:	429a      	cmp	r2, r3
 801141e:	d908      	bls.n	8011432 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8011420:	4b61      	ldr	r3, [pc, #388]	@ (80115a8 <HAL_RCC_ClockConfig+0x244>)
 8011422:	69db      	ldr	r3, [r3, #28]
 8011424:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	699b      	ldr	r3, [r3, #24]
 801142c:	495e      	ldr	r1, [pc, #376]	@ (80115a8 <HAL_RCC_ClockConfig+0x244>)
 801142e:	4313      	orrs	r3, r2
 8011430:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	681b      	ldr	r3, [r3, #0]
 8011436:	f003 0320 	and.w	r3, r3, #32
 801143a:	2b00      	cmp	r3, #0
 801143c:	d010      	beq.n	8011460 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	69da      	ldr	r2, [r3, #28]
 8011442:	4b59      	ldr	r3, [pc, #356]	@ (80115a8 <HAL_RCC_ClockConfig+0x244>)
 8011444:	6a1b      	ldr	r3, [r3, #32]
 8011446:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801144a:	429a      	cmp	r2, r3
 801144c:	d908      	bls.n	8011460 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 801144e:	4b56      	ldr	r3, [pc, #344]	@ (80115a8 <HAL_RCC_ClockConfig+0x244>)
 8011450:	6a1b      	ldr	r3, [r3, #32]
 8011452:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	69db      	ldr	r3, [r3, #28]
 801145a:	4953      	ldr	r1, [pc, #332]	@ (80115a8 <HAL_RCC_ClockConfig+0x244>)
 801145c:	4313      	orrs	r3, r2
 801145e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	681b      	ldr	r3, [r3, #0]
 8011464:	f003 0302 	and.w	r3, r3, #2
 8011468:	2b00      	cmp	r3, #0
 801146a:	d010      	beq.n	801148e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	68da      	ldr	r2, [r3, #12]
 8011470:	4b4d      	ldr	r3, [pc, #308]	@ (80115a8 <HAL_RCC_ClockConfig+0x244>)
 8011472:	699b      	ldr	r3, [r3, #24]
 8011474:	f003 030f 	and.w	r3, r3, #15
 8011478:	429a      	cmp	r2, r3
 801147a:	d908      	bls.n	801148e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801147c:	4b4a      	ldr	r3, [pc, #296]	@ (80115a8 <HAL_RCC_ClockConfig+0x244>)
 801147e:	699b      	ldr	r3, [r3, #24]
 8011480:	f023 020f 	bic.w	r2, r3, #15
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	68db      	ldr	r3, [r3, #12]
 8011488:	4947      	ldr	r1, [pc, #284]	@ (80115a8 <HAL_RCC_ClockConfig+0x244>)
 801148a:	4313      	orrs	r3, r2
 801148c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	681b      	ldr	r3, [r3, #0]
 8011492:	f003 0301 	and.w	r3, r3, #1
 8011496:	2b00      	cmp	r3, #0
 8011498:	d055      	beq.n	8011546 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 801149a:	4b43      	ldr	r3, [pc, #268]	@ (80115a8 <HAL_RCC_ClockConfig+0x244>)
 801149c:	699b      	ldr	r3, [r3, #24]
 801149e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	689b      	ldr	r3, [r3, #8]
 80114a6:	4940      	ldr	r1, [pc, #256]	@ (80115a8 <HAL_RCC_ClockConfig+0x244>)
 80114a8:	4313      	orrs	r3, r2
 80114aa:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	685b      	ldr	r3, [r3, #4]
 80114b0:	2b02      	cmp	r3, #2
 80114b2:	d107      	bne.n	80114c4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80114b4:	4b3c      	ldr	r3, [pc, #240]	@ (80115a8 <HAL_RCC_ClockConfig+0x244>)
 80114b6:	681b      	ldr	r3, [r3, #0]
 80114b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80114bc:	2b00      	cmp	r3, #0
 80114be:	d121      	bne.n	8011504 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80114c0:	2301      	movs	r3, #1
 80114c2:	e0f6      	b.n	80116b2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	685b      	ldr	r3, [r3, #4]
 80114c8:	2b03      	cmp	r3, #3
 80114ca:	d107      	bne.n	80114dc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80114cc:	4b36      	ldr	r3, [pc, #216]	@ (80115a8 <HAL_RCC_ClockConfig+0x244>)
 80114ce:	681b      	ldr	r3, [r3, #0]
 80114d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	d115      	bne.n	8011504 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80114d8:	2301      	movs	r3, #1
 80114da:	e0ea      	b.n	80116b2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	685b      	ldr	r3, [r3, #4]
 80114e0:	2b01      	cmp	r3, #1
 80114e2:	d107      	bne.n	80114f4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80114e4:	4b30      	ldr	r3, [pc, #192]	@ (80115a8 <HAL_RCC_ClockConfig+0x244>)
 80114e6:	681b      	ldr	r3, [r3, #0]
 80114e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80114ec:	2b00      	cmp	r3, #0
 80114ee:	d109      	bne.n	8011504 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80114f0:	2301      	movs	r3, #1
 80114f2:	e0de      	b.n	80116b2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80114f4:	4b2c      	ldr	r3, [pc, #176]	@ (80115a8 <HAL_RCC_ClockConfig+0x244>)
 80114f6:	681b      	ldr	r3, [r3, #0]
 80114f8:	f003 0304 	and.w	r3, r3, #4
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	d101      	bne.n	8011504 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8011500:	2301      	movs	r3, #1
 8011502:	e0d6      	b.n	80116b2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8011504:	4b28      	ldr	r3, [pc, #160]	@ (80115a8 <HAL_RCC_ClockConfig+0x244>)
 8011506:	691b      	ldr	r3, [r3, #16]
 8011508:	f023 0207 	bic.w	r2, r3, #7
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	685b      	ldr	r3, [r3, #4]
 8011510:	4925      	ldr	r1, [pc, #148]	@ (80115a8 <HAL_RCC_ClockConfig+0x244>)
 8011512:	4313      	orrs	r3, r2
 8011514:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011516:	f7f7 fcf5 	bl	8008f04 <HAL_GetTick>
 801151a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801151c:	e00a      	b.n	8011534 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801151e:	f7f7 fcf1 	bl	8008f04 <HAL_GetTick>
 8011522:	4602      	mov	r2, r0
 8011524:	697b      	ldr	r3, [r7, #20]
 8011526:	1ad3      	subs	r3, r2, r3
 8011528:	f241 3288 	movw	r2, #5000	@ 0x1388
 801152c:	4293      	cmp	r3, r2
 801152e:	d901      	bls.n	8011534 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8011530:	2303      	movs	r3, #3
 8011532:	e0be      	b.n	80116b2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8011534:	4b1c      	ldr	r3, [pc, #112]	@ (80115a8 <HAL_RCC_ClockConfig+0x244>)
 8011536:	691b      	ldr	r3, [r3, #16]
 8011538:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	685b      	ldr	r3, [r3, #4]
 8011540:	00db      	lsls	r3, r3, #3
 8011542:	429a      	cmp	r2, r3
 8011544:	d1eb      	bne.n	801151e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	681b      	ldr	r3, [r3, #0]
 801154a:	f003 0302 	and.w	r3, r3, #2
 801154e:	2b00      	cmp	r3, #0
 8011550:	d010      	beq.n	8011574 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	68da      	ldr	r2, [r3, #12]
 8011556:	4b14      	ldr	r3, [pc, #80]	@ (80115a8 <HAL_RCC_ClockConfig+0x244>)
 8011558:	699b      	ldr	r3, [r3, #24]
 801155a:	f003 030f 	and.w	r3, r3, #15
 801155e:	429a      	cmp	r2, r3
 8011560:	d208      	bcs.n	8011574 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011562:	4b11      	ldr	r3, [pc, #68]	@ (80115a8 <HAL_RCC_ClockConfig+0x244>)
 8011564:	699b      	ldr	r3, [r3, #24]
 8011566:	f023 020f 	bic.w	r2, r3, #15
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	68db      	ldr	r3, [r3, #12]
 801156e:	490e      	ldr	r1, [pc, #56]	@ (80115a8 <HAL_RCC_ClockConfig+0x244>)
 8011570:	4313      	orrs	r3, r2
 8011572:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8011574:	4b0b      	ldr	r3, [pc, #44]	@ (80115a4 <HAL_RCC_ClockConfig+0x240>)
 8011576:	681b      	ldr	r3, [r3, #0]
 8011578:	f003 030f 	and.w	r3, r3, #15
 801157c:	683a      	ldr	r2, [r7, #0]
 801157e:	429a      	cmp	r2, r3
 8011580:	d214      	bcs.n	80115ac <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011582:	4b08      	ldr	r3, [pc, #32]	@ (80115a4 <HAL_RCC_ClockConfig+0x240>)
 8011584:	681b      	ldr	r3, [r3, #0]
 8011586:	f023 020f 	bic.w	r2, r3, #15
 801158a:	4906      	ldr	r1, [pc, #24]	@ (80115a4 <HAL_RCC_ClockConfig+0x240>)
 801158c:	683b      	ldr	r3, [r7, #0]
 801158e:	4313      	orrs	r3, r2
 8011590:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8011592:	4b04      	ldr	r3, [pc, #16]	@ (80115a4 <HAL_RCC_ClockConfig+0x240>)
 8011594:	681b      	ldr	r3, [r3, #0]
 8011596:	f003 030f 	and.w	r3, r3, #15
 801159a:	683a      	ldr	r2, [r7, #0]
 801159c:	429a      	cmp	r2, r3
 801159e:	d005      	beq.n	80115ac <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80115a0:	2301      	movs	r3, #1
 80115a2:	e086      	b.n	80116b2 <HAL_RCC_ClockConfig+0x34e>
 80115a4:	52002000 	.word	0x52002000
 80115a8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	681b      	ldr	r3, [r3, #0]
 80115b0:	f003 0304 	and.w	r3, r3, #4
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	d010      	beq.n	80115da <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	691a      	ldr	r2, [r3, #16]
 80115bc:	4b3f      	ldr	r3, [pc, #252]	@ (80116bc <HAL_RCC_ClockConfig+0x358>)
 80115be:	699b      	ldr	r3, [r3, #24]
 80115c0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80115c4:	429a      	cmp	r2, r3
 80115c6:	d208      	bcs.n	80115da <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80115c8:	4b3c      	ldr	r3, [pc, #240]	@ (80116bc <HAL_RCC_ClockConfig+0x358>)
 80115ca:	699b      	ldr	r3, [r3, #24]
 80115cc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	691b      	ldr	r3, [r3, #16]
 80115d4:	4939      	ldr	r1, [pc, #228]	@ (80116bc <HAL_RCC_ClockConfig+0x358>)
 80115d6:	4313      	orrs	r3, r2
 80115d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	681b      	ldr	r3, [r3, #0]
 80115de:	f003 0308 	and.w	r3, r3, #8
 80115e2:	2b00      	cmp	r3, #0
 80115e4:	d010      	beq.n	8011608 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	695a      	ldr	r2, [r3, #20]
 80115ea:	4b34      	ldr	r3, [pc, #208]	@ (80116bc <HAL_RCC_ClockConfig+0x358>)
 80115ec:	69db      	ldr	r3, [r3, #28]
 80115ee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80115f2:	429a      	cmp	r2, r3
 80115f4:	d208      	bcs.n	8011608 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80115f6:	4b31      	ldr	r3, [pc, #196]	@ (80116bc <HAL_RCC_ClockConfig+0x358>)
 80115f8:	69db      	ldr	r3, [r3, #28]
 80115fa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	695b      	ldr	r3, [r3, #20]
 8011602:	492e      	ldr	r1, [pc, #184]	@ (80116bc <HAL_RCC_ClockConfig+0x358>)
 8011604:	4313      	orrs	r3, r2
 8011606:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	681b      	ldr	r3, [r3, #0]
 801160c:	f003 0310 	and.w	r3, r3, #16
 8011610:	2b00      	cmp	r3, #0
 8011612:	d010      	beq.n	8011636 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	699a      	ldr	r2, [r3, #24]
 8011618:	4b28      	ldr	r3, [pc, #160]	@ (80116bc <HAL_RCC_ClockConfig+0x358>)
 801161a:	69db      	ldr	r3, [r3, #28]
 801161c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8011620:	429a      	cmp	r2, r3
 8011622:	d208      	bcs.n	8011636 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8011624:	4b25      	ldr	r3, [pc, #148]	@ (80116bc <HAL_RCC_ClockConfig+0x358>)
 8011626:	69db      	ldr	r3, [r3, #28]
 8011628:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	699b      	ldr	r3, [r3, #24]
 8011630:	4922      	ldr	r1, [pc, #136]	@ (80116bc <HAL_RCC_ClockConfig+0x358>)
 8011632:	4313      	orrs	r3, r2
 8011634:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	681b      	ldr	r3, [r3, #0]
 801163a:	f003 0320 	and.w	r3, r3, #32
 801163e:	2b00      	cmp	r3, #0
 8011640:	d010      	beq.n	8011664 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	69da      	ldr	r2, [r3, #28]
 8011646:	4b1d      	ldr	r3, [pc, #116]	@ (80116bc <HAL_RCC_ClockConfig+0x358>)
 8011648:	6a1b      	ldr	r3, [r3, #32]
 801164a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801164e:	429a      	cmp	r2, r3
 8011650:	d208      	bcs.n	8011664 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8011652:	4b1a      	ldr	r3, [pc, #104]	@ (80116bc <HAL_RCC_ClockConfig+0x358>)
 8011654:	6a1b      	ldr	r3, [r3, #32]
 8011656:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	69db      	ldr	r3, [r3, #28]
 801165e:	4917      	ldr	r1, [pc, #92]	@ (80116bc <HAL_RCC_ClockConfig+0x358>)
 8011660:	4313      	orrs	r3, r2
 8011662:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8011664:	f000 f834 	bl	80116d0 <HAL_RCC_GetSysClockFreq>
 8011668:	4602      	mov	r2, r0
 801166a:	4b14      	ldr	r3, [pc, #80]	@ (80116bc <HAL_RCC_ClockConfig+0x358>)
 801166c:	699b      	ldr	r3, [r3, #24]
 801166e:	0a1b      	lsrs	r3, r3, #8
 8011670:	f003 030f 	and.w	r3, r3, #15
 8011674:	4912      	ldr	r1, [pc, #72]	@ (80116c0 <HAL_RCC_ClockConfig+0x35c>)
 8011676:	5ccb      	ldrb	r3, [r1, r3]
 8011678:	f003 031f 	and.w	r3, r3, #31
 801167c:	fa22 f303 	lsr.w	r3, r2, r3
 8011680:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8011682:	4b0e      	ldr	r3, [pc, #56]	@ (80116bc <HAL_RCC_ClockConfig+0x358>)
 8011684:	699b      	ldr	r3, [r3, #24]
 8011686:	f003 030f 	and.w	r3, r3, #15
 801168a:	4a0d      	ldr	r2, [pc, #52]	@ (80116c0 <HAL_RCC_ClockConfig+0x35c>)
 801168c:	5cd3      	ldrb	r3, [r2, r3]
 801168e:	f003 031f 	and.w	r3, r3, #31
 8011692:	693a      	ldr	r2, [r7, #16]
 8011694:	fa22 f303 	lsr.w	r3, r2, r3
 8011698:	4a0a      	ldr	r2, [pc, #40]	@ (80116c4 <HAL_RCC_ClockConfig+0x360>)
 801169a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801169c:	4a0a      	ldr	r2, [pc, #40]	@ (80116c8 <HAL_RCC_ClockConfig+0x364>)
 801169e:	693b      	ldr	r3, [r7, #16]
 80116a0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80116a2:	4b0a      	ldr	r3, [pc, #40]	@ (80116cc <HAL_RCC_ClockConfig+0x368>)
 80116a4:	681b      	ldr	r3, [r3, #0]
 80116a6:	4618      	mov	r0, r3
 80116a8:	f7f7 fbe2 	bl	8008e70 <HAL_InitTick>
 80116ac:	4603      	mov	r3, r0
 80116ae:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80116b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80116b2:	4618      	mov	r0, r3
 80116b4:	3718      	adds	r7, #24
 80116b6:	46bd      	mov	sp, r7
 80116b8:	bd80      	pop	{r7, pc}
 80116ba:	bf00      	nop
 80116bc:	58024400 	.word	0x58024400
 80116c0:	0801e594 	.word	0x0801e594
 80116c4:	24000008 	.word	0x24000008
 80116c8:	24000004 	.word	0x24000004
 80116cc:	2400000c 	.word	0x2400000c

080116d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80116d0:	b480      	push	{r7}
 80116d2:	b089      	sub	sp, #36	@ 0x24
 80116d4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80116d6:	4bb3      	ldr	r3, [pc, #716]	@ (80119a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80116d8:	691b      	ldr	r3, [r3, #16]
 80116da:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80116de:	2b18      	cmp	r3, #24
 80116e0:	f200 8155 	bhi.w	801198e <HAL_RCC_GetSysClockFreq+0x2be>
 80116e4:	a201      	add	r2, pc, #4	@ (adr r2, 80116ec <HAL_RCC_GetSysClockFreq+0x1c>)
 80116e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80116ea:	bf00      	nop
 80116ec:	08011751 	.word	0x08011751
 80116f0:	0801198f 	.word	0x0801198f
 80116f4:	0801198f 	.word	0x0801198f
 80116f8:	0801198f 	.word	0x0801198f
 80116fc:	0801198f 	.word	0x0801198f
 8011700:	0801198f 	.word	0x0801198f
 8011704:	0801198f 	.word	0x0801198f
 8011708:	0801198f 	.word	0x0801198f
 801170c:	08011777 	.word	0x08011777
 8011710:	0801198f 	.word	0x0801198f
 8011714:	0801198f 	.word	0x0801198f
 8011718:	0801198f 	.word	0x0801198f
 801171c:	0801198f 	.word	0x0801198f
 8011720:	0801198f 	.word	0x0801198f
 8011724:	0801198f 	.word	0x0801198f
 8011728:	0801198f 	.word	0x0801198f
 801172c:	0801177d 	.word	0x0801177d
 8011730:	0801198f 	.word	0x0801198f
 8011734:	0801198f 	.word	0x0801198f
 8011738:	0801198f 	.word	0x0801198f
 801173c:	0801198f 	.word	0x0801198f
 8011740:	0801198f 	.word	0x0801198f
 8011744:	0801198f 	.word	0x0801198f
 8011748:	0801198f 	.word	0x0801198f
 801174c:	08011783 	.word	0x08011783
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011750:	4b94      	ldr	r3, [pc, #592]	@ (80119a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011752:	681b      	ldr	r3, [r3, #0]
 8011754:	f003 0320 	and.w	r3, r3, #32
 8011758:	2b00      	cmp	r3, #0
 801175a:	d009      	beq.n	8011770 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801175c:	4b91      	ldr	r3, [pc, #580]	@ (80119a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801175e:	681b      	ldr	r3, [r3, #0]
 8011760:	08db      	lsrs	r3, r3, #3
 8011762:	f003 0303 	and.w	r3, r3, #3
 8011766:	4a90      	ldr	r2, [pc, #576]	@ (80119a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8011768:	fa22 f303 	lsr.w	r3, r2, r3
 801176c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 801176e:	e111      	b.n	8011994 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8011770:	4b8d      	ldr	r3, [pc, #564]	@ (80119a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8011772:	61bb      	str	r3, [r7, #24]
      break;
 8011774:	e10e      	b.n	8011994 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8011776:	4b8d      	ldr	r3, [pc, #564]	@ (80119ac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8011778:	61bb      	str	r3, [r7, #24]
      break;
 801177a:	e10b      	b.n	8011994 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 801177c:	4b8c      	ldr	r3, [pc, #560]	@ (80119b0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 801177e:	61bb      	str	r3, [r7, #24]
      break;
 8011780:	e108      	b.n	8011994 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8011782:	4b88      	ldr	r3, [pc, #544]	@ (80119a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011784:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011786:	f003 0303 	and.w	r3, r3, #3
 801178a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 801178c:	4b85      	ldr	r3, [pc, #532]	@ (80119a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801178e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011790:	091b      	lsrs	r3, r3, #4
 8011792:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011796:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8011798:	4b82      	ldr	r3, [pc, #520]	@ (80119a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801179a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801179c:	f003 0301 	and.w	r3, r3, #1
 80117a0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80117a2:	4b80      	ldr	r3, [pc, #512]	@ (80119a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80117a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80117a6:	08db      	lsrs	r3, r3, #3
 80117a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80117ac:	68fa      	ldr	r2, [r7, #12]
 80117ae:	fb02 f303 	mul.w	r3, r2, r3
 80117b2:	ee07 3a90 	vmov	s15, r3
 80117b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80117ba:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80117be:	693b      	ldr	r3, [r7, #16]
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	f000 80e1 	beq.w	8011988 <HAL_RCC_GetSysClockFreq+0x2b8>
 80117c6:	697b      	ldr	r3, [r7, #20]
 80117c8:	2b02      	cmp	r3, #2
 80117ca:	f000 8083 	beq.w	80118d4 <HAL_RCC_GetSysClockFreq+0x204>
 80117ce:	697b      	ldr	r3, [r7, #20]
 80117d0:	2b02      	cmp	r3, #2
 80117d2:	f200 80a1 	bhi.w	8011918 <HAL_RCC_GetSysClockFreq+0x248>
 80117d6:	697b      	ldr	r3, [r7, #20]
 80117d8:	2b00      	cmp	r3, #0
 80117da:	d003      	beq.n	80117e4 <HAL_RCC_GetSysClockFreq+0x114>
 80117dc:	697b      	ldr	r3, [r7, #20]
 80117de:	2b01      	cmp	r3, #1
 80117e0:	d056      	beq.n	8011890 <HAL_RCC_GetSysClockFreq+0x1c0>
 80117e2:	e099      	b.n	8011918 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80117e4:	4b6f      	ldr	r3, [pc, #444]	@ (80119a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80117e6:	681b      	ldr	r3, [r3, #0]
 80117e8:	f003 0320 	and.w	r3, r3, #32
 80117ec:	2b00      	cmp	r3, #0
 80117ee:	d02d      	beq.n	801184c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80117f0:	4b6c      	ldr	r3, [pc, #432]	@ (80119a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80117f2:	681b      	ldr	r3, [r3, #0]
 80117f4:	08db      	lsrs	r3, r3, #3
 80117f6:	f003 0303 	and.w	r3, r3, #3
 80117fa:	4a6b      	ldr	r2, [pc, #428]	@ (80119a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80117fc:	fa22 f303 	lsr.w	r3, r2, r3
 8011800:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	ee07 3a90 	vmov	s15, r3
 8011808:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801180c:	693b      	ldr	r3, [r7, #16]
 801180e:	ee07 3a90 	vmov	s15, r3
 8011812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011816:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801181a:	4b62      	ldr	r3, [pc, #392]	@ (80119a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801181c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801181e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011822:	ee07 3a90 	vmov	s15, r3
 8011826:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801182a:	ed97 6a02 	vldr	s12, [r7, #8]
 801182e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80119b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8011832:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011836:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801183a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801183e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011842:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011846:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 801184a:	e087      	b.n	801195c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801184c:	693b      	ldr	r3, [r7, #16]
 801184e:	ee07 3a90 	vmov	s15, r3
 8011852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011856:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80119b8 <HAL_RCC_GetSysClockFreq+0x2e8>
 801185a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801185e:	4b51      	ldr	r3, [pc, #324]	@ (80119a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011862:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011866:	ee07 3a90 	vmov	s15, r3
 801186a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801186e:	ed97 6a02 	vldr	s12, [r7, #8]
 8011872:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80119b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8011876:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801187a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801187e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011882:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011886:	ee67 7a27 	vmul.f32	s15, s14, s15
 801188a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801188e:	e065      	b.n	801195c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011890:	693b      	ldr	r3, [r7, #16]
 8011892:	ee07 3a90 	vmov	s15, r3
 8011896:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801189a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80119bc <HAL_RCC_GetSysClockFreq+0x2ec>
 801189e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80118a2:	4b40      	ldr	r3, [pc, #256]	@ (80119a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80118a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80118a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80118aa:	ee07 3a90 	vmov	s15, r3
 80118ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80118b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80118b6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80119b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80118ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80118be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80118c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80118c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80118ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80118ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80118d2:	e043      	b.n	801195c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80118d4:	693b      	ldr	r3, [r7, #16]
 80118d6:	ee07 3a90 	vmov	s15, r3
 80118da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80118de:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80119c0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80118e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80118e6:	4b2f      	ldr	r3, [pc, #188]	@ (80119a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80118e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80118ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80118ee:	ee07 3a90 	vmov	s15, r3
 80118f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80118f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80118fa:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80119b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80118fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011902:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011906:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801190a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801190e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011912:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8011916:	e021      	b.n	801195c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011918:	693b      	ldr	r3, [r7, #16]
 801191a:	ee07 3a90 	vmov	s15, r3
 801191e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011922:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80119bc <HAL_RCC_GetSysClockFreq+0x2ec>
 8011926:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801192a:	4b1e      	ldr	r3, [pc, #120]	@ (80119a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801192c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801192e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011932:	ee07 3a90 	vmov	s15, r3
 8011936:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801193a:	ed97 6a02 	vldr	s12, [r7, #8]
 801193e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80119b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8011942:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011946:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801194a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801194e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011952:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011956:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801195a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 801195c:	4b11      	ldr	r3, [pc, #68]	@ (80119a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801195e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011960:	0a5b      	lsrs	r3, r3, #9
 8011962:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011966:	3301      	adds	r3, #1
 8011968:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 801196a:	683b      	ldr	r3, [r7, #0]
 801196c:	ee07 3a90 	vmov	s15, r3
 8011970:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8011974:	edd7 6a07 	vldr	s13, [r7, #28]
 8011978:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801197c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011980:	ee17 3a90 	vmov	r3, s15
 8011984:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8011986:	e005      	b.n	8011994 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8011988:	2300      	movs	r3, #0
 801198a:	61bb      	str	r3, [r7, #24]
      break;
 801198c:	e002      	b.n	8011994 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 801198e:	4b07      	ldr	r3, [pc, #28]	@ (80119ac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8011990:	61bb      	str	r3, [r7, #24]
      break;
 8011992:	bf00      	nop
  }

  return sysclockfreq;
 8011994:	69bb      	ldr	r3, [r7, #24]
}
 8011996:	4618      	mov	r0, r3
 8011998:	3724      	adds	r7, #36	@ 0x24
 801199a:	46bd      	mov	sp, r7
 801199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119a0:	4770      	bx	lr
 80119a2:	bf00      	nop
 80119a4:	58024400 	.word	0x58024400
 80119a8:	03d09000 	.word	0x03d09000
 80119ac:	003d0900 	.word	0x003d0900
 80119b0:	016e3600 	.word	0x016e3600
 80119b4:	46000000 	.word	0x46000000
 80119b8:	4c742400 	.word	0x4c742400
 80119bc:	4a742400 	.word	0x4a742400
 80119c0:	4bb71b00 	.word	0x4bb71b00

080119c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80119c4:	b580      	push	{r7, lr}
 80119c6:	b082      	sub	sp, #8
 80119c8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80119ca:	f7ff fe81 	bl	80116d0 <HAL_RCC_GetSysClockFreq>
 80119ce:	4602      	mov	r2, r0
 80119d0:	4b10      	ldr	r3, [pc, #64]	@ (8011a14 <HAL_RCC_GetHCLKFreq+0x50>)
 80119d2:	699b      	ldr	r3, [r3, #24]
 80119d4:	0a1b      	lsrs	r3, r3, #8
 80119d6:	f003 030f 	and.w	r3, r3, #15
 80119da:	490f      	ldr	r1, [pc, #60]	@ (8011a18 <HAL_RCC_GetHCLKFreq+0x54>)
 80119dc:	5ccb      	ldrb	r3, [r1, r3]
 80119de:	f003 031f 	and.w	r3, r3, #31
 80119e2:	fa22 f303 	lsr.w	r3, r2, r3
 80119e6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80119e8:	4b0a      	ldr	r3, [pc, #40]	@ (8011a14 <HAL_RCC_GetHCLKFreq+0x50>)
 80119ea:	699b      	ldr	r3, [r3, #24]
 80119ec:	f003 030f 	and.w	r3, r3, #15
 80119f0:	4a09      	ldr	r2, [pc, #36]	@ (8011a18 <HAL_RCC_GetHCLKFreq+0x54>)
 80119f2:	5cd3      	ldrb	r3, [r2, r3]
 80119f4:	f003 031f 	and.w	r3, r3, #31
 80119f8:	687a      	ldr	r2, [r7, #4]
 80119fa:	fa22 f303 	lsr.w	r3, r2, r3
 80119fe:	4a07      	ldr	r2, [pc, #28]	@ (8011a1c <HAL_RCC_GetHCLKFreq+0x58>)
 8011a00:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8011a02:	4a07      	ldr	r2, [pc, #28]	@ (8011a20 <HAL_RCC_GetHCLKFreq+0x5c>)
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8011a08:	4b04      	ldr	r3, [pc, #16]	@ (8011a1c <HAL_RCC_GetHCLKFreq+0x58>)
 8011a0a:	681b      	ldr	r3, [r3, #0]
}
 8011a0c:	4618      	mov	r0, r3
 8011a0e:	3708      	adds	r7, #8
 8011a10:	46bd      	mov	sp, r7
 8011a12:	bd80      	pop	{r7, pc}
 8011a14:	58024400 	.word	0x58024400
 8011a18:	0801e594 	.word	0x0801e594
 8011a1c:	24000008 	.word	0x24000008
 8011a20:	24000004 	.word	0x24000004

08011a24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8011a24:	b580      	push	{r7, lr}
 8011a26:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8011a28:	f7ff ffcc 	bl	80119c4 <HAL_RCC_GetHCLKFreq>
 8011a2c:	4602      	mov	r2, r0
 8011a2e:	4b06      	ldr	r3, [pc, #24]	@ (8011a48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8011a30:	69db      	ldr	r3, [r3, #28]
 8011a32:	091b      	lsrs	r3, r3, #4
 8011a34:	f003 0307 	and.w	r3, r3, #7
 8011a38:	4904      	ldr	r1, [pc, #16]	@ (8011a4c <HAL_RCC_GetPCLK1Freq+0x28>)
 8011a3a:	5ccb      	ldrb	r3, [r1, r3]
 8011a3c:	f003 031f 	and.w	r3, r3, #31
 8011a40:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8011a44:	4618      	mov	r0, r3
 8011a46:	bd80      	pop	{r7, pc}
 8011a48:	58024400 	.word	0x58024400
 8011a4c:	0801e594 	.word	0x0801e594

08011a50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8011a50:	b580      	push	{r7, lr}
 8011a52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8011a54:	f7ff ffb6 	bl	80119c4 <HAL_RCC_GetHCLKFreq>
 8011a58:	4602      	mov	r2, r0
 8011a5a:	4b06      	ldr	r3, [pc, #24]	@ (8011a74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8011a5c:	69db      	ldr	r3, [r3, #28]
 8011a5e:	0a1b      	lsrs	r3, r3, #8
 8011a60:	f003 0307 	and.w	r3, r3, #7
 8011a64:	4904      	ldr	r1, [pc, #16]	@ (8011a78 <HAL_RCC_GetPCLK2Freq+0x28>)
 8011a66:	5ccb      	ldrb	r3, [r1, r3]
 8011a68:	f003 031f 	and.w	r3, r3, #31
 8011a6c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8011a70:	4618      	mov	r0, r3
 8011a72:	bd80      	pop	{r7, pc}
 8011a74:	58024400 	.word	0x58024400
 8011a78:	0801e594 	.word	0x0801e594

08011a7c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8011a7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011a80:	b0c6      	sub	sp, #280	@ 0x118
 8011a82:	af00      	add	r7, sp, #0
 8011a84:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8011a88:	2300      	movs	r3, #0
 8011a8a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8011a8e:	2300      	movs	r3, #0
 8011a90:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8011a94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a9c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8011aa0:	2500      	movs	r5, #0
 8011aa2:	ea54 0305 	orrs.w	r3, r4, r5
 8011aa6:	d049      	beq.n	8011b3c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8011aa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011aac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011aae:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8011ab2:	d02f      	beq.n	8011b14 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8011ab4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8011ab8:	d828      	bhi.n	8011b0c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8011aba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8011abe:	d01a      	beq.n	8011af6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8011ac0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8011ac4:	d822      	bhi.n	8011b0c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8011ac6:	2b00      	cmp	r3, #0
 8011ac8:	d003      	beq.n	8011ad2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8011aca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8011ace:	d007      	beq.n	8011ae0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8011ad0:	e01c      	b.n	8011b0c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011ad2:	4bab      	ldr	r3, [pc, #684]	@ (8011d80 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011ad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011ad6:	4aaa      	ldr	r2, [pc, #680]	@ (8011d80 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011ad8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8011adc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8011ade:	e01a      	b.n	8011b16 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8011ae0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011ae4:	3308      	adds	r3, #8
 8011ae6:	2102      	movs	r1, #2
 8011ae8:	4618      	mov	r0, r3
 8011aea:	f002 fa49 	bl	8013f80 <RCCEx_PLL2_Config>
 8011aee:	4603      	mov	r3, r0
 8011af0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8011af4:	e00f      	b.n	8011b16 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8011af6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011afa:	3328      	adds	r3, #40	@ 0x28
 8011afc:	2102      	movs	r1, #2
 8011afe:	4618      	mov	r0, r3
 8011b00:	f002 faf0 	bl	80140e4 <RCCEx_PLL3_Config>
 8011b04:	4603      	mov	r3, r0
 8011b06:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8011b0a:	e004      	b.n	8011b16 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8011b0c:	2301      	movs	r3, #1
 8011b0e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8011b12:	e000      	b.n	8011b16 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8011b14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011b16:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	d10a      	bne.n	8011b34 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8011b1e:	4b98      	ldr	r3, [pc, #608]	@ (8011d80 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011b20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011b22:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8011b26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011b2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011b2c:	4a94      	ldr	r2, [pc, #592]	@ (8011d80 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011b2e:	430b      	orrs	r3, r1
 8011b30:	6513      	str	r3, [r2, #80]	@ 0x50
 8011b32:	e003      	b.n	8011b3c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011b34:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011b38:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8011b3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b44:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8011b48:	f04f 0900 	mov.w	r9, #0
 8011b4c:	ea58 0309 	orrs.w	r3, r8, r9
 8011b50:	d047      	beq.n	8011be2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8011b52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011b56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011b58:	2b04      	cmp	r3, #4
 8011b5a:	d82a      	bhi.n	8011bb2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8011b5c:	a201      	add	r2, pc, #4	@ (adr r2, 8011b64 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8011b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b62:	bf00      	nop
 8011b64:	08011b79 	.word	0x08011b79
 8011b68:	08011b87 	.word	0x08011b87
 8011b6c:	08011b9d 	.word	0x08011b9d
 8011b70:	08011bbb 	.word	0x08011bbb
 8011b74:	08011bbb 	.word	0x08011bbb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011b78:	4b81      	ldr	r3, [pc, #516]	@ (8011d80 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011b7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011b7c:	4a80      	ldr	r2, [pc, #512]	@ (8011d80 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011b7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8011b82:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8011b84:	e01a      	b.n	8011bbc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8011b86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011b8a:	3308      	adds	r3, #8
 8011b8c:	2100      	movs	r1, #0
 8011b8e:	4618      	mov	r0, r3
 8011b90:	f002 f9f6 	bl	8013f80 <RCCEx_PLL2_Config>
 8011b94:	4603      	mov	r3, r0
 8011b96:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8011b9a:	e00f      	b.n	8011bbc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8011b9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011ba0:	3328      	adds	r3, #40	@ 0x28
 8011ba2:	2100      	movs	r1, #0
 8011ba4:	4618      	mov	r0, r3
 8011ba6:	f002 fa9d 	bl	80140e4 <RCCEx_PLL3_Config>
 8011baa:	4603      	mov	r3, r0
 8011bac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8011bb0:	e004      	b.n	8011bbc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8011bb2:	2301      	movs	r3, #1
 8011bb4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8011bb8:	e000      	b.n	8011bbc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8011bba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011bbc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011bc0:	2b00      	cmp	r3, #0
 8011bc2:	d10a      	bne.n	8011bda <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8011bc4:	4b6e      	ldr	r3, [pc, #440]	@ (8011d80 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011bc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011bc8:	f023 0107 	bic.w	r1, r3, #7
 8011bcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011bd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011bd2:	4a6b      	ldr	r2, [pc, #428]	@ (8011d80 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011bd4:	430b      	orrs	r3, r1
 8011bd6:	6513      	str	r3, [r2, #80]	@ 0x50
 8011bd8:	e003      	b.n	8011be2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011bda:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011bde:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8011be2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bea:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8011bee:	f04f 0b00 	mov.w	fp, #0
 8011bf2:	ea5a 030b 	orrs.w	r3, sl, fp
 8011bf6:	d05b      	beq.n	8011cb0 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8011bf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011bfc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8011c00:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8011c04:	d03b      	beq.n	8011c7e <HAL_RCCEx_PeriphCLKConfig+0x202>
 8011c06:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8011c0a:	d834      	bhi.n	8011c76 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8011c0c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8011c10:	d037      	beq.n	8011c82 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8011c12:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8011c16:	d82e      	bhi.n	8011c76 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8011c18:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8011c1c:	d033      	beq.n	8011c86 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8011c1e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8011c22:	d828      	bhi.n	8011c76 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8011c24:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8011c28:	d01a      	beq.n	8011c60 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8011c2a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8011c2e:	d822      	bhi.n	8011c76 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	d003      	beq.n	8011c3c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8011c34:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8011c38:	d007      	beq.n	8011c4a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8011c3a:	e01c      	b.n	8011c76 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011c3c:	4b50      	ldr	r3, [pc, #320]	@ (8011d80 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011c40:	4a4f      	ldr	r2, [pc, #316]	@ (8011d80 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011c42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8011c46:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8011c48:	e01e      	b.n	8011c88 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8011c4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011c4e:	3308      	adds	r3, #8
 8011c50:	2100      	movs	r1, #0
 8011c52:	4618      	mov	r0, r3
 8011c54:	f002 f994 	bl	8013f80 <RCCEx_PLL2_Config>
 8011c58:	4603      	mov	r3, r0
 8011c5a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8011c5e:	e013      	b.n	8011c88 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8011c60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011c64:	3328      	adds	r3, #40	@ 0x28
 8011c66:	2100      	movs	r1, #0
 8011c68:	4618      	mov	r0, r3
 8011c6a:	f002 fa3b 	bl	80140e4 <RCCEx_PLL3_Config>
 8011c6e:	4603      	mov	r3, r0
 8011c70:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8011c74:	e008      	b.n	8011c88 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8011c76:	2301      	movs	r3, #1
 8011c78:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8011c7c:	e004      	b.n	8011c88 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8011c7e:	bf00      	nop
 8011c80:	e002      	b.n	8011c88 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8011c82:	bf00      	nop
 8011c84:	e000      	b.n	8011c88 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8011c86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011c88:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	d10b      	bne.n	8011ca8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8011c90:	4b3b      	ldr	r3, [pc, #236]	@ (8011d80 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011c92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011c94:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8011c98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011c9c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8011ca0:	4a37      	ldr	r2, [pc, #220]	@ (8011d80 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011ca2:	430b      	orrs	r3, r1
 8011ca4:	6593      	str	r3, [r2, #88]	@ 0x58
 8011ca6:	e003      	b.n	8011cb0 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011ca8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011cac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8011cb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cb8:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8011cbc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8011cc0:	2300      	movs	r3, #0
 8011cc2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8011cc6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8011cca:	460b      	mov	r3, r1
 8011ccc:	4313      	orrs	r3, r2
 8011cce:	d05d      	beq.n	8011d8c <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8011cd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011cd4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8011cd8:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8011cdc:	d03b      	beq.n	8011d56 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8011cde:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8011ce2:	d834      	bhi.n	8011d4e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8011ce4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8011ce8:	d037      	beq.n	8011d5a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8011cea:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8011cee:	d82e      	bhi.n	8011d4e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8011cf0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8011cf4:	d033      	beq.n	8011d5e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8011cf6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8011cfa:	d828      	bhi.n	8011d4e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8011cfc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8011d00:	d01a      	beq.n	8011d38 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8011d02:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8011d06:	d822      	bhi.n	8011d4e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	d003      	beq.n	8011d14 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8011d0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8011d10:	d007      	beq.n	8011d22 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8011d12:	e01c      	b.n	8011d4e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011d14:	4b1a      	ldr	r3, [pc, #104]	@ (8011d80 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011d16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011d18:	4a19      	ldr	r2, [pc, #100]	@ (8011d80 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011d1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8011d1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8011d20:	e01e      	b.n	8011d60 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8011d22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011d26:	3308      	adds	r3, #8
 8011d28:	2100      	movs	r1, #0
 8011d2a:	4618      	mov	r0, r3
 8011d2c:	f002 f928 	bl	8013f80 <RCCEx_PLL2_Config>
 8011d30:	4603      	mov	r3, r0
 8011d32:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8011d36:	e013      	b.n	8011d60 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8011d38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011d3c:	3328      	adds	r3, #40	@ 0x28
 8011d3e:	2100      	movs	r1, #0
 8011d40:	4618      	mov	r0, r3
 8011d42:	f002 f9cf 	bl	80140e4 <RCCEx_PLL3_Config>
 8011d46:	4603      	mov	r3, r0
 8011d48:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8011d4c:	e008      	b.n	8011d60 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8011d4e:	2301      	movs	r3, #1
 8011d50:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8011d54:	e004      	b.n	8011d60 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8011d56:	bf00      	nop
 8011d58:	e002      	b.n	8011d60 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8011d5a:	bf00      	nop
 8011d5c:	e000      	b.n	8011d60 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8011d5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011d60:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011d64:	2b00      	cmp	r3, #0
 8011d66:	d10d      	bne.n	8011d84 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8011d68:	4b05      	ldr	r3, [pc, #20]	@ (8011d80 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011d6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011d6c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8011d70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011d74:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8011d78:	4a01      	ldr	r2, [pc, #4]	@ (8011d80 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011d7a:	430b      	orrs	r3, r1
 8011d7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8011d7e:	e005      	b.n	8011d8c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8011d80:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011d84:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011d88:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8011d8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d94:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8011d98:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8011d9c:	2300      	movs	r3, #0
 8011d9e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8011da2:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8011da6:	460b      	mov	r3, r1
 8011da8:	4313      	orrs	r3, r2
 8011daa:	d03a      	beq.n	8011e22 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8011dac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011db0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011db2:	2b30      	cmp	r3, #48	@ 0x30
 8011db4:	d01f      	beq.n	8011df6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8011db6:	2b30      	cmp	r3, #48	@ 0x30
 8011db8:	d819      	bhi.n	8011dee <HAL_RCCEx_PeriphCLKConfig+0x372>
 8011dba:	2b20      	cmp	r3, #32
 8011dbc:	d00c      	beq.n	8011dd8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8011dbe:	2b20      	cmp	r3, #32
 8011dc0:	d815      	bhi.n	8011dee <HAL_RCCEx_PeriphCLKConfig+0x372>
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	d019      	beq.n	8011dfa <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8011dc6:	2b10      	cmp	r3, #16
 8011dc8:	d111      	bne.n	8011dee <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011dca:	4baa      	ldr	r3, [pc, #680]	@ (8012074 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8011dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011dce:	4aa9      	ldr	r2, [pc, #676]	@ (8012074 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8011dd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8011dd4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8011dd6:	e011      	b.n	8011dfc <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8011dd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011ddc:	3308      	adds	r3, #8
 8011dde:	2102      	movs	r1, #2
 8011de0:	4618      	mov	r0, r3
 8011de2:	f002 f8cd 	bl	8013f80 <RCCEx_PLL2_Config>
 8011de6:	4603      	mov	r3, r0
 8011de8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8011dec:	e006      	b.n	8011dfc <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8011dee:	2301      	movs	r3, #1
 8011df0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8011df4:	e002      	b.n	8011dfc <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8011df6:	bf00      	nop
 8011df8:	e000      	b.n	8011dfc <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8011dfa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011dfc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	d10a      	bne.n	8011e1a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8011e04:	4b9b      	ldr	r3, [pc, #620]	@ (8012074 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8011e06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011e08:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8011e0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011e10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011e12:	4a98      	ldr	r2, [pc, #608]	@ (8012074 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8011e14:	430b      	orrs	r3, r1
 8011e16:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8011e18:	e003      	b.n	8011e22 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011e1a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011e1e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8011e22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e2a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8011e2e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8011e32:	2300      	movs	r3, #0
 8011e34:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8011e38:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8011e3c:	460b      	mov	r3, r1
 8011e3e:	4313      	orrs	r3, r2
 8011e40:	d051      	beq.n	8011ee6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8011e42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011e46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011e48:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8011e4c:	d035      	beq.n	8011eba <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8011e4e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8011e52:	d82e      	bhi.n	8011eb2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8011e54:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8011e58:	d031      	beq.n	8011ebe <HAL_RCCEx_PeriphCLKConfig+0x442>
 8011e5a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8011e5e:	d828      	bhi.n	8011eb2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8011e60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8011e64:	d01a      	beq.n	8011e9c <HAL_RCCEx_PeriphCLKConfig+0x420>
 8011e66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8011e6a:	d822      	bhi.n	8011eb2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	d003      	beq.n	8011e78 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8011e70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011e74:	d007      	beq.n	8011e86 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8011e76:	e01c      	b.n	8011eb2 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011e78:	4b7e      	ldr	r3, [pc, #504]	@ (8012074 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8011e7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011e7c:	4a7d      	ldr	r2, [pc, #500]	@ (8012074 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8011e7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8011e82:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8011e84:	e01c      	b.n	8011ec0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8011e86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011e8a:	3308      	adds	r3, #8
 8011e8c:	2100      	movs	r1, #0
 8011e8e:	4618      	mov	r0, r3
 8011e90:	f002 f876 	bl	8013f80 <RCCEx_PLL2_Config>
 8011e94:	4603      	mov	r3, r0
 8011e96:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8011e9a:	e011      	b.n	8011ec0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8011e9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011ea0:	3328      	adds	r3, #40	@ 0x28
 8011ea2:	2100      	movs	r1, #0
 8011ea4:	4618      	mov	r0, r3
 8011ea6:	f002 f91d 	bl	80140e4 <RCCEx_PLL3_Config>
 8011eaa:	4603      	mov	r3, r0
 8011eac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8011eb0:	e006      	b.n	8011ec0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8011eb2:	2301      	movs	r3, #1
 8011eb4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8011eb8:	e002      	b.n	8011ec0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8011eba:	bf00      	nop
 8011ebc:	e000      	b.n	8011ec0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8011ebe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011ec0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	d10a      	bne.n	8011ede <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8011ec8:	4b6a      	ldr	r3, [pc, #424]	@ (8012074 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8011eca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011ecc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8011ed0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011ed4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011ed6:	4a67      	ldr	r2, [pc, #412]	@ (8012074 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8011ed8:	430b      	orrs	r3, r1
 8011eda:	6513      	str	r3, [r2, #80]	@ 0x50
 8011edc:	e003      	b.n	8011ee6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011ede:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011ee2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8011ee6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011eee:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8011ef2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8011ef6:	2300      	movs	r3, #0
 8011ef8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8011efc:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8011f00:	460b      	mov	r3, r1
 8011f02:	4313      	orrs	r3, r2
 8011f04:	d053      	beq.n	8011fae <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8011f06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011f0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011f0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8011f10:	d033      	beq.n	8011f7a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8011f12:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8011f16:	d82c      	bhi.n	8011f72 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8011f18:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8011f1c:	d02f      	beq.n	8011f7e <HAL_RCCEx_PeriphCLKConfig+0x502>
 8011f1e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8011f22:	d826      	bhi.n	8011f72 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8011f24:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8011f28:	d02b      	beq.n	8011f82 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8011f2a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8011f2e:	d820      	bhi.n	8011f72 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8011f30:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8011f34:	d012      	beq.n	8011f5c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8011f36:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8011f3a:	d81a      	bhi.n	8011f72 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d022      	beq.n	8011f86 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8011f40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011f44:	d115      	bne.n	8011f72 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8011f46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011f4a:	3308      	adds	r3, #8
 8011f4c:	2101      	movs	r1, #1
 8011f4e:	4618      	mov	r0, r3
 8011f50:	f002 f816 	bl	8013f80 <RCCEx_PLL2_Config>
 8011f54:	4603      	mov	r3, r0
 8011f56:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8011f5a:	e015      	b.n	8011f88 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8011f5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011f60:	3328      	adds	r3, #40	@ 0x28
 8011f62:	2101      	movs	r1, #1
 8011f64:	4618      	mov	r0, r3
 8011f66:	f002 f8bd 	bl	80140e4 <RCCEx_PLL3_Config>
 8011f6a:	4603      	mov	r3, r0
 8011f6c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8011f70:	e00a      	b.n	8011f88 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8011f72:	2301      	movs	r3, #1
 8011f74:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8011f78:	e006      	b.n	8011f88 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8011f7a:	bf00      	nop
 8011f7c:	e004      	b.n	8011f88 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8011f7e:	bf00      	nop
 8011f80:	e002      	b.n	8011f88 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8011f82:	bf00      	nop
 8011f84:	e000      	b.n	8011f88 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8011f86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011f88:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	d10a      	bne.n	8011fa6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8011f90:	4b38      	ldr	r3, [pc, #224]	@ (8012074 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8011f92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011f94:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8011f98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011f9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011f9e:	4a35      	ldr	r2, [pc, #212]	@ (8012074 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8011fa0:	430b      	orrs	r3, r1
 8011fa2:	6513      	str	r3, [r2, #80]	@ 0x50
 8011fa4:	e003      	b.n	8011fae <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011fa6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011faa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8011fae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fb6:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8011fba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8011fbe:	2300      	movs	r3, #0
 8011fc0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8011fc4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8011fc8:	460b      	mov	r3, r1
 8011fca:	4313      	orrs	r3, r2
 8011fcc:	d058      	beq.n	8012080 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8011fce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011fd2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8011fd6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8011fda:	d033      	beq.n	8012044 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8011fdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8011fe0:	d82c      	bhi.n	801203c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8011fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011fe6:	d02f      	beq.n	8012048 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8011fe8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011fec:	d826      	bhi.n	801203c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8011fee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8011ff2:	d02b      	beq.n	801204c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8011ff4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8011ff8:	d820      	bhi.n	801203c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8011ffa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011ffe:	d012      	beq.n	8012026 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8012000:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012004:	d81a      	bhi.n	801203c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8012006:	2b00      	cmp	r3, #0
 8012008:	d022      	beq.n	8012050 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 801200a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801200e:	d115      	bne.n	801203c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8012010:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012014:	3308      	adds	r3, #8
 8012016:	2101      	movs	r1, #1
 8012018:	4618      	mov	r0, r3
 801201a:	f001 ffb1 	bl	8013f80 <RCCEx_PLL2_Config>
 801201e:	4603      	mov	r3, r0
 8012020:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8012024:	e015      	b.n	8012052 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8012026:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801202a:	3328      	adds	r3, #40	@ 0x28
 801202c:	2101      	movs	r1, #1
 801202e:	4618      	mov	r0, r3
 8012030:	f002 f858 	bl	80140e4 <RCCEx_PLL3_Config>
 8012034:	4603      	mov	r3, r0
 8012036:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 801203a:	e00a      	b.n	8012052 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 801203c:	2301      	movs	r3, #1
 801203e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012042:	e006      	b.n	8012052 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8012044:	bf00      	nop
 8012046:	e004      	b.n	8012052 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8012048:	bf00      	nop
 801204a:	e002      	b.n	8012052 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 801204c:	bf00      	nop
 801204e:	e000      	b.n	8012052 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8012050:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012052:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012056:	2b00      	cmp	r3, #0
 8012058:	d10e      	bne.n	8012078 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 801205a:	4b06      	ldr	r3, [pc, #24]	@ (8012074 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801205c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801205e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8012062:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012066:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801206a:	4a02      	ldr	r2, [pc, #8]	@ (8012074 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801206c:	430b      	orrs	r3, r1
 801206e:	6593      	str	r3, [r2, #88]	@ 0x58
 8012070:	e006      	b.n	8012080 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8012072:	bf00      	nop
 8012074:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012078:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801207c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8012080:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012088:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 801208c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8012090:	2300      	movs	r3, #0
 8012092:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8012096:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 801209a:	460b      	mov	r3, r1
 801209c:	4313      	orrs	r3, r2
 801209e:	d037      	beq.n	8012110 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80120a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80120a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80120a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80120aa:	d00e      	beq.n	80120ca <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80120ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80120b0:	d816      	bhi.n	80120e0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	d018      	beq.n	80120e8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80120b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80120ba:	d111      	bne.n	80120e0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80120bc:	4bc4      	ldr	r3, [pc, #784]	@ (80123d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80120be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80120c0:	4ac3      	ldr	r2, [pc, #780]	@ (80123d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80120c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80120c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80120c8:	e00f      	b.n	80120ea <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80120ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80120ce:	3308      	adds	r3, #8
 80120d0:	2101      	movs	r1, #1
 80120d2:	4618      	mov	r0, r3
 80120d4:	f001 ff54 	bl	8013f80 <RCCEx_PLL2_Config>
 80120d8:	4603      	mov	r3, r0
 80120da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80120de:	e004      	b.n	80120ea <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80120e0:	2301      	movs	r3, #1
 80120e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80120e6:	e000      	b.n	80120ea <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80120e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80120ea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	d10a      	bne.n	8012108 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80120f2:	4bb7      	ldr	r3, [pc, #732]	@ (80123d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80120f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80120f6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80120fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80120fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012100:	4ab3      	ldr	r2, [pc, #716]	@ (80123d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012102:	430b      	orrs	r3, r1
 8012104:	6513      	str	r3, [r2, #80]	@ 0x50
 8012106:	e003      	b.n	8012110 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012108:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801210c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8012110:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012118:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 801211c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8012120:	2300      	movs	r3, #0
 8012122:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8012126:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 801212a:	460b      	mov	r3, r1
 801212c:	4313      	orrs	r3, r2
 801212e:	d039      	beq.n	80121a4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8012130:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012134:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012136:	2b03      	cmp	r3, #3
 8012138:	d81c      	bhi.n	8012174 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 801213a:	a201      	add	r2, pc, #4	@ (adr r2, 8012140 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 801213c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012140:	0801217d 	.word	0x0801217d
 8012144:	08012151 	.word	0x08012151
 8012148:	0801215f 	.word	0x0801215f
 801214c:	0801217d 	.word	0x0801217d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012150:	4b9f      	ldr	r3, [pc, #636]	@ (80123d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012154:	4a9e      	ldr	r2, [pc, #632]	@ (80123d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012156:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801215a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 801215c:	e00f      	b.n	801217e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801215e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012162:	3308      	adds	r3, #8
 8012164:	2102      	movs	r1, #2
 8012166:	4618      	mov	r0, r3
 8012168:	f001 ff0a 	bl	8013f80 <RCCEx_PLL2_Config>
 801216c:	4603      	mov	r3, r0
 801216e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8012172:	e004      	b.n	801217e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8012174:	2301      	movs	r3, #1
 8012176:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 801217a:	e000      	b.n	801217e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 801217c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801217e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012182:	2b00      	cmp	r3, #0
 8012184:	d10a      	bne.n	801219c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8012186:	4b92      	ldr	r3, [pc, #584]	@ (80123d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012188:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801218a:	f023 0103 	bic.w	r1, r3, #3
 801218e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012192:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012194:	4a8e      	ldr	r2, [pc, #568]	@ (80123d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012196:	430b      	orrs	r3, r1
 8012198:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801219a:	e003      	b.n	80121a4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801219c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80121a0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80121a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80121a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121ac:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80121b0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80121b4:	2300      	movs	r3, #0
 80121b6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80121ba:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80121be:	460b      	mov	r3, r1
 80121c0:	4313      	orrs	r3, r2
 80121c2:	f000 8099 	beq.w	80122f8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80121c6:	4b83      	ldr	r3, [pc, #524]	@ (80123d4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80121c8:	681b      	ldr	r3, [r3, #0]
 80121ca:	4a82      	ldr	r2, [pc, #520]	@ (80123d4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80121cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80121d0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80121d2:	f7f6 fe97 	bl	8008f04 <HAL_GetTick>
 80121d6:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80121da:	e00b      	b.n	80121f4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80121dc:	f7f6 fe92 	bl	8008f04 <HAL_GetTick>
 80121e0:	4602      	mov	r2, r0
 80121e2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80121e6:	1ad3      	subs	r3, r2, r3
 80121e8:	2b64      	cmp	r3, #100	@ 0x64
 80121ea:	d903      	bls.n	80121f4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80121ec:	2303      	movs	r3, #3
 80121ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80121f2:	e005      	b.n	8012200 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80121f4:	4b77      	ldr	r3, [pc, #476]	@ (80123d4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80121f6:	681b      	ldr	r3, [r3, #0]
 80121f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	d0ed      	beq.n	80121dc <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8012200:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012204:	2b00      	cmp	r3, #0
 8012206:	d173      	bne.n	80122f0 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8012208:	4b71      	ldr	r3, [pc, #452]	@ (80123d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801220a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 801220c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012210:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8012214:	4053      	eors	r3, r2
 8012216:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801221a:	2b00      	cmp	r3, #0
 801221c:	d015      	beq.n	801224a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801221e:	4b6c      	ldr	r3, [pc, #432]	@ (80123d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012220:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012222:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8012226:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 801222a:	4b69      	ldr	r3, [pc, #420]	@ (80123d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801222c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801222e:	4a68      	ldr	r2, [pc, #416]	@ (80123d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012230:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8012234:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8012236:	4b66      	ldr	r3, [pc, #408]	@ (80123d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012238:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801223a:	4a65      	ldr	r2, [pc, #404]	@ (80123d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801223c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8012240:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8012242:	4a63      	ldr	r2, [pc, #396]	@ (80123d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012244:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8012248:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 801224a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801224e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8012252:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012256:	d118      	bne.n	801228a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012258:	f7f6 fe54 	bl	8008f04 <HAL_GetTick>
 801225c:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8012260:	e00d      	b.n	801227e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8012262:	f7f6 fe4f 	bl	8008f04 <HAL_GetTick>
 8012266:	4602      	mov	r2, r0
 8012268:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 801226c:	1ad2      	subs	r2, r2, r3
 801226e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8012272:	429a      	cmp	r2, r3
 8012274:	d903      	bls.n	801227e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8012276:	2303      	movs	r3, #3
 8012278:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 801227c:	e005      	b.n	801228a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801227e:	4b54      	ldr	r3, [pc, #336]	@ (80123d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012280:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012282:	f003 0302 	and.w	r3, r3, #2
 8012286:	2b00      	cmp	r3, #0
 8012288:	d0eb      	beq.n	8012262 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 801228a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801228e:	2b00      	cmp	r3, #0
 8012290:	d129      	bne.n	80122e6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8012292:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012296:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801229a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801229e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80122a2:	d10e      	bne.n	80122c2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 80122a4:	4b4a      	ldr	r3, [pc, #296]	@ (80123d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80122a6:	691b      	ldr	r3, [r3, #16]
 80122a8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80122ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80122b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80122b4:	091a      	lsrs	r2, r3, #4
 80122b6:	4b48      	ldr	r3, [pc, #288]	@ (80123d8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80122b8:	4013      	ands	r3, r2
 80122ba:	4a45      	ldr	r2, [pc, #276]	@ (80123d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80122bc:	430b      	orrs	r3, r1
 80122be:	6113      	str	r3, [r2, #16]
 80122c0:	e005      	b.n	80122ce <HAL_RCCEx_PeriphCLKConfig+0x852>
 80122c2:	4b43      	ldr	r3, [pc, #268]	@ (80123d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80122c4:	691b      	ldr	r3, [r3, #16]
 80122c6:	4a42      	ldr	r2, [pc, #264]	@ (80123d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80122c8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80122cc:	6113      	str	r3, [r2, #16]
 80122ce:	4b40      	ldr	r3, [pc, #256]	@ (80123d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80122d0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80122d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80122d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80122da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80122de:	4a3c      	ldr	r2, [pc, #240]	@ (80123d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80122e0:	430b      	orrs	r3, r1
 80122e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80122e4:	e008      	b.n	80122f8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80122e6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80122ea:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80122ee:	e003      	b.n	80122f8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80122f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80122f4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80122f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80122fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012300:	f002 0301 	and.w	r3, r2, #1
 8012304:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8012308:	2300      	movs	r3, #0
 801230a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 801230e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8012312:	460b      	mov	r3, r1
 8012314:	4313      	orrs	r3, r2
 8012316:	f000 808f 	beq.w	8012438 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 801231a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801231e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012320:	2b28      	cmp	r3, #40	@ 0x28
 8012322:	d871      	bhi.n	8012408 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8012324:	a201      	add	r2, pc, #4	@ (adr r2, 801232c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8012326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801232a:	bf00      	nop
 801232c:	08012411 	.word	0x08012411
 8012330:	08012409 	.word	0x08012409
 8012334:	08012409 	.word	0x08012409
 8012338:	08012409 	.word	0x08012409
 801233c:	08012409 	.word	0x08012409
 8012340:	08012409 	.word	0x08012409
 8012344:	08012409 	.word	0x08012409
 8012348:	08012409 	.word	0x08012409
 801234c:	080123dd 	.word	0x080123dd
 8012350:	08012409 	.word	0x08012409
 8012354:	08012409 	.word	0x08012409
 8012358:	08012409 	.word	0x08012409
 801235c:	08012409 	.word	0x08012409
 8012360:	08012409 	.word	0x08012409
 8012364:	08012409 	.word	0x08012409
 8012368:	08012409 	.word	0x08012409
 801236c:	080123f3 	.word	0x080123f3
 8012370:	08012409 	.word	0x08012409
 8012374:	08012409 	.word	0x08012409
 8012378:	08012409 	.word	0x08012409
 801237c:	08012409 	.word	0x08012409
 8012380:	08012409 	.word	0x08012409
 8012384:	08012409 	.word	0x08012409
 8012388:	08012409 	.word	0x08012409
 801238c:	08012411 	.word	0x08012411
 8012390:	08012409 	.word	0x08012409
 8012394:	08012409 	.word	0x08012409
 8012398:	08012409 	.word	0x08012409
 801239c:	08012409 	.word	0x08012409
 80123a0:	08012409 	.word	0x08012409
 80123a4:	08012409 	.word	0x08012409
 80123a8:	08012409 	.word	0x08012409
 80123ac:	08012411 	.word	0x08012411
 80123b0:	08012409 	.word	0x08012409
 80123b4:	08012409 	.word	0x08012409
 80123b8:	08012409 	.word	0x08012409
 80123bc:	08012409 	.word	0x08012409
 80123c0:	08012409 	.word	0x08012409
 80123c4:	08012409 	.word	0x08012409
 80123c8:	08012409 	.word	0x08012409
 80123cc:	08012411 	.word	0x08012411
 80123d0:	58024400 	.word	0x58024400
 80123d4:	58024800 	.word	0x58024800
 80123d8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80123dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80123e0:	3308      	adds	r3, #8
 80123e2:	2101      	movs	r1, #1
 80123e4:	4618      	mov	r0, r3
 80123e6:	f001 fdcb 	bl	8013f80 <RCCEx_PLL2_Config>
 80123ea:	4603      	mov	r3, r0
 80123ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80123f0:	e00f      	b.n	8012412 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80123f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80123f6:	3328      	adds	r3, #40	@ 0x28
 80123f8:	2101      	movs	r1, #1
 80123fa:	4618      	mov	r0, r3
 80123fc:	f001 fe72 	bl	80140e4 <RCCEx_PLL3_Config>
 8012400:	4603      	mov	r3, r0
 8012402:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8012406:	e004      	b.n	8012412 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012408:	2301      	movs	r3, #1
 801240a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 801240e:	e000      	b.n	8012412 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8012410:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012412:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012416:	2b00      	cmp	r3, #0
 8012418:	d10a      	bne.n	8012430 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 801241a:	4bbf      	ldr	r3, [pc, #764]	@ (8012718 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 801241c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801241e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8012422:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012426:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012428:	4abb      	ldr	r2, [pc, #748]	@ (8012718 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 801242a:	430b      	orrs	r3, r1
 801242c:	6553      	str	r3, [r2, #84]	@ 0x54
 801242e:	e003      	b.n	8012438 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012430:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012434:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8012438:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801243c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012440:	f002 0302 	and.w	r3, r2, #2
 8012444:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8012448:	2300      	movs	r3, #0
 801244a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 801244e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8012452:	460b      	mov	r3, r1
 8012454:	4313      	orrs	r3, r2
 8012456:	d041      	beq.n	80124dc <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8012458:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801245c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801245e:	2b05      	cmp	r3, #5
 8012460:	d824      	bhi.n	80124ac <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8012462:	a201      	add	r2, pc, #4	@ (adr r2, 8012468 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8012464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012468:	080124b5 	.word	0x080124b5
 801246c:	08012481 	.word	0x08012481
 8012470:	08012497 	.word	0x08012497
 8012474:	080124b5 	.word	0x080124b5
 8012478:	080124b5 	.word	0x080124b5
 801247c:	080124b5 	.word	0x080124b5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8012480:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012484:	3308      	adds	r3, #8
 8012486:	2101      	movs	r1, #1
 8012488:	4618      	mov	r0, r3
 801248a:	f001 fd79 	bl	8013f80 <RCCEx_PLL2_Config>
 801248e:	4603      	mov	r3, r0
 8012490:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8012494:	e00f      	b.n	80124b6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8012496:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801249a:	3328      	adds	r3, #40	@ 0x28
 801249c:	2101      	movs	r1, #1
 801249e:	4618      	mov	r0, r3
 80124a0:	f001 fe20 	bl	80140e4 <RCCEx_PLL3_Config>
 80124a4:	4603      	mov	r3, r0
 80124a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80124aa:	e004      	b.n	80124b6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80124ac:	2301      	movs	r3, #1
 80124ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80124b2:	e000      	b.n	80124b6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80124b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80124b6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	d10a      	bne.n	80124d4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80124be:	4b96      	ldr	r3, [pc, #600]	@ (8012718 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80124c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80124c2:	f023 0107 	bic.w	r1, r3, #7
 80124c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80124ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80124cc:	4a92      	ldr	r2, [pc, #584]	@ (8012718 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80124ce:	430b      	orrs	r3, r1
 80124d0:	6553      	str	r3, [r2, #84]	@ 0x54
 80124d2:	e003      	b.n	80124dc <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80124d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80124d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80124dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80124e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124e4:	f002 0304 	and.w	r3, r2, #4
 80124e8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80124ec:	2300      	movs	r3, #0
 80124ee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80124f2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80124f6:	460b      	mov	r3, r1
 80124f8:	4313      	orrs	r3, r2
 80124fa:	d044      	beq.n	8012586 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80124fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012500:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012504:	2b05      	cmp	r3, #5
 8012506:	d825      	bhi.n	8012554 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8012508:	a201      	add	r2, pc, #4	@ (adr r2, 8012510 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 801250a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801250e:	bf00      	nop
 8012510:	0801255d 	.word	0x0801255d
 8012514:	08012529 	.word	0x08012529
 8012518:	0801253f 	.word	0x0801253f
 801251c:	0801255d 	.word	0x0801255d
 8012520:	0801255d 	.word	0x0801255d
 8012524:	0801255d 	.word	0x0801255d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8012528:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801252c:	3308      	adds	r3, #8
 801252e:	2101      	movs	r1, #1
 8012530:	4618      	mov	r0, r3
 8012532:	f001 fd25 	bl	8013f80 <RCCEx_PLL2_Config>
 8012536:	4603      	mov	r3, r0
 8012538:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 801253c:	e00f      	b.n	801255e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801253e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012542:	3328      	adds	r3, #40	@ 0x28
 8012544:	2101      	movs	r1, #1
 8012546:	4618      	mov	r0, r3
 8012548:	f001 fdcc 	bl	80140e4 <RCCEx_PLL3_Config>
 801254c:	4603      	mov	r3, r0
 801254e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8012552:	e004      	b.n	801255e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012554:	2301      	movs	r3, #1
 8012556:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 801255a:	e000      	b.n	801255e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 801255c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801255e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012562:	2b00      	cmp	r3, #0
 8012564:	d10b      	bne.n	801257e <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8012566:	4b6c      	ldr	r3, [pc, #432]	@ (8012718 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012568:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801256a:	f023 0107 	bic.w	r1, r3, #7
 801256e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012572:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012576:	4a68      	ldr	r2, [pc, #416]	@ (8012718 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012578:	430b      	orrs	r3, r1
 801257a:	6593      	str	r3, [r2, #88]	@ 0x58
 801257c:	e003      	b.n	8012586 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801257e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012582:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8012586:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801258a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801258e:	f002 0320 	and.w	r3, r2, #32
 8012592:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8012596:	2300      	movs	r3, #0
 8012598:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 801259c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80125a0:	460b      	mov	r3, r1
 80125a2:	4313      	orrs	r3, r2
 80125a4:	d055      	beq.n	8012652 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80125a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80125aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80125ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80125b2:	d033      	beq.n	801261c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80125b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80125b8:	d82c      	bhi.n	8012614 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80125ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80125be:	d02f      	beq.n	8012620 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80125c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80125c4:	d826      	bhi.n	8012614 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80125c6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80125ca:	d02b      	beq.n	8012624 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80125cc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80125d0:	d820      	bhi.n	8012614 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80125d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80125d6:	d012      	beq.n	80125fe <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80125d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80125dc:	d81a      	bhi.n	8012614 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80125de:	2b00      	cmp	r3, #0
 80125e0:	d022      	beq.n	8012628 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80125e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80125e6:	d115      	bne.n	8012614 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80125e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80125ec:	3308      	adds	r3, #8
 80125ee:	2100      	movs	r1, #0
 80125f0:	4618      	mov	r0, r3
 80125f2:	f001 fcc5 	bl	8013f80 <RCCEx_PLL2_Config>
 80125f6:	4603      	mov	r3, r0
 80125f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80125fc:	e015      	b.n	801262a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80125fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012602:	3328      	adds	r3, #40	@ 0x28
 8012604:	2102      	movs	r1, #2
 8012606:	4618      	mov	r0, r3
 8012608:	f001 fd6c 	bl	80140e4 <RCCEx_PLL3_Config>
 801260c:	4603      	mov	r3, r0
 801260e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8012612:	e00a      	b.n	801262a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012614:	2301      	movs	r3, #1
 8012616:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 801261a:	e006      	b.n	801262a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 801261c:	bf00      	nop
 801261e:	e004      	b.n	801262a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8012620:	bf00      	nop
 8012622:	e002      	b.n	801262a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8012624:	bf00      	nop
 8012626:	e000      	b.n	801262a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8012628:	bf00      	nop
    }

    if (ret == HAL_OK)
 801262a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801262e:	2b00      	cmp	r3, #0
 8012630:	d10b      	bne.n	801264a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8012632:	4b39      	ldr	r3, [pc, #228]	@ (8012718 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012634:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012636:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 801263a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801263e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8012642:	4a35      	ldr	r2, [pc, #212]	@ (8012718 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012644:	430b      	orrs	r3, r1
 8012646:	6553      	str	r3, [r2, #84]	@ 0x54
 8012648:	e003      	b.n	8012652 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801264a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801264e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8012652:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012656:	e9d3 2300 	ldrd	r2, r3, [r3]
 801265a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 801265e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8012662:	2300      	movs	r3, #0
 8012664:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8012668:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 801266c:	460b      	mov	r3, r1
 801266e:	4313      	orrs	r3, r2
 8012670:	d058      	beq.n	8012724 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8012672:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012676:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801267a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 801267e:	d033      	beq.n	80126e8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8012680:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8012684:	d82c      	bhi.n	80126e0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8012686:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801268a:	d02f      	beq.n	80126ec <HAL_RCCEx_PeriphCLKConfig+0xc70>
 801268c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012690:	d826      	bhi.n	80126e0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8012692:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8012696:	d02b      	beq.n	80126f0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8012698:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801269c:	d820      	bhi.n	80126e0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 801269e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80126a2:	d012      	beq.n	80126ca <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80126a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80126a8:	d81a      	bhi.n	80126e0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d022      	beq.n	80126f4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80126ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80126b2:	d115      	bne.n	80126e0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80126b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80126b8:	3308      	adds	r3, #8
 80126ba:	2100      	movs	r1, #0
 80126bc:	4618      	mov	r0, r3
 80126be:	f001 fc5f 	bl	8013f80 <RCCEx_PLL2_Config>
 80126c2:	4603      	mov	r3, r0
 80126c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80126c8:	e015      	b.n	80126f6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80126ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80126ce:	3328      	adds	r3, #40	@ 0x28
 80126d0:	2102      	movs	r1, #2
 80126d2:	4618      	mov	r0, r3
 80126d4:	f001 fd06 	bl	80140e4 <RCCEx_PLL3_Config>
 80126d8:	4603      	mov	r3, r0
 80126da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80126de:	e00a      	b.n	80126f6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80126e0:	2301      	movs	r3, #1
 80126e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80126e6:	e006      	b.n	80126f6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80126e8:	bf00      	nop
 80126ea:	e004      	b.n	80126f6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80126ec:	bf00      	nop
 80126ee:	e002      	b.n	80126f6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80126f0:	bf00      	nop
 80126f2:	e000      	b.n	80126f6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80126f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80126f6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80126fa:	2b00      	cmp	r3, #0
 80126fc:	d10e      	bne.n	801271c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80126fe:	4b06      	ldr	r3, [pc, #24]	@ (8012718 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012700:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012702:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8012706:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801270a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801270e:	4a02      	ldr	r2, [pc, #8]	@ (8012718 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012710:	430b      	orrs	r3, r1
 8012712:	6593      	str	r3, [r2, #88]	@ 0x58
 8012714:	e006      	b.n	8012724 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8012716:	bf00      	nop
 8012718:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801271c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012720:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8012724:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012728:	e9d3 2300 	ldrd	r2, r3, [r3]
 801272c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8012730:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8012734:	2300      	movs	r3, #0
 8012736:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801273a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 801273e:	460b      	mov	r3, r1
 8012740:	4313      	orrs	r3, r2
 8012742:	d055      	beq.n	80127f0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8012744:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012748:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801274c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8012750:	d033      	beq.n	80127ba <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8012752:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8012756:	d82c      	bhi.n	80127b2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8012758:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801275c:	d02f      	beq.n	80127be <HAL_RCCEx_PeriphCLKConfig+0xd42>
 801275e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8012762:	d826      	bhi.n	80127b2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8012764:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8012768:	d02b      	beq.n	80127c2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 801276a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 801276e:	d820      	bhi.n	80127b2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8012770:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8012774:	d012      	beq.n	801279c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8012776:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801277a:	d81a      	bhi.n	80127b2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 801277c:	2b00      	cmp	r3, #0
 801277e:	d022      	beq.n	80127c6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8012780:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012784:	d115      	bne.n	80127b2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8012786:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801278a:	3308      	adds	r3, #8
 801278c:	2100      	movs	r1, #0
 801278e:	4618      	mov	r0, r3
 8012790:	f001 fbf6 	bl	8013f80 <RCCEx_PLL2_Config>
 8012794:	4603      	mov	r3, r0
 8012796:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 801279a:	e015      	b.n	80127c8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801279c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80127a0:	3328      	adds	r3, #40	@ 0x28
 80127a2:	2102      	movs	r1, #2
 80127a4:	4618      	mov	r0, r3
 80127a6:	f001 fc9d 	bl	80140e4 <RCCEx_PLL3_Config>
 80127aa:	4603      	mov	r3, r0
 80127ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80127b0:	e00a      	b.n	80127c8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80127b2:	2301      	movs	r3, #1
 80127b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80127b8:	e006      	b.n	80127c8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80127ba:	bf00      	nop
 80127bc:	e004      	b.n	80127c8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80127be:	bf00      	nop
 80127c0:	e002      	b.n	80127c8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80127c2:	bf00      	nop
 80127c4:	e000      	b.n	80127c8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80127c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80127c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	d10b      	bne.n	80127e8 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80127d0:	4ba0      	ldr	r3, [pc, #640]	@ (8012a54 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80127d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80127d4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80127d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80127dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80127e0:	4a9c      	ldr	r2, [pc, #624]	@ (8012a54 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80127e2:	430b      	orrs	r3, r1
 80127e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80127e6:	e003      	b.n	80127f0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80127e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80127ec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80127f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80127f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127f8:	f002 0308 	and.w	r3, r2, #8
 80127fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8012800:	2300      	movs	r3, #0
 8012802:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8012806:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 801280a:	460b      	mov	r3, r1
 801280c:	4313      	orrs	r3, r2
 801280e:	d01e      	beq.n	801284e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8012810:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012814:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012818:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801281c:	d10c      	bne.n	8012838 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801281e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012822:	3328      	adds	r3, #40	@ 0x28
 8012824:	2102      	movs	r1, #2
 8012826:	4618      	mov	r0, r3
 8012828:	f001 fc5c 	bl	80140e4 <RCCEx_PLL3_Config>
 801282c:	4603      	mov	r3, r0
 801282e:	2b00      	cmp	r3, #0
 8012830:	d002      	beq.n	8012838 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8012832:	2301      	movs	r3, #1
 8012834:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8012838:	4b86      	ldr	r3, [pc, #536]	@ (8012a54 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801283a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801283c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8012840:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012844:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012848:	4a82      	ldr	r2, [pc, #520]	@ (8012a54 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801284a:	430b      	orrs	r3, r1
 801284c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 801284e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012856:	f002 0310 	and.w	r3, r2, #16
 801285a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801285e:	2300      	movs	r3, #0
 8012860:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8012864:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8012868:	460b      	mov	r3, r1
 801286a:	4313      	orrs	r3, r2
 801286c:	d01e      	beq.n	80128ac <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 801286e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012872:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8012876:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801287a:	d10c      	bne.n	8012896 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801287c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012880:	3328      	adds	r3, #40	@ 0x28
 8012882:	2102      	movs	r1, #2
 8012884:	4618      	mov	r0, r3
 8012886:	f001 fc2d 	bl	80140e4 <RCCEx_PLL3_Config>
 801288a:	4603      	mov	r3, r0
 801288c:	2b00      	cmp	r3, #0
 801288e:	d002      	beq.n	8012896 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8012890:	2301      	movs	r3, #1
 8012892:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8012896:	4b6f      	ldr	r3, [pc, #444]	@ (8012a54 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012898:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801289a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 801289e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80128a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80128a6:	4a6b      	ldr	r2, [pc, #428]	@ (8012a54 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80128a8:	430b      	orrs	r3, r1
 80128aa:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80128ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80128b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128b4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80128b8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80128ba:	2300      	movs	r3, #0
 80128bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80128be:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80128c2:	460b      	mov	r3, r1
 80128c4:	4313      	orrs	r3, r2
 80128c6:	d03e      	beq.n	8012946 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80128c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80128cc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80128d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80128d4:	d022      	beq.n	801291c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80128d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80128da:	d81b      	bhi.n	8012914 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 80128dc:	2b00      	cmp	r3, #0
 80128de:	d003      	beq.n	80128e8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 80128e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80128e4:	d00b      	beq.n	80128fe <HAL_RCCEx_PeriphCLKConfig+0xe82>
 80128e6:	e015      	b.n	8012914 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80128e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80128ec:	3308      	adds	r3, #8
 80128ee:	2100      	movs	r1, #0
 80128f0:	4618      	mov	r0, r3
 80128f2:	f001 fb45 	bl	8013f80 <RCCEx_PLL2_Config>
 80128f6:	4603      	mov	r3, r0
 80128f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80128fc:	e00f      	b.n	801291e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80128fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012902:	3328      	adds	r3, #40	@ 0x28
 8012904:	2102      	movs	r1, #2
 8012906:	4618      	mov	r0, r3
 8012908:	f001 fbec 	bl	80140e4 <RCCEx_PLL3_Config>
 801290c:	4603      	mov	r3, r0
 801290e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8012912:	e004      	b.n	801291e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012914:	2301      	movs	r3, #1
 8012916:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 801291a:	e000      	b.n	801291e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 801291c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801291e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012922:	2b00      	cmp	r3, #0
 8012924:	d10b      	bne.n	801293e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8012926:	4b4b      	ldr	r3, [pc, #300]	@ (8012a54 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012928:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801292a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 801292e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012932:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8012936:	4a47      	ldr	r2, [pc, #284]	@ (8012a54 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012938:	430b      	orrs	r3, r1
 801293a:	6593      	str	r3, [r2, #88]	@ 0x58
 801293c:	e003      	b.n	8012946 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801293e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012942:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8012946:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801294a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801294e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8012952:	673b      	str	r3, [r7, #112]	@ 0x70
 8012954:	2300      	movs	r3, #0
 8012956:	677b      	str	r3, [r7, #116]	@ 0x74
 8012958:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 801295c:	460b      	mov	r3, r1
 801295e:	4313      	orrs	r3, r2
 8012960:	d03b      	beq.n	80129da <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8012962:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012966:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801296a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801296e:	d01f      	beq.n	80129b0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8012970:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8012974:	d818      	bhi.n	80129a8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8012976:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801297a:	d003      	beq.n	8012984 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 801297c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8012980:	d007      	beq.n	8012992 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8012982:	e011      	b.n	80129a8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012984:	4b33      	ldr	r3, [pc, #204]	@ (8012a54 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012988:	4a32      	ldr	r2, [pc, #200]	@ (8012a54 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801298a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801298e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8012990:	e00f      	b.n	80129b2 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8012992:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012996:	3328      	adds	r3, #40	@ 0x28
 8012998:	2101      	movs	r1, #1
 801299a:	4618      	mov	r0, r3
 801299c:	f001 fba2 	bl	80140e4 <RCCEx_PLL3_Config>
 80129a0:	4603      	mov	r3, r0
 80129a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 80129a6:	e004      	b.n	80129b2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80129a8:	2301      	movs	r3, #1
 80129aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80129ae:	e000      	b.n	80129b2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 80129b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80129b2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80129b6:	2b00      	cmp	r3, #0
 80129b8:	d10b      	bne.n	80129d2 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80129ba:	4b26      	ldr	r3, [pc, #152]	@ (8012a54 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80129bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80129be:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80129c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80129c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80129ca:	4a22      	ldr	r2, [pc, #136]	@ (8012a54 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80129cc:	430b      	orrs	r3, r1
 80129ce:	6553      	str	r3, [r2, #84]	@ 0x54
 80129d0:	e003      	b.n	80129da <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80129d2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80129d6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80129da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80129de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129e2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80129e6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80129e8:	2300      	movs	r3, #0
 80129ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80129ec:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80129f0:	460b      	mov	r3, r1
 80129f2:	4313      	orrs	r3, r2
 80129f4:	d034      	beq.n	8012a60 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80129f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80129fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80129fc:	2b00      	cmp	r3, #0
 80129fe:	d003      	beq.n	8012a08 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8012a00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012a04:	d007      	beq.n	8012a16 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8012a06:	e011      	b.n	8012a2c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012a08:	4b12      	ldr	r3, [pc, #72]	@ (8012a54 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012a0c:	4a11      	ldr	r2, [pc, #68]	@ (8012a54 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012a0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012a12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8012a14:	e00e      	b.n	8012a34 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8012a16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012a1a:	3308      	adds	r3, #8
 8012a1c:	2102      	movs	r1, #2
 8012a1e:	4618      	mov	r0, r3
 8012a20:	f001 faae 	bl	8013f80 <RCCEx_PLL2_Config>
 8012a24:	4603      	mov	r3, r0
 8012a26:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8012a2a:	e003      	b.n	8012a34 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8012a2c:	2301      	movs	r3, #1
 8012a2e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012a32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012a34:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012a38:	2b00      	cmp	r3, #0
 8012a3a:	d10d      	bne.n	8012a58 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8012a3c:	4b05      	ldr	r3, [pc, #20]	@ (8012a54 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012a3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012a40:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8012a44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012a48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012a4a:	4a02      	ldr	r2, [pc, #8]	@ (8012a54 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012a4c:	430b      	orrs	r3, r1
 8012a4e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8012a50:	e006      	b.n	8012a60 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8012a52:	bf00      	nop
 8012a54:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012a58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012a5c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8012a60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a68:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8012a6c:	663b      	str	r3, [r7, #96]	@ 0x60
 8012a6e:	2300      	movs	r3, #0
 8012a70:	667b      	str	r3, [r7, #100]	@ 0x64
 8012a72:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8012a76:	460b      	mov	r3, r1
 8012a78:	4313      	orrs	r3, r2
 8012a7a:	d00c      	beq.n	8012a96 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8012a7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012a80:	3328      	adds	r3, #40	@ 0x28
 8012a82:	2102      	movs	r1, #2
 8012a84:	4618      	mov	r0, r3
 8012a86:	f001 fb2d 	bl	80140e4 <RCCEx_PLL3_Config>
 8012a8a:	4603      	mov	r3, r0
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	d002      	beq.n	8012a96 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8012a90:	2301      	movs	r3, #1
 8012a92:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8012a96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a9e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8012aa2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8012aa4:	2300      	movs	r3, #0
 8012aa6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012aa8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8012aac:	460b      	mov	r3, r1
 8012aae:	4313      	orrs	r3, r2
 8012ab0:	d036      	beq.n	8012b20 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8012ab2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012ab6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8012ab8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8012abc:	d018      	beq.n	8012af0 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8012abe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8012ac2:	d811      	bhi.n	8012ae8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8012ac4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012ac8:	d014      	beq.n	8012af4 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8012aca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012ace:	d80b      	bhi.n	8012ae8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	d011      	beq.n	8012af8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8012ad4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012ad8:	d106      	bne.n	8012ae8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012ada:	4bb7      	ldr	r3, [pc, #732]	@ (8012db8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012adc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012ade:	4ab6      	ldr	r2, [pc, #728]	@ (8012db8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012ae0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012ae4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8012ae6:	e008      	b.n	8012afa <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012ae8:	2301      	movs	r3, #1
 8012aea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012aee:	e004      	b.n	8012afa <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8012af0:	bf00      	nop
 8012af2:	e002      	b.n	8012afa <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8012af4:	bf00      	nop
 8012af6:	e000      	b.n	8012afa <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8012af8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012afa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012afe:	2b00      	cmp	r3, #0
 8012b00:	d10a      	bne.n	8012b18 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8012b02:	4bad      	ldr	r3, [pc, #692]	@ (8012db8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012b04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012b06:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8012b0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012b0e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8012b10:	4aa9      	ldr	r2, [pc, #676]	@ (8012db8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012b12:	430b      	orrs	r3, r1
 8012b14:	6553      	str	r3, [r2, #84]	@ 0x54
 8012b16:	e003      	b.n	8012b20 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012b18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012b1c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8012b20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b28:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8012b2c:	653b      	str	r3, [r7, #80]	@ 0x50
 8012b2e:	2300      	movs	r3, #0
 8012b30:	657b      	str	r3, [r7, #84]	@ 0x54
 8012b32:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8012b36:	460b      	mov	r3, r1
 8012b38:	4313      	orrs	r3, r2
 8012b3a:	d009      	beq.n	8012b50 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8012b3c:	4b9e      	ldr	r3, [pc, #632]	@ (8012db8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012b3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012b40:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8012b44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012b48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012b4a:	4a9b      	ldr	r2, [pc, #620]	@ (8012db8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012b4c:	430b      	orrs	r3, r1
 8012b4e:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8012b50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b58:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8012b5c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012b5e:	2300      	movs	r3, #0
 8012b60:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012b62:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8012b66:	460b      	mov	r3, r1
 8012b68:	4313      	orrs	r3, r2
 8012b6a:	d009      	beq.n	8012b80 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8012b6c:	4b92      	ldr	r3, [pc, #584]	@ (8012db8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012b6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012b70:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8012b74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012b78:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012b7a:	4a8f      	ldr	r2, [pc, #572]	@ (8012db8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012b7c:	430b      	orrs	r3, r1
 8012b7e:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8012b80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b88:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8012b8c:	643b      	str	r3, [r7, #64]	@ 0x40
 8012b8e:	2300      	movs	r3, #0
 8012b90:	647b      	str	r3, [r7, #68]	@ 0x44
 8012b92:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8012b96:	460b      	mov	r3, r1
 8012b98:	4313      	orrs	r3, r2
 8012b9a:	d00e      	beq.n	8012bba <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8012b9c:	4b86      	ldr	r3, [pc, #536]	@ (8012db8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012b9e:	691b      	ldr	r3, [r3, #16]
 8012ba0:	4a85      	ldr	r2, [pc, #532]	@ (8012db8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012ba2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8012ba6:	6113      	str	r3, [r2, #16]
 8012ba8:	4b83      	ldr	r3, [pc, #524]	@ (8012db8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012baa:	6919      	ldr	r1, [r3, #16]
 8012bac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012bb0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8012bb4:	4a80      	ldr	r2, [pc, #512]	@ (8012db8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012bb6:	430b      	orrs	r3, r1
 8012bb8:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8012bba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bc2:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8012bc6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012bc8:	2300      	movs	r3, #0
 8012bca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012bcc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8012bd0:	460b      	mov	r3, r1
 8012bd2:	4313      	orrs	r3, r2
 8012bd4:	d009      	beq.n	8012bea <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8012bd6:	4b78      	ldr	r3, [pc, #480]	@ (8012db8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012bd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012bda:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8012bde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012be2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012be4:	4a74      	ldr	r2, [pc, #464]	@ (8012db8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012be6:	430b      	orrs	r3, r1
 8012be8:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8012bea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bf2:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8012bf6:	633b      	str	r3, [r7, #48]	@ 0x30
 8012bf8:	2300      	movs	r3, #0
 8012bfa:	637b      	str	r3, [r7, #52]	@ 0x34
 8012bfc:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8012c00:	460b      	mov	r3, r1
 8012c02:	4313      	orrs	r3, r2
 8012c04:	d00a      	beq.n	8012c1c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8012c06:	4b6c      	ldr	r3, [pc, #432]	@ (8012db8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012c08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012c0a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8012c0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8012c16:	4a68      	ldr	r2, [pc, #416]	@ (8012db8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012c18:	430b      	orrs	r3, r1
 8012c1a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8012c1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c24:	2100      	movs	r1, #0
 8012c26:	62b9      	str	r1, [r7, #40]	@ 0x28
 8012c28:	f003 0301 	and.w	r3, r3, #1
 8012c2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012c2e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8012c32:	460b      	mov	r3, r1
 8012c34:	4313      	orrs	r3, r2
 8012c36:	d011      	beq.n	8012c5c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8012c38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012c3c:	3308      	adds	r3, #8
 8012c3e:	2100      	movs	r1, #0
 8012c40:	4618      	mov	r0, r3
 8012c42:	f001 f99d 	bl	8013f80 <RCCEx_PLL2_Config>
 8012c46:	4603      	mov	r3, r0
 8012c48:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8012c4c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	d003      	beq.n	8012c5c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012c54:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012c58:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8012c5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c64:	2100      	movs	r1, #0
 8012c66:	6239      	str	r1, [r7, #32]
 8012c68:	f003 0302 	and.w	r3, r3, #2
 8012c6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8012c6e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8012c72:	460b      	mov	r3, r1
 8012c74:	4313      	orrs	r3, r2
 8012c76:	d011      	beq.n	8012c9c <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8012c78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012c7c:	3308      	adds	r3, #8
 8012c7e:	2101      	movs	r1, #1
 8012c80:	4618      	mov	r0, r3
 8012c82:	f001 f97d 	bl	8013f80 <RCCEx_PLL2_Config>
 8012c86:	4603      	mov	r3, r0
 8012c88:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8012c8c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012c90:	2b00      	cmp	r3, #0
 8012c92:	d003      	beq.n	8012c9c <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012c94:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012c98:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8012c9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ca4:	2100      	movs	r1, #0
 8012ca6:	61b9      	str	r1, [r7, #24]
 8012ca8:	f003 0304 	and.w	r3, r3, #4
 8012cac:	61fb      	str	r3, [r7, #28]
 8012cae:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8012cb2:	460b      	mov	r3, r1
 8012cb4:	4313      	orrs	r3, r2
 8012cb6:	d011      	beq.n	8012cdc <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8012cb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012cbc:	3308      	adds	r3, #8
 8012cbe:	2102      	movs	r1, #2
 8012cc0:	4618      	mov	r0, r3
 8012cc2:	f001 f95d 	bl	8013f80 <RCCEx_PLL2_Config>
 8012cc6:	4603      	mov	r3, r0
 8012cc8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8012ccc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012cd0:	2b00      	cmp	r3, #0
 8012cd2:	d003      	beq.n	8012cdc <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012cd4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012cd8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8012cdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ce4:	2100      	movs	r1, #0
 8012ce6:	6139      	str	r1, [r7, #16]
 8012ce8:	f003 0308 	and.w	r3, r3, #8
 8012cec:	617b      	str	r3, [r7, #20]
 8012cee:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8012cf2:	460b      	mov	r3, r1
 8012cf4:	4313      	orrs	r3, r2
 8012cf6:	d011      	beq.n	8012d1c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8012cf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012cfc:	3328      	adds	r3, #40	@ 0x28
 8012cfe:	2100      	movs	r1, #0
 8012d00:	4618      	mov	r0, r3
 8012d02:	f001 f9ef 	bl	80140e4 <RCCEx_PLL3_Config>
 8012d06:	4603      	mov	r3, r0
 8012d08:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8012d0c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	d003      	beq.n	8012d1c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012d14:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012d18:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8012d1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d24:	2100      	movs	r1, #0
 8012d26:	60b9      	str	r1, [r7, #8]
 8012d28:	f003 0310 	and.w	r3, r3, #16
 8012d2c:	60fb      	str	r3, [r7, #12]
 8012d2e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8012d32:	460b      	mov	r3, r1
 8012d34:	4313      	orrs	r3, r2
 8012d36:	d011      	beq.n	8012d5c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8012d38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012d3c:	3328      	adds	r3, #40	@ 0x28
 8012d3e:	2101      	movs	r1, #1
 8012d40:	4618      	mov	r0, r3
 8012d42:	f001 f9cf 	bl	80140e4 <RCCEx_PLL3_Config>
 8012d46:	4603      	mov	r3, r0
 8012d48:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8012d4c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012d50:	2b00      	cmp	r3, #0
 8012d52:	d003      	beq.n	8012d5c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012d54:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012d58:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8012d5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d64:	2100      	movs	r1, #0
 8012d66:	6039      	str	r1, [r7, #0]
 8012d68:	f003 0320 	and.w	r3, r3, #32
 8012d6c:	607b      	str	r3, [r7, #4]
 8012d6e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8012d72:	460b      	mov	r3, r1
 8012d74:	4313      	orrs	r3, r2
 8012d76:	d011      	beq.n	8012d9c <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8012d78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012d7c:	3328      	adds	r3, #40	@ 0x28
 8012d7e:	2102      	movs	r1, #2
 8012d80:	4618      	mov	r0, r3
 8012d82:	f001 f9af 	bl	80140e4 <RCCEx_PLL3_Config>
 8012d86:	4603      	mov	r3, r0
 8012d88:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8012d8c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012d90:	2b00      	cmp	r3, #0
 8012d92:	d003      	beq.n	8012d9c <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012d94:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012d98:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8012d9c:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8012da0:	2b00      	cmp	r3, #0
 8012da2:	d101      	bne.n	8012da8 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8012da4:	2300      	movs	r3, #0
 8012da6:	e000      	b.n	8012daa <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8012da8:	2301      	movs	r3, #1
}
 8012daa:	4618      	mov	r0, r3
 8012dac:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8012db0:	46bd      	mov	sp, r7
 8012db2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8012db6:	bf00      	nop
 8012db8:	58024400 	.word	0x58024400

08012dbc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8012dbc:	b580      	push	{r7, lr}
 8012dbe:	b090      	sub	sp, #64	@ 0x40
 8012dc0:	af00      	add	r7, sp, #0
 8012dc2:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8012dc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012dca:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8012dce:	430b      	orrs	r3, r1
 8012dd0:	f040 8094 	bne.w	8012efc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8012dd4:	4b9b      	ldr	r3, [pc, #620]	@ (8013044 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8012dd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012dd8:	f003 0307 	and.w	r3, r3, #7
 8012ddc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8012dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012de0:	2b04      	cmp	r3, #4
 8012de2:	f200 8087 	bhi.w	8012ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8012de6:	a201      	add	r2, pc, #4	@ (adr r2, 8012dec <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8012de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012dec:	08012e01 	.word	0x08012e01
 8012df0:	08012e29 	.word	0x08012e29
 8012df4:	08012e51 	.word	0x08012e51
 8012df8:	08012eed 	.word	0x08012eed
 8012dfc:	08012e79 	.word	0x08012e79
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8012e00:	4b90      	ldr	r3, [pc, #576]	@ (8013044 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8012e02:	681b      	ldr	r3, [r3, #0]
 8012e04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8012e08:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8012e0c:	d108      	bne.n	8012e20 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8012e0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8012e12:	4618      	mov	r0, r3
 8012e14:	f000 ff62 	bl	8013cdc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8012e18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012e1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012e1c:	f000 bc93 	b.w	8013746 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012e20:	2300      	movs	r3, #0
 8012e22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012e24:	f000 bc8f 	b.w	8013746 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8012e28:	4b86      	ldr	r3, [pc, #536]	@ (8013044 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8012e2a:	681b      	ldr	r3, [r3, #0]
 8012e2c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8012e30:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8012e34:	d108      	bne.n	8012e48 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012e36:	f107 0318 	add.w	r3, r7, #24
 8012e3a:	4618      	mov	r0, r3
 8012e3c:	f000 fca6 	bl	801378c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8012e40:	69bb      	ldr	r3, [r7, #24]
 8012e42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012e44:	f000 bc7f 	b.w	8013746 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012e48:	2300      	movs	r3, #0
 8012e4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012e4c:	f000 bc7b 	b.w	8013746 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8012e50:	4b7c      	ldr	r3, [pc, #496]	@ (8013044 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8012e52:	681b      	ldr	r3, [r3, #0]
 8012e54:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8012e58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012e5c:	d108      	bne.n	8012e70 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012e5e:	f107 030c 	add.w	r3, r7, #12
 8012e62:	4618      	mov	r0, r3
 8012e64:	f000 fde6 	bl	8013a34 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8012e68:	68fb      	ldr	r3, [r7, #12]
 8012e6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012e6c:	f000 bc6b 	b.w	8013746 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012e70:	2300      	movs	r3, #0
 8012e72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012e74:	f000 bc67 	b.w	8013746 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8012e78:	4b72      	ldr	r3, [pc, #456]	@ (8013044 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8012e7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012e7c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8012e80:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8012e82:	4b70      	ldr	r3, [pc, #448]	@ (8013044 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8012e84:	681b      	ldr	r3, [r3, #0]
 8012e86:	f003 0304 	and.w	r3, r3, #4
 8012e8a:	2b04      	cmp	r3, #4
 8012e8c:	d10c      	bne.n	8012ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8012e8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012e90:	2b00      	cmp	r3, #0
 8012e92:	d109      	bne.n	8012ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8012e94:	4b6b      	ldr	r3, [pc, #428]	@ (8013044 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8012e96:	681b      	ldr	r3, [r3, #0]
 8012e98:	08db      	lsrs	r3, r3, #3
 8012e9a:	f003 0303 	and.w	r3, r3, #3
 8012e9e:	4a6a      	ldr	r2, [pc, #424]	@ (8013048 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8012ea0:	fa22 f303 	lsr.w	r3, r2, r3
 8012ea4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012ea6:	e01f      	b.n	8012ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8012ea8:	4b66      	ldr	r3, [pc, #408]	@ (8013044 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8012eaa:	681b      	ldr	r3, [r3, #0]
 8012eac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012eb0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012eb4:	d106      	bne.n	8012ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8012eb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012eb8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012ebc:	d102      	bne.n	8012ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8012ebe:	4b63      	ldr	r3, [pc, #396]	@ (801304c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8012ec0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012ec2:	e011      	b.n	8012ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8012ec4:	4b5f      	ldr	r3, [pc, #380]	@ (8013044 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8012ec6:	681b      	ldr	r3, [r3, #0]
 8012ec8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8012ecc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012ed0:	d106      	bne.n	8012ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8012ed2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012ed4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012ed8:	d102      	bne.n	8012ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8012eda:	4b5d      	ldr	r3, [pc, #372]	@ (8013050 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8012edc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012ede:	e003      	b.n	8012ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8012ee0:	2300      	movs	r3, #0
 8012ee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8012ee4:	f000 bc2f 	b.w	8013746 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8012ee8:	f000 bc2d 	b.w	8013746 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8012eec:	4b59      	ldr	r3, [pc, #356]	@ (8013054 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8012eee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012ef0:	f000 bc29 	b.w	8013746 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8012ef4:	2300      	movs	r3, #0
 8012ef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012ef8:	f000 bc25 	b.w	8013746 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8012efc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012f00:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8012f04:	430b      	orrs	r3, r1
 8012f06:	f040 80a7 	bne.w	8013058 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8012f0a:	4b4e      	ldr	r3, [pc, #312]	@ (8013044 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8012f0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012f0e:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8012f12:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8012f14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f16:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8012f1a:	d054      	beq.n	8012fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8012f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f1e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8012f22:	f200 808b 	bhi.w	801303c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8012f26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f28:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8012f2c:	f000 8083 	beq.w	8013036 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8012f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f32:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8012f36:	f200 8081 	bhi.w	801303c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8012f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f3c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8012f40:	d02f      	beq.n	8012fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8012f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f44:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8012f48:	d878      	bhi.n	801303c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8012f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	d004      	beq.n	8012f5a <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 8012f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f52:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8012f56:	d012      	beq.n	8012f7e <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 8012f58:	e070      	b.n	801303c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8012f5a:	4b3a      	ldr	r3, [pc, #232]	@ (8013044 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8012f5c:	681b      	ldr	r3, [r3, #0]
 8012f5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8012f62:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8012f66:	d107      	bne.n	8012f78 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8012f68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8012f6c:	4618      	mov	r0, r3
 8012f6e:	f000 feb5 	bl	8013cdc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8012f72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012f74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012f76:	e3e6      	b.n	8013746 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012f78:	2300      	movs	r3, #0
 8012f7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012f7c:	e3e3      	b.n	8013746 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8012f7e:	4b31      	ldr	r3, [pc, #196]	@ (8013044 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8012f80:	681b      	ldr	r3, [r3, #0]
 8012f82:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8012f86:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8012f8a:	d107      	bne.n	8012f9c <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012f8c:	f107 0318 	add.w	r3, r7, #24
 8012f90:	4618      	mov	r0, r3
 8012f92:	f000 fbfb 	bl	801378c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8012f96:	69bb      	ldr	r3, [r7, #24]
 8012f98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012f9a:	e3d4      	b.n	8013746 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012f9c:	2300      	movs	r3, #0
 8012f9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012fa0:	e3d1      	b.n	8013746 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8012fa2:	4b28      	ldr	r3, [pc, #160]	@ (8013044 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8012fa4:	681b      	ldr	r3, [r3, #0]
 8012fa6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8012faa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012fae:	d107      	bne.n	8012fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012fb0:	f107 030c 	add.w	r3, r7, #12
 8012fb4:	4618      	mov	r0, r3
 8012fb6:	f000 fd3d 	bl	8013a34 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8012fba:	68fb      	ldr	r3, [r7, #12]
 8012fbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012fbe:	e3c2      	b.n	8013746 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012fc0:	2300      	movs	r3, #0
 8012fc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012fc4:	e3bf      	b.n	8013746 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8012fc6:	4b1f      	ldr	r3, [pc, #124]	@ (8013044 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8012fc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012fca:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8012fce:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8012fd0:	4b1c      	ldr	r3, [pc, #112]	@ (8013044 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8012fd2:	681b      	ldr	r3, [r3, #0]
 8012fd4:	f003 0304 	and.w	r3, r3, #4
 8012fd8:	2b04      	cmp	r3, #4
 8012fda:	d10c      	bne.n	8012ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8012fdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012fde:	2b00      	cmp	r3, #0
 8012fe0:	d109      	bne.n	8012ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8012fe2:	4b18      	ldr	r3, [pc, #96]	@ (8013044 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8012fe4:	681b      	ldr	r3, [r3, #0]
 8012fe6:	08db      	lsrs	r3, r3, #3
 8012fe8:	f003 0303 	and.w	r3, r3, #3
 8012fec:	4a16      	ldr	r2, [pc, #88]	@ (8013048 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8012fee:	fa22 f303 	lsr.w	r3, r2, r3
 8012ff2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012ff4:	e01e      	b.n	8013034 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8012ff6:	4b13      	ldr	r3, [pc, #76]	@ (8013044 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8012ff8:	681b      	ldr	r3, [r3, #0]
 8012ffa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012ffe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013002:	d106      	bne.n	8013012 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8013004:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013006:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801300a:	d102      	bne.n	8013012 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801300c:	4b0f      	ldr	r3, [pc, #60]	@ (801304c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 801300e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013010:	e010      	b.n	8013034 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8013012:	4b0c      	ldr	r3, [pc, #48]	@ (8013044 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8013014:	681b      	ldr	r3, [r3, #0]
 8013016:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801301a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801301e:	d106      	bne.n	801302e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8013020:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013022:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013026:	d102      	bne.n	801302e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8013028:	4b09      	ldr	r3, [pc, #36]	@ (8013050 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801302a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801302c:	e002      	b.n	8013034 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801302e:	2300      	movs	r3, #0
 8013030:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8013032:	e388      	b.n	8013746 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013034:	e387      	b.n	8013746 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8013036:	4b07      	ldr	r3, [pc, #28]	@ (8013054 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8013038:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801303a:	e384      	b.n	8013746 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 801303c:	2300      	movs	r3, #0
 801303e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013040:	e381      	b.n	8013746 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013042:	bf00      	nop
 8013044:	58024400 	.word	0x58024400
 8013048:	03d09000 	.word	0x03d09000
 801304c:	003d0900 	.word	0x003d0900
 8013050:	016e3600 	.word	0x016e3600
 8013054:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8013058:	e9d7 2300 	ldrd	r2, r3, [r7]
 801305c:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8013060:	430b      	orrs	r3, r1
 8013062:	f040 809c 	bne.w	801319e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8013066:	4b9e      	ldr	r3, [pc, #632]	@ (80132e0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013068:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801306a:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 801306e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8013070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013072:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8013076:	d054      	beq.n	8013122 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8013078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801307a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801307e:	f200 808b 	bhi.w	8013198 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8013082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013084:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8013088:	f000 8083 	beq.w	8013192 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 801308c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801308e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8013092:	f200 8081 	bhi.w	8013198 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8013096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013098:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801309c:	d02f      	beq.n	80130fe <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 801309e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80130a0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80130a4:	d878      	bhi.n	8013198 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80130a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80130a8:	2b00      	cmp	r3, #0
 80130aa:	d004      	beq.n	80130b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 80130ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80130ae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80130b2:	d012      	beq.n	80130da <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 80130b4:	e070      	b.n	8013198 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80130b6:	4b8a      	ldr	r3, [pc, #552]	@ (80132e0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80130b8:	681b      	ldr	r3, [r3, #0]
 80130ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80130be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80130c2:	d107      	bne.n	80130d4 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80130c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80130c8:	4618      	mov	r0, r3
 80130ca:	f000 fe07 	bl	8013cdc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80130ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80130d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80130d2:	e338      	b.n	8013746 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80130d4:	2300      	movs	r3, #0
 80130d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80130d8:	e335      	b.n	8013746 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80130da:	4b81      	ldr	r3, [pc, #516]	@ (80132e0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80130dc:	681b      	ldr	r3, [r3, #0]
 80130de:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80130e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80130e6:	d107      	bne.n	80130f8 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80130e8:	f107 0318 	add.w	r3, r7, #24
 80130ec:	4618      	mov	r0, r3
 80130ee:	f000 fb4d 	bl	801378c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80130f2:	69bb      	ldr	r3, [r7, #24]
 80130f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80130f6:	e326      	b.n	8013746 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80130f8:	2300      	movs	r3, #0
 80130fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80130fc:	e323      	b.n	8013746 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80130fe:	4b78      	ldr	r3, [pc, #480]	@ (80132e0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013100:	681b      	ldr	r3, [r3, #0]
 8013102:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8013106:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801310a:	d107      	bne.n	801311c <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801310c:	f107 030c 	add.w	r3, r7, #12
 8013110:	4618      	mov	r0, r3
 8013112:	f000 fc8f 	bl	8013a34 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8013116:	68fb      	ldr	r3, [r7, #12]
 8013118:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801311a:	e314      	b.n	8013746 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801311c:	2300      	movs	r3, #0
 801311e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013120:	e311      	b.n	8013746 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8013122:	4b6f      	ldr	r3, [pc, #444]	@ (80132e0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013124:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013126:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 801312a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801312c:	4b6c      	ldr	r3, [pc, #432]	@ (80132e0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801312e:	681b      	ldr	r3, [r3, #0]
 8013130:	f003 0304 	and.w	r3, r3, #4
 8013134:	2b04      	cmp	r3, #4
 8013136:	d10c      	bne.n	8013152 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8013138:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801313a:	2b00      	cmp	r3, #0
 801313c:	d109      	bne.n	8013152 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801313e:	4b68      	ldr	r3, [pc, #416]	@ (80132e0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013140:	681b      	ldr	r3, [r3, #0]
 8013142:	08db      	lsrs	r3, r3, #3
 8013144:	f003 0303 	and.w	r3, r3, #3
 8013148:	4a66      	ldr	r2, [pc, #408]	@ (80132e4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 801314a:	fa22 f303 	lsr.w	r3, r2, r3
 801314e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013150:	e01e      	b.n	8013190 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8013152:	4b63      	ldr	r3, [pc, #396]	@ (80132e0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013154:	681b      	ldr	r3, [r3, #0]
 8013156:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801315a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801315e:	d106      	bne.n	801316e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8013160:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013162:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013166:	d102      	bne.n	801316e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8013168:	4b5f      	ldr	r3, [pc, #380]	@ (80132e8 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 801316a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801316c:	e010      	b.n	8013190 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801316e:	4b5c      	ldr	r3, [pc, #368]	@ (80132e0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013170:	681b      	ldr	r3, [r3, #0]
 8013172:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013176:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801317a:	d106      	bne.n	801318a <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 801317c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801317e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013182:	d102      	bne.n	801318a <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8013184:	4b59      	ldr	r3, [pc, #356]	@ (80132ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8013186:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013188:	e002      	b.n	8013190 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801318a:	2300      	movs	r3, #0
 801318c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 801318e:	e2da      	b.n	8013746 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013190:	e2d9      	b.n	8013746 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8013192:	4b57      	ldr	r3, [pc, #348]	@ (80132f0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8013194:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013196:	e2d6      	b.n	8013746 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8013198:	2300      	movs	r3, #0
 801319a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801319c:	e2d3      	b.n	8013746 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 801319e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80131a2:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80131a6:	430b      	orrs	r3, r1
 80131a8:	f040 80a7 	bne.w	80132fa <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80131ac:	4b4c      	ldr	r3, [pc, #304]	@ (80132e0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80131ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80131b0:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80131b4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80131b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80131b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80131bc:	d055      	beq.n	801326a <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 80131be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80131c0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80131c4:	f200 8096 	bhi.w	80132f4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80131c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80131ca:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80131ce:	f000 8084 	beq.w	80132da <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 80131d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80131d4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80131d8:	f200 808c 	bhi.w	80132f4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80131dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80131de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80131e2:	d030      	beq.n	8013246 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 80131e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80131e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80131ea:	f200 8083 	bhi.w	80132f4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80131ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80131f0:	2b00      	cmp	r3, #0
 80131f2:	d004      	beq.n	80131fe <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 80131f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80131f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80131fa:	d012      	beq.n	8013222 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 80131fc:	e07a      	b.n	80132f4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80131fe:	4b38      	ldr	r3, [pc, #224]	@ (80132e0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013200:	681b      	ldr	r3, [r3, #0]
 8013202:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8013206:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801320a:	d107      	bne.n	801321c <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801320c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013210:	4618      	mov	r0, r3
 8013212:	f000 fd63 	bl	8013cdc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8013216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013218:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801321a:	e294      	b.n	8013746 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801321c:	2300      	movs	r3, #0
 801321e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013220:	e291      	b.n	8013746 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8013222:	4b2f      	ldr	r3, [pc, #188]	@ (80132e0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013224:	681b      	ldr	r3, [r3, #0]
 8013226:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801322a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801322e:	d107      	bne.n	8013240 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013230:	f107 0318 	add.w	r3, r7, #24
 8013234:	4618      	mov	r0, r3
 8013236:	f000 faa9 	bl	801378c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801323a:	69bb      	ldr	r3, [r7, #24]
 801323c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801323e:	e282      	b.n	8013746 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013240:	2300      	movs	r3, #0
 8013242:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013244:	e27f      	b.n	8013746 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8013246:	4b26      	ldr	r3, [pc, #152]	@ (80132e0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013248:	681b      	ldr	r3, [r3, #0]
 801324a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801324e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013252:	d107      	bne.n	8013264 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013254:	f107 030c 	add.w	r3, r7, #12
 8013258:	4618      	mov	r0, r3
 801325a:	f000 fbeb 	bl	8013a34 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801325e:	68fb      	ldr	r3, [r7, #12]
 8013260:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013262:	e270      	b.n	8013746 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013264:	2300      	movs	r3, #0
 8013266:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013268:	e26d      	b.n	8013746 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801326a:	4b1d      	ldr	r3, [pc, #116]	@ (80132e0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801326c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801326e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8013272:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8013274:	4b1a      	ldr	r3, [pc, #104]	@ (80132e0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013276:	681b      	ldr	r3, [r3, #0]
 8013278:	f003 0304 	and.w	r3, r3, #4
 801327c:	2b04      	cmp	r3, #4
 801327e:	d10c      	bne.n	801329a <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8013280:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013282:	2b00      	cmp	r3, #0
 8013284:	d109      	bne.n	801329a <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8013286:	4b16      	ldr	r3, [pc, #88]	@ (80132e0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013288:	681b      	ldr	r3, [r3, #0]
 801328a:	08db      	lsrs	r3, r3, #3
 801328c:	f003 0303 	and.w	r3, r3, #3
 8013290:	4a14      	ldr	r2, [pc, #80]	@ (80132e4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8013292:	fa22 f303 	lsr.w	r3, r2, r3
 8013296:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013298:	e01e      	b.n	80132d8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801329a:	4b11      	ldr	r3, [pc, #68]	@ (80132e0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801329c:	681b      	ldr	r3, [r3, #0]
 801329e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80132a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80132a6:	d106      	bne.n	80132b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 80132a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80132aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80132ae:	d102      	bne.n	80132b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80132b0:	4b0d      	ldr	r3, [pc, #52]	@ (80132e8 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 80132b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80132b4:	e010      	b.n	80132d8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80132b6:	4b0a      	ldr	r3, [pc, #40]	@ (80132e0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80132b8:	681b      	ldr	r3, [r3, #0]
 80132ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80132be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80132c2:	d106      	bne.n	80132d2 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 80132c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80132c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80132ca:	d102      	bne.n	80132d2 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80132cc:	4b07      	ldr	r3, [pc, #28]	@ (80132ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80132ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80132d0:	e002      	b.n	80132d8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80132d2:	2300      	movs	r3, #0
 80132d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80132d6:	e236      	b.n	8013746 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80132d8:	e235      	b.n	8013746 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80132da:	4b05      	ldr	r3, [pc, #20]	@ (80132f0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80132dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80132de:	e232      	b.n	8013746 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80132e0:	58024400 	.word	0x58024400
 80132e4:	03d09000 	.word	0x03d09000
 80132e8:	003d0900 	.word	0x003d0900
 80132ec:	016e3600 	.word	0x016e3600
 80132f0:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 80132f4:	2300      	movs	r3, #0
 80132f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80132f8:	e225      	b.n	8013746 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80132fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80132fe:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8013302:	430b      	orrs	r3, r1
 8013304:	f040 8085 	bne.w	8013412 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8013308:	4b9c      	ldr	r3, [pc, #624]	@ (801357c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801330a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801330c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8013310:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8013312:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013314:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8013318:	d06b      	beq.n	80133f2 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 801331a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801331c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8013320:	d874      	bhi.n	801340c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8013322:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013324:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8013328:	d056      	beq.n	80133d8 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 801332a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801332c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8013330:	d86c      	bhi.n	801340c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8013332:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013334:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8013338:	d03b      	beq.n	80133b2 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 801333a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801333c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8013340:	d864      	bhi.n	801340c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8013342:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013344:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013348:	d021      	beq.n	801338e <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 801334a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801334c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013350:	d85c      	bhi.n	801340c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8013352:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013354:	2b00      	cmp	r3, #0
 8013356:	d004      	beq.n	8013362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 8013358:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801335a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801335e:	d004      	beq.n	801336a <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 8013360:	e054      	b.n	801340c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8013362:	f7fe fb5f 	bl	8011a24 <HAL_RCC_GetPCLK1Freq>
 8013366:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8013368:	e1ed      	b.n	8013746 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801336a:	4b84      	ldr	r3, [pc, #528]	@ (801357c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801336c:	681b      	ldr	r3, [r3, #0]
 801336e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013372:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8013376:	d107      	bne.n	8013388 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013378:	f107 0318 	add.w	r3, r7, #24
 801337c:	4618      	mov	r0, r3
 801337e:	f000 fa05 	bl	801378c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8013382:	69fb      	ldr	r3, [r7, #28]
 8013384:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013386:	e1de      	b.n	8013746 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013388:	2300      	movs	r3, #0
 801338a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801338c:	e1db      	b.n	8013746 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801338e:	4b7b      	ldr	r3, [pc, #492]	@ (801357c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013390:	681b      	ldr	r3, [r3, #0]
 8013392:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8013396:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801339a:	d107      	bne.n	80133ac <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801339c:	f107 030c 	add.w	r3, r7, #12
 80133a0:	4618      	mov	r0, r3
 80133a2:	f000 fb47 	bl	8013a34 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80133a6:	693b      	ldr	r3, [r7, #16]
 80133a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80133aa:	e1cc      	b.n	8013746 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80133ac:	2300      	movs	r3, #0
 80133ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80133b0:	e1c9      	b.n	8013746 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80133b2:	4b72      	ldr	r3, [pc, #456]	@ (801357c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80133b4:	681b      	ldr	r3, [r3, #0]
 80133b6:	f003 0304 	and.w	r3, r3, #4
 80133ba:	2b04      	cmp	r3, #4
 80133bc:	d109      	bne.n	80133d2 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80133be:	4b6f      	ldr	r3, [pc, #444]	@ (801357c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80133c0:	681b      	ldr	r3, [r3, #0]
 80133c2:	08db      	lsrs	r3, r3, #3
 80133c4:	f003 0303 	and.w	r3, r3, #3
 80133c8:	4a6d      	ldr	r2, [pc, #436]	@ (8013580 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 80133ca:	fa22 f303 	lsr.w	r3, r2, r3
 80133ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80133d0:	e1b9      	b.n	8013746 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80133d2:	2300      	movs	r3, #0
 80133d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80133d6:	e1b6      	b.n	8013746 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80133d8:	4b68      	ldr	r3, [pc, #416]	@ (801357c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80133da:	681b      	ldr	r3, [r3, #0]
 80133dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80133e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80133e4:	d102      	bne.n	80133ec <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 80133e6:	4b67      	ldr	r3, [pc, #412]	@ (8013584 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 80133e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80133ea:	e1ac      	b.n	8013746 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80133ec:	2300      	movs	r3, #0
 80133ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80133f0:	e1a9      	b.n	8013746 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80133f2:	4b62      	ldr	r3, [pc, #392]	@ (801357c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80133f4:	681b      	ldr	r3, [r3, #0]
 80133f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80133fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80133fe:	d102      	bne.n	8013406 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 8013400:	4b61      	ldr	r3, [pc, #388]	@ (8013588 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8013402:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013404:	e19f      	b.n	8013746 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013406:	2300      	movs	r3, #0
 8013408:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801340a:	e19c      	b.n	8013746 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 801340c:	2300      	movs	r3, #0
 801340e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013410:	e199      	b.n	8013746 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8013412:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013416:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 801341a:	430b      	orrs	r3, r1
 801341c:	d173      	bne.n	8013506 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 801341e:	4b57      	ldr	r3, [pc, #348]	@ (801357c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013420:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013422:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8013426:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8013428:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801342a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801342e:	d02f      	beq.n	8013490 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 8013430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013432:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013436:	d863      	bhi.n	8013500 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8013438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801343a:	2b00      	cmp	r3, #0
 801343c:	d004      	beq.n	8013448 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 801343e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013440:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013444:	d012      	beq.n	801346c <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 8013446:	e05b      	b.n	8013500 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8013448:	4b4c      	ldr	r3, [pc, #304]	@ (801357c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801344a:	681b      	ldr	r3, [r3, #0]
 801344c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013450:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8013454:	d107      	bne.n	8013466 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013456:	f107 0318 	add.w	r3, r7, #24
 801345a:	4618      	mov	r0, r3
 801345c:	f000 f996 	bl	801378c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8013460:	69bb      	ldr	r3, [r7, #24]
 8013462:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013464:	e16f      	b.n	8013746 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013466:	2300      	movs	r3, #0
 8013468:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801346a:	e16c      	b.n	8013746 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801346c:	4b43      	ldr	r3, [pc, #268]	@ (801357c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801346e:	681b      	ldr	r3, [r3, #0]
 8013470:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8013474:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013478:	d107      	bne.n	801348a <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801347a:	f107 030c 	add.w	r3, r7, #12
 801347e:	4618      	mov	r0, r3
 8013480:	f000 fad8 	bl	8013a34 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8013484:	697b      	ldr	r3, [r7, #20]
 8013486:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013488:	e15d      	b.n	8013746 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801348a:	2300      	movs	r3, #0
 801348c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801348e:	e15a      	b.n	8013746 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8013490:	4b3a      	ldr	r3, [pc, #232]	@ (801357c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013492:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013494:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8013498:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801349a:	4b38      	ldr	r3, [pc, #224]	@ (801357c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801349c:	681b      	ldr	r3, [r3, #0]
 801349e:	f003 0304 	and.w	r3, r3, #4
 80134a2:	2b04      	cmp	r3, #4
 80134a4:	d10c      	bne.n	80134c0 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 80134a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80134a8:	2b00      	cmp	r3, #0
 80134aa:	d109      	bne.n	80134c0 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80134ac:	4b33      	ldr	r3, [pc, #204]	@ (801357c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80134ae:	681b      	ldr	r3, [r3, #0]
 80134b0:	08db      	lsrs	r3, r3, #3
 80134b2:	f003 0303 	and.w	r3, r3, #3
 80134b6:	4a32      	ldr	r2, [pc, #200]	@ (8013580 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 80134b8:	fa22 f303 	lsr.w	r3, r2, r3
 80134bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80134be:	e01e      	b.n	80134fe <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80134c0:	4b2e      	ldr	r3, [pc, #184]	@ (801357c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80134c2:	681b      	ldr	r3, [r3, #0]
 80134c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80134c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80134cc:	d106      	bne.n	80134dc <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 80134ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80134d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80134d4:	d102      	bne.n	80134dc <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80134d6:	4b2b      	ldr	r3, [pc, #172]	@ (8013584 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 80134d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80134da:	e010      	b.n	80134fe <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80134dc:	4b27      	ldr	r3, [pc, #156]	@ (801357c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80134de:	681b      	ldr	r3, [r3, #0]
 80134e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80134e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80134e8:	d106      	bne.n	80134f8 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 80134ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80134ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80134f0:	d102      	bne.n	80134f8 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80134f2:	4b25      	ldr	r3, [pc, #148]	@ (8013588 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80134f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80134f6:	e002      	b.n	80134fe <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80134f8:	2300      	movs	r3, #0
 80134fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80134fc:	e123      	b.n	8013746 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80134fe:	e122      	b.n	8013746 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8013500:	2300      	movs	r3, #0
 8013502:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013504:	e11f      	b.n	8013746 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8013506:	e9d7 2300 	ldrd	r2, r3, [r7]
 801350a:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 801350e:	430b      	orrs	r3, r1
 8013510:	d13c      	bne.n	801358c <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8013512:	4b1a      	ldr	r3, [pc, #104]	@ (801357c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013514:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013516:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801351a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 801351c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801351e:	2b00      	cmp	r3, #0
 8013520:	d004      	beq.n	801352c <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8013522:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013524:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013528:	d012      	beq.n	8013550 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 801352a:	e023      	b.n	8013574 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801352c:	4b13      	ldr	r3, [pc, #76]	@ (801357c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801352e:	681b      	ldr	r3, [r3, #0]
 8013530:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8013534:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8013538:	d107      	bne.n	801354a <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801353a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801353e:	4618      	mov	r0, r3
 8013540:	f000 fbcc 	bl	8013cdc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8013544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013546:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013548:	e0fd      	b.n	8013746 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801354a:	2300      	movs	r3, #0
 801354c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801354e:	e0fa      	b.n	8013746 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8013550:	4b0a      	ldr	r3, [pc, #40]	@ (801357c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013552:	681b      	ldr	r3, [r3, #0]
 8013554:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013558:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801355c:	d107      	bne.n	801356e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801355e:	f107 0318 	add.w	r3, r7, #24
 8013562:	4618      	mov	r0, r3
 8013564:	f000 f912 	bl	801378c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8013568:	6a3b      	ldr	r3, [r7, #32]
 801356a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801356c:	e0eb      	b.n	8013746 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801356e:	2300      	movs	r3, #0
 8013570:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013572:	e0e8      	b.n	8013746 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8013574:	2300      	movs	r3, #0
 8013576:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013578:	e0e5      	b.n	8013746 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801357a:	bf00      	nop
 801357c:	58024400 	.word	0x58024400
 8013580:	03d09000 	.word	0x03d09000
 8013584:	003d0900 	.word	0x003d0900
 8013588:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 801358c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013590:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8013594:	430b      	orrs	r3, r1
 8013596:	f040 8085 	bne.w	80136a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 801359a:	4b6d      	ldr	r3, [pc, #436]	@ (8013750 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801359c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801359e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 80135a2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80135a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80135a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80135aa:	d06b      	beq.n	8013684 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 80135ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80135ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80135b2:	d874      	bhi.n	801369e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80135b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80135b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80135ba:	d056      	beq.n	801366a <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 80135bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80135be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80135c2:	d86c      	bhi.n	801369e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80135c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80135c6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80135ca:	d03b      	beq.n	8013644 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 80135cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80135ce:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80135d2:	d864      	bhi.n	801369e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80135d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80135d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80135da:	d021      	beq.n	8013620 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 80135dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80135de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80135e2:	d85c      	bhi.n	801369e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80135e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80135e6:	2b00      	cmp	r3, #0
 80135e8:	d004      	beq.n	80135f4 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 80135ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80135ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80135f0:	d004      	beq.n	80135fc <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 80135f2:	e054      	b.n	801369e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80135f4:	f000 f8b4 	bl	8013760 <HAL_RCCEx_GetD3PCLK1Freq>
 80135f8:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80135fa:	e0a4      	b.n	8013746 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80135fc:	4b54      	ldr	r3, [pc, #336]	@ (8013750 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80135fe:	681b      	ldr	r3, [r3, #0]
 8013600:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013604:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8013608:	d107      	bne.n	801361a <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801360a:	f107 0318 	add.w	r3, r7, #24
 801360e:	4618      	mov	r0, r3
 8013610:	f000 f8bc 	bl	801378c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8013614:	69fb      	ldr	r3, [r7, #28]
 8013616:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013618:	e095      	b.n	8013746 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801361a:	2300      	movs	r3, #0
 801361c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801361e:	e092      	b.n	8013746 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8013620:	4b4b      	ldr	r3, [pc, #300]	@ (8013750 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013622:	681b      	ldr	r3, [r3, #0]
 8013624:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8013628:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801362c:	d107      	bne.n	801363e <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801362e:	f107 030c 	add.w	r3, r7, #12
 8013632:	4618      	mov	r0, r3
 8013634:	f000 f9fe 	bl	8013a34 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8013638:	693b      	ldr	r3, [r7, #16]
 801363a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801363c:	e083      	b.n	8013746 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801363e:	2300      	movs	r3, #0
 8013640:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013642:	e080      	b.n	8013746 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8013644:	4b42      	ldr	r3, [pc, #264]	@ (8013750 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013646:	681b      	ldr	r3, [r3, #0]
 8013648:	f003 0304 	and.w	r3, r3, #4
 801364c:	2b04      	cmp	r3, #4
 801364e:	d109      	bne.n	8013664 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8013650:	4b3f      	ldr	r3, [pc, #252]	@ (8013750 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013652:	681b      	ldr	r3, [r3, #0]
 8013654:	08db      	lsrs	r3, r3, #3
 8013656:	f003 0303 	and.w	r3, r3, #3
 801365a:	4a3e      	ldr	r2, [pc, #248]	@ (8013754 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 801365c:	fa22 f303 	lsr.w	r3, r2, r3
 8013660:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013662:	e070      	b.n	8013746 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013664:	2300      	movs	r3, #0
 8013666:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013668:	e06d      	b.n	8013746 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 801366a:	4b39      	ldr	r3, [pc, #228]	@ (8013750 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801366c:	681b      	ldr	r3, [r3, #0]
 801366e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013672:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013676:	d102      	bne.n	801367e <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 8013678:	4b37      	ldr	r3, [pc, #220]	@ (8013758 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 801367a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801367c:	e063      	b.n	8013746 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801367e:	2300      	movs	r3, #0
 8013680:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013682:	e060      	b.n	8013746 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8013684:	4b32      	ldr	r3, [pc, #200]	@ (8013750 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013686:	681b      	ldr	r3, [r3, #0]
 8013688:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801368c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013690:	d102      	bne.n	8013698 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 8013692:	4b32      	ldr	r3, [pc, #200]	@ (801375c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8013694:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013696:	e056      	b.n	8013746 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013698:	2300      	movs	r3, #0
 801369a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801369c:	e053      	b.n	8013746 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 801369e:	2300      	movs	r3, #0
 80136a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80136a2:	e050      	b.n	8013746 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80136a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80136a8:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80136ac:	430b      	orrs	r3, r1
 80136ae:	d148      	bne.n	8013742 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80136b0:	4b27      	ldr	r3, [pc, #156]	@ (8013750 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80136b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80136b4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80136b8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80136ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80136bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80136c0:	d02a      	beq.n	8013718 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 80136c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80136c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80136c8:	d838      	bhi.n	801373c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 80136ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80136cc:	2b00      	cmp	r3, #0
 80136ce:	d004      	beq.n	80136da <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 80136d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80136d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80136d6:	d00d      	beq.n	80136f4 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 80136d8:	e030      	b.n	801373c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80136da:	4b1d      	ldr	r3, [pc, #116]	@ (8013750 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80136dc:	681b      	ldr	r3, [r3, #0]
 80136de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80136e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80136e6:	d102      	bne.n	80136ee <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 80136e8:	4b1c      	ldr	r3, [pc, #112]	@ (801375c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80136ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80136ec:	e02b      	b.n	8013746 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80136ee:	2300      	movs	r3, #0
 80136f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80136f2:	e028      	b.n	8013746 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80136f4:	4b16      	ldr	r3, [pc, #88]	@ (8013750 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80136f6:	681b      	ldr	r3, [r3, #0]
 80136f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80136fc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8013700:	d107      	bne.n	8013712 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8013702:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013706:	4618      	mov	r0, r3
 8013708:	f000 fae8 	bl	8013cdc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801370c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801370e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013710:	e019      	b.n	8013746 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013712:	2300      	movs	r3, #0
 8013714:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013716:	e016      	b.n	8013746 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8013718:	4b0d      	ldr	r3, [pc, #52]	@ (8013750 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801371a:	681b      	ldr	r3, [r3, #0]
 801371c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013720:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8013724:	d107      	bne.n	8013736 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013726:	f107 0318 	add.w	r3, r7, #24
 801372a:	4618      	mov	r0, r3
 801372c:	f000 f82e 	bl	801378c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8013730:	69fb      	ldr	r3, [r7, #28]
 8013732:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013734:	e007      	b.n	8013746 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013736:	2300      	movs	r3, #0
 8013738:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801373a:	e004      	b.n	8013746 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 801373c:	2300      	movs	r3, #0
 801373e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013740:	e001      	b.n	8013746 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 8013742:	2300      	movs	r3, #0
 8013744:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8013746:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8013748:	4618      	mov	r0, r3
 801374a:	3740      	adds	r7, #64	@ 0x40
 801374c:	46bd      	mov	sp, r7
 801374e:	bd80      	pop	{r7, pc}
 8013750:	58024400 	.word	0x58024400
 8013754:	03d09000 	.word	0x03d09000
 8013758:	003d0900 	.word	0x003d0900
 801375c:	016e3600 	.word	0x016e3600

08013760 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8013760:	b580      	push	{r7, lr}
 8013762:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8013764:	f7fe f92e 	bl	80119c4 <HAL_RCC_GetHCLKFreq>
 8013768:	4602      	mov	r2, r0
 801376a:	4b06      	ldr	r3, [pc, #24]	@ (8013784 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 801376c:	6a1b      	ldr	r3, [r3, #32]
 801376e:	091b      	lsrs	r3, r3, #4
 8013770:	f003 0307 	and.w	r3, r3, #7
 8013774:	4904      	ldr	r1, [pc, #16]	@ (8013788 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8013776:	5ccb      	ldrb	r3, [r1, r3]
 8013778:	f003 031f 	and.w	r3, r3, #31
 801377c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8013780:	4618      	mov	r0, r3
 8013782:	bd80      	pop	{r7, pc}
 8013784:	58024400 	.word	0x58024400
 8013788:	0801e594 	.word	0x0801e594

0801378c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 801378c:	b480      	push	{r7}
 801378e:	b089      	sub	sp, #36	@ 0x24
 8013790:	af00      	add	r7, sp, #0
 8013792:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8013794:	4ba1      	ldr	r3, [pc, #644]	@ (8013a1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013798:	f003 0303 	and.w	r3, r3, #3
 801379c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 801379e:	4b9f      	ldr	r3, [pc, #636]	@ (8013a1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80137a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80137a2:	0b1b      	lsrs	r3, r3, #12
 80137a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80137a8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80137aa:	4b9c      	ldr	r3, [pc, #624]	@ (8013a1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80137ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80137ae:	091b      	lsrs	r3, r3, #4
 80137b0:	f003 0301 	and.w	r3, r3, #1
 80137b4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80137b6:	4b99      	ldr	r3, [pc, #612]	@ (8013a1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80137b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80137ba:	08db      	lsrs	r3, r3, #3
 80137bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80137c0:	693a      	ldr	r2, [r7, #16]
 80137c2:	fb02 f303 	mul.w	r3, r2, r3
 80137c6:	ee07 3a90 	vmov	s15, r3
 80137ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80137ce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80137d2:	697b      	ldr	r3, [r7, #20]
 80137d4:	2b00      	cmp	r3, #0
 80137d6:	f000 8111 	beq.w	80139fc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80137da:	69bb      	ldr	r3, [r7, #24]
 80137dc:	2b02      	cmp	r3, #2
 80137de:	f000 8083 	beq.w	80138e8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80137e2:	69bb      	ldr	r3, [r7, #24]
 80137e4:	2b02      	cmp	r3, #2
 80137e6:	f200 80a1 	bhi.w	801392c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80137ea:	69bb      	ldr	r3, [r7, #24]
 80137ec:	2b00      	cmp	r3, #0
 80137ee:	d003      	beq.n	80137f8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80137f0:	69bb      	ldr	r3, [r7, #24]
 80137f2:	2b01      	cmp	r3, #1
 80137f4:	d056      	beq.n	80138a4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80137f6:	e099      	b.n	801392c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80137f8:	4b88      	ldr	r3, [pc, #544]	@ (8013a1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80137fa:	681b      	ldr	r3, [r3, #0]
 80137fc:	f003 0320 	and.w	r3, r3, #32
 8013800:	2b00      	cmp	r3, #0
 8013802:	d02d      	beq.n	8013860 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8013804:	4b85      	ldr	r3, [pc, #532]	@ (8013a1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013806:	681b      	ldr	r3, [r3, #0]
 8013808:	08db      	lsrs	r3, r3, #3
 801380a:	f003 0303 	and.w	r3, r3, #3
 801380e:	4a84      	ldr	r2, [pc, #528]	@ (8013a20 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8013810:	fa22 f303 	lsr.w	r3, r2, r3
 8013814:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8013816:	68bb      	ldr	r3, [r7, #8]
 8013818:	ee07 3a90 	vmov	s15, r3
 801381c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013820:	697b      	ldr	r3, [r7, #20]
 8013822:	ee07 3a90 	vmov	s15, r3
 8013826:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801382a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801382e:	4b7b      	ldr	r3, [pc, #492]	@ (8013a1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013830:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013832:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013836:	ee07 3a90 	vmov	s15, r3
 801383a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801383e:	ed97 6a03 	vldr	s12, [r7, #12]
 8013842:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8013a24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013846:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801384a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801384e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013852:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013856:	ee67 7a27 	vmul.f32	s15, s14, s15
 801385a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801385e:	e087      	b.n	8013970 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8013860:	697b      	ldr	r3, [r7, #20]
 8013862:	ee07 3a90 	vmov	s15, r3
 8013866:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801386a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8013a28 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 801386e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013872:	4b6a      	ldr	r3, [pc, #424]	@ (8013a1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013874:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013876:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801387a:	ee07 3a90 	vmov	s15, r3
 801387e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013882:	ed97 6a03 	vldr	s12, [r7, #12]
 8013886:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8013a24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801388a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801388e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013892:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013896:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801389a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801389e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80138a2:	e065      	b.n	8013970 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80138a4:	697b      	ldr	r3, [r7, #20]
 80138a6:	ee07 3a90 	vmov	s15, r3
 80138aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80138ae:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8013a2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80138b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80138b6:	4b59      	ldr	r3, [pc, #356]	@ (8013a1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80138b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80138ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80138be:	ee07 3a90 	vmov	s15, r3
 80138c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80138c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80138ca:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8013a24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80138ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80138d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80138d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80138da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80138de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80138e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80138e6:	e043      	b.n	8013970 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80138e8:	697b      	ldr	r3, [r7, #20]
 80138ea:	ee07 3a90 	vmov	s15, r3
 80138ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80138f2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8013a30 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80138f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80138fa:	4b48      	ldr	r3, [pc, #288]	@ (8013a1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80138fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80138fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013902:	ee07 3a90 	vmov	s15, r3
 8013906:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801390a:	ed97 6a03 	vldr	s12, [r7, #12]
 801390e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8013a24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013912:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013916:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801391a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801391e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013922:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013926:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801392a:	e021      	b.n	8013970 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801392c:	697b      	ldr	r3, [r7, #20]
 801392e:	ee07 3a90 	vmov	s15, r3
 8013932:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013936:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8013a2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801393a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801393e:	4b37      	ldr	r3, [pc, #220]	@ (8013a1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013940:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013942:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013946:	ee07 3a90 	vmov	s15, r3
 801394a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801394e:	ed97 6a03 	vldr	s12, [r7, #12]
 8013952:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8013a24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013956:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801395a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801395e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013962:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013966:	ee67 7a27 	vmul.f32	s15, s14, s15
 801396a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801396e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8013970:	4b2a      	ldr	r3, [pc, #168]	@ (8013a1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013972:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013974:	0a5b      	lsrs	r3, r3, #9
 8013976:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801397a:	ee07 3a90 	vmov	s15, r3
 801397e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013982:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013986:	ee37 7a87 	vadd.f32	s14, s15, s14
 801398a:	edd7 6a07 	vldr	s13, [r7, #28]
 801398e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013992:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013996:	ee17 2a90 	vmov	r2, s15
 801399a:	687b      	ldr	r3, [r7, #4]
 801399c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 801399e:	4b1f      	ldr	r3, [pc, #124]	@ (8013a1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80139a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80139a2:	0c1b      	lsrs	r3, r3, #16
 80139a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80139a8:	ee07 3a90 	vmov	s15, r3
 80139ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80139b0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80139b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80139b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80139bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80139c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80139c4:	ee17 2a90 	vmov	r2, s15
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80139cc:	4b13      	ldr	r3, [pc, #76]	@ (8013a1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80139ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80139d0:	0e1b      	lsrs	r3, r3, #24
 80139d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80139d6:	ee07 3a90 	vmov	s15, r3
 80139da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80139de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80139e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80139e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80139ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80139ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80139f2:	ee17 2a90 	vmov	r2, s15
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80139fa:	e008      	b.n	8013a0e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80139fc:	687b      	ldr	r3, [r7, #4]
 80139fe:	2200      	movs	r2, #0
 8013a00:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8013a02:	687b      	ldr	r3, [r7, #4]
 8013a04:	2200      	movs	r2, #0
 8013a06:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	2200      	movs	r2, #0
 8013a0c:	609a      	str	r2, [r3, #8]
}
 8013a0e:	bf00      	nop
 8013a10:	3724      	adds	r7, #36	@ 0x24
 8013a12:	46bd      	mov	sp, r7
 8013a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a18:	4770      	bx	lr
 8013a1a:	bf00      	nop
 8013a1c:	58024400 	.word	0x58024400
 8013a20:	03d09000 	.word	0x03d09000
 8013a24:	46000000 	.word	0x46000000
 8013a28:	4c742400 	.word	0x4c742400
 8013a2c:	4a742400 	.word	0x4a742400
 8013a30:	4bb71b00 	.word	0x4bb71b00

08013a34 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8013a34:	b480      	push	{r7}
 8013a36:	b089      	sub	sp, #36	@ 0x24
 8013a38:	af00      	add	r7, sp, #0
 8013a3a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8013a3c:	4ba1      	ldr	r3, [pc, #644]	@ (8013cc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013a3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013a40:	f003 0303 	and.w	r3, r3, #3
 8013a44:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8013a46:	4b9f      	ldr	r3, [pc, #636]	@ (8013cc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013a48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013a4a:	0d1b      	lsrs	r3, r3, #20
 8013a4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013a50:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8013a52:	4b9c      	ldr	r3, [pc, #624]	@ (8013cc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013a54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013a56:	0a1b      	lsrs	r3, r3, #8
 8013a58:	f003 0301 	and.w	r3, r3, #1
 8013a5c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8013a5e:	4b99      	ldr	r3, [pc, #612]	@ (8013cc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013a62:	08db      	lsrs	r3, r3, #3
 8013a64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013a68:	693a      	ldr	r2, [r7, #16]
 8013a6a:	fb02 f303 	mul.w	r3, r2, r3
 8013a6e:	ee07 3a90 	vmov	s15, r3
 8013a72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013a76:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8013a7a:	697b      	ldr	r3, [r7, #20]
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	f000 8111 	beq.w	8013ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8013a82:	69bb      	ldr	r3, [r7, #24]
 8013a84:	2b02      	cmp	r3, #2
 8013a86:	f000 8083 	beq.w	8013b90 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8013a8a:	69bb      	ldr	r3, [r7, #24]
 8013a8c:	2b02      	cmp	r3, #2
 8013a8e:	f200 80a1 	bhi.w	8013bd4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8013a92:	69bb      	ldr	r3, [r7, #24]
 8013a94:	2b00      	cmp	r3, #0
 8013a96:	d003      	beq.n	8013aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8013a98:	69bb      	ldr	r3, [r7, #24]
 8013a9a:	2b01      	cmp	r3, #1
 8013a9c:	d056      	beq.n	8013b4c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8013a9e:	e099      	b.n	8013bd4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013aa0:	4b88      	ldr	r3, [pc, #544]	@ (8013cc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013aa2:	681b      	ldr	r3, [r3, #0]
 8013aa4:	f003 0320 	and.w	r3, r3, #32
 8013aa8:	2b00      	cmp	r3, #0
 8013aaa:	d02d      	beq.n	8013b08 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8013aac:	4b85      	ldr	r3, [pc, #532]	@ (8013cc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013aae:	681b      	ldr	r3, [r3, #0]
 8013ab0:	08db      	lsrs	r3, r3, #3
 8013ab2:	f003 0303 	and.w	r3, r3, #3
 8013ab6:	4a84      	ldr	r2, [pc, #528]	@ (8013cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8013ab8:	fa22 f303 	lsr.w	r3, r2, r3
 8013abc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8013abe:	68bb      	ldr	r3, [r7, #8]
 8013ac0:	ee07 3a90 	vmov	s15, r3
 8013ac4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013ac8:	697b      	ldr	r3, [r7, #20]
 8013aca:	ee07 3a90 	vmov	s15, r3
 8013ace:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013ad2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013ad6:	4b7b      	ldr	r3, [pc, #492]	@ (8013cc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013ada:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013ade:	ee07 3a90 	vmov	s15, r3
 8013ae2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013ae6:	ed97 6a03 	vldr	s12, [r7, #12]
 8013aea:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8013ccc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8013aee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013af2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013af6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013afa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013afe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013b02:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8013b06:	e087      	b.n	8013c18 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8013b08:	697b      	ldr	r3, [r7, #20]
 8013b0a:	ee07 3a90 	vmov	s15, r3
 8013b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013b12:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8013cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8013b16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013b1a:	4b6a      	ldr	r3, [pc, #424]	@ (8013cc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013b1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013b22:	ee07 3a90 	vmov	s15, r3
 8013b26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013b2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8013b2e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8013ccc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8013b32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013b36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013b3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013b3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013b42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013b46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013b4a:	e065      	b.n	8013c18 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8013b4c:	697b      	ldr	r3, [r7, #20]
 8013b4e:	ee07 3a90 	vmov	s15, r3
 8013b52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013b56:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8013cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8013b5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013b5e:	4b59      	ldr	r3, [pc, #356]	@ (8013cc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013b62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013b66:	ee07 3a90 	vmov	s15, r3
 8013b6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013b6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8013b72:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8013ccc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8013b76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013b7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013b7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013b82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013b86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013b8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013b8e:	e043      	b.n	8013c18 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8013b90:	697b      	ldr	r3, [r7, #20]
 8013b92:	ee07 3a90 	vmov	s15, r3
 8013b96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013b9a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8013cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8013b9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013ba2:	4b48      	ldr	r3, [pc, #288]	@ (8013cc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013ba6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013baa:	ee07 3a90 	vmov	s15, r3
 8013bae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013bb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8013bb6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8013ccc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8013bba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013bbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013bc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013bc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013bca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013bce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013bd2:	e021      	b.n	8013c18 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8013bd4:	697b      	ldr	r3, [r7, #20]
 8013bd6:	ee07 3a90 	vmov	s15, r3
 8013bda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013bde:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8013cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8013be2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013be6:	4b37      	ldr	r3, [pc, #220]	@ (8013cc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013bea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013bee:	ee07 3a90 	vmov	s15, r3
 8013bf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013bf6:	ed97 6a03 	vldr	s12, [r7, #12]
 8013bfa:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8013ccc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8013bfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013c02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013c06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013c0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013c0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013c12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013c16:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8013c18:	4b2a      	ldr	r3, [pc, #168]	@ (8013cc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013c1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013c1c:	0a5b      	lsrs	r3, r3, #9
 8013c1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013c22:	ee07 3a90 	vmov	s15, r3
 8013c26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013c2a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013c2e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013c32:	edd7 6a07 	vldr	s13, [r7, #28]
 8013c36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013c3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013c3e:	ee17 2a90 	vmov	r2, s15
 8013c42:	687b      	ldr	r3, [r7, #4]
 8013c44:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8013c46:	4b1f      	ldr	r3, [pc, #124]	@ (8013cc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013c4a:	0c1b      	lsrs	r3, r3, #16
 8013c4c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013c50:	ee07 3a90 	vmov	s15, r3
 8013c54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013c58:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013c5c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013c60:	edd7 6a07 	vldr	s13, [r7, #28]
 8013c64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013c68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013c6c:	ee17 2a90 	vmov	r2, s15
 8013c70:	687b      	ldr	r3, [r7, #4]
 8013c72:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8013c74:	4b13      	ldr	r3, [pc, #76]	@ (8013cc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013c76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013c78:	0e1b      	lsrs	r3, r3, #24
 8013c7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013c7e:	ee07 3a90 	vmov	s15, r3
 8013c82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013c86:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013c8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013c8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8013c92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013c96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013c9a:	ee17 2a90 	vmov	r2, s15
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8013ca2:	e008      	b.n	8013cb6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8013ca4:	687b      	ldr	r3, [r7, #4]
 8013ca6:	2200      	movs	r2, #0
 8013ca8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8013caa:	687b      	ldr	r3, [r7, #4]
 8013cac:	2200      	movs	r2, #0
 8013cae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8013cb0:	687b      	ldr	r3, [r7, #4]
 8013cb2:	2200      	movs	r2, #0
 8013cb4:	609a      	str	r2, [r3, #8]
}
 8013cb6:	bf00      	nop
 8013cb8:	3724      	adds	r7, #36	@ 0x24
 8013cba:	46bd      	mov	sp, r7
 8013cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cc0:	4770      	bx	lr
 8013cc2:	bf00      	nop
 8013cc4:	58024400 	.word	0x58024400
 8013cc8:	03d09000 	.word	0x03d09000
 8013ccc:	46000000 	.word	0x46000000
 8013cd0:	4c742400 	.word	0x4c742400
 8013cd4:	4a742400 	.word	0x4a742400
 8013cd8:	4bb71b00 	.word	0x4bb71b00

08013cdc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8013cdc:	b480      	push	{r7}
 8013cde:	b089      	sub	sp, #36	@ 0x24
 8013ce0:	af00      	add	r7, sp, #0
 8013ce2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8013ce4:	4ba0      	ldr	r3, [pc, #640]	@ (8013f68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8013ce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013ce8:	f003 0303 	and.w	r3, r3, #3
 8013cec:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8013cee:	4b9e      	ldr	r3, [pc, #632]	@ (8013f68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8013cf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013cf2:	091b      	lsrs	r3, r3, #4
 8013cf4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013cf8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8013cfa:	4b9b      	ldr	r3, [pc, #620]	@ (8013f68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8013cfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013cfe:	f003 0301 	and.w	r3, r3, #1
 8013d02:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8013d04:	4b98      	ldr	r3, [pc, #608]	@ (8013f68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8013d06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013d08:	08db      	lsrs	r3, r3, #3
 8013d0a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013d0e:	693a      	ldr	r2, [r7, #16]
 8013d10:	fb02 f303 	mul.w	r3, r2, r3
 8013d14:	ee07 3a90 	vmov	s15, r3
 8013d18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013d1c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8013d20:	697b      	ldr	r3, [r7, #20]
 8013d22:	2b00      	cmp	r3, #0
 8013d24:	f000 8111 	beq.w	8013f4a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8013d28:	69bb      	ldr	r3, [r7, #24]
 8013d2a:	2b02      	cmp	r3, #2
 8013d2c:	f000 8083 	beq.w	8013e36 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8013d30:	69bb      	ldr	r3, [r7, #24]
 8013d32:	2b02      	cmp	r3, #2
 8013d34:	f200 80a1 	bhi.w	8013e7a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8013d38:	69bb      	ldr	r3, [r7, #24]
 8013d3a:	2b00      	cmp	r3, #0
 8013d3c:	d003      	beq.n	8013d46 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8013d3e:	69bb      	ldr	r3, [r7, #24]
 8013d40:	2b01      	cmp	r3, #1
 8013d42:	d056      	beq.n	8013df2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8013d44:	e099      	b.n	8013e7a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013d46:	4b88      	ldr	r3, [pc, #544]	@ (8013f68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8013d48:	681b      	ldr	r3, [r3, #0]
 8013d4a:	f003 0320 	and.w	r3, r3, #32
 8013d4e:	2b00      	cmp	r3, #0
 8013d50:	d02d      	beq.n	8013dae <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8013d52:	4b85      	ldr	r3, [pc, #532]	@ (8013f68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8013d54:	681b      	ldr	r3, [r3, #0]
 8013d56:	08db      	lsrs	r3, r3, #3
 8013d58:	f003 0303 	and.w	r3, r3, #3
 8013d5c:	4a83      	ldr	r2, [pc, #524]	@ (8013f6c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8013d5e:	fa22 f303 	lsr.w	r3, r2, r3
 8013d62:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8013d64:	68bb      	ldr	r3, [r7, #8]
 8013d66:	ee07 3a90 	vmov	s15, r3
 8013d6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013d6e:	697b      	ldr	r3, [r7, #20]
 8013d70:	ee07 3a90 	vmov	s15, r3
 8013d74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013d78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013d7c:	4b7a      	ldr	r3, [pc, #488]	@ (8013f68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8013d7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013d80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013d84:	ee07 3a90 	vmov	s15, r3
 8013d88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013d8c:	ed97 6a03 	vldr	s12, [r7, #12]
 8013d90:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8013f70 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8013d94:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013d98:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013d9c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013da0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013da4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013da8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8013dac:	e087      	b.n	8013ebe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8013dae:	697b      	ldr	r3, [r7, #20]
 8013db0:	ee07 3a90 	vmov	s15, r3
 8013db4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013db8:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8013f74 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8013dbc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013dc0:	4b69      	ldr	r3, [pc, #420]	@ (8013f68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8013dc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013dc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013dc8:	ee07 3a90 	vmov	s15, r3
 8013dcc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013dd0:	ed97 6a03 	vldr	s12, [r7, #12]
 8013dd4:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8013f70 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8013dd8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013ddc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013de0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013de4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013de8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013dec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013df0:	e065      	b.n	8013ebe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8013df2:	697b      	ldr	r3, [r7, #20]
 8013df4:	ee07 3a90 	vmov	s15, r3
 8013df8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013dfc:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8013f78 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8013e00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013e04:	4b58      	ldr	r3, [pc, #352]	@ (8013f68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8013e06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013e08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013e0c:	ee07 3a90 	vmov	s15, r3
 8013e10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013e14:	ed97 6a03 	vldr	s12, [r7, #12]
 8013e18:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8013f70 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8013e1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013e20:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013e24:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013e28:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013e2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013e30:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013e34:	e043      	b.n	8013ebe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8013e36:	697b      	ldr	r3, [r7, #20]
 8013e38:	ee07 3a90 	vmov	s15, r3
 8013e3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013e40:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8013f7c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8013e44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013e48:	4b47      	ldr	r3, [pc, #284]	@ (8013f68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8013e4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013e4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013e50:	ee07 3a90 	vmov	s15, r3
 8013e54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013e58:	ed97 6a03 	vldr	s12, [r7, #12]
 8013e5c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8013f70 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8013e60:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013e64:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013e68:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013e6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013e70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013e74:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013e78:	e021      	b.n	8013ebe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8013e7a:	697b      	ldr	r3, [r7, #20]
 8013e7c:	ee07 3a90 	vmov	s15, r3
 8013e80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013e84:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8013f74 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8013e88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013e8c:	4b36      	ldr	r3, [pc, #216]	@ (8013f68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8013e8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013e90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013e94:	ee07 3a90 	vmov	s15, r3
 8013e98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013e9c:	ed97 6a03 	vldr	s12, [r7, #12]
 8013ea0:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8013f70 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8013ea4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013ea8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013eac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013eb0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013eb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013eb8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013ebc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8013ebe:	4b2a      	ldr	r3, [pc, #168]	@ (8013f68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8013ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013ec2:	0a5b      	lsrs	r3, r3, #9
 8013ec4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013ec8:	ee07 3a90 	vmov	s15, r3
 8013ecc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013ed0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013ed4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013ed8:	edd7 6a07 	vldr	s13, [r7, #28]
 8013edc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013ee0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013ee4:	ee17 2a90 	vmov	r2, s15
 8013ee8:	687b      	ldr	r3, [r7, #4]
 8013eea:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8013eec:	4b1e      	ldr	r3, [pc, #120]	@ (8013f68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8013eee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013ef0:	0c1b      	lsrs	r3, r3, #16
 8013ef2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013ef6:	ee07 3a90 	vmov	s15, r3
 8013efa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013efe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013f02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013f06:	edd7 6a07 	vldr	s13, [r7, #28]
 8013f0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013f0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013f12:	ee17 2a90 	vmov	r2, s15
 8013f16:	687b      	ldr	r3, [r7, #4]
 8013f18:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8013f1a:	4b13      	ldr	r3, [pc, #76]	@ (8013f68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8013f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013f1e:	0e1b      	lsrs	r3, r3, #24
 8013f20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013f24:	ee07 3a90 	vmov	s15, r3
 8013f28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013f2c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013f30:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013f34:	edd7 6a07 	vldr	s13, [r7, #28]
 8013f38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013f3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013f40:	ee17 2a90 	vmov	r2, s15
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8013f48:	e008      	b.n	8013f5c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8013f4a:	687b      	ldr	r3, [r7, #4]
 8013f4c:	2200      	movs	r2, #0
 8013f4e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	2200      	movs	r2, #0
 8013f54:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8013f56:	687b      	ldr	r3, [r7, #4]
 8013f58:	2200      	movs	r2, #0
 8013f5a:	609a      	str	r2, [r3, #8]
}
 8013f5c:	bf00      	nop
 8013f5e:	3724      	adds	r7, #36	@ 0x24
 8013f60:	46bd      	mov	sp, r7
 8013f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f66:	4770      	bx	lr
 8013f68:	58024400 	.word	0x58024400
 8013f6c:	03d09000 	.word	0x03d09000
 8013f70:	46000000 	.word	0x46000000
 8013f74:	4c742400 	.word	0x4c742400
 8013f78:	4a742400 	.word	0x4a742400
 8013f7c:	4bb71b00 	.word	0x4bb71b00

08013f80 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8013f80:	b580      	push	{r7, lr}
 8013f82:	b084      	sub	sp, #16
 8013f84:	af00      	add	r7, sp, #0
 8013f86:	6078      	str	r0, [r7, #4]
 8013f88:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8013f8a:	2300      	movs	r3, #0
 8013f8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8013f8e:	4b53      	ldr	r3, [pc, #332]	@ (80140dc <RCCEx_PLL2_Config+0x15c>)
 8013f90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013f92:	f003 0303 	and.w	r3, r3, #3
 8013f96:	2b03      	cmp	r3, #3
 8013f98:	d101      	bne.n	8013f9e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8013f9a:	2301      	movs	r3, #1
 8013f9c:	e099      	b.n	80140d2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8013f9e:	4b4f      	ldr	r3, [pc, #316]	@ (80140dc <RCCEx_PLL2_Config+0x15c>)
 8013fa0:	681b      	ldr	r3, [r3, #0]
 8013fa2:	4a4e      	ldr	r2, [pc, #312]	@ (80140dc <RCCEx_PLL2_Config+0x15c>)
 8013fa4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8013fa8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8013faa:	f7f4 ffab 	bl	8008f04 <HAL_GetTick>
 8013fae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8013fb0:	e008      	b.n	8013fc4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8013fb2:	f7f4 ffa7 	bl	8008f04 <HAL_GetTick>
 8013fb6:	4602      	mov	r2, r0
 8013fb8:	68bb      	ldr	r3, [r7, #8]
 8013fba:	1ad3      	subs	r3, r2, r3
 8013fbc:	2b02      	cmp	r3, #2
 8013fbe:	d901      	bls.n	8013fc4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8013fc0:	2303      	movs	r3, #3
 8013fc2:	e086      	b.n	80140d2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8013fc4:	4b45      	ldr	r3, [pc, #276]	@ (80140dc <RCCEx_PLL2_Config+0x15c>)
 8013fc6:	681b      	ldr	r3, [r3, #0]
 8013fc8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013fcc:	2b00      	cmp	r3, #0
 8013fce:	d1f0      	bne.n	8013fb2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8013fd0:	4b42      	ldr	r3, [pc, #264]	@ (80140dc <RCCEx_PLL2_Config+0x15c>)
 8013fd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013fd4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	681b      	ldr	r3, [r3, #0]
 8013fdc:	031b      	lsls	r3, r3, #12
 8013fde:	493f      	ldr	r1, [pc, #252]	@ (80140dc <RCCEx_PLL2_Config+0x15c>)
 8013fe0:	4313      	orrs	r3, r2
 8013fe2:	628b      	str	r3, [r1, #40]	@ 0x28
 8013fe4:	687b      	ldr	r3, [r7, #4]
 8013fe6:	685b      	ldr	r3, [r3, #4]
 8013fe8:	3b01      	subs	r3, #1
 8013fea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	689b      	ldr	r3, [r3, #8]
 8013ff2:	3b01      	subs	r3, #1
 8013ff4:	025b      	lsls	r3, r3, #9
 8013ff6:	b29b      	uxth	r3, r3
 8013ff8:	431a      	orrs	r2, r3
 8013ffa:	687b      	ldr	r3, [r7, #4]
 8013ffc:	68db      	ldr	r3, [r3, #12]
 8013ffe:	3b01      	subs	r3, #1
 8014000:	041b      	lsls	r3, r3, #16
 8014002:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8014006:	431a      	orrs	r2, r3
 8014008:	687b      	ldr	r3, [r7, #4]
 801400a:	691b      	ldr	r3, [r3, #16]
 801400c:	3b01      	subs	r3, #1
 801400e:	061b      	lsls	r3, r3, #24
 8014010:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8014014:	4931      	ldr	r1, [pc, #196]	@ (80140dc <RCCEx_PLL2_Config+0x15c>)
 8014016:	4313      	orrs	r3, r2
 8014018:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 801401a:	4b30      	ldr	r3, [pc, #192]	@ (80140dc <RCCEx_PLL2_Config+0x15c>)
 801401c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801401e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	695b      	ldr	r3, [r3, #20]
 8014026:	492d      	ldr	r1, [pc, #180]	@ (80140dc <RCCEx_PLL2_Config+0x15c>)
 8014028:	4313      	orrs	r3, r2
 801402a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 801402c:	4b2b      	ldr	r3, [pc, #172]	@ (80140dc <RCCEx_PLL2_Config+0x15c>)
 801402e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014030:	f023 0220 	bic.w	r2, r3, #32
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	699b      	ldr	r3, [r3, #24]
 8014038:	4928      	ldr	r1, [pc, #160]	@ (80140dc <RCCEx_PLL2_Config+0x15c>)
 801403a:	4313      	orrs	r3, r2
 801403c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 801403e:	4b27      	ldr	r3, [pc, #156]	@ (80140dc <RCCEx_PLL2_Config+0x15c>)
 8014040:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014042:	4a26      	ldr	r2, [pc, #152]	@ (80140dc <RCCEx_PLL2_Config+0x15c>)
 8014044:	f023 0310 	bic.w	r3, r3, #16
 8014048:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 801404a:	4b24      	ldr	r3, [pc, #144]	@ (80140dc <RCCEx_PLL2_Config+0x15c>)
 801404c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801404e:	4b24      	ldr	r3, [pc, #144]	@ (80140e0 <RCCEx_PLL2_Config+0x160>)
 8014050:	4013      	ands	r3, r2
 8014052:	687a      	ldr	r2, [r7, #4]
 8014054:	69d2      	ldr	r2, [r2, #28]
 8014056:	00d2      	lsls	r2, r2, #3
 8014058:	4920      	ldr	r1, [pc, #128]	@ (80140dc <RCCEx_PLL2_Config+0x15c>)
 801405a:	4313      	orrs	r3, r2
 801405c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 801405e:	4b1f      	ldr	r3, [pc, #124]	@ (80140dc <RCCEx_PLL2_Config+0x15c>)
 8014060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014062:	4a1e      	ldr	r2, [pc, #120]	@ (80140dc <RCCEx_PLL2_Config+0x15c>)
 8014064:	f043 0310 	orr.w	r3, r3, #16
 8014068:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801406a:	683b      	ldr	r3, [r7, #0]
 801406c:	2b00      	cmp	r3, #0
 801406e:	d106      	bne.n	801407e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8014070:	4b1a      	ldr	r3, [pc, #104]	@ (80140dc <RCCEx_PLL2_Config+0x15c>)
 8014072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014074:	4a19      	ldr	r2, [pc, #100]	@ (80140dc <RCCEx_PLL2_Config+0x15c>)
 8014076:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801407a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801407c:	e00f      	b.n	801409e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801407e:	683b      	ldr	r3, [r7, #0]
 8014080:	2b01      	cmp	r3, #1
 8014082:	d106      	bne.n	8014092 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8014084:	4b15      	ldr	r3, [pc, #84]	@ (80140dc <RCCEx_PLL2_Config+0x15c>)
 8014086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014088:	4a14      	ldr	r2, [pc, #80]	@ (80140dc <RCCEx_PLL2_Config+0x15c>)
 801408a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801408e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8014090:	e005      	b.n	801409e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8014092:	4b12      	ldr	r3, [pc, #72]	@ (80140dc <RCCEx_PLL2_Config+0x15c>)
 8014094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014096:	4a11      	ldr	r2, [pc, #68]	@ (80140dc <RCCEx_PLL2_Config+0x15c>)
 8014098:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 801409c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 801409e:	4b0f      	ldr	r3, [pc, #60]	@ (80140dc <RCCEx_PLL2_Config+0x15c>)
 80140a0:	681b      	ldr	r3, [r3, #0]
 80140a2:	4a0e      	ldr	r2, [pc, #56]	@ (80140dc <RCCEx_PLL2_Config+0x15c>)
 80140a4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80140a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80140aa:	f7f4 ff2b 	bl	8008f04 <HAL_GetTick>
 80140ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80140b0:	e008      	b.n	80140c4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80140b2:	f7f4 ff27 	bl	8008f04 <HAL_GetTick>
 80140b6:	4602      	mov	r2, r0
 80140b8:	68bb      	ldr	r3, [r7, #8]
 80140ba:	1ad3      	subs	r3, r2, r3
 80140bc:	2b02      	cmp	r3, #2
 80140be:	d901      	bls.n	80140c4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80140c0:	2303      	movs	r3, #3
 80140c2:	e006      	b.n	80140d2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80140c4:	4b05      	ldr	r3, [pc, #20]	@ (80140dc <RCCEx_PLL2_Config+0x15c>)
 80140c6:	681b      	ldr	r3, [r3, #0]
 80140c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80140cc:	2b00      	cmp	r3, #0
 80140ce:	d0f0      	beq.n	80140b2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80140d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80140d2:	4618      	mov	r0, r3
 80140d4:	3710      	adds	r7, #16
 80140d6:	46bd      	mov	sp, r7
 80140d8:	bd80      	pop	{r7, pc}
 80140da:	bf00      	nop
 80140dc:	58024400 	.word	0x58024400
 80140e0:	ffff0007 	.word	0xffff0007

080140e4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80140e4:	b580      	push	{r7, lr}
 80140e6:	b084      	sub	sp, #16
 80140e8:	af00      	add	r7, sp, #0
 80140ea:	6078      	str	r0, [r7, #4]
 80140ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80140ee:	2300      	movs	r3, #0
 80140f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80140f2:	4b53      	ldr	r3, [pc, #332]	@ (8014240 <RCCEx_PLL3_Config+0x15c>)
 80140f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80140f6:	f003 0303 	and.w	r3, r3, #3
 80140fa:	2b03      	cmp	r3, #3
 80140fc:	d101      	bne.n	8014102 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80140fe:	2301      	movs	r3, #1
 8014100:	e099      	b.n	8014236 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8014102:	4b4f      	ldr	r3, [pc, #316]	@ (8014240 <RCCEx_PLL3_Config+0x15c>)
 8014104:	681b      	ldr	r3, [r3, #0]
 8014106:	4a4e      	ldr	r2, [pc, #312]	@ (8014240 <RCCEx_PLL3_Config+0x15c>)
 8014108:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801410c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801410e:	f7f4 fef9 	bl	8008f04 <HAL_GetTick>
 8014112:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8014114:	e008      	b.n	8014128 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8014116:	f7f4 fef5 	bl	8008f04 <HAL_GetTick>
 801411a:	4602      	mov	r2, r0
 801411c:	68bb      	ldr	r3, [r7, #8]
 801411e:	1ad3      	subs	r3, r2, r3
 8014120:	2b02      	cmp	r3, #2
 8014122:	d901      	bls.n	8014128 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8014124:	2303      	movs	r3, #3
 8014126:	e086      	b.n	8014236 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8014128:	4b45      	ldr	r3, [pc, #276]	@ (8014240 <RCCEx_PLL3_Config+0x15c>)
 801412a:	681b      	ldr	r3, [r3, #0]
 801412c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8014130:	2b00      	cmp	r3, #0
 8014132:	d1f0      	bne.n	8014116 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8014134:	4b42      	ldr	r3, [pc, #264]	@ (8014240 <RCCEx_PLL3_Config+0x15c>)
 8014136:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014138:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	681b      	ldr	r3, [r3, #0]
 8014140:	051b      	lsls	r3, r3, #20
 8014142:	493f      	ldr	r1, [pc, #252]	@ (8014240 <RCCEx_PLL3_Config+0x15c>)
 8014144:	4313      	orrs	r3, r2
 8014146:	628b      	str	r3, [r1, #40]	@ 0x28
 8014148:	687b      	ldr	r3, [r7, #4]
 801414a:	685b      	ldr	r3, [r3, #4]
 801414c:	3b01      	subs	r3, #1
 801414e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	689b      	ldr	r3, [r3, #8]
 8014156:	3b01      	subs	r3, #1
 8014158:	025b      	lsls	r3, r3, #9
 801415a:	b29b      	uxth	r3, r3
 801415c:	431a      	orrs	r2, r3
 801415e:	687b      	ldr	r3, [r7, #4]
 8014160:	68db      	ldr	r3, [r3, #12]
 8014162:	3b01      	subs	r3, #1
 8014164:	041b      	lsls	r3, r3, #16
 8014166:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801416a:	431a      	orrs	r2, r3
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	691b      	ldr	r3, [r3, #16]
 8014170:	3b01      	subs	r3, #1
 8014172:	061b      	lsls	r3, r3, #24
 8014174:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8014178:	4931      	ldr	r1, [pc, #196]	@ (8014240 <RCCEx_PLL3_Config+0x15c>)
 801417a:	4313      	orrs	r3, r2
 801417c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 801417e:	4b30      	ldr	r3, [pc, #192]	@ (8014240 <RCCEx_PLL3_Config+0x15c>)
 8014180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014182:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8014186:	687b      	ldr	r3, [r7, #4]
 8014188:	695b      	ldr	r3, [r3, #20]
 801418a:	492d      	ldr	r1, [pc, #180]	@ (8014240 <RCCEx_PLL3_Config+0x15c>)
 801418c:	4313      	orrs	r3, r2
 801418e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8014190:	4b2b      	ldr	r3, [pc, #172]	@ (8014240 <RCCEx_PLL3_Config+0x15c>)
 8014192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014194:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	699b      	ldr	r3, [r3, #24]
 801419c:	4928      	ldr	r1, [pc, #160]	@ (8014240 <RCCEx_PLL3_Config+0x15c>)
 801419e:	4313      	orrs	r3, r2
 80141a0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80141a2:	4b27      	ldr	r3, [pc, #156]	@ (8014240 <RCCEx_PLL3_Config+0x15c>)
 80141a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80141a6:	4a26      	ldr	r2, [pc, #152]	@ (8014240 <RCCEx_PLL3_Config+0x15c>)
 80141a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80141ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80141ae:	4b24      	ldr	r3, [pc, #144]	@ (8014240 <RCCEx_PLL3_Config+0x15c>)
 80141b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80141b2:	4b24      	ldr	r3, [pc, #144]	@ (8014244 <RCCEx_PLL3_Config+0x160>)
 80141b4:	4013      	ands	r3, r2
 80141b6:	687a      	ldr	r2, [r7, #4]
 80141b8:	69d2      	ldr	r2, [r2, #28]
 80141ba:	00d2      	lsls	r2, r2, #3
 80141bc:	4920      	ldr	r1, [pc, #128]	@ (8014240 <RCCEx_PLL3_Config+0x15c>)
 80141be:	4313      	orrs	r3, r2
 80141c0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80141c2:	4b1f      	ldr	r3, [pc, #124]	@ (8014240 <RCCEx_PLL3_Config+0x15c>)
 80141c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80141c6:	4a1e      	ldr	r2, [pc, #120]	@ (8014240 <RCCEx_PLL3_Config+0x15c>)
 80141c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80141cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80141ce:	683b      	ldr	r3, [r7, #0]
 80141d0:	2b00      	cmp	r3, #0
 80141d2:	d106      	bne.n	80141e2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80141d4:	4b1a      	ldr	r3, [pc, #104]	@ (8014240 <RCCEx_PLL3_Config+0x15c>)
 80141d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80141d8:	4a19      	ldr	r2, [pc, #100]	@ (8014240 <RCCEx_PLL3_Config+0x15c>)
 80141da:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80141de:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80141e0:	e00f      	b.n	8014202 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80141e2:	683b      	ldr	r3, [r7, #0]
 80141e4:	2b01      	cmp	r3, #1
 80141e6:	d106      	bne.n	80141f6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80141e8:	4b15      	ldr	r3, [pc, #84]	@ (8014240 <RCCEx_PLL3_Config+0x15c>)
 80141ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80141ec:	4a14      	ldr	r2, [pc, #80]	@ (8014240 <RCCEx_PLL3_Config+0x15c>)
 80141ee:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80141f2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80141f4:	e005      	b.n	8014202 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80141f6:	4b12      	ldr	r3, [pc, #72]	@ (8014240 <RCCEx_PLL3_Config+0x15c>)
 80141f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80141fa:	4a11      	ldr	r2, [pc, #68]	@ (8014240 <RCCEx_PLL3_Config+0x15c>)
 80141fc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8014200:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8014202:	4b0f      	ldr	r3, [pc, #60]	@ (8014240 <RCCEx_PLL3_Config+0x15c>)
 8014204:	681b      	ldr	r3, [r3, #0]
 8014206:	4a0e      	ldr	r2, [pc, #56]	@ (8014240 <RCCEx_PLL3_Config+0x15c>)
 8014208:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801420c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801420e:	f7f4 fe79 	bl	8008f04 <HAL_GetTick>
 8014212:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8014214:	e008      	b.n	8014228 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8014216:	f7f4 fe75 	bl	8008f04 <HAL_GetTick>
 801421a:	4602      	mov	r2, r0
 801421c:	68bb      	ldr	r3, [r7, #8]
 801421e:	1ad3      	subs	r3, r2, r3
 8014220:	2b02      	cmp	r3, #2
 8014222:	d901      	bls.n	8014228 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8014224:	2303      	movs	r3, #3
 8014226:	e006      	b.n	8014236 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8014228:	4b05      	ldr	r3, [pc, #20]	@ (8014240 <RCCEx_PLL3_Config+0x15c>)
 801422a:	681b      	ldr	r3, [r3, #0]
 801422c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8014230:	2b00      	cmp	r3, #0
 8014232:	d0f0      	beq.n	8014216 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8014234:	7bfb      	ldrb	r3, [r7, #15]
}
 8014236:	4618      	mov	r0, r3
 8014238:	3710      	adds	r7, #16
 801423a:	46bd      	mov	sp, r7
 801423c:	bd80      	pop	{r7, pc}
 801423e:	bf00      	nop
 8014240:	58024400 	.word	0x58024400
 8014244:	ffff0007 	.word	0xffff0007

08014248 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8014248:	b580      	push	{r7, lr}
 801424a:	b084      	sub	sp, #16
 801424c:	af00      	add	r7, sp, #0
 801424e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8014250:	687b      	ldr	r3, [r7, #4]
 8014252:	2b00      	cmp	r3, #0
 8014254:	d101      	bne.n	801425a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8014256:	2301      	movs	r3, #1
 8014258:	e10f      	b.n	801447a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801425a:	687b      	ldr	r3, [r7, #4]
 801425c:	2200      	movs	r2, #0
 801425e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8014260:	687b      	ldr	r3, [r7, #4]
 8014262:	681b      	ldr	r3, [r3, #0]
 8014264:	4a87      	ldr	r2, [pc, #540]	@ (8014484 <HAL_SPI_Init+0x23c>)
 8014266:	4293      	cmp	r3, r2
 8014268:	d00f      	beq.n	801428a <HAL_SPI_Init+0x42>
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	681b      	ldr	r3, [r3, #0]
 801426e:	4a86      	ldr	r2, [pc, #536]	@ (8014488 <HAL_SPI_Init+0x240>)
 8014270:	4293      	cmp	r3, r2
 8014272:	d00a      	beq.n	801428a <HAL_SPI_Init+0x42>
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	681b      	ldr	r3, [r3, #0]
 8014278:	4a84      	ldr	r2, [pc, #528]	@ (801448c <HAL_SPI_Init+0x244>)
 801427a:	4293      	cmp	r3, r2
 801427c:	d005      	beq.n	801428a <HAL_SPI_Init+0x42>
 801427e:	687b      	ldr	r3, [r7, #4]
 8014280:	68db      	ldr	r3, [r3, #12]
 8014282:	2b0f      	cmp	r3, #15
 8014284:	d901      	bls.n	801428a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8014286:	2301      	movs	r3, #1
 8014288:	e0f7      	b.n	801447a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 801428a:	6878      	ldr	r0, [r7, #4]
 801428c:	f001 fd22 	bl	8015cd4 <SPI_GetPacketSize>
 8014290:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8014292:	687b      	ldr	r3, [r7, #4]
 8014294:	681b      	ldr	r3, [r3, #0]
 8014296:	4a7b      	ldr	r2, [pc, #492]	@ (8014484 <HAL_SPI_Init+0x23c>)
 8014298:	4293      	cmp	r3, r2
 801429a:	d00c      	beq.n	80142b6 <HAL_SPI_Init+0x6e>
 801429c:	687b      	ldr	r3, [r7, #4]
 801429e:	681b      	ldr	r3, [r3, #0]
 80142a0:	4a79      	ldr	r2, [pc, #484]	@ (8014488 <HAL_SPI_Init+0x240>)
 80142a2:	4293      	cmp	r3, r2
 80142a4:	d007      	beq.n	80142b6 <HAL_SPI_Init+0x6e>
 80142a6:	687b      	ldr	r3, [r7, #4]
 80142a8:	681b      	ldr	r3, [r3, #0]
 80142aa:	4a78      	ldr	r2, [pc, #480]	@ (801448c <HAL_SPI_Init+0x244>)
 80142ac:	4293      	cmp	r3, r2
 80142ae:	d002      	beq.n	80142b6 <HAL_SPI_Init+0x6e>
 80142b0:	68fb      	ldr	r3, [r7, #12]
 80142b2:	2b08      	cmp	r3, #8
 80142b4:	d811      	bhi.n	80142da <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80142b6:	687b      	ldr	r3, [r7, #4]
 80142b8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80142ba:	4a72      	ldr	r2, [pc, #456]	@ (8014484 <HAL_SPI_Init+0x23c>)
 80142bc:	4293      	cmp	r3, r2
 80142be:	d009      	beq.n	80142d4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80142c0:	687b      	ldr	r3, [r7, #4]
 80142c2:	681b      	ldr	r3, [r3, #0]
 80142c4:	4a70      	ldr	r2, [pc, #448]	@ (8014488 <HAL_SPI_Init+0x240>)
 80142c6:	4293      	cmp	r3, r2
 80142c8:	d004      	beq.n	80142d4 <HAL_SPI_Init+0x8c>
 80142ca:	687b      	ldr	r3, [r7, #4]
 80142cc:	681b      	ldr	r3, [r3, #0]
 80142ce:	4a6f      	ldr	r2, [pc, #444]	@ (801448c <HAL_SPI_Init+0x244>)
 80142d0:	4293      	cmp	r3, r2
 80142d2:	d104      	bne.n	80142de <HAL_SPI_Init+0x96>
 80142d4:	68fb      	ldr	r3, [r7, #12]
 80142d6:	2b10      	cmp	r3, #16
 80142d8:	d901      	bls.n	80142de <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80142da:	2301      	movs	r3, #1
 80142dc:	e0cd      	b.n	801447a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80142de:	687b      	ldr	r3, [r7, #4]
 80142e0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80142e4:	b2db      	uxtb	r3, r3
 80142e6:	2b00      	cmp	r3, #0
 80142e8:	d106      	bne.n	80142f8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80142ea:	687b      	ldr	r3, [r7, #4]
 80142ec:	2200      	movs	r2, #0
 80142ee:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80142f2:	6878      	ldr	r0, [r7, #4]
 80142f4:	f7f3 fb5a 	bl	80079ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80142f8:	687b      	ldr	r3, [r7, #4]
 80142fa:	2202      	movs	r2, #2
 80142fc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8014300:	687b      	ldr	r3, [r7, #4]
 8014302:	681b      	ldr	r3, [r3, #0]
 8014304:	681a      	ldr	r2, [r3, #0]
 8014306:	687b      	ldr	r3, [r7, #4]
 8014308:	681b      	ldr	r3, [r3, #0]
 801430a:	f022 0201 	bic.w	r2, r2, #1
 801430e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	681b      	ldr	r3, [r3, #0]
 8014314:	689b      	ldr	r3, [r3, #8]
 8014316:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 801431a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 801431c:	687b      	ldr	r3, [r7, #4]
 801431e:	699b      	ldr	r3, [r3, #24]
 8014320:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8014324:	d119      	bne.n	801435a <HAL_SPI_Init+0x112>
 8014326:	687b      	ldr	r3, [r7, #4]
 8014328:	685b      	ldr	r3, [r3, #4]
 801432a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801432e:	d103      	bne.n	8014338 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8014330:	687b      	ldr	r3, [r7, #4]
 8014332:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8014334:	2b00      	cmp	r3, #0
 8014336:	d008      	beq.n	801434a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8014338:	687b      	ldr	r3, [r7, #4]
 801433a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 801433c:	2b00      	cmp	r3, #0
 801433e:	d10c      	bne.n	801435a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8014344:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8014348:	d107      	bne.n	801435a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 801434a:	687b      	ldr	r3, [r7, #4]
 801434c:	681b      	ldr	r3, [r3, #0]
 801434e:	681a      	ldr	r2, [r3, #0]
 8014350:	687b      	ldr	r3, [r7, #4]
 8014352:	681b      	ldr	r3, [r3, #0]
 8014354:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8014358:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 801435a:	687b      	ldr	r3, [r7, #4]
 801435c:	685b      	ldr	r3, [r3, #4]
 801435e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8014362:	2b00      	cmp	r3, #0
 8014364:	d00f      	beq.n	8014386 <HAL_SPI_Init+0x13e>
 8014366:	687b      	ldr	r3, [r7, #4]
 8014368:	68db      	ldr	r3, [r3, #12]
 801436a:	2b06      	cmp	r3, #6
 801436c:	d90b      	bls.n	8014386 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 801436e:	687b      	ldr	r3, [r7, #4]
 8014370:	681b      	ldr	r3, [r3, #0]
 8014372:	681b      	ldr	r3, [r3, #0]
 8014374:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801437c:	687b      	ldr	r3, [r7, #4]
 801437e:	681b      	ldr	r3, [r3, #0]
 8014380:	430a      	orrs	r2, r1
 8014382:	601a      	str	r2, [r3, #0]
 8014384:	e007      	b.n	8014396 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8014386:	687b      	ldr	r3, [r7, #4]
 8014388:	681b      	ldr	r3, [r3, #0]
 801438a:	681a      	ldr	r2, [r3, #0]
 801438c:	687b      	ldr	r3, [r7, #4]
 801438e:	681b      	ldr	r3, [r3, #0]
 8014390:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8014394:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8014396:	687b      	ldr	r3, [r7, #4]
 8014398:	69da      	ldr	r2, [r3, #28]
 801439a:	687b      	ldr	r3, [r7, #4]
 801439c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801439e:	431a      	orrs	r2, r3
 80143a0:	68bb      	ldr	r3, [r7, #8]
 80143a2:	431a      	orrs	r2, r3
 80143a4:	687b      	ldr	r3, [r7, #4]
 80143a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80143a8:	ea42 0103 	orr.w	r1, r2, r3
 80143ac:	687b      	ldr	r3, [r7, #4]
 80143ae:	68da      	ldr	r2, [r3, #12]
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	681b      	ldr	r3, [r3, #0]
 80143b4:	430a      	orrs	r2, r1
 80143b6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80143bc:	687b      	ldr	r3, [r7, #4]
 80143be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80143c0:	431a      	orrs	r2, r3
 80143c2:	687b      	ldr	r3, [r7, #4]
 80143c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80143c6:	431a      	orrs	r2, r3
 80143c8:	687b      	ldr	r3, [r7, #4]
 80143ca:	699b      	ldr	r3, [r3, #24]
 80143cc:	431a      	orrs	r2, r3
 80143ce:	687b      	ldr	r3, [r7, #4]
 80143d0:	691b      	ldr	r3, [r3, #16]
 80143d2:	431a      	orrs	r2, r3
 80143d4:	687b      	ldr	r3, [r7, #4]
 80143d6:	695b      	ldr	r3, [r3, #20]
 80143d8:	431a      	orrs	r2, r3
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	6a1b      	ldr	r3, [r3, #32]
 80143de:	431a      	orrs	r2, r3
 80143e0:	687b      	ldr	r3, [r7, #4]
 80143e2:	685b      	ldr	r3, [r3, #4]
 80143e4:	431a      	orrs	r2, r3
 80143e6:	687b      	ldr	r3, [r7, #4]
 80143e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80143ea:	431a      	orrs	r2, r3
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	689b      	ldr	r3, [r3, #8]
 80143f0:	431a      	orrs	r2, r3
 80143f2:	687b      	ldr	r3, [r7, #4]
 80143f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80143f6:	ea42 0103 	orr.w	r1, r2, r3
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80143fe:	687b      	ldr	r3, [r7, #4]
 8014400:	681b      	ldr	r3, [r3, #0]
 8014402:	430a      	orrs	r2, r1
 8014404:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8014406:	687b      	ldr	r3, [r7, #4]
 8014408:	685b      	ldr	r3, [r3, #4]
 801440a:	2b00      	cmp	r3, #0
 801440c:	d113      	bne.n	8014436 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 801440e:	687b      	ldr	r3, [r7, #4]
 8014410:	681b      	ldr	r3, [r3, #0]
 8014412:	689b      	ldr	r3, [r3, #8]
 8014414:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8014418:	687b      	ldr	r3, [r7, #4]
 801441a:	681b      	ldr	r3, [r3, #0]
 801441c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8014420:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8014422:	687b      	ldr	r3, [r7, #4]
 8014424:	681b      	ldr	r3, [r3, #0]
 8014426:	689b      	ldr	r3, [r3, #8]
 8014428:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 801442c:	687b      	ldr	r3, [r7, #4]
 801442e:	681b      	ldr	r3, [r3, #0]
 8014430:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8014434:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8014436:	687b      	ldr	r3, [r7, #4]
 8014438:	681b      	ldr	r3, [r3, #0]
 801443a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801443c:	687b      	ldr	r3, [r7, #4]
 801443e:	681b      	ldr	r3, [r3, #0]
 8014440:	f022 0201 	bic.w	r2, r2, #1
 8014444:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	685b      	ldr	r3, [r3, #4]
 801444a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801444e:	2b00      	cmp	r3, #0
 8014450:	d00a      	beq.n	8014468 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8014452:	687b      	ldr	r3, [r7, #4]
 8014454:	681b      	ldr	r3, [r3, #0]
 8014456:	68db      	ldr	r3, [r3, #12]
 8014458:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8014460:	687b      	ldr	r3, [r7, #4]
 8014462:	681b      	ldr	r3, [r3, #0]
 8014464:	430a      	orrs	r2, r1
 8014466:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8014468:	687b      	ldr	r3, [r7, #4]
 801446a:	2200      	movs	r2, #0
 801446c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8014470:	687b      	ldr	r3, [r7, #4]
 8014472:	2201      	movs	r2, #1
 8014474:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8014478:	2300      	movs	r3, #0
}
 801447a:	4618      	mov	r0, r3
 801447c:	3710      	adds	r7, #16
 801447e:	46bd      	mov	sp, r7
 8014480:	bd80      	pop	{r7, pc}
 8014482:	bf00      	nop
 8014484:	40013000 	.word	0x40013000
 8014488:	40003800 	.word	0x40003800
 801448c:	40003c00 	.word	0x40003c00

08014490 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8014490:	b580      	push	{r7, lr}
 8014492:	b088      	sub	sp, #32
 8014494:	af02      	add	r7, sp, #8
 8014496:	60f8      	str	r0, [r7, #12]
 8014498:	60b9      	str	r1, [r7, #8]
 801449a:	603b      	str	r3, [r7, #0]
 801449c:	4613      	mov	r3, r2
 801449e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80144a0:	68fb      	ldr	r3, [r7, #12]
 80144a2:	681b      	ldr	r3, [r3, #0]
 80144a4:	3320      	adds	r3, #32
 80144a6:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80144a8:	f7f4 fd2c 	bl	8008f04 <HAL_GetTick>
 80144ac:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80144ae:	68fb      	ldr	r3, [r7, #12]
 80144b0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80144b4:	b2db      	uxtb	r3, r3
 80144b6:	2b01      	cmp	r3, #1
 80144b8:	d001      	beq.n	80144be <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 80144ba:	2302      	movs	r3, #2
 80144bc:	e1d1      	b.n	8014862 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 80144be:	68bb      	ldr	r3, [r7, #8]
 80144c0:	2b00      	cmp	r3, #0
 80144c2:	d002      	beq.n	80144ca <HAL_SPI_Transmit+0x3a>
 80144c4:	88fb      	ldrh	r3, [r7, #6]
 80144c6:	2b00      	cmp	r3, #0
 80144c8:	d101      	bne.n	80144ce <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 80144ca:	2301      	movs	r3, #1
 80144cc:	e1c9      	b.n	8014862 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80144ce:	68fb      	ldr	r3, [r7, #12]
 80144d0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80144d4:	2b01      	cmp	r3, #1
 80144d6:	d101      	bne.n	80144dc <HAL_SPI_Transmit+0x4c>
 80144d8:	2302      	movs	r3, #2
 80144da:	e1c2      	b.n	8014862 <HAL_SPI_Transmit+0x3d2>
 80144dc:	68fb      	ldr	r3, [r7, #12]
 80144de:	2201      	movs	r2, #1
 80144e0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80144e4:	68fb      	ldr	r3, [r7, #12]
 80144e6:	2203      	movs	r2, #3
 80144e8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80144ec:	68fb      	ldr	r3, [r7, #12]
 80144ee:	2200      	movs	r2, #0
 80144f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80144f4:	68fb      	ldr	r3, [r7, #12]
 80144f6:	68ba      	ldr	r2, [r7, #8]
 80144f8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 80144fa:	68fb      	ldr	r3, [r7, #12]
 80144fc:	88fa      	ldrh	r2, [r7, #6]
 80144fe:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8014502:	68fb      	ldr	r3, [r7, #12]
 8014504:	88fa      	ldrh	r2, [r7, #6]
 8014506:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 801450a:	68fb      	ldr	r3, [r7, #12]
 801450c:	2200      	movs	r2, #0
 801450e:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8014510:	68fb      	ldr	r3, [r7, #12]
 8014512:	2200      	movs	r2, #0
 8014514:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8014518:	68fb      	ldr	r3, [r7, #12]
 801451a:	2200      	movs	r2, #0
 801451c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8014520:	68fb      	ldr	r3, [r7, #12]
 8014522:	2200      	movs	r2, #0
 8014524:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8014526:	68fb      	ldr	r3, [r7, #12]
 8014528:	2200      	movs	r2, #0
 801452a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801452c:	68fb      	ldr	r3, [r7, #12]
 801452e:	689b      	ldr	r3, [r3, #8]
 8014530:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8014534:	d108      	bne.n	8014548 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8014536:	68fb      	ldr	r3, [r7, #12]
 8014538:	681b      	ldr	r3, [r3, #0]
 801453a:	681a      	ldr	r2, [r3, #0]
 801453c:	68fb      	ldr	r3, [r7, #12]
 801453e:	681b      	ldr	r3, [r3, #0]
 8014540:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8014544:	601a      	str	r2, [r3, #0]
 8014546:	e009      	b.n	801455c <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8014548:	68fb      	ldr	r3, [r7, #12]
 801454a:	681b      	ldr	r3, [r3, #0]
 801454c:	68db      	ldr	r3, [r3, #12]
 801454e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8014552:	68fb      	ldr	r3, [r7, #12]
 8014554:	681b      	ldr	r3, [r3, #0]
 8014556:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 801455a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 801455c:	68fb      	ldr	r3, [r7, #12]
 801455e:	681b      	ldr	r3, [r3, #0]
 8014560:	685a      	ldr	r2, [r3, #4]
 8014562:	4b96      	ldr	r3, [pc, #600]	@ (80147bc <HAL_SPI_Transmit+0x32c>)
 8014564:	4013      	ands	r3, r2
 8014566:	88f9      	ldrh	r1, [r7, #6]
 8014568:	68fa      	ldr	r2, [r7, #12]
 801456a:	6812      	ldr	r2, [r2, #0]
 801456c:	430b      	orrs	r3, r1
 801456e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8014570:	68fb      	ldr	r3, [r7, #12]
 8014572:	681b      	ldr	r3, [r3, #0]
 8014574:	681a      	ldr	r2, [r3, #0]
 8014576:	68fb      	ldr	r3, [r7, #12]
 8014578:	681b      	ldr	r3, [r3, #0]
 801457a:	f042 0201 	orr.w	r2, r2, #1
 801457e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8014580:	68fb      	ldr	r3, [r7, #12]
 8014582:	685b      	ldr	r3, [r3, #4]
 8014584:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8014588:	d107      	bne.n	801459a <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 801458a:	68fb      	ldr	r3, [r7, #12]
 801458c:	681b      	ldr	r3, [r3, #0]
 801458e:	681a      	ldr	r2, [r3, #0]
 8014590:	68fb      	ldr	r3, [r7, #12]
 8014592:	681b      	ldr	r3, [r3, #0]
 8014594:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8014598:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 801459a:	68fb      	ldr	r3, [r7, #12]
 801459c:	68db      	ldr	r3, [r3, #12]
 801459e:	2b0f      	cmp	r3, #15
 80145a0:	d947      	bls.n	8014632 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80145a2:	e03f      	b.n	8014624 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80145a4:	68fb      	ldr	r3, [r7, #12]
 80145a6:	681b      	ldr	r3, [r3, #0]
 80145a8:	695b      	ldr	r3, [r3, #20]
 80145aa:	f003 0302 	and.w	r3, r3, #2
 80145ae:	2b02      	cmp	r3, #2
 80145b0:	d114      	bne.n	80145dc <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80145b2:	68fb      	ldr	r3, [r7, #12]
 80145b4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80145b6:	68fb      	ldr	r3, [r7, #12]
 80145b8:	681b      	ldr	r3, [r3, #0]
 80145ba:	6812      	ldr	r2, [r2, #0]
 80145bc:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80145be:	68fb      	ldr	r3, [r7, #12]
 80145c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80145c2:	1d1a      	adds	r2, r3, #4
 80145c4:	68fb      	ldr	r3, [r7, #12]
 80145c6:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80145c8:	68fb      	ldr	r3, [r7, #12]
 80145ca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80145ce:	b29b      	uxth	r3, r3
 80145d0:	3b01      	subs	r3, #1
 80145d2:	b29a      	uxth	r2, r3
 80145d4:	68fb      	ldr	r3, [r7, #12]
 80145d6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80145da:	e023      	b.n	8014624 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80145dc:	f7f4 fc92 	bl	8008f04 <HAL_GetTick>
 80145e0:	4602      	mov	r2, r0
 80145e2:	693b      	ldr	r3, [r7, #16]
 80145e4:	1ad3      	subs	r3, r2, r3
 80145e6:	683a      	ldr	r2, [r7, #0]
 80145e8:	429a      	cmp	r2, r3
 80145ea:	d803      	bhi.n	80145f4 <HAL_SPI_Transmit+0x164>
 80145ec:	683b      	ldr	r3, [r7, #0]
 80145ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80145f2:	d102      	bne.n	80145fa <HAL_SPI_Transmit+0x16a>
 80145f4:	683b      	ldr	r3, [r7, #0]
 80145f6:	2b00      	cmp	r3, #0
 80145f8:	d114      	bne.n	8014624 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80145fa:	68f8      	ldr	r0, [r7, #12]
 80145fc:	f001 fa9c 	bl	8015b38 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8014600:	68fb      	ldr	r3, [r7, #12]
 8014602:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014606:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 801460a:	68fb      	ldr	r3, [r7, #12]
 801460c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8014610:	68fb      	ldr	r3, [r7, #12]
 8014612:	2201      	movs	r2, #1
 8014614:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8014618:	68fb      	ldr	r3, [r7, #12]
 801461a:	2200      	movs	r2, #0
 801461c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8014620:	2303      	movs	r3, #3
 8014622:	e11e      	b.n	8014862 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8014624:	68fb      	ldr	r3, [r7, #12]
 8014626:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801462a:	b29b      	uxth	r3, r3
 801462c:	2b00      	cmp	r3, #0
 801462e:	d1b9      	bne.n	80145a4 <HAL_SPI_Transmit+0x114>
 8014630:	e0f1      	b.n	8014816 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8014632:	68fb      	ldr	r3, [r7, #12]
 8014634:	68db      	ldr	r3, [r3, #12]
 8014636:	2b07      	cmp	r3, #7
 8014638:	f240 80e6 	bls.w	8014808 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 801463c:	e05d      	b.n	80146fa <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 801463e:	68fb      	ldr	r3, [r7, #12]
 8014640:	681b      	ldr	r3, [r3, #0]
 8014642:	695b      	ldr	r3, [r3, #20]
 8014644:	f003 0302 	and.w	r3, r3, #2
 8014648:	2b02      	cmp	r3, #2
 801464a:	d132      	bne.n	80146b2 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 801464c:	68fb      	ldr	r3, [r7, #12]
 801464e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014652:	b29b      	uxth	r3, r3
 8014654:	2b01      	cmp	r3, #1
 8014656:	d918      	bls.n	801468a <HAL_SPI_Transmit+0x1fa>
 8014658:	68fb      	ldr	r3, [r7, #12]
 801465a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801465c:	2b00      	cmp	r3, #0
 801465e:	d014      	beq.n	801468a <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8014660:	68fb      	ldr	r3, [r7, #12]
 8014662:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8014664:	68fb      	ldr	r3, [r7, #12]
 8014666:	681b      	ldr	r3, [r3, #0]
 8014668:	6812      	ldr	r2, [r2, #0]
 801466a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 801466c:	68fb      	ldr	r3, [r7, #12]
 801466e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014670:	1d1a      	adds	r2, r3, #4
 8014672:	68fb      	ldr	r3, [r7, #12]
 8014674:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8014676:	68fb      	ldr	r3, [r7, #12]
 8014678:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801467c:	b29b      	uxth	r3, r3
 801467e:	3b02      	subs	r3, #2
 8014680:	b29a      	uxth	r2, r3
 8014682:	68fb      	ldr	r3, [r7, #12]
 8014684:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8014688:	e037      	b.n	80146fa <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 801468a:	68fb      	ldr	r3, [r7, #12]
 801468c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801468e:	881a      	ldrh	r2, [r3, #0]
 8014690:	697b      	ldr	r3, [r7, #20]
 8014692:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8014694:	68fb      	ldr	r3, [r7, #12]
 8014696:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014698:	1c9a      	adds	r2, r3, #2
 801469a:	68fb      	ldr	r3, [r7, #12]
 801469c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 801469e:	68fb      	ldr	r3, [r7, #12]
 80146a0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80146a4:	b29b      	uxth	r3, r3
 80146a6:	3b01      	subs	r3, #1
 80146a8:	b29a      	uxth	r2, r3
 80146aa:	68fb      	ldr	r3, [r7, #12]
 80146ac:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80146b0:	e023      	b.n	80146fa <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80146b2:	f7f4 fc27 	bl	8008f04 <HAL_GetTick>
 80146b6:	4602      	mov	r2, r0
 80146b8:	693b      	ldr	r3, [r7, #16]
 80146ba:	1ad3      	subs	r3, r2, r3
 80146bc:	683a      	ldr	r2, [r7, #0]
 80146be:	429a      	cmp	r2, r3
 80146c0:	d803      	bhi.n	80146ca <HAL_SPI_Transmit+0x23a>
 80146c2:	683b      	ldr	r3, [r7, #0]
 80146c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80146c8:	d102      	bne.n	80146d0 <HAL_SPI_Transmit+0x240>
 80146ca:	683b      	ldr	r3, [r7, #0]
 80146cc:	2b00      	cmp	r3, #0
 80146ce:	d114      	bne.n	80146fa <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80146d0:	68f8      	ldr	r0, [r7, #12]
 80146d2:	f001 fa31 	bl	8015b38 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80146d6:	68fb      	ldr	r3, [r7, #12]
 80146d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80146dc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80146e0:	68fb      	ldr	r3, [r7, #12]
 80146e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80146e6:	68fb      	ldr	r3, [r7, #12]
 80146e8:	2201      	movs	r2, #1
 80146ea:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80146ee:	68fb      	ldr	r3, [r7, #12]
 80146f0:	2200      	movs	r2, #0
 80146f2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80146f6:	2303      	movs	r3, #3
 80146f8:	e0b3      	b.n	8014862 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80146fa:	68fb      	ldr	r3, [r7, #12]
 80146fc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014700:	b29b      	uxth	r3, r3
 8014702:	2b00      	cmp	r3, #0
 8014704:	d19b      	bne.n	801463e <HAL_SPI_Transmit+0x1ae>
 8014706:	e086      	b.n	8014816 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8014708:	68fb      	ldr	r3, [r7, #12]
 801470a:	681b      	ldr	r3, [r3, #0]
 801470c:	695b      	ldr	r3, [r3, #20]
 801470e:	f003 0302 	and.w	r3, r3, #2
 8014712:	2b02      	cmp	r3, #2
 8014714:	d154      	bne.n	80147c0 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8014716:	68fb      	ldr	r3, [r7, #12]
 8014718:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801471c:	b29b      	uxth	r3, r3
 801471e:	2b03      	cmp	r3, #3
 8014720:	d918      	bls.n	8014754 <HAL_SPI_Transmit+0x2c4>
 8014722:	68fb      	ldr	r3, [r7, #12]
 8014724:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014726:	2b40      	cmp	r3, #64	@ 0x40
 8014728:	d914      	bls.n	8014754 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 801472a:	68fb      	ldr	r3, [r7, #12]
 801472c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801472e:	68fb      	ldr	r3, [r7, #12]
 8014730:	681b      	ldr	r3, [r3, #0]
 8014732:	6812      	ldr	r2, [r2, #0]
 8014734:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8014736:	68fb      	ldr	r3, [r7, #12]
 8014738:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801473a:	1d1a      	adds	r2, r3, #4
 801473c:	68fb      	ldr	r3, [r7, #12]
 801473e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8014740:	68fb      	ldr	r3, [r7, #12]
 8014742:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014746:	b29b      	uxth	r3, r3
 8014748:	3b04      	subs	r3, #4
 801474a:	b29a      	uxth	r2, r3
 801474c:	68fb      	ldr	r3, [r7, #12]
 801474e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8014752:	e059      	b.n	8014808 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8014754:	68fb      	ldr	r3, [r7, #12]
 8014756:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801475a:	b29b      	uxth	r3, r3
 801475c:	2b01      	cmp	r3, #1
 801475e:	d917      	bls.n	8014790 <HAL_SPI_Transmit+0x300>
 8014760:	68fb      	ldr	r3, [r7, #12]
 8014762:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014764:	2b00      	cmp	r3, #0
 8014766:	d013      	beq.n	8014790 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8014768:	68fb      	ldr	r3, [r7, #12]
 801476a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801476c:	881a      	ldrh	r2, [r3, #0]
 801476e:	697b      	ldr	r3, [r7, #20]
 8014770:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8014772:	68fb      	ldr	r3, [r7, #12]
 8014774:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014776:	1c9a      	adds	r2, r3, #2
 8014778:	68fb      	ldr	r3, [r7, #12]
 801477a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 801477c:	68fb      	ldr	r3, [r7, #12]
 801477e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014782:	b29b      	uxth	r3, r3
 8014784:	3b02      	subs	r3, #2
 8014786:	b29a      	uxth	r2, r3
 8014788:	68fb      	ldr	r3, [r7, #12]
 801478a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 801478e:	e03b      	b.n	8014808 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8014790:	68fb      	ldr	r3, [r7, #12]
 8014792:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8014794:	68fb      	ldr	r3, [r7, #12]
 8014796:	681b      	ldr	r3, [r3, #0]
 8014798:	3320      	adds	r3, #32
 801479a:	7812      	ldrb	r2, [r2, #0]
 801479c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 801479e:	68fb      	ldr	r3, [r7, #12]
 80147a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80147a2:	1c5a      	adds	r2, r3, #1
 80147a4:	68fb      	ldr	r3, [r7, #12]
 80147a6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80147a8:	68fb      	ldr	r3, [r7, #12]
 80147aa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80147ae:	b29b      	uxth	r3, r3
 80147b0:	3b01      	subs	r3, #1
 80147b2:	b29a      	uxth	r2, r3
 80147b4:	68fb      	ldr	r3, [r7, #12]
 80147b6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80147ba:	e025      	b.n	8014808 <HAL_SPI_Transmit+0x378>
 80147bc:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80147c0:	f7f4 fba0 	bl	8008f04 <HAL_GetTick>
 80147c4:	4602      	mov	r2, r0
 80147c6:	693b      	ldr	r3, [r7, #16]
 80147c8:	1ad3      	subs	r3, r2, r3
 80147ca:	683a      	ldr	r2, [r7, #0]
 80147cc:	429a      	cmp	r2, r3
 80147ce:	d803      	bhi.n	80147d8 <HAL_SPI_Transmit+0x348>
 80147d0:	683b      	ldr	r3, [r7, #0]
 80147d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80147d6:	d102      	bne.n	80147de <HAL_SPI_Transmit+0x34e>
 80147d8:	683b      	ldr	r3, [r7, #0]
 80147da:	2b00      	cmp	r3, #0
 80147dc:	d114      	bne.n	8014808 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80147de:	68f8      	ldr	r0, [r7, #12]
 80147e0:	f001 f9aa 	bl	8015b38 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80147e4:	68fb      	ldr	r3, [r7, #12]
 80147e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80147ea:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80147ee:	68fb      	ldr	r3, [r7, #12]
 80147f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80147f4:	68fb      	ldr	r3, [r7, #12]
 80147f6:	2201      	movs	r2, #1
 80147f8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80147fc:	68fb      	ldr	r3, [r7, #12]
 80147fe:	2200      	movs	r2, #0
 8014800:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8014804:	2303      	movs	r3, #3
 8014806:	e02c      	b.n	8014862 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8014808:	68fb      	ldr	r3, [r7, #12]
 801480a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801480e:	b29b      	uxth	r3, r3
 8014810:	2b00      	cmp	r3, #0
 8014812:	f47f af79 	bne.w	8014708 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8014816:	693b      	ldr	r3, [r7, #16]
 8014818:	9300      	str	r3, [sp, #0]
 801481a:	683b      	ldr	r3, [r7, #0]
 801481c:	2200      	movs	r2, #0
 801481e:	2108      	movs	r1, #8
 8014820:	68f8      	ldr	r0, [r7, #12]
 8014822:	f001 fa29 	bl	8015c78 <SPI_WaitOnFlagUntilTimeout>
 8014826:	4603      	mov	r3, r0
 8014828:	2b00      	cmp	r3, #0
 801482a:	d007      	beq.n	801483c <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801482c:	68fb      	ldr	r3, [r7, #12]
 801482e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014832:	f043 0220 	orr.w	r2, r3, #32
 8014836:	68fb      	ldr	r3, [r7, #12]
 8014838:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 801483c:	68f8      	ldr	r0, [r7, #12]
 801483e:	f001 f97b 	bl	8015b38 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8014842:	68fb      	ldr	r3, [r7, #12]
 8014844:	2201      	movs	r2, #1
 8014846:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 801484a:	68fb      	ldr	r3, [r7, #12]
 801484c:	2200      	movs	r2, #0
 801484e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8014852:	68fb      	ldr	r3, [r7, #12]
 8014854:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014858:	2b00      	cmp	r3, #0
 801485a:	d001      	beq.n	8014860 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 801485c:	2301      	movs	r3, #1
 801485e:	e000      	b.n	8014862 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8014860:	2300      	movs	r3, #0
  }
}
 8014862:	4618      	mov	r0, r3
 8014864:	3718      	adds	r7, #24
 8014866:	46bd      	mov	sp, r7
 8014868:	bd80      	pop	{r7, pc}
 801486a:	bf00      	nop

0801486c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801486c:	b580      	push	{r7, lr}
 801486e:	b088      	sub	sp, #32
 8014870:	af00      	add	r7, sp, #0
 8014872:	60f8      	str	r0, [r7, #12]
 8014874:	60b9      	str	r1, [r7, #8]
 8014876:	603b      	str	r3, [r7, #0]
 8014878:	4613      	mov	r3, r2
 801487a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 801487c:	68fb      	ldr	r3, [r7, #12]
 801487e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014880:	095b      	lsrs	r3, r3, #5
 8014882:	b29b      	uxth	r3, r3
 8014884:	3301      	adds	r3, #1
 8014886:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8014888:	68fb      	ldr	r3, [r7, #12]
 801488a:	681b      	ldr	r3, [r3, #0]
 801488c:	3330      	adds	r3, #48	@ 0x30
 801488e:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8014890:	f7f4 fb38 	bl	8008f04 <HAL_GetTick>
 8014894:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8014896:	68fb      	ldr	r3, [r7, #12]
 8014898:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801489c:	b2db      	uxtb	r3, r3
 801489e:	2b01      	cmp	r3, #1
 80148a0:	d001      	beq.n	80148a6 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 80148a2:	2302      	movs	r3, #2
 80148a4:	e250      	b.n	8014d48 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 80148a6:	68bb      	ldr	r3, [r7, #8]
 80148a8:	2b00      	cmp	r3, #0
 80148aa:	d002      	beq.n	80148b2 <HAL_SPI_Receive+0x46>
 80148ac:	88fb      	ldrh	r3, [r7, #6]
 80148ae:	2b00      	cmp	r3, #0
 80148b0:	d101      	bne.n	80148b6 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 80148b2:	2301      	movs	r3, #1
 80148b4:	e248      	b.n	8014d48 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80148b6:	68fb      	ldr	r3, [r7, #12]
 80148b8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80148bc:	2b01      	cmp	r3, #1
 80148be:	d101      	bne.n	80148c4 <HAL_SPI_Receive+0x58>
 80148c0:	2302      	movs	r3, #2
 80148c2:	e241      	b.n	8014d48 <HAL_SPI_Receive+0x4dc>
 80148c4:	68fb      	ldr	r3, [r7, #12]
 80148c6:	2201      	movs	r2, #1
 80148c8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80148cc:	68fb      	ldr	r3, [r7, #12]
 80148ce:	2204      	movs	r2, #4
 80148d0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80148d4:	68fb      	ldr	r3, [r7, #12]
 80148d6:	2200      	movs	r2, #0
 80148d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80148dc:	68fb      	ldr	r3, [r7, #12]
 80148de:	68ba      	ldr	r2, [r7, #8]
 80148e0:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 80148e2:	68fb      	ldr	r3, [r7, #12]
 80148e4:	88fa      	ldrh	r2, [r7, #6]
 80148e6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 80148ea:	68fb      	ldr	r3, [r7, #12]
 80148ec:	88fa      	ldrh	r2, [r7, #6]
 80148ee:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 80148f2:	68fb      	ldr	r3, [r7, #12]
 80148f4:	2200      	movs	r2, #0
 80148f6:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 80148f8:	68fb      	ldr	r3, [r7, #12]
 80148fa:	2200      	movs	r2, #0
 80148fc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8014900:	68fb      	ldr	r3, [r7, #12]
 8014902:	2200      	movs	r2, #0
 8014904:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8014908:	68fb      	ldr	r3, [r7, #12]
 801490a:	2200      	movs	r2, #0
 801490c:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 801490e:	68fb      	ldr	r3, [r7, #12]
 8014910:	2200      	movs	r2, #0
 8014912:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8014914:	68fb      	ldr	r3, [r7, #12]
 8014916:	689b      	ldr	r3, [r3, #8]
 8014918:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 801491c:	d108      	bne.n	8014930 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 801491e:	68fb      	ldr	r3, [r7, #12]
 8014920:	681b      	ldr	r3, [r3, #0]
 8014922:	681a      	ldr	r2, [r3, #0]
 8014924:	68fb      	ldr	r3, [r7, #12]
 8014926:	681b      	ldr	r3, [r3, #0]
 8014928:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 801492c:	601a      	str	r2, [r3, #0]
 801492e:	e009      	b.n	8014944 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8014930:	68fb      	ldr	r3, [r7, #12]
 8014932:	681b      	ldr	r3, [r3, #0]
 8014934:	68db      	ldr	r3, [r3, #12]
 8014936:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 801493a:	68fb      	ldr	r3, [r7, #12]
 801493c:	681b      	ldr	r3, [r3, #0]
 801493e:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8014942:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8014944:	68fb      	ldr	r3, [r7, #12]
 8014946:	681b      	ldr	r3, [r3, #0]
 8014948:	685a      	ldr	r2, [r3, #4]
 801494a:	4b95      	ldr	r3, [pc, #596]	@ (8014ba0 <HAL_SPI_Receive+0x334>)
 801494c:	4013      	ands	r3, r2
 801494e:	88f9      	ldrh	r1, [r7, #6]
 8014950:	68fa      	ldr	r2, [r7, #12]
 8014952:	6812      	ldr	r2, [r2, #0]
 8014954:	430b      	orrs	r3, r1
 8014956:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8014958:	68fb      	ldr	r3, [r7, #12]
 801495a:	681b      	ldr	r3, [r3, #0]
 801495c:	681a      	ldr	r2, [r3, #0]
 801495e:	68fb      	ldr	r3, [r7, #12]
 8014960:	681b      	ldr	r3, [r3, #0]
 8014962:	f042 0201 	orr.w	r2, r2, #1
 8014966:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8014968:	68fb      	ldr	r3, [r7, #12]
 801496a:	685b      	ldr	r3, [r3, #4]
 801496c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8014970:	d107      	bne.n	8014982 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8014972:	68fb      	ldr	r3, [r7, #12]
 8014974:	681b      	ldr	r3, [r3, #0]
 8014976:	681a      	ldr	r2, [r3, #0]
 8014978:	68fb      	ldr	r3, [r7, #12]
 801497a:	681b      	ldr	r3, [r3, #0]
 801497c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8014980:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8014982:	68fb      	ldr	r3, [r7, #12]
 8014984:	68db      	ldr	r3, [r3, #12]
 8014986:	2b0f      	cmp	r3, #15
 8014988:	d96c      	bls.n	8014a64 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 801498a:	e064      	b.n	8014a56 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 801498c:	68fb      	ldr	r3, [r7, #12]
 801498e:	681b      	ldr	r3, [r3, #0]
 8014990:	695b      	ldr	r3, [r3, #20]
 8014992:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8014994:	68fb      	ldr	r3, [r7, #12]
 8014996:	681b      	ldr	r3, [r3, #0]
 8014998:	695b      	ldr	r3, [r3, #20]
 801499a:	f003 0301 	and.w	r3, r3, #1
 801499e:	2b01      	cmp	r3, #1
 80149a0:	d114      	bne.n	80149cc <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80149a2:	68fb      	ldr	r3, [r7, #12]
 80149a4:	681a      	ldr	r2, [r3, #0]
 80149a6:	68fb      	ldr	r3, [r7, #12]
 80149a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80149aa:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80149ac:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80149ae:	68fb      	ldr	r3, [r7, #12]
 80149b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80149b2:	1d1a      	adds	r2, r3, #4
 80149b4:	68fb      	ldr	r3, [r7, #12]
 80149b6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80149b8:	68fb      	ldr	r3, [r7, #12]
 80149ba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80149be:	b29b      	uxth	r3, r3
 80149c0:	3b01      	subs	r3, #1
 80149c2:	b29a      	uxth	r2, r3
 80149c4:	68fb      	ldr	r3, [r7, #12]
 80149c6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80149ca:	e044      	b.n	8014a56 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80149cc:	68fb      	ldr	r3, [r7, #12]
 80149ce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80149d2:	b29b      	uxth	r3, r3
 80149d4:	8bfa      	ldrh	r2, [r7, #30]
 80149d6:	429a      	cmp	r2, r3
 80149d8:	d919      	bls.n	8014a0e <HAL_SPI_Receive+0x1a2>
 80149da:	693b      	ldr	r3, [r7, #16]
 80149dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80149e0:	2b00      	cmp	r3, #0
 80149e2:	d014      	beq.n	8014a0e <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80149e4:	68fb      	ldr	r3, [r7, #12]
 80149e6:	681a      	ldr	r2, [r3, #0]
 80149e8:	68fb      	ldr	r3, [r7, #12]
 80149ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80149ec:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80149ee:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80149f0:	68fb      	ldr	r3, [r7, #12]
 80149f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80149f4:	1d1a      	adds	r2, r3, #4
 80149f6:	68fb      	ldr	r3, [r7, #12]
 80149f8:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80149fa:	68fb      	ldr	r3, [r7, #12]
 80149fc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014a00:	b29b      	uxth	r3, r3
 8014a02:	3b01      	subs	r3, #1
 8014a04:	b29a      	uxth	r2, r3
 8014a06:	68fb      	ldr	r3, [r7, #12]
 8014a08:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8014a0c:	e023      	b.n	8014a56 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8014a0e:	f7f4 fa79 	bl	8008f04 <HAL_GetTick>
 8014a12:	4602      	mov	r2, r0
 8014a14:	697b      	ldr	r3, [r7, #20]
 8014a16:	1ad3      	subs	r3, r2, r3
 8014a18:	683a      	ldr	r2, [r7, #0]
 8014a1a:	429a      	cmp	r2, r3
 8014a1c:	d803      	bhi.n	8014a26 <HAL_SPI_Receive+0x1ba>
 8014a1e:	683b      	ldr	r3, [r7, #0]
 8014a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014a24:	d102      	bne.n	8014a2c <HAL_SPI_Receive+0x1c0>
 8014a26:	683b      	ldr	r3, [r7, #0]
 8014a28:	2b00      	cmp	r3, #0
 8014a2a:	d114      	bne.n	8014a56 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8014a2c:	68f8      	ldr	r0, [r7, #12]
 8014a2e:	f001 f883 	bl	8015b38 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8014a32:	68fb      	ldr	r3, [r7, #12]
 8014a34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014a38:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8014a3c:	68fb      	ldr	r3, [r7, #12]
 8014a3e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8014a42:	68fb      	ldr	r3, [r7, #12]
 8014a44:	2201      	movs	r2, #1
 8014a46:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8014a4a:	68fb      	ldr	r3, [r7, #12]
 8014a4c:	2200      	movs	r2, #0
 8014a4e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8014a52:	2303      	movs	r3, #3
 8014a54:	e178      	b.n	8014d48 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8014a56:	68fb      	ldr	r3, [r7, #12]
 8014a58:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014a5c:	b29b      	uxth	r3, r3
 8014a5e:	2b00      	cmp	r3, #0
 8014a60:	d194      	bne.n	801498c <HAL_SPI_Receive+0x120>
 8014a62:	e15e      	b.n	8014d22 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8014a64:	68fb      	ldr	r3, [r7, #12]
 8014a66:	68db      	ldr	r3, [r3, #12]
 8014a68:	2b07      	cmp	r3, #7
 8014a6a:	f240 8153 	bls.w	8014d14 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8014a6e:	e08f      	b.n	8014b90 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8014a70:	68fb      	ldr	r3, [r7, #12]
 8014a72:	681b      	ldr	r3, [r3, #0]
 8014a74:	695b      	ldr	r3, [r3, #20]
 8014a76:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8014a78:	68fb      	ldr	r3, [r7, #12]
 8014a7a:	681b      	ldr	r3, [r3, #0]
 8014a7c:	695b      	ldr	r3, [r3, #20]
 8014a7e:	f003 0301 	and.w	r3, r3, #1
 8014a82:	2b01      	cmp	r3, #1
 8014a84:	d114      	bne.n	8014ab0 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8014a86:	68fb      	ldr	r3, [r7, #12]
 8014a88:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014a8a:	69ba      	ldr	r2, [r7, #24]
 8014a8c:	8812      	ldrh	r2, [r2, #0]
 8014a8e:	b292      	uxth	r2, r2
 8014a90:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8014a92:	68fb      	ldr	r3, [r7, #12]
 8014a94:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014a96:	1c9a      	adds	r2, r3, #2
 8014a98:	68fb      	ldr	r3, [r7, #12]
 8014a9a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8014a9c:	68fb      	ldr	r3, [r7, #12]
 8014a9e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014aa2:	b29b      	uxth	r3, r3
 8014aa4:	3b01      	subs	r3, #1
 8014aa6:	b29a      	uxth	r2, r3
 8014aa8:	68fb      	ldr	r3, [r7, #12]
 8014aaa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8014aae:	e06f      	b.n	8014b90 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8014ab0:	68fb      	ldr	r3, [r7, #12]
 8014ab2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014ab6:	b29b      	uxth	r3, r3
 8014ab8:	8bfa      	ldrh	r2, [r7, #30]
 8014aba:	429a      	cmp	r2, r3
 8014abc:	d924      	bls.n	8014b08 <HAL_SPI_Receive+0x29c>
 8014abe:	693b      	ldr	r3, [r7, #16]
 8014ac0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8014ac4:	2b00      	cmp	r3, #0
 8014ac6:	d01f      	beq.n	8014b08 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8014ac8:	68fb      	ldr	r3, [r7, #12]
 8014aca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014acc:	69ba      	ldr	r2, [r7, #24]
 8014ace:	8812      	ldrh	r2, [r2, #0]
 8014ad0:	b292      	uxth	r2, r2
 8014ad2:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8014ad4:	68fb      	ldr	r3, [r7, #12]
 8014ad6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014ad8:	1c9a      	adds	r2, r3, #2
 8014ada:	68fb      	ldr	r3, [r7, #12]
 8014adc:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8014ade:	68fb      	ldr	r3, [r7, #12]
 8014ae0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014ae2:	69ba      	ldr	r2, [r7, #24]
 8014ae4:	8812      	ldrh	r2, [r2, #0]
 8014ae6:	b292      	uxth	r2, r2
 8014ae8:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8014aea:	68fb      	ldr	r3, [r7, #12]
 8014aec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014aee:	1c9a      	adds	r2, r3, #2
 8014af0:	68fb      	ldr	r3, [r7, #12]
 8014af2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8014af4:	68fb      	ldr	r3, [r7, #12]
 8014af6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014afa:	b29b      	uxth	r3, r3
 8014afc:	3b02      	subs	r3, #2
 8014afe:	b29a      	uxth	r2, r3
 8014b00:	68fb      	ldr	r3, [r7, #12]
 8014b02:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8014b06:	e043      	b.n	8014b90 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8014b08:	68fb      	ldr	r3, [r7, #12]
 8014b0a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014b0e:	b29b      	uxth	r3, r3
 8014b10:	2b01      	cmp	r3, #1
 8014b12:	d119      	bne.n	8014b48 <HAL_SPI_Receive+0x2dc>
 8014b14:	693b      	ldr	r3, [r7, #16]
 8014b16:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8014b1a:	2b00      	cmp	r3, #0
 8014b1c:	d014      	beq.n	8014b48 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8014b1e:	68fb      	ldr	r3, [r7, #12]
 8014b20:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014b22:	69ba      	ldr	r2, [r7, #24]
 8014b24:	8812      	ldrh	r2, [r2, #0]
 8014b26:	b292      	uxth	r2, r2
 8014b28:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8014b2a:	68fb      	ldr	r3, [r7, #12]
 8014b2c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014b2e:	1c9a      	adds	r2, r3, #2
 8014b30:	68fb      	ldr	r3, [r7, #12]
 8014b32:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8014b34:	68fb      	ldr	r3, [r7, #12]
 8014b36:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014b3a:	b29b      	uxth	r3, r3
 8014b3c:	3b01      	subs	r3, #1
 8014b3e:	b29a      	uxth	r2, r3
 8014b40:	68fb      	ldr	r3, [r7, #12]
 8014b42:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8014b46:	e023      	b.n	8014b90 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8014b48:	f7f4 f9dc 	bl	8008f04 <HAL_GetTick>
 8014b4c:	4602      	mov	r2, r0
 8014b4e:	697b      	ldr	r3, [r7, #20]
 8014b50:	1ad3      	subs	r3, r2, r3
 8014b52:	683a      	ldr	r2, [r7, #0]
 8014b54:	429a      	cmp	r2, r3
 8014b56:	d803      	bhi.n	8014b60 <HAL_SPI_Receive+0x2f4>
 8014b58:	683b      	ldr	r3, [r7, #0]
 8014b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014b5e:	d102      	bne.n	8014b66 <HAL_SPI_Receive+0x2fa>
 8014b60:	683b      	ldr	r3, [r7, #0]
 8014b62:	2b00      	cmp	r3, #0
 8014b64:	d114      	bne.n	8014b90 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8014b66:	68f8      	ldr	r0, [r7, #12]
 8014b68:	f000 ffe6 	bl	8015b38 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8014b6c:	68fb      	ldr	r3, [r7, #12]
 8014b6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014b72:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8014b76:	68fb      	ldr	r3, [r7, #12]
 8014b78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8014b7c:	68fb      	ldr	r3, [r7, #12]
 8014b7e:	2201      	movs	r2, #1
 8014b80:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8014b84:	68fb      	ldr	r3, [r7, #12]
 8014b86:	2200      	movs	r2, #0
 8014b88:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8014b8c:	2303      	movs	r3, #3
 8014b8e:	e0db      	b.n	8014d48 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8014b90:	68fb      	ldr	r3, [r7, #12]
 8014b92:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014b96:	b29b      	uxth	r3, r3
 8014b98:	2b00      	cmp	r3, #0
 8014b9a:	f47f af69 	bne.w	8014a70 <HAL_SPI_Receive+0x204>
 8014b9e:	e0c0      	b.n	8014d22 <HAL_SPI_Receive+0x4b6>
 8014ba0:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8014ba4:	68fb      	ldr	r3, [r7, #12]
 8014ba6:	681b      	ldr	r3, [r3, #0]
 8014ba8:	695b      	ldr	r3, [r3, #20]
 8014baa:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8014bac:	68fb      	ldr	r3, [r7, #12]
 8014bae:	681b      	ldr	r3, [r3, #0]
 8014bb0:	695b      	ldr	r3, [r3, #20]
 8014bb2:	f003 0301 	and.w	r3, r3, #1
 8014bb6:	2b01      	cmp	r3, #1
 8014bb8:	d117      	bne.n	8014bea <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8014bba:	68fb      	ldr	r3, [r7, #12]
 8014bbc:	681b      	ldr	r3, [r3, #0]
 8014bbe:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8014bc2:	68fb      	ldr	r3, [r7, #12]
 8014bc4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014bc6:	7812      	ldrb	r2, [r2, #0]
 8014bc8:	b2d2      	uxtb	r2, r2
 8014bca:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8014bcc:	68fb      	ldr	r3, [r7, #12]
 8014bce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014bd0:	1c5a      	adds	r2, r3, #1
 8014bd2:	68fb      	ldr	r3, [r7, #12]
 8014bd4:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8014bd6:	68fb      	ldr	r3, [r7, #12]
 8014bd8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014bdc:	b29b      	uxth	r3, r3
 8014bde:	3b01      	subs	r3, #1
 8014be0:	b29a      	uxth	r2, r3
 8014be2:	68fb      	ldr	r3, [r7, #12]
 8014be4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8014be8:	e094      	b.n	8014d14 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8014bea:	68fb      	ldr	r3, [r7, #12]
 8014bec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014bf0:	b29b      	uxth	r3, r3
 8014bf2:	8bfa      	ldrh	r2, [r7, #30]
 8014bf4:	429a      	cmp	r2, r3
 8014bf6:	d946      	bls.n	8014c86 <HAL_SPI_Receive+0x41a>
 8014bf8:	693b      	ldr	r3, [r7, #16]
 8014bfa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8014bfe:	2b00      	cmp	r3, #0
 8014c00:	d041      	beq.n	8014c86 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8014c02:	68fb      	ldr	r3, [r7, #12]
 8014c04:	681b      	ldr	r3, [r3, #0]
 8014c06:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8014c0a:	68fb      	ldr	r3, [r7, #12]
 8014c0c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014c0e:	7812      	ldrb	r2, [r2, #0]
 8014c10:	b2d2      	uxtb	r2, r2
 8014c12:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8014c14:	68fb      	ldr	r3, [r7, #12]
 8014c16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014c18:	1c5a      	adds	r2, r3, #1
 8014c1a:	68fb      	ldr	r3, [r7, #12]
 8014c1c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8014c1e:	68fb      	ldr	r3, [r7, #12]
 8014c20:	681b      	ldr	r3, [r3, #0]
 8014c22:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8014c26:	68fb      	ldr	r3, [r7, #12]
 8014c28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014c2a:	7812      	ldrb	r2, [r2, #0]
 8014c2c:	b2d2      	uxtb	r2, r2
 8014c2e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8014c30:	68fb      	ldr	r3, [r7, #12]
 8014c32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014c34:	1c5a      	adds	r2, r3, #1
 8014c36:	68fb      	ldr	r3, [r7, #12]
 8014c38:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8014c3a:	68fb      	ldr	r3, [r7, #12]
 8014c3c:	681b      	ldr	r3, [r3, #0]
 8014c3e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8014c42:	68fb      	ldr	r3, [r7, #12]
 8014c44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014c46:	7812      	ldrb	r2, [r2, #0]
 8014c48:	b2d2      	uxtb	r2, r2
 8014c4a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8014c4c:	68fb      	ldr	r3, [r7, #12]
 8014c4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014c50:	1c5a      	adds	r2, r3, #1
 8014c52:	68fb      	ldr	r3, [r7, #12]
 8014c54:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8014c56:	68fb      	ldr	r3, [r7, #12]
 8014c58:	681b      	ldr	r3, [r3, #0]
 8014c5a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8014c5e:	68fb      	ldr	r3, [r7, #12]
 8014c60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014c62:	7812      	ldrb	r2, [r2, #0]
 8014c64:	b2d2      	uxtb	r2, r2
 8014c66:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8014c68:	68fb      	ldr	r3, [r7, #12]
 8014c6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014c6c:	1c5a      	adds	r2, r3, #1
 8014c6e:	68fb      	ldr	r3, [r7, #12]
 8014c70:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 8014c72:	68fb      	ldr	r3, [r7, #12]
 8014c74:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014c78:	b29b      	uxth	r3, r3
 8014c7a:	3b04      	subs	r3, #4
 8014c7c:	b29a      	uxth	r2, r3
 8014c7e:	68fb      	ldr	r3, [r7, #12]
 8014c80:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8014c84:	e046      	b.n	8014d14 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8014c86:	68fb      	ldr	r3, [r7, #12]
 8014c88:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014c8c:	b29b      	uxth	r3, r3
 8014c8e:	2b03      	cmp	r3, #3
 8014c90:	d81c      	bhi.n	8014ccc <HAL_SPI_Receive+0x460>
 8014c92:	693b      	ldr	r3, [r7, #16]
 8014c94:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8014c98:	2b00      	cmp	r3, #0
 8014c9a:	d017      	beq.n	8014ccc <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8014c9c:	68fb      	ldr	r3, [r7, #12]
 8014c9e:	681b      	ldr	r3, [r3, #0]
 8014ca0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8014ca4:	68fb      	ldr	r3, [r7, #12]
 8014ca6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014ca8:	7812      	ldrb	r2, [r2, #0]
 8014caa:	b2d2      	uxtb	r2, r2
 8014cac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8014cae:	68fb      	ldr	r3, [r7, #12]
 8014cb0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014cb2:	1c5a      	adds	r2, r3, #1
 8014cb4:	68fb      	ldr	r3, [r7, #12]
 8014cb6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8014cb8:	68fb      	ldr	r3, [r7, #12]
 8014cba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014cbe:	b29b      	uxth	r3, r3
 8014cc0:	3b01      	subs	r3, #1
 8014cc2:	b29a      	uxth	r2, r3
 8014cc4:	68fb      	ldr	r3, [r7, #12]
 8014cc6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8014cca:	e023      	b.n	8014d14 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8014ccc:	f7f4 f91a 	bl	8008f04 <HAL_GetTick>
 8014cd0:	4602      	mov	r2, r0
 8014cd2:	697b      	ldr	r3, [r7, #20]
 8014cd4:	1ad3      	subs	r3, r2, r3
 8014cd6:	683a      	ldr	r2, [r7, #0]
 8014cd8:	429a      	cmp	r2, r3
 8014cda:	d803      	bhi.n	8014ce4 <HAL_SPI_Receive+0x478>
 8014cdc:	683b      	ldr	r3, [r7, #0]
 8014cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014ce2:	d102      	bne.n	8014cea <HAL_SPI_Receive+0x47e>
 8014ce4:	683b      	ldr	r3, [r7, #0]
 8014ce6:	2b00      	cmp	r3, #0
 8014ce8:	d114      	bne.n	8014d14 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8014cea:	68f8      	ldr	r0, [r7, #12]
 8014cec:	f000 ff24 	bl	8015b38 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8014cf0:	68fb      	ldr	r3, [r7, #12]
 8014cf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014cf6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8014cfa:	68fb      	ldr	r3, [r7, #12]
 8014cfc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8014d00:	68fb      	ldr	r3, [r7, #12]
 8014d02:	2201      	movs	r2, #1
 8014d04:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8014d08:	68fb      	ldr	r3, [r7, #12]
 8014d0a:	2200      	movs	r2, #0
 8014d0c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8014d10:	2303      	movs	r3, #3
 8014d12:	e019      	b.n	8014d48 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8014d14:	68fb      	ldr	r3, [r7, #12]
 8014d16:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014d1a:	b29b      	uxth	r3, r3
 8014d1c:	2b00      	cmp	r3, #0
 8014d1e:	f47f af41 	bne.w	8014ba4 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8014d22:	68f8      	ldr	r0, [r7, #12]
 8014d24:	f000 ff08 	bl	8015b38 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8014d28:	68fb      	ldr	r3, [r7, #12]
 8014d2a:	2201      	movs	r2, #1
 8014d2c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8014d30:	68fb      	ldr	r3, [r7, #12]
 8014d32:	2200      	movs	r2, #0
 8014d34:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8014d38:	68fb      	ldr	r3, [r7, #12]
 8014d3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014d3e:	2b00      	cmp	r3, #0
 8014d40:	d001      	beq.n	8014d46 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 8014d42:	2301      	movs	r3, #1
 8014d44:	e000      	b.n	8014d48 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 8014d46:	2300      	movs	r3, #0
  }
}
 8014d48:	4618      	mov	r0, r3
 8014d4a:	3720      	adds	r7, #32
 8014d4c:	46bd      	mov	sp, r7
 8014d4e:	bd80      	pop	{r7, pc}

08014d50 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8014d50:	b580      	push	{r7, lr}
 8014d52:	b08e      	sub	sp, #56	@ 0x38
 8014d54:	af02      	add	r7, sp, #8
 8014d56:	60f8      	str	r0, [r7, #12]
 8014d58:	60b9      	str	r1, [r7, #8]
 8014d5a:	607a      	str	r2, [r7, #4]
 8014d5c:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8014d5e:	68fb      	ldr	r3, [r7, #12]
 8014d60:	681b      	ldr	r3, [r3, #0]
 8014d62:	3320      	adds	r3, #32
 8014d64:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8014d66:	68fb      	ldr	r3, [r7, #12]
 8014d68:	681b      	ldr	r3, [r3, #0]
 8014d6a:	3330      	adds	r3, #48	@ 0x30
 8014d6c:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8014d6e:	68fb      	ldr	r3, [r7, #12]
 8014d70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014d72:	095b      	lsrs	r3, r3, #5
 8014d74:	b29b      	uxth	r3, r3
 8014d76:	3301      	adds	r3, #1
 8014d78:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8014d7a:	f7f4 f8c3 	bl	8008f04 <HAL_GetTick>
 8014d7e:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 8014d80:	887b      	ldrh	r3, [r7, #2]
 8014d82:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 8014d84:	887b      	ldrh	r3, [r7, #2]
 8014d86:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 8014d88:	68fb      	ldr	r3, [r7, #12]
 8014d8a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8014d8e:	b2db      	uxtb	r3, r3
 8014d90:	2b01      	cmp	r3, #1
 8014d92:	d001      	beq.n	8014d98 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 8014d94:	2302      	movs	r3, #2
 8014d96:	e310      	b.n	80153ba <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8014d98:	68bb      	ldr	r3, [r7, #8]
 8014d9a:	2b00      	cmp	r3, #0
 8014d9c:	d005      	beq.n	8014daa <HAL_SPI_TransmitReceive+0x5a>
 8014d9e:	687b      	ldr	r3, [r7, #4]
 8014da0:	2b00      	cmp	r3, #0
 8014da2:	d002      	beq.n	8014daa <HAL_SPI_TransmitReceive+0x5a>
 8014da4:	887b      	ldrh	r3, [r7, #2]
 8014da6:	2b00      	cmp	r3, #0
 8014da8:	d101      	bne.n	8014dae <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 8014daa:	2301      	movs	r3, #1
 8014dac:	e305      	b.n	80153ba <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8014dae:	68fb      	ldr	r3, [r7, #12]
 8014db0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8014db4:	2b01      	cmp	r3, #1
 8014db6:	d101      	bne.n	8014dbc <HAL_SPI_TransmitReceive+0x6c>
 8014db8:	2302      	movs	r3, #2
 8014dba:	e2fe      	b.n	80153ba <HAL_SPI_TransmitReceive+0x66a>
 8014dbc:	68fb      	ldr	r3, [r7, #12]
 8014dbe:	2201      	movs	r2, #1
 8014dc0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8014dc4:	68fb      	ldr	r3, [r7, #12]
 8014dc6:	2205      	movs	r2, #5
 8014dc8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8014dcc:	68fb      	ldr	r3, [r7, #12]
 8014dce:	2200      	movs	r2, #0
 8014dd0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8014dd4:	68fb      	ldr	r3, [r7, #12]
 8014dd6:	687a      	ldr	r2, [r7, #4]
 8014dd8:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 8014dda:	68fb      	ldr	r3, [r7, #12]
 8014ddc:	887a      	ldrh	r2, [r7, #2]
 8014dde:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 8014de2:	68fb      	ldr	r3, [r7, #12]
 8014de4:	887a      	ldrh	r2, [r7, #2]
 8014de6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8014dea:	68fb      	ldr	r3, [r7, #12]
 8014dec:	68ba      	ldr	r2, [r7, #8]
 8014dee:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 8014df0:	68fb      	ldr	r3, [r7, #12]
 8014df2:	887a      	ldrh	r2, [r7, #2]
 8014df4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 8014df8:	68fb      	ldr	r3, [r7, #12]
 8014dfa:	887a      	ldrh	r2, [r7, #2]
 8014dfc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8014e00:	68fb      	ldr	r3, [r7, #12]
 8014e02:	2200      	movs	r2, #0
 8014e04:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8014e06:	68fb      	ldr	r3, [r7, #12]
 8014e08:	2200      	movs	r2, #0
 8014e0a:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8014e0c:	68fb      	ldr	r3, [r7, #12]
 8014e0e:	681b      	ldr	r3, [r3, #0]
 8014e10:	68da      	ldr	r2, [r3, #12]
 8014e12:	68fb      	ldr	r3, [r7, #12]
 8014e14:	681b      	ldr	r3, [r3, #0]
 8014e16:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8014e1a:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 8014e1c:	68fb      	ldr	r3, [r7, #12]
 8014e1e:	681b      	ldr	r3, [r3, #0]
 8014e20:	4a70      	ldr	r2, [pc, #448]	@ (8014fe4 <HAL_SPI_TransmitReceive+0x294>)
 8014e22:	4293      	cmp	r3, r2
 8014e24:	d009      	beq.n	8014e3a <HAL_SPI_TransmitReceive+0xea>
 8014e26:	68fb      	ldr	r3, [r7, #12]
 8014e28:	681b      	ldr	r3, [r3, #0]
 8014e2a:	4a6f      	ldr	r2, [pc, #444]	@ (8014fe8 <HAL_SPI_TransmitReceive+0x298>)
 8014e2c:	4293      	cmp	r3, r2
 8014e2e:	d004      	beq.n	8014e3a <HAL_SPI_TransmitReceive+0xea>
 8014e30:	68fb      	ldr	r3, [r7, #12]
 8014e32:	681b      	ldr	r3, [r3, #0]
 8014e34:	4a6d      	ldr	r2, [pc, #436]	@ (8014fec <HAL_SPI_TransmitReceive+0x29c>)
 8014e36:	4293      	cmp	r3, r2
 8014e38:	d102      	bne.n	8014e40 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 8014e3a:	2310      	movs	r3, #16
 8014e3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014e3e:	e001      	b.n	8014e44 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 8014e40:	2308      	movs	r3, #8
 8014e42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8014e44:	68fb      	ldr	r3, [r7, #12]
 8014e46:	681b      	ldr	r3, [r3, #0]
 8014e48:	685a      	ldr	r2, [r3, #4]
 8014e4a:	4b69      	ldr	r3, [pc, #420]	@ (8014ff0 <HAL_SPI_TransmitReceive+0x2a0>)
 8014e4c:	4013      	ands	r3, r2
 8014e4e:	8879      	ldrh	r1, [r7, #2]
 8014e50:	68fa      	ldr	r2, [r7, #12]
 8014e52:	6812      	ldr	r2, [r2, #0]
 8014e54:	430b      	orrs	r3, r1
 8014e56:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8014e58:	68fb      	ldr	r3, [r7, #12]
 8014e5a:	681b      	ldr	r3, [r3, #0]
 8014e5c:	681a      	ldr	r2, [r3, #0]
 8014e5e:	68fb      	ldr	r3, [r7, #12]
 8014e60:	681b      	ldr	r3, [r3, #0]
 8014e62:	f042 0201 	orr.w	r2, r2, #1
 8014e66:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8014e68:	68fb      	ldr	r3, [r7, #12]
 8014e6a:	685b      	ldr	r3, [r3, #4]
 8014e6c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8014e70:	d107      	bne.n	8014e82 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8014e72:	68fb      	ldr	r3, [r7, #12]
 8014e74:	681b      	ldr	r3, [r3, #0]
 8014e76:	681a      	ldr	r2, [r3, #0]
 8014e78:	68fb      	ldr	r3, [r7, #12]
 8014e7a:	681b      	ldr	r3, [r3, #0]
 8014e7c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8014e80:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8014e82:	68fb      	ldr	r3, [r7, #12]
 8014e84:	68db      	ldr	r3, [r3, #12]
 8014e86:	2b0f      	cmp	r3, #15
 8014e88:	f240 80a2 	bls.w	8014fd0 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 8014e8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014e8e:	089b      	lsrs	r3, r3, #2
 8014e90:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8014e92:	e094      	b.n	8014fbe <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8014e94:	68fb      	ldr	r3, [r7, #12]
 8014e96:	681b      	ldr	r3, [r3, #0]
 8014e98:	695b      	ldr	r3, [r3, #20]
 8014e9a:	f003 0302 	and.w	r3, r3, #2
 8014e9e:	2b02      	cmp	r3, #2
 8014ea0:	d120      	bne.n	8014ee4 <HAL_SPI_TransmitReceive+0x194>
 8014ea2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8014ea4:	2b00      	cmp	r3, #0
 8014ea6:	d01d      	beq.n	8014ee4 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8014ea8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8014eaa:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8014eac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014eae:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8014eb0:	429a      	cmp	r2, r3
 8014eb2:	d217      	bcs.n	8014ee4 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8014eb4:	68fb      	ldr	r3, [r7, #12]
 8014eb6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8014eb8:	68fb      	ldr	r3, [r7, #12]
 8014eba:	681b      	ldr	r3, [r3, #0]
 8014ebc:	6812      	ldr	r2, [r2, #0]
 8014ebe:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8014ec0:	68fb      	ldr	r3, [r7, #12]
 8014ec2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014ec4:	1d1a      	adds	r2, r3, #4
 8014ec6:	68fb      	ldr	r3, [r7, #12]
 8014ec8:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 8014eca:	68fb      	ldr	r3, [r7, #12]
 8014ecc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014ed0:	b29b      	uxth	r3, r3
 8014ed2:	3b01      	subs	r3, #1
 8014ed4:	b29a      	uxth	r2, r3
 8014ed6:	68fb      	ldr	r3, [r7, #12]
 8014ed8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8014edc:	68fb      	ldr	r3, [r7, #12]
 8014ede:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014ee2:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8014ee4:	68fb      	ldr	r3, [r7, #12]
 8014ee6:	681b      	ldr	r3, [r3, #0]
 8014ee8:	695b      	ldr	r3, [r3, #20]
 8014eea:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8014eec:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8014eee:	2b00      	cmp	r3, #0
 8014ef0:	d065      	beq.n	8014fbe <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8014ef2:	68fb      	ldr	r3, [r7, #12]
 8014ef4:	681b      	ldr	r3, [r3, #0]
 8014ef6:	695b      	ldr	r3, [r3, #20]
 8014ef8:	f003 0301 	and.w	r3, r3, #1
 8014efc:	2b01      	cmp	r3, #1
 8014efe:	d118      	bne.n	8014f32 <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8014f00:	68fb      	ldr	r3, [r7, #12]
 8014f02:	681a      	ldr	r2, [r3, #0]
 8014f04:	68fb      	ldr	r3, [r7, #12]
 8014f06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014f08:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8014f0a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8014f0c:	68fb      	ldr	r3, [r7, #12]
 8014f0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014f10:	1d1a      	adds	r2, r3, #4
 8014f12:	68fb      	ldr	r3, [r7, #12]
 8014f14:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8014f16:	68fb      	ldr	r3, [r7, #12]
 8014f18:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014f1c:	b29b      	uxth	r3, r3
 8014f1e:	3b01      	subs	r3, #1
 8014f20:	b29a      	uxth	r2, r3
 8014f22:	68fb      	ldr	r3, [r7, #12]
 8014f24:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8014f28:	68fb      	ldr	r3, [r7, #12]
 8014f2a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014f2e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8014f30:	e045      	b.n	8014fbe <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8014f32:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8014f34:	8bfb      	ldrh	r3, [r7, #30]
 8014f36:	429a      	cmp	r2, r3
 8014f38:	d21d      	bcs.n	8014f76 <HAL_SPI_TransmitReceive+0x226>
 8014f3a:	697b      	ldr	r3, [r7, #20]
 8014f3c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8014f40:	2b00      	cmp	r3, #0
 8014f42:	d018      	beq.n	8014f76 <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8014f44:	68fb      	ldr	r3, [r7, #12]
 8014f46:	681a      	ldr	r2, [r3, #0]
 8014f48:	68fb      	ldr	r3, [r7, #12]
 8014f4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014f4c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8014f4e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8014f50:	68fb      	ldr	r3, [r7, #12]
 8014f52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014f54:	1d1a      	adds	r2, r3, #4
 8014f56:	68fb      	ldr	r3, [r7, #12]
 8014f58:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8014f5a:	68fb      	ldr	r3, [r7, #12]
 8014f5c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014f60:	b29b      	uxth	r3, r3
 8014f62:	3b01      	subs	r3, #1
 8014f64:	b29a      	uxth	r2, r3
 8014f66:	68fb      	ldr	r3, [r7, #12]
 8014f68:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8014f6c:	68fb      	ldr	r3, [r7, #12]
 8014f6e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014f72:	853b      	strh	r3, [r7, #40]	@ 0x28
 8014f74:	e023      	b.n	8014fbe <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8014f76:	f7f3 ffc5 	bl	8008f04 <HAL_GetTick>
 8014f7a:	4602      	mov	r2, r0
 8014f7c:	69bb      	ldr	r3, [r7, #24]
 8014f7e:	1ad3      	subs	r3, r2, r3
 8014f80:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014f82:	429a      	cmp	r2, r3
 8014f84:	d803      	bhi.n	8014f8e <HAL_SPI_TransmitReceive+0x23e>
 8014f86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014f8c:	d102      	bne.n	8014f94 <HAL_SPI_TransmitReceive+0x244>
 8014f8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	d114      	bne.n	8014fbe <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8014f94:	68f8      	ldr	r0, [r7, #12]
 8014f96:	f000 fdcf 	bl	8015b38 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8014f9a:	68fb      	ldr	r3, [r7, #12]
 8014f9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014fa0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8014fa4:	68fb      	ldr	r3, [r7, #12]
 8014fa6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8014faa:	68fb      	ldr	r3, [r7, #12]
 8014fac:	2201      	movs	r2, #1
 8014fae:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8014fb2:	68fb      	ldr	r3, [r7, #12]
 8014fb4:	2200      	movs	r2, #0
 8014fb6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8014fba:	2303      	movs	r3, #3
 8014fbc:	e1fd      	b.n	80153ba <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8014fbe:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8014fc0:	2b00      	cmp	r3, #0
 8014fc2:	f47f af67 	bne.w	8014e94 <HAL_SPI_TransmitReceive+0x144>
 8014fc6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8014fc8:	2b00      	cmp	r3, #0
 8014fca:	f47f af63 	bne.w	8014e94 <HAL_SPI_TransmitReceive+0x144>
 8014fce:	e1ce      	b.n	801536e <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8014fd0:	68fb      	ldr	r3, [r7, #12]
 8014fd2:	68db      	ldr	r3, [r3, #12]
 8014fd4:	2b07      	cmp	r3, #7
 8014fd6:	f240 81c2 	bls.w	801535e <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 8014fda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014fdc:	085b      	lsrs	r3, r3, #1
 8014fde:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8014fe0:	e0c9      	b.n	8015176 <HAL_SPI_TransmitReceive+0x426>
 8014fe2:	bf00      	nop
 8014fe4:	40013000 	.word	0x40013000
 8014fe8:	40003800 	.word	0x40003800
 8014fec:	40003c00 	.word	0x40003c00
 8014ff0:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8014ff4:	68fb      	ldr	r3, [r7, #12]
 8014ff6:	681b      	ldr	r3, [r3, #0]
 8014ff8:	695b      	ldr	r3, [r3, #20]
 8014ffa:	f003 0302 	and.w	r3, r3, #2
 8014ffe:	2b02      	cmp	r3, #2
 8015000:	d11f      	bne.n	8015042 <HAL_SPI_TransmitReceive+0x2f2>
 8015002:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8015004:	2b00      	cmp	r3, #0
 8015006:	d01c      	beq.n	8015042 <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8015008:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 801500a:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 801500c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801500e:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8015010:	429a      	cmp	r2, r3
 8015012:	d216      	bcs.n	8015042 <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8015014:	68fb      	ldr	r3, [r7, #12]
 8015016:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8015018:	881a      	ldrh	r2, [r3, #0]
 801501a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801501c:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801501e:	68fb      	ldr	r3, [r7, #12]
 8015020:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8015022:	1c9a      	adds	r2, r3, #2
 8015024:	68fb      	ldr	r3, [r7, #12]
 8015026:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8015028:	68fb      	ldr	r3, [r7, #12]
 801502a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801502e:	b29b      	uxth	r3, r3
 8015030:	3b01      	subs	r3, #1
 8015032:	b29a      	uxth	r2, r3
 8015034:	68fb      	ldr	r3, [r7, #12]
 8015036:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 801503a:	68fb      	ldr	r3, [r7, #12]
 801503c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8015040:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8015042:	68fb      	ldr	r3, [r7, #12]
 8015044:	681b      	ldr	r3, [r3, #0]
 8015046:	695b      	ldr	r3, [r3, #20]
 8015048:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 801504a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801504c:	2b00      	cmp	r3, #0
 801504e:	f000 8092 	beq.w	8015176 <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8015052:	68fb      	ldr	r3, [r7, #12]
 8015054:	681b      	ldr	r3, [r3, #0]
 8015056:	695b      	ldr	r3, [r3, #20]
 8015058:	f003 0301 	and.w	r3, r3, #1
 801505c:	2b01      	cmp	r3, #1
 801505e:	d118      	bne.n	8015092 <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8015060:	68fb      	ldr	r3, [r7, #12]
 8015062:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015064:	6a3a      	ldr	r2, [r7, #32]
 8015066:	8812      	ldrh	r2, [r2, #0]
 8015068:	b292      	uxth	r2, r2
 801506a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 801506c:	68fb      	ldr	r3, [r7, #12]
 801506e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015070:	1c9a      	adds	r2, r3, #2
 8015072:	68fb      	ldr	r3, [r7, #12]
 8015074:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8015076:	68fb      	ldr	r3, [r7, #12]
 8015078:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801507c:	b29b      	uxth	r3, r3
 801507e:	3b01      	subs	r3, #1
 8015080:	b29a      	uxth	r2, r3
 8015082:	68fb      	ldr	r3, [r7, #12]
 8015084:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8015088:	68fb      	ldr	r3, [r7, #12]
 801508a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801508e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8015090:	e071      	b.n	8015176 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8015092:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8015094:	8bfb      	ldrh	r3, [r7, #30]
 8015096:	429a      	cmp	r2, r3
 8015098:	d228      	bcs.n	80150ec <HAL_SPI_TransmitReceive+0x39c>
 801509a:	697b      	ldr	r3, [r7, #20]
 801509c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80150a0:	2b00      	cmp	r3, #0
 80150a2:	d023      	beq.n	80150ec <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80150a4:	68fb      	ldr	r3, [r7, #12]
 80150a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80150a8:	6a3a      	ldr	r2, [r7, #32]
 80150aa:	8812      	ldrh	r2, [r2, #0]
 80150ac:	b292      	uxth	r2, r2
 80150ae:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80150b0:	68fb      	ldr	r3, [r7, #12]
 80150b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80150b4:	1c9a      	adds	r2, r3, #2
 80150b6:	68fb      	ldr	r3, [r7, #12]
 80150b8:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80150ba:	68fb      	ldr	r3, [r7, #12]
 80150bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80150be:	6a3a      	ldr	r2, [r7, #32]
 80150c0:	8812      	ldrh	r2, [r2, #0]
 80150c2:	b292      	uxth	r2, r2
 80150c4:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80150c6:	68fb      	ldr	r3, [r7, #12]
 80150c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80150ca:	1c9a      	adds	r2, r3, #2
 80150cc:	68fb      	ldr	r3, [r7, #12]
 80150ce:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 80150d0:	68fb      	ldr	r3, [r7, #12]
 80150d2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80150d6:	b29b      	uxth	r3, r3
 80150d8:	3b02      	subs	r3, #2
 80150da:	b29a      	uxth	r2, r3
 80150dc:	68fb      	ldr	r3, [r7, #12]
 80150de:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80150e2:	68fb      	ldr	r3, [r7, #12]
 80150e4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80150e8:	853b      	strh	r3, [r7, #40]	@ 0x28
 80150ea:	e044      	b.n	8015176 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 80150ec:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80150ee:	2b01      	cmp	r3, #1
 80150f0:	d11d      	bne.n	801512e <HAL_SPI_TransmitReceive+0x3de>
 80150f2:	697b      	ldr	r3, [r7, #20]
 80150f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80150f8:	2b00      	cmp	r3, #0
 80150fa:	d018      	beq.n	801512e <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80150fc:	68fb      	ldr	r3, [r7, #12]
 80150fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015100:	6a3a      	ldr	r2, [r7, #32]
 8015102:	8812      	ldrh	r2, [r2, #0]
 8015104:	b292      	uxth	r2, r2
 8015106:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8015108:	68fb      	ldr	r3, [r7, #12]
 801510a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801510c:	1c9a      	adds	r2, r3, #2
 801510e:	68fb      	ldr	r3, [r7, #12]
 8015110:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8015112:	68fb      	ldr	r3, [r7, #12]
 8015114:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015118:	b29b      	uxth	r3, r3
 801511a:	3b01      	subs	r3, #1
 801511c:	b29a      	uxth	r2, r3
 801511e:	68fb      	ldr	r3, [r7, #12]
 8015120:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8015124:	68fb      	ldr	r3, [r7, #12]
 8015126:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801512a:	853b      	strh	r3, [r7, #40]	@ 0x28
 801512c:	e023      	b.n	8015176 <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801512e:	f7f3 fee9 	bl	8008f04 <HAL_GetTick>
 8015132:	4602      	mov	r2, r0
 8015134:	69bb      	ldr	r3, [r7, #24]
 8015136:	1ad3      	subs	r3, r2, r3
 8015138:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801513a:	429a      	cmp	r2, r3
 801513c:	d803      	bhi.n	8015146 <HAL_SPI_TransmitReceive+0x3f6>
 801513e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015144:	d102      	bne.n	801514c <HAL_SPI_TransmitReceive+0x3fc>
 8015146:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015148:	2b00      	cmp	r3, #0
 801514a:	d114      	bne.n	8015176 <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 801514c:	68f8      	ldr	r0, [r7, #12]
 801514e:	f000 fcf3 	bl	8015b38 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8015152:	68fb      	ldr	r3, [r7, #12]
 8015154:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015158:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 801515c:	68fb      	ldr	r3, [r7, #12]
 801515e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8015162:	68fb      	ldr	r3, [r7, #12]
 8015164:	2201      	movs	r2, #1
 8015166:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 801516a:	68fb      	ldr	r3, [r7, #12]
 801516c:	2200      	movs	r2, #0
 801516e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8015172:	2303      	movs	r3, #3
 8015174:	e121      	b.n	80153ba <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8015176:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8015178:	2b00      	cmp	r3, #0
 801517a:	f47f af3b 	bne.w	8014ff4 <HAL_SPI_TransmitReceive+0x2a4>
 801517e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8015180:	2b00      	cmp	r3, #0
 8015182:	f47f af37 	bne.w	8014ff4 <HAL_SPI_TransmitReceive+0x2a4>
 8015186:	e0f2      	b.n	801536e <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8015188:	68fb      	ldr	r3, [r7, #12]
 801518a:	681b      	ldr	r3, [r3, #0]
 801518c:	695b      	ldr	r3, [r3, #20]
 801518e:	f003 0302 	and.w	r3, r3, #2
 8015192:	2b02      	cmp	r3, #2
 8015194:	d121      	bne.n	80151da <HAL_SPI_TransmitReceive+0x48a>
 8015196:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8015198:	2b00      	cmp	r3, #0
 801519a:	d01e      	beq.n	80151da <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 801519c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 801519e:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 80151a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80151a2:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80151a4:	429a      	cmp	r2, r3
 80151a6:	d218      	bcs.n	80151da <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80151a8:	68fb      	ldr	r3, [r7, #12]
 80151aa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80151ac:	68fb      	ldr	r3, [r7, #12]
 80151ae:	681b      	ldr	r3, [r3, #0]
 80151b0:	3320      	adds	r3, #32
 80151b2:	7812      	ldrb	r2, [r2, #0]
 80151b4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80151b6:	68fb      	ldr	r3, [r7, #12]
 80151b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80151ba:	1c5a      	adds	r2, r3, #1
 80151bc:	68fb      	ldr	r3, [r7, #12]
 80151be:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80151c0:	68fb      	ldr	r3, [r7, #12]
 80151c2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80151c6:	b29b      	uxth	r3, r3
 80151c8:	3b01      	subs	r3, #1
 80151ca:	b29a      	uxth	r2, r3
 80151cc:	68fb      	ldr	r3, [r7, #12]
 80151ce:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80151d2:	68fb      	ldr	r3, [r7, #12]
 80151d4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80151d8:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80151da:	68fb      	ldr	r3, [r7, #12]
 80151dc:	681b      	ldr	r3, [r3, #0]
 80151de:	695b      	ldr	r3, [r3, #20]
 80151e0:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 80151e2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80151e4:	2b00      	cmp	r3, #0
 80151e6:	f000 80ba 	beq.w	801535e <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80151ea:	68fb      	ldr	r3, [r7, #12]
 80151ec:	681b      	ldr	r3, [r3, #0]
 80151ee:	695b      	ldr	r3, [r3, #20]
 80151f0:	f003 0301 	and.w	r3, r3, #1
 80151f4:	2b01      	cmp	r3, #1
 80151f6:	d11b      	bne.n	8015230 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80151f8:	68fb      	ldr	r3, [r7, #12]
 80151fa:	681b      	ldr	r3, [r3, #0]
 80151fc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8015200:	68fb      	ldr	r3, [r7, #12]
 8015202:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015204:	7812      	ldrb	r2, [r2, #0]
 8015206:	b2d2      	uxtb	r2, r2
 8015208:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 801520a:	68fb      	ldr	r3, [r7, #12]
 801520c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801520e:	1c5a      	adds	r2, r3, #1
 8015210:	68fb      	ldr	r3, [r7, #12]
 8015212:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8015214:	68fb      	ldr	r3, [r7, #12]
 8015216:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801521a:	b29b      	uxth	r3, r3
 801521c:	3b01      	subs	r3, #1
 801521e:	b29a      	uxth	r2, r3
 8015220:	68fb      	ldr	r3, [r7, #12]
 8015222:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8015226:	68fb      	ldr	r3, [r7, #12]
 8015228:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801522c:	853b      	strh	r3, [r7, #40]	@ 0x28
 801522e:	e096      	b.n	801535e <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8015230:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8015232:	8bfb      	ldrh	r3, [r7, #30]
 8015234:	429a      	cmp	r2, r3
 8015236:	d24a      	bcs.n	80152ce <HAL_SPI_TransmitReceive+0x57e>
 8015238:	697b      	ldr	r3, [r7, #20]
 801523a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801523e:	2b00      	cmp	r3, #0
 8015240:	d045      	beq.n	80152ce <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8015242:	68fb      	ldr	r3, [r7, #12]
 8015244:	681b      	ldr	r3, [r3, #0]
 8015246:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801524a:	68fb      	ldr	r3, [r7, #12]
 801524c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801524e:	7812      	ldrb	r2, [r2, #0]
 8015250:	b2d2      	uxtb	r2, r2
 8015252:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8015254:	68fb      	ldr	r3, [r7, #12]
 8015256:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015258:	1c5a      	adds	r2, r3, #1
 801525a:	68fb      	ldr	r3, [r7, #12]
 801525c:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 801525e:	68fb      	ldr	r3, [r7, #12]
 8015260:	681b      	ldr	r3, [r3, #0]
 8015262:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8015266:	68fb      	ldr	r3, [r7, #12]
 8015268:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801526a:	7812      	ldrb	r2, [r2, #0]
 801526c:	b2d2      	uxtb	r2, r2
 801526e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8015270:	68fb      	ldr	r3, [r7, #12]
 8015272:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015274:	1c5a      	adds	r2, r3, #1
 8015276:	68fb      	ldr	r3, [r7, #12]
 8015278:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 801527a:	68fb      	ldr	r3, [r7, #12]
 801527c:	681b      	ldr	r3, [r3, #0]
 801527e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8015282:	68fb      	ldr	r3, [r7, #12]
 8015284:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015286:	7812      	ldrb	r2, [r2, #0]
 8015288:	b2d2      	uxtb	r2, r2
 801528a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 801528c:	68fb      	ldr	r3, [r7, #12]
 801528e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015290:	1c5a      	adds	r2, r3, #1
 8015292:	68fb      	ldr	r3, [r7, #12]
 8015294:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8015296:	68fb      	ldr	r3, [r7, #12]
 8015298:	681b      	ldr	r3, [r3, #0]
 801529a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801529e:	68fb      	ldr	r3, [r7, #12]
 80152a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80152a2:	7812      	ldrb	r2, [r2, #0]
 80152a4:	b2d2      	uxtb	r2, r2
 80152a6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80152a8:	68fb      	ldr	r3, [r7, #12]
 80152aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80152ac:	1c5a      	adds	r2, r3, #1
 80152ae:	68fb      	ldr	r3, [r7, #12]
 80152b0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 80152b2:	68fb      	ldr	r3, [r7, #12]
 80152b4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80152b8:	b29b      	uxth	r3, r3
 80152ba:	3b04      	subs	r3, #4
 80152bc:	b29a      	uxth	r2, r3
 80152be:	68fb      	ldr	r3, [r7, #12]
 80152c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80152c4:	68fb      	ldr	r3, [r7, #12]
 80152c6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80152ca:	853b      	strh	r3, [r7, #40]	@ 0x28
 80152cc:	e047      	b.n	801535e <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 80152ce:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80152d0:	2b03      	cmp	r3, #3
 80152d2:	d820      	bhi.n	8015316 <HAL_SPI_TransmitReceive+0x5c6>
 80152d4:	697b      	ldr	r3, [r7, #20]
 80152d6:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 80152da:	2b00      	cmp	r3, #0
 80152dc:	d01b      	beq.n	8015316 <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80152de:	68fb      	ldr	r3, [r7, #12]
 80152e0:	681b      	ldr	r3, [r3, #0]
 80152e2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80152e6:	68fb      	ldr	r3, [r7, #12]
 80152e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80152ea:	7812      	ldrb	r2, [r2, #0]
 80152ec:	b2d2      	uxtb	r2, r2
 80152ee:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80152f0:	68fb      	ldr	r3, [r7, #12]
 80152f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80152f4:	1c5a      	adds	r2, r3, #1
 80152f6:	68fb      	ldr	r3, [r7, #12]
 80152f8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80152fa:	68fb      	ldr	r3, [r7, #12]
 80152fc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015300:	b29b      	uxth	r3, r3
 8015302:	3b01      	subs	r3, #1
 8015304:	b29a      	uxth	r2, r3
 8015306:	68fb      	ldr	r3, [r7, #12]
 8015308:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 801530c:	68fb      	ldr	r3, [r7, #12]
 801530e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015312:	853b      	strh	r3, [r7, #40]	@ 0x28
 8015314:	e023      	b.n	801535e <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8015316:	f7f3 fdf5 	bl	8008f04 <HAL_GetTick>
 801531a:	4602      	mov	r2, r0
 801531c:	69bb      	ldr	r3, [r7, #24]
 801531e:	1ad3      	subs	r3, r2, r3
 8015320:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015322:	429a      	cmp	r2, r3
 8015324:	d803      	bhi.n	801532e <HAL_SPI_TransmitReceive+0x5de>
 8015326:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015328:	f1b3 3fff 	cmp.w	r3, #4294967295
 801532c:	d102      	bne.n	8015334 <HAL_SPI_TransmitReceive+0x5e4>
 801532e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015330:	2b00      	cmp	r3, #0
 8015332:	d114      	bne.n	801535e <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8015334:	68f8      	ldr	r0, [r7, #12]
 8015336:	f000 fbff 	bl	8015b38 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801533a:	68fb      	ldr	r3, [r7, #12]
 801533c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015340:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8015344:	68fb      	ldr	r3, [r7, #12]
 8015346:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 801534a:	68fb      	ldr	r3, [r7, #12]
 801534c:	2201      	movs	r2, #1
 801534e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8015352:	68fb      	ldr	r3, [r7, #12]
 8015354:	2200      	movs	r2, #0
 8015356:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 801535a:	2303      	movs	r3, #3
 801535c:	e02d      	b.n	80153ba <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 801535e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8015360:	2b00      	cmp	r3, #0
 8015362:	f47f af11 	bne.w	8015188 <HAL_SPI_TransmitReceive+0x438>
 8015366:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8015368:	2b00      	cmp	r3, #0
 801536a:	f47f af0d 	bne.w	8015188 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 801536e:	69bb      	ldr	r3, [r7, #24]
 8015370:	9300      	str	r3, [sp, #0]
 8015372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015374:	2200      	movs	r2, #0
 8015376:	2108      	movs	r1, #8
 8015378:	68f8      	ldr	r0, [r7, #12]
 801537a:	f000 fc7d 	bl	8015c78 <SPI_WaitOnFlagUntilTimeout>
 801537e:	4603      	mov	r3, r0
 8015380:	2b00      	cmp	r3, #0
 8015382:	d007      	beq.n	8015394 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8015384:	68fb      	ldr	r3, [r7, #12]
 8015386:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801538a:	f043 0220 	orr.w	r2, r3, #32
 801538e:	68fb      	ldr	r3, [r7, #12]
 8015390:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8015394:	68f8      	ldr	r0, [r7, #12]
 8015396:	f000 fbcf 	bl	8015b38 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 801539a:	68fb      	ldr	r3, [r7, #12]
 801539c:	2201      	movs	r2, #1
 801539e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80153a2:	68fb      	ldr	r3, [r7, #12]
 80153a4:	2200      	movs	r2, #0
 80153a6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80153aa:	68fb      	ldr	r3, [r7, #12]
 80153ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80153b0:	2b00      	cmp	r3, #0
 80153b2:	d001      	beq.n	80153b8 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 80153b4:	2301      	movs	r3, #1
 80153b6:	e000      	b.n	80153ba <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 80153b8:	2300      	movs	r3, #0
  }
}
 80153ba:	4618      	mov	r0, r3
 80153bc:	3730      	adds	r7, #48	@ 0x30
 80153be:	46bd      	mov	sp, r7
 80153c0:	bd80      	pop	{r7, pc}
 80153c2:	bf00      	nop

080153c4 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 80153c4:	b580      	push	{r7, lr}
 80153c6:	b084      	sub	sp, #16
 80153c8:	af00      	add	r7, sp, #0
 80153ca:	60f8      	str	r0, [r7, #12]
 80153cc:	60b9      	str	r1, [r7, #8]
 80153ce:	4613      	mov	r3, r2
 80153d0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 80153d2:	68fb      	ldr	r3, [r7, #12]
 80153d4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80153d8:	b2db      	uxtb	r3, r3
 80153da:	2b01      	cmp	r3, #1
 80153dc:	d001      	beq.n	80153e2 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 80153de:	2302      	movs	r3, #2
 80153e0:	e126      	b.n	8015630 <HAL_SPI_Transmit_DMA+0x26c>
  }

  if ((pData == NULL) || (Size == 0UL))
 80153e2:	68bb      	ldr	r3, [r7, #8]
 80153e4:	2b00      	cmp	r3, #0
 80153e6:	d002      	beq.n	80153ee <HAL_SPI_Transmit_DMA+0x2a>
 80153e8:	88fb      	ldrh	r3, [r7, #6]
 80153ea:	2b00      	cmp	r3, #0
 80153ec:	d101      	bne.n	80153f2 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 80153ee:	2301      	movs	r3, #1
 80153f0:	e11e      	b.n	8015630 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80153f2:	68fb      	ldr	r3, [r7, #12]
 80153f4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80153f8:	2b01      	cmp	r3, #1
 80153fa:	d101      	bne.n	8015400 <HAL_SPI_Transmit_DMA+0x3c>
 80153fc:	2302      	movs	r3, #2
 80153fe:	e117      	b.n	8015630 <HAL_SPI_Transmit_DMA+0x26c>
 8015400:	68fb      	ldr	r3, [r7, #12]
 8015402:	2201      	movs	r2, #1
 8015404:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8015408:	68fb      	ldr	r3, [r7, #12]
 801540a:	2203      	movs	r2, #3
 801540c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8015410:	68fb      	ldr	r3, [r7, #12]
 8015412:	2200      	movs	r2, #0
 8015414:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8015418:	68fb      	ldr	r3, [r7, #12]
 801541a:	68ba      	ldr	r2, [r7, #8]
 801541c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 801541e:	68fb      	ldr	r3, [r7, #12]
 8015420:	88fa      	ldrh	r2, [r7, #6]
 8015422:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8015426:	68fb      	ldr	r3, [r7, #12]
 8015428:	88fa      	ldrh	r2, [r7, #6]
 801542a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 801542e:	68fb      	ldr	r3, [r7, #12]
 8015430:	2200      	movs	r2, #0
 8015432:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxISR       = NULL;
 8015434:	68fb      	ldr	r3, [r7, #12]
 8015436:	2200      	movs	r2, #0
 8015438:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 801543a:	68fb      	ldr	r3, [r7, #12]
 801543c:	2200      	movs	r2, #0
 801543e:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 8015440:	68fb      	ldr	r3, [r7, #12]
 8015442:	2200      	movs	r2, #0
 8015444:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 8015448:	68fb      	ldr	r3, [r7, #12]
 801544a:	2200      	movs	r2, #0
 801544c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8015450:	68fb      	ldr	r3, [r7, #12]
 8015452:	689b      	ldr	r3, [r3, #8]
 8015454:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8015458:	d108      	bne.n	801546c <HAL_SPI_Transmit_DMA+0xa8>
  {
    SPI_1LINE_TX(hspi);
 801545a:	68fb      	ldr	r3, [r7, #12]
 801545c:	681b      	ldr	r3, [r3, #0]
 801545e:	681a      	ldr	r2, [r3, #0]
 8015460:	68fb      	ldr	r3, [r7, #12]
 8015462:	681b      	ldr	r3, [r3, #0]
 8015464:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8015468:	601a      	str	r2, [r3, #0]
 801546a:	e009      	b.n	8015480 <HAL_SPI_Transmit_DMA+0xbc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 801546c:	68fb      	ldr	r3, [r7, #12]
 801546e:	681b      	ldr	r3, [r3, #0]
 8015470:	68db      	ldr	r3, [r3, #12]
 8015472:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8015476:	68fb      	ldr	r3, [r7, #12]
 8015478:	681b      	ldr	r3, [r3, #0]
 801547a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 801547e:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8015480:	68fb      	ldr	r3, [r7, #12]
 8015482:	68db      	ldr	r3, [r3, #12]
 8015484:	2b0f      	cmp	r3, #15
 8015486:	d905      	bls.n	8015494 <HAL_SPI_Transmit_DMA+0xd0>
 8015488:	68fb      	ldr	r3, [r7, #12]
 801548a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801548c:	699b      	ldr	r3, [r3, #24]
 801548e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8015492:	d10f      	bne.n	80154b4 <HAL_SPI_Transmit_DMA+0xf0>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8015494:	68fb      	ldr	r3, [r7, #12]
 8015496:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8015498:	2b07      	cmp	r3, #7
 801549a:	d911      	bls.n	80154c0 <HAL_SPI_Transmit_DMA+0xfc>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 801549c:	68fb      	ldr	r3, [r7, #12]
 801549e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80154a0:	699b      	ldr	r3, [r3, #24]
 80154a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80154a6:	d00b      	beq.n	80154c0 <HAL_SPI_Transmit_DMA+0xfc>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 80154a8:	68fb      	ldr	r3, [r7, #12]
 80154aa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80154ac:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80154ae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80154b2:	d005      	beq.n	80154c0 <HAL_SPI_Transmit_DMA+0xfc>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 80154b4:	68fb      	ldr	r3, [r7, #12]
 80154b6:	2200      	movs	r2, #0
 80154b8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 80154bc:	2301      	movs	r3, #1
 80154be:	e0b7      	b.n	8015630 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80154c0:	68fb      	ldr	r3, [r7, #12]
 80154c2:	68db      	ldr	r3, [r3, #12]
 80154c4:	2b07      	cmp	r3, #7
 80154c6:	d820      	bhi.n	801550a <HAL_SPI_Transmit_DMA+0x146>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80154c8:	68fb      	ldr	r3, [r7, #12]
 80154ca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80154cc:	699b      	ldr	r3, [r3, #24]
 80154ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80154d2:	d109      	bne.n	80154e8 <HAL_SPI_Transmit_DMA+0x124>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 80154d4:	68fb      	ldr	r3, [r7, #12]
 80154d6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80154da:	b29b      	uxth	r3, r3
 80154dc:	3301      	adds	r3, #1
 80154de:	105b      	asrs	r3, r3, #1
 80154e0:	b29a      	uxth	r2, r3
 80154e2:	68fb      	ldr	r3, [r7, #12]
 80154e4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80154e8:	68fb      	ldr	r3, [r7, #12]
 80154ea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80154ec:	699b      	ldr	r3, [r3, #24]
 80154ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80154f2:	d11e      	bne.n	8015532 <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 80154f4:	68fb      	ldr	r3, [r7, #12]
 80154f6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80154fa:	b29b      	uxth	r3, r3
 80154fc:	3303      	adds	r3, #3
 80154fe:	109b      	asrs	r3, r3, #2
 8015500:	b29a      	uxth	r2, r3
 8015502:	68fb      	ldr	r3, [r7, #12]
 8015504:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8015508:	e013      	b.n	8015532 <HAL_SPI_Transmit_DMA+0x16e>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 801550a:	68fb      	ldr	r3, [r7, #12]
 801550c:	68db      	ldr	r3, [r3, #12]
 801550e:	2b0f      	cmp	r3, #15
 8015510:	d80f      	bhi.n	8015532 <HAL_SPI_Transmit_DMA+0x16e>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8015512:	68fb      	ldr	r3, [r7, #12]
 8015514:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015516:	699b      	ldr	r3, [r3, #24]
 8015518:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801551c:	d109      	bne.n	8015532 <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 801551e:	68fb      	ldr	r3, [r7, #12]
 8015520:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8015524:	b29b      	uxth	r3, r3
 8015526:	3301      	adds	r3, #1
 8015528:	105b      	asrs	r3, r3, #1
 801552a:	b29a      	uxth	r2, r3
 801552c:	68fb      	ldr	r3, [r7, #12]
 801552e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8015532:	68fb      	ldr	r3, [r7, #12]
 8015534:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015536:	4a40      	ldr	r2, [pc, #256]	@ (8015638 <HAL_SPI_Transmit_DMA+0x274>)
 8015538:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 801553a:	68fb      	ldr	r3, [r7, #12]
 801553c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801553e:	4a3f      	ldr	r2, [pc, #252]	@ (801563c <HAL_SPI_Transmit_DMA+0x278>)
 8015540:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8015542:	68fb      	ldr	r3, [r7, #12]
 8015544:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015546:	4a3e      	ldr	r2, [pc, #248]	@ (8015640 <HAL_SPI_Transmit_DMA+0x27c>)
 8015548:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 801554a:	68fb      	ldr	r3, [r7, #12]
 801554c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801554e:	2200      	movs	r2, #0
 8015550:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8015552:	68fb      	ldr	r3, [r7, #12]
 8015554:	681b      	ldr	r3, [r3, #0]
 8015556:	689a      	ldr	r2, [r3, #8]
 8015558:	68fb      	ldr	r3, [r7, #12]
 801555a:	681b      	ldr	r3, [r3, #0]
 801555c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8015560:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8015562:	68fb      	ldr	r3, [r7, #12]
 8015564:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 8015566:	68fb      	ldr	r3, [r7, #12]
 8015568:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801556a:	4619      	mov	r1, r3
 801556c:	68fb      	ldr	r3, [r7, #12]
 801556e:	681b      	ldr	r3, [r3, #0]
 8015570:	3320      	adds	r3, #32
 8015572:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8015574:	68fb      	ldr	r3, [r7, #12]
 8015576:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801557a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 801557c:	f7f6 f972 	bl	800b864 <HAL_DMA_Start_IT>
 8015580:	4603      	mov	r3, r0
 8015582:	2b00      	cmp	r3, #0
 8015584:	d011      	beq.n	80155aa <HAL_SPI_Transmit_DMA+0x1e6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8015586:	68fb      	ldr	r3, [r7, #12]
 8015588:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801558c:	f043 0210 	orr.w	r2, r3, #16
 8015590:	68fb      	ldr	r3, [r7, #12]
 8015592:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8015596:	68fb      	ldr	r3, [r7, #12]
 8015598:	2201      	movs	r2, #1
 801559a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 801559e:	68fb      	ldr	r3, [r7, #12]
 80155a0:	2200      	movs	r2, #0
 80155a2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 80155a6:	2301      	movs	r3, #1
 80155a8:	e042      	b.n	8015630 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 80155aa:	68fb      	ldr	r3, [r7, #12]
 80155ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80155ae:	69db      	ldr	r3, [r3, #28]
 80155b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80155b4:	d108      	bne.n	80155c8 <HAL_SPI_Transmit_DMA+0x204>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 80155b6:	68fb      	ldr	r3, [r7, #12]
 80155b8:	681b      	ldr	r3, [r3, #0]
 80155ba:	6859      	ldr	r1, [r3, #4]
 80155bc:	68fb      	ldr	r3, [r7, #12]
 80155be:	681a      	ldr	r2, [r3, #0]
 80155c0:	4b20      	ldr	r3, [pc, #128]	@ (8015644 <HAL_SPI_Transmit_DMA+0x280>)
 80155c2:	400b      	ands	r3, r1
 80155c4:	6053      	str	r3, [r2, #4]
 80155c6:	e009      	b.n	80155dc <HAL_SPI_Transmit_DMA+0x218>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80155c8:	68fb      	ldr	r3, [r7, #12]
 80155ca:	681b      	ldr	r3, [r3, #0]
 80155cc:	685a      	ldr	r2, [r3, #4]
 80155ce:	4b1d      	ldr	r3, [pc, #116]	@ (8015644 <HAL_SPI_Transmit_DMA+0x280>)
 80155d0:	4013      	ands	r3, r2
 80155d2:	88f9      	ldrh	r1, [r7, #6]
 80155d4:	68fa      	ldr	r2, [r7, #12]
 80155d6:	6812      	ldr	r2, [r2, #0]
 80155d8:	430b      	orrs	r3, r1
 80155da:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 80155dc:	68fb      	ldr	r3, [r7, #12]
 80155de:	681b      	ldr	r3, [r3, #0]
 80155e0:	689a      	ldr	r2, [r3, #8]
 80155e2:	68fb      	ldr	r3, [r7, #12]
 80155e4:	681b      	ldr	r3, [r3, #0]
 80155e6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80155ea:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 80155ec:	68fb      	ldr	r3, [r7, #12]
 80155ee:	681b      	ldr	r3, [r3, #0]
 80155f0:	691a      	ldr	r2, [r3, #16]
 80155f2:	68fb      	ldr	r3, [r7, #12]
 80155f4:	681b      	ldr	r3, [r3, #0]
 80155f6:	f442 7248 	orr.w	r2, r2, #800	@ 0x320
 80155fa:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80155fc:	68fb      	ldr	r3, [r7, #12]
 80155fe:	681b      	ldr	r3, [r3, #0]
 8015600:	681a      	ldr	r2, [r3, #0]
 8015602:	68fb      	ldr	r3, [r7, #12]
 8015604:	681b      	ldr	r3, [r3, #0]
 8015606:	f042 0201 	orr.w	r2, r2, #1
 801560a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801560c:	68fb      	ldr	r3, [r7, #12]
 801560e:	685b      	ldr	r3, [r3, #4]
 8015610:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8015614:	d107      	bne.n	8015626 <HAL_SPI_Transmit_DMA+0x262>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8015616:	68fb      	ldr	r3, [r7, #12]
 8015618:	681b      	ldr	r3, [r3, #0]
 801561a:	681a      	ldr	r2, [r3, #0]
 801561c:	68fb      	ldr	r3, [r7, #12]
 801561e:	681b      	ldr	r3, [r3, #0]
 8015620:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8015624:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8015626:	68fb      	ldr	r3, [r7, #12]
 8015628:	2200      	movs	r2, #0
 801562a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 801562e:	2300      	movs	r3, #0
}
 8015630:	4618      	mov	r0, r3
 8015632:	3710      	adds	r7, #16
 8015634:	46bd      	mov	sp, r7
 8015636:	bd80      	pop	{r7, pc}
 8015638:	08015aa3 	.word	0x08015aa3
 801563c:	08015a5d 	.word	0x08015a5d
 8015640:	08015abf 	.word	0x08015abf
 8015644:	ffff0000 	.word	0xffff0000

08015648 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8015648:	b580      	push	{r7, lr}
 801564a:	b08a      	sub	sp, #40	@ 0x28
 801564c:	af00      	add	r7, sp, #0
 801564e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8015650:	687b      	ldr	r3, [r7, #4]
 8015652:	681b      	ldr	r3, [r3, #0]
 8015654:	691b      	ldr	r3, [r3, #16]
 8015656:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8015658:	687b      	ldr	r3, [r7, #4]
 801565a:	681b      	ldr	r3, [r3, #0]
 801565c:	695b      	ldr	r3, [r3, #20]
 801565e:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8015660:	6a3a      	ldr	r2, [r7, #32]
 8015662:	69fb      	ldr	r3, [r7, #28]
 8015664:	4013      	ands	r3, r2
 8015666:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8015668:	687b      	ldr	r3, [r7, #4]
 801566a:	681b      	ldr	r3, [r3, #0]
 801566c:	689b      	ldr	r3, [r3, #8]
 801566e:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8015670:	2300      	movs	r3, #0
 8015672:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8015674:	687b      	ldr	r3, [r7, #4]
 8015676:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801567a:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 801567c:	687b      	ldr	r3, [r7, #4]
 801567e:	681b      	ldr	r3, [r3, #0]
 8015680:	3330      	adds	r3, #48	@ 0x30
 8015682:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8015684:	69fb      	ldr	r3, [r7, #28]
 8015686:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801568a:	2b00      	cmp	r3, #0
 801568c:	d010      	beq.n	80156b0 <HAL_SPI_IRQHandler+0x68>
 801568e:	6a3b      	ldr	r3, [r7, #32]
 8015690:	f003 0308 	and.w	r3, r3, #8
 8015694:	2b00      	cmp	r3, #0
 8015696:	d00b      	beq.n	80156b0 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8015698:	687b      	ldr	r3, [r7, #4]
 801569a:	681b      	ldr	r3, [r3, #0]
 801569c:	699a      	ldr	r2, [r3, #24]
 801569e:	687b      	ldr	r3, [r7, #4]
 80156a0:	681b      	ldr	r3, [r3, #0]
 80156a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80156a6:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 80156a8:	6878      	ldr	r0, [r7, #4]
 80156aa:	f000 f9cd 	bl	8015a48 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 80156ae:	e192      	b.n	80159d6 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80156b0:	69bb      	ldr	r3, [r7, #24]
 80156b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80156b6:	2b00      	cmp	r3, #0
 80156b8:	d113      	bne.n	80156e2 <HAL_SPI_IRQHandler+0x9a>
 80156ba:	69bb      	ldr	r3, [r7, #24]
 80156bc:	f003 0320 	and.w	r3, r3, #32
 80156c0:	2b00      	cmp	r3, #0
 80156c2:	d10e      	bne.n	80156e2 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 80156c4:	69bb      	ldr	r3, [r7, #24]
 80156c6:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80156ca:	2b00      	cmp	r3, #0
 80156cc:	d009      	beq.n	80156e2 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 80156ce:	687b      	ldr	r3, [r7, #4]
 80156d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80156d2:	6878      	ldr	r0, [r7, #4]
 80156d4:	4798      	blx	r3
    hspi->RxISR(hspi);
 80156d6:	687b      	ldr	r3, [r7, #4]
 80156d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80156da:	6878      	ldr	r0, [r7, #4]
 80156dc:	4798      	blx	r3
    handled = 1UL;
 80156de:	2301      	movs	r3, #1
 80156e0:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80156e2:	69bb      	ldr	r3, [r7, #24]
 80156e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80156e8:	2b00      	cmp	r3, #0
 80156ea:	d10f      	bne.n	801570c <HAL_SPI_IRQHandler+0xc4>
 80156ec:	69bb      	ldr	r3, [r7, #24]
 80156ee:	f003 0301 	and.w	r3, r3, #1
 80156f2:	2b00      	cmp	r3, #0
 80156f4:	d00a      	beq.n	801570c <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80156f6:	69bb      	ldr	r3, [r7, #24]
 80156f8:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80156fc:	2b00      	cmp	r3, #0
 80156fe:	d105      	bne.n	801570c <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8015700:	687b      	ldr	r3, [r7, #4]
 8015702:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015704:	6878      	ldr	r0, [r7, #4]
 8015706:	4798      	blx	r3
    handled = 1UL;
 8015708:	2301      	movs	r3, #1
 801570a:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 801570c:	69bb      	ldr	r3, [r7, #24]
 801570e:	f003 0320 	and.w	r3, r3, #32
 8015712:	2b00      	cmp	r3, #0
 8015714:	d10f      	bne.n	8015736 <HAL_SPI_IRQHandler+0xee>
 8015716:	69bb      	ldr	r3, [r7, #24]
 8015718:	f003 0302 	and.w	r3, r3, #2
 801571c:	2b00      	cmp	r3, #0
 801571e:	d00a      	beq.n	8015736 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8015720:	69bb      	ldr	r3, [r7, #24]
 8015722:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8015726:	2b00      	cmp	r3, #0
 8015728:	d105      	bne.n	8015736 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 801572a:	687b      	ldr	r3, [r7, #4]
 801572c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801572e:	6878      	ldr	r0, [r7, #4]
 8015730:	4798      	blx	r3
    handled = 1UL;
 8015732:	2301      	movs	r3, #1
 8015734:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8015736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015738:	2b00      	cmp	r3, #0
 801573a:	f040 8147 	bne.w	80159cc <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 801573e:	69bb      	ldr	r3, [r7, #24]
 8015740:	f003 0308 	and.w	r3, r3, #8
 8015744:	2b00      	cmp	r3, #0
 8015746:	f000 808b 	beq.w	8015860 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	681b      	ldr	r3, [r3, #0]
 801574e:	699a      	ldr	r2, [r3, #24]
 8015750:	687b      	ldr	r3, [r7, #4]
 8015752:	681b      	ldr	r3, [r3, #0]
 8015754:	f042 0208 	orr.w	r2, r2, #8
 8015758:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 801575a:	687b      	ldr	r3, [r7, #4]
 801575c:	681b      	ldr	r3, [r3, #0]
 801575e:	699a      	ldr	r2, [r3, #24]
 8015760:	687b      	ldr	r3, [r7, #4]
 8015762:	681b      	ldr	r3, [r3, #0]
 8015764:	f042 0210 	orr.w	r2, r2, #16
 8015768:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 801576a:	687b      	ldr	r3, [r7, #4]
 801576c:	681b      	ldr	r3, [r3, #0]
 801576e:	699a      	ldr	r2, [r3, #24]
 8015770:	687b      	ldr	r3, [r7, #4]
 8015772:	681b      	ldr	r3, [r3, #0]
 8015774:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8015778:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 801577a:	687b      	ldr	r3, [r7, #4]
 801577c:	681b      	ldr	r3, [r3, #0]
 801577e:	691a      	ldr	r2, [r3, #16]
 8015780:	687b      	ldr	r3, [r7, #4]
 8015782:	681b      	ldr	r3, [r3, #0]
 8015784:	f022 0208 	bic.w	r2, r2, #8
 8015788:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 801578a:	687b      	ldr	r3, [r7, #4]
 801578c:	681b      	ldr	r3, [r3, #0]
 801578e:	689b      	ldr	r3, [r3, #8]
 8015790:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8015794:	2b00      	cmp	r3, #0
 8015796:	d13d      	bne.n	8015814 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8015798:	e036      	b.n	8015808 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 801579a:	687b      	ldr	r3, [r7, #4]
 801579c:	68db      	ldr	r3, [r3, #12]
 801579e:	2b0f      	cmp	r3, #15
 80157a0:	d90b      	bls.n	80157ba <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80157a2:	687b      	ldr	r3, [r7, #4]
 80157a4:	681a      	ldr	r2, [r3, #0]
 80157a6:	687b      	ldr	r3, [r7, #4]
 80157a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80157aa:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80157ac:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80157ae:	687b      	ldr	r3, [r7, #4]
 80157b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80157b2:	1d1a      	adds	r2, r3, #4
 80157b4:	687b      	ldr	r3, [r7, #4]
 80157b6:	665a      	str	r2, [r3, #100]	@ 0x64
 80157b8:	e01d      	b.n	80157f6 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80157ba:	687b      	ldr	r3, [r7, #4]
 80157bc:	68db      	ldr	r3, [r3, #12]
 80157be:	2b07      	cmp	r3, #7
 80157c0:	d90b      	bls.n	80157da <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80157c2:	687b      	ldr	r3, [r7, #4]
 80157c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80157c6:	68fa      	ldr	r2, [r7, #12]
 80157c8:	8812      	ldrh	r2, [r2, #0]
 80157ca:	b292      	uxth	r2, r2
 80157cc:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80157ce:	687b      	ldr	r3, [r7, #4]
 80157d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80157d2:	1c9a      	adds	r2, r3, #2
 80157d4:	687b      	ldr	r3, [r7, #4]
 80157d6:	665a      	str	r2, [r3, #100]	@ 0x64
 80157d8:	e00d      	b.n	80157f6 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80157da:	687b      	ldr	r3, [r7, #4]
 80157dc:	681b      	ldr	r3, [r3, #0]
 80157de:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80157e2:	687b      	ldr	r3, [r7, #4]
 80157e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80157e6:	7812      	ldrb	r2, [r2, #0]
 80157e8:	b2d2      	uxtb	r2, r2
 80157ea:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80157ec:	687b      	ldr	r3, [r7, #4]
 80157ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80157f0:	1c5a      	adds	r2, r3, #1
 80157f2:	687b      	ldr	r3, [r7, #4]
 80157f4:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 80157f6:	687b      	ldr	r3, [r7, #4]
 80157f8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80157fc:	b29b      	uxth	r3, r3
 80157fe:	3b01      	subs	r3, #1
 8015800:	b29a      	uxth	r2, r3
 8015802:	687b      	ldr	r3, [r7, #4]
 8015804:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 8015808:	687b      	ldr	r3, [r7, #4]
 801580a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801580e:	b29b      	uxth	r3, r3
 8015810:	2b00      	cmp	r3, #0
 8015812:	d1c2      	bne.n	801579a <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8015814:	6878      	ldr	r0, [r7, #4]
 8015816:	f000 f98f 	bl	8015b38 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 801581a:	687b      	ldr	r3, [r7, #4]
 801581c:	2201      	movs	r2, #1
 801581e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8015822:	687b      	ldr	r3, [r7, #4]
 8015824:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015828:	2b00      	cmp	r3, #0
 801582a:	d003      	beq.n	8015834 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 801582c:	6878      	ldr	r0, [r7, #4]
 801582e:	f000 f901 	bl	8015a34 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8015832:	e0d0      	b.n	80159d6 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8015834:	7cfb      	ldrb	r3, [r7, #19]
 8015836:	2b05      	cmp	r3, #5
 8015838:	d103      	bne.n	8015842 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 801583a:	6878      	ldr	r0, [r7, #4]
 801583c:	f000 f8e6 	bl	8015a0c <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8015840:	e0c6      	b.n	80159d0 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8015842:	7cfb      	ldrb	r3, [r7, #19]
 8015844:	2b04      	cmp	r3, #4
 8015846:	d103      	bne.n	8015850 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8015848:	6878      	ldr	r0, [r7, #4]
 801584a:	f000 f8d5 	bl	80159f8 <HAL_SPI_RxCpltCallback>
    return;
 801584e:	e0bf      	b.n	80159d0 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8015850:	7cfb      	ldrb	r3, [r7, #19]
 8015852:	2b03      	cmp	r3, #3
 8015854:	f040 80bc 	bne.w	80159d0 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8015858:	6878      	ldr	r0, [r7, #4]
 801585a:	f000 f8c3 	bl	80159e4 <HAL_SPI_TxCpltCallback>
    return;
 801585e:	e0b7      	b.n	80159d0 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8015860:	69bb      	ldr	r3, [r7, #24]
 8015862:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 8015866:	2b00      	cmp	r3, #0
 8015868:	f000 80b5 	beq.w	80159d6 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 801586c:	69bb      	ldr	r3, [r7, #24]
 801586e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015872:	2b00      	cmp	r3, #0
 8015874:	d00f      	beq.n	8015896 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8015876:	687b      	ldr	r3, [r7, #4]
 8015878:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801587c:	f043 0204 	orr.w	r2, r3, #4
 8015880:	687b      	ldr	r3, [r7, #4]
 8015882:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8015886:	687b      	ldr	r3, [r7, #4]
 8015888:	681b      	ldr	r3, [r3, #0]
 801588a:	699a      	ldr	r2, [r3, #24]
 801588c:	687b      	ldr	r3, [r7, #4]
 801588e:	681b      	ldr	r3, [r3, #0]
 8015890:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8015894:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8015896:	69bb      	ldr	r3, [r7, #24]
 8015898:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801589c:	2b00      	cmp	r3, #0
 801589e:	d00f      	beq.n	80158c0 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80158a0:	687b      	ldr	r3, [r7, #4]
 80158a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80158a6:	f043 0201 	orr.w	r2, r3, #1
 80158aa:	687b      	ldr	r3, [r7, #4]
 80158ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80158b0:	687b      	ldr	r3, [r7, #4]
 80158b2:	681b      	ldr	r3, [r3, #0]
 80158b4:	699a      	ldr	r2, [r3, #24]
 80158b6:	687b      	ldr	r3, [r7, #4]
 80158b8:	681b      	ldr	r3, [r3, #0]
 80158ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80158be:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 80158c0:	69bb      	ldr	r3, [r7, #24]
 80158c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80158c6:	2b00      	cmp	r3, #0
 80158c8:	d00f      	beq.n	80158ea <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80158ca:	687b      	ldr	r3, [r7, #4]
 80158cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80158d0:	f043 0208 	orr.w	r2, r3, #8
 80158d4:	687b      	ldr	r3, [r7, #4]
 80158d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80158da:	687b      	ldr	r3, [r7, #4]
 80158dc:	681b      	ldr	r3, [r3, #0]
 80158de:	699a      	ldr	r2, [r3, #24]
 80158e0:	687b      	ldr	r3, [r7, #4]
 80158e2:	681b      	ldr	r3, [r3, #0]
 80158e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80158e8:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 80158ea:	69bb      	ldr	r3, [r7, #24]
 80158ec:	f003 0320 	and.w	r3, r3, #32
 80158f0:	2b00      	cmp	r3, #0
 80158f2:	d00f      	beq.n	8015914 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80158f4:	687b      	ldr	r3, [r7, #4]
 80158f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80158fa:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80158fe:	687b      	ldr	r3, [r7, #4]
 8015900:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8015904:	687b      	ldr	r3, [r7, #4]
 8015906:	681b      	ldr	r3, [r3, #0]
 8015908:	699a      	ldr	r2, [r3, #24]
 801590a:	687b      	ldr	r3, [r7, #4]
 801590c:	681b      	ldr	r3, [r3, #0]
 801590e:	f042 0220 	orr.w	r2, r2, #32
 8015912:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8015914:	687b      	ldr	r3, [r7, #4]
 8015916:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801591a:	2b00      	cmp	r3, #0
 801591c:	d05a      	beq.n	80159d4 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 801591e:	687b      	ldr	r3, [r7, #4]
 8015920:	681b      	ldr	r3, [r3, #0]
 8015922:	681a      	ldr	r2, [r3, #0]
 8015924:	687b      	ldr	r3, [r7, #4]
 8015926:	681b      	ldr	r3, [r3, #0]
 8015928:	f022 0201 	bic.w	r2, r2, #1
 801592c:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 801592e:	687b      	ldr	r3, [r7, #4]
 8015930:	681b      	ldr	r3, [r3, #0]
 8015932:	6919      	ldr	r1, [r3, #16]
 8015934:	687b      	ldr	r3, [r7, #4]
 8015936:	681a      	ldr	r2, [r3, #0]
 8015938:	4b28      	ldr	r3, [pc, #160]	@ (80159dc <HAL_SPI_IRQHandler+0x394>)
 801593a:	400b      	ands	r3, r1
 801593c:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 801593e:	697b      	ldr	r3, [r7, #20]
 8015940:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8015944:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8015948:	d138      	bne.n	80159bc <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 801594a:	687b      	ldr	r3, [r7, #4]
 801594c:	681b      	ldr	r3, [r3, #0]
 801594e:	689a      	ldr	r2, [r3, #8]
 8015950:	687b      	ldr	r3, [r7, #4]
 8015952:	681b      	ldr	r3, [r3, #0]
 8015954:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8015958:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 801595a:	687b      	ldr	r3, [r7, #4]
 801595c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801595e:	2b00      	cmp	r3, #0
 8015960:	d013      	beq.n	801598a <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8015962:	687b      	ldr	r3, [r7, #4]
 8015964:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015966:	4a1e      	ldr	r2, [pc, #120]	@ (80159e0 <HAL_SPI_IRQHandler+0x398>)
 8015968:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 801596a:	687b      	ldr	r3, [r7, #4]
 801596c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801596e:	4618      	mov	r0, r3
 8015970:	f7f6 fd00 	bl	800c374 <HAL_DMA_Abort_IT>
 8015974:	4603      	mov	r3, r0
 8015976:	2b00      	cmp	r3, #0
 8015978:	d007      	beq.n	801598a <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801597a:	687b      	ldr	r3, [r7, #4]
 801597c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015980:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8015984:	687b      	ldr	r3, [r7, #4]
 8015986:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 801598a:	687b      	ldr	r3, [r7, #4]
 801598c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801598e:	2b00      	cmp	r3, #0
 8015990:	d020      	beq.n	80159d4 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8015992:	687b      	ldr	r3, [r7, #4]
 8015994:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015996:	4a12      	ldr	r2, [pc, #72]	@ (80159e0 <HAL_SPI_IRQHandler+0x398>)
 8015998:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 801599a:	687b      	ldr	r3, [r7, #4]
 801599c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801599e:	4618      	mov	r0, r3
 80159a0:	f7f6 fce8 	bl	800c374 <HAL_DMA_Abort_IT>
 80159a4:	4603      	mov	r3, r0
 80159a6:	2b00      	cmp	r3, #0
 80159a8:	d014      	beq.n	80159d4 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80159aa:	687b      	ldr	r3, [r7, #4]
 80159ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80159b0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80159b4:	687b      	ldr	r3, [r7, #4]
 80159b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80159ba:	e00b      	b.n	80159d4 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 80159bc:	687b      	ldr	r3, [r7, #4]
 80159be:	2201      	movs	r2, #1
 80159c0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 80159c4:	6878      	ldr	r0, [r7, #4]
 80159c6:	f000 f835 	bl	8015a34 <HAL_SPI_ErrorCallback>
    return;
 80159ca:	e003      	b.n	80159d4 <HAL_SPI_IRQHandler+0x38c>
    return;
 80159cc:	bf00      	nop
 80159ce:	e002      	b.n	80159d6 <HAL_SPI_IRQHandler+0x38e>
    return;
 80159d0:	bf00      	nop
 80159d2:	e000      	b.n	80159d6 <HAL_SPI_IRQHandler+0x38e>
    return;
 80159d4:	bf00      	nop
  }
}
 80159d6:	3728      	adds	r7, #40	@ 0x28
 80159d8:	46bd      	mov	sp, r7
 80159da:	bd80      	pop	{r7, pc}
 80159dc:	fffffc94 	.word	0xfffffc94
 80159e0:	08015b05 	.word	0x08015b05

080159e4 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80159e4:	b480      	push	{r7}
 80159e6:	b083      	sub	sp, #12
 80159e8:	af00      	add	r7, sp, #0
 80159ea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80159ec:	bf00      	nop
 80159ee:	370c      	adds	r7, #12
 80159f0:	46bd      	mov	sp, r7
 80159f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159f6:	4770      	bx	lr

080159f8 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80159f8:	b480      	push	{r7}
 80159fa:	b083      	sub	sp, #12
 80159fc:	af00      	add	r7, sp, #0
 80159fe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8015a00:	bf00      	nop
 8015a02:	370c      	adds	r7, #12
 8015a04:	46bd      	mov	sp, r7
 8015a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a0a:	4770      	bx	lr

08015a0c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8015a0c:	b480      	push	{r7}
 8015a0e:	b083      	sub	sp, #12
 8015a10:	af00      	add	r7, sp, #0
 8015a12:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8015a14:	bf00      	nop
 8015a16:	370c      	adds	r7, #12
 8015a18:	46bd      	mov	sp, r7
 8015a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a1e:	4770      	bx	lr

08015a20 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8015a20:	b480      	push	{r7}
 8015a22:	b083      	sub	sp, #12
 8015a24:	af00      	add	r7, sp, #0
 8015a26:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8015a28:	bf00      	nop
 8015a2a:	370c      	adds	r7, #12
 8015a2c:	46bd      	mov	sp, r7
 8015a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a32:	4770      	bx	lr

08015a34 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8015a34:	b480      	push	{r7}
 8015a36:	b083      	sub	sp, #12
 8015a38:	af00      	add	r7, sp, #0
 8015a3a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8015a3c:	bf00      	nop
 8015a3e:	370c      	adds	r7, #12
 8015a40:	46bd      	mov	sp, r7
 8015a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a46:	4770      	bx	lr

08015a48 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8015a48:	b480      	push	{r7}
 8015a4a:	b083      	sub	sp, #12
 8015a4c:	af00      	add	r7, sp, #0
 8015a4e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8015a50:	bf00      	nop
 8015a52:	370c      	adds	r7, #12
 8015a54:	46bd      	mov	sp, r7
 8015a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a5a:	4770      	bx	lr

08015a5c <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8015a5c:	b580      	push	{r7, lr}
 8015a5e:	b084      	sub	sp, #16
 8015a60:	af00      	add	r7, sp, #0
 8015a62:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8015a64:	687b      	ldr	r3, [r7, #4]
 8015a66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015a68:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8015a6a:	68fb      	ldr	r3, [r7, #12]
 8015a6c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8015a70:	b2db      	uxtb	r3, r3
 8015a72:	2b07      	cmp	r3, #7
 8015a74:	d011      	beq.n	8015a9a <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8015a76:	68fb      	ldr	r3, [r7, #12]
 8015a78:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015a7a:	69db      	ldr	r3, [r3, #28]
 8015a7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8015a80:	d103      	bne.n	8015a8a <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 8015a82:	68f8      	ldr	r0, [r7, #12]
 8015a84:	f7ff ffae 	bl	80159e4 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8015a88:	e007      	b.n	8015a9a <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8015a8a:	68fb      	ldr	r3, [r7, #12]
 8015a8c:	681b      	ldr	r3, [r3, #0]
 8015a8e:	691a      	ldr	r2, [r3, #16]
 8015a90:	68fb      	ldr	r3, [r7, #12]
 8015a92:	681b      	ldr	r3, [r3, #0]
 8015a94:	f042 0208 	orr.w	r2, r2, #8
 8015a98:	611a      	str	r2, [r3, #16]
}
 8015a9a:	bf00      	nop
 8015a9c:	3710      	adds	r7, #16
 8015a9e:	46bd      	mov	sp, r7
 8015aa0:	bd80      	pop	{r7, pc}

08015aa2 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 8015aa2:	b580      	push	{r7, lr}
 8015aa4:	b084      	sub	sp, #16
 8015aa6:	af00      	add	r7, sp, #0
 8015aa8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 8015aaa:	687b      	ldr	r3, [r7, #4]
 8015aac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015aae:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8015ab0:	68f8      	ldr	r0, [r7, #12]
 8015ab2:	f7ff ffb5 	bl	8015a20 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8015ab6:	bf00      	nop
 8015ab8:	3710      	adds	r7, #16
 8015aba:	46bd      	mov	sp, r7
 8015abc:	bd80      	pop	{r7, pc}

08015abe <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8015abe:	b580      	push	{r7, lr}
 8015ac0:	b084      	sub	sp, #16
 8015ac2:	af00      	add	r7, sp, #0
 8015ac4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8015ac6:	687b      	ldr	r3, [r7, #4]
 8015ac8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015aca:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8015acc:	6878      	ldr	r0, [r7, #4]
 8015ace:	f7f7 fdcf 	bl	800d670 <HAL_DMA_GetError>
 8015ad2:	4603      	mov	r3, r0
 8015ad4:	2b02      	cmp	r3, #2
 8015ad6:	d011      	beq.n	8015afc <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 8015ad8:	68f8      	ldr	r0, [r7, #12]
 8015ada:	f000 f82d 	bl	8015b38 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8015ade:	68fb      	ldr	r3, [r7, #12]
 8015ae0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015ae4:	f043 0210 	orr.w	r2, r3, #16
 8015ae8:	68fb      	ldr	r3, [r7, #12]
 8015aea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8015aee:	68fb      	ldr	r3, [r7, #12]
 8015af0:	2201      	movs	r2, #1
 8015af2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8015af6:	68f8      	ldr	r0, [r7, #12]
 8015af8:	f7ff ff9c 	bl	8015a34 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8015afc:	bf00      	nop
 8015afe:	3710      	adds	r7, #16
 8015b00:	46bd      	mov	sp, r7
 8015b02:	bd80      	pop	{r7, pc}

08015b04 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8015b04:	b580      	push	{r7, lr}
 8015b06:	b084      	sub	sp, #16
 8015b08:	af00      	add	r7, sp, #0
 8015b0a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8015b0c:	687b      	ldr	r3, [r7, #4]
 8015b0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015b10:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8015b12:	68fb      	ldr	r3, [r7, #12]
 8015b14:	2200      	movs	r2, #0
 8015b16:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8015b1a:	68fb      	ldr	r3, [r7, #12]
 8015b1c:	2200      	movs	r2, #0
 8015b1e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8015b22:	68fb      	ldr	r3, [r7, #12]
 8015b24:	2201      	movs	r2, #1
 8015b26:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8015b2a:	68f8      	ldr	r0, [r7, #12]
 8015b2c:	f7ff ff82 	bl	8015a34 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8015b30:	bf00      	nop
 8015b32:	3710      	adds	r7, #16
 8015b34:	46bd      	mov	sp, r7
 8015b36:	bd80      	pop	{r7, pc}

08015b38 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8015b38:	b480      	push	{r7}
 8015b3a:	b085      	sub	sp, #20
 8015b3c:	af00      	add	r7, sp, #0
 8015b3e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8015b40:	687b      	ldr	r3, [r7, #4]
 8015b42:	681b      	ldr	r3, [r3, #0]
 8015b44:	695b      	ldr	r3, [r3, #20]
 8015b46:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8015b48:	687b      	ldr	r3, [r7, #4]
 8015b4a:	681b      	ldr	r3, [r3, #0]
 8015b4c:	699a      	ldr	r2, [r3, #24]
 8015b4e:	687b      	ldr	r3, [r7, #4]
 8015b50:	681b      	ldr	r3, [r3, #0]
 8015b52:	f042 0208 	orr.w	r2, r2, #8
 8015b56:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8015b58:	687b      	ldr	r3, [r7, #4]
 8015b5a:	681b      	ldr	r3, [r3, #0]
 8015b5c:	699a      	ldr	r2, [r3, #24]
 8015b5e:	687b      	ldr	r3, [r7, #4]
 8015b60:	681b      	ldr	r3, [r3, #0]
 8015b62:	f042 0210 	orr.w	r2, r2, #16
 8015b66:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8015b68:	687b      	ldr	r3, [r7, #4]
 8015b6a:	681b      	ldr	r3, [r3, #0]
 8015b6c:	681a      	ldr	r2, [r3, #0]
 8015b6e:	687b      	ldr	r3, [r7, #4]
 8015b70:	681b      	ldr	r3, [r3, #0]
 8015b72:	f022 0201 	bic.w	r2, r2, #1
 8015b76:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8015b78:	687b      	ldr	r3, [r7, #4]
 8015b7a:	681b      	ldr	r3, [r3, #0]
 8015b7c:	6919      	ldr	r1, [r3, #16]
 8015b7e:	687b      	ldr	r3, [r7, #4]
 8015b80:	681a      	ldr	r2, [r3, #0]
 8015b82:	4b3c      	ldr	r3, [pc, #240]	@ (8015c74 <SPI_CloseTransfer+0x13c>)
 8015b84:	400b      	ands	r3, r1
 8015b86:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8015b88:	687b      	ldr	r3, [r7, #4]
 8015b8a:	681b      	ldr	r3, [r3, #0]
 8015b8c:	689a      	ldr	r2, [r3, #8]
 8015b8e:	687b      	ldr	r3, [r7, #4]
 8015b90:	681b      	ldr	r3, [r3, #0]
 8015b92:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8015b96:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8015b98:	687b      	ldr	r3, [r7, #4]
 8015b9a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8015b9e:	b2db      	uxtb	r3, r3
 8015ba0:	2b04      	cmp	r3, #4
 8015ba2:	d014      	beq.n	8015bce <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8015ba4:	68fb      	ldr	r3, [r7, #12]
 8015ba6:	f003 0320 	and.w	r3, r3, #32
 8015baa:	2b00      	cmp	r3, #0
 8015bac:	d00f      	beq.n	8015bce <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8015bae:	687b      	ldr	r3, [r7, #4]
 8015bb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015bb4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8015bb8:	687b      	ldr	r3, [r7, #4]
 8015bba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8015bbe:	687b      	ldr	r3, [r7, #4]
 8015bc0:	681b      	ldr	r3, [r3, #0]
 8015bc2:	699a      	ldr	r2, [r3, #24]
 8015bc4:	687b      	ldr	r3, [r7, #4]
 8015bc6:	681b      	ldr	r3, [r3, #0]
 8015bc8:	f042 0220 	orr.w	r2, r2, #32
 8015bcc:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8015bce:	687b      	ldr	r3, [r7, #4]
 8015bd0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8015bd4:	b2db      	uxtb	r3, r3
 8015bd6:	2b03      	cmp	r3, #3
 8015bd8:	d014      	beq.n	8015c04 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8015bda:	68fb      	ldr	r3, [r7, #12]
 8015bdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015be0:	2b00      	cmp	r3, #0
 8015be2:	d00f      	beq.n	8015c04 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8015be4:	687b      	ldr	r3, [r7, #4]
 8015be6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015bea:	f043 0204 	orr.w	r2, r3, #4
 8015bee:	687b      	ldr	r3, [r7, #4]
 8015bf0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8015bf4:	687b      	ldr	r3, [r7, #4]
 8015bf6:	681b      	ldr	r3, [r3, #0]
 8015bf8:	699a      	ldr	r2, [r3, #24]
 8015bfa:	687b      	ldr	r3, [r7, #4]
 8015bfc:	681b      	ldr	r3, [r3, #0]
 8015bfe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8015c02:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8015c04:	68fb      	ldr	r3, [r7, #12]
 8015c06:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8015c0a:	2b00      	cmp	r3, #0
 8015c0c:	d00f      	beq.n	8015c2e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8015c0e:	687b      	ldr	r3, [r7, #4]
 8015c10:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015c14:	f043 0201 	orr.w	r2, r3, #1
 8015c18:	687b      	ldr	r3, [r7, #4]
 8015c1a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8015c1e:	687b      	ldr	r3, [r7, #4]
 8015c20:	681b      	ldr	r3, [r3, #0]
 8015c22:	699a      	ldr	r2, [r3, #24]
 8015c24:	687b      	ldr	r3, [r7, #4]
 8015c26:	681b      	ldr	r3, [r3, #0]
 8015c28:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8015c2c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8015c2e:	68fb      	ldr	r3, [r7, #12]
 8015c30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8015c34:	2b00      	cmp	r3, #0
 8015c36:	d00f      	beq.n	8015c58 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8015c38:	687b      	ldr	r3, [r7, #4]
 8015c3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015c3e:	f043 0208 	orr.w	r2, r3, #8
 8015c42:	687b      	ldr	r3, [r7, #4]
 8015c44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8015c48:	687b      	ldr	r3, [r7, #4]
 8015c4a:	681b      	ldr	r3, [r3, #0]
 8015c4c:	699a      	ldr	r2, [r3, #24]
 8015c4e:	687b      	ldr	r3, [r7, #4]
 8015c50:	681b      	ldr	r3, [r3, #0]
 8015c52:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8015c56:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8015c58:	687b      	ldr	r3, [r7, #4]
 8015c5a:	2200      	movs	r2, #0
 8015c5c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8015c60:	687b      	ldr	r3, [r7, #4]
 8015c62:	2200      	movs	r2, #0
 8015c64:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8015c68:	bf00      	nop
 8015c6a:	3714      	adds	r7, #20
 8015c6c:	46bd      	mov	sp, r7
 8015c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c72:	4770      	bx	lr
 8015c74:	fffffc90 	.word	0xfffffc90

08015c78 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8015c78:	b580      	push	{r7, lr}
 8015c7a:	b084      	sub	sp, #16
 8015c7c:	af00      	add	r7, sp, #0
 8015c7e:	60f8      	str	r0, [r7, #12]
 8015c80:	60b9      	str	r1, [r7, #8]
 8015c82:	603b      	str	r3, [r7, #0]
 8015c84:	4613      	mov	r3, r2
 8015c86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8015c88:	e010      	b.n	8015cac <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8015c8a:	f7f3 f93b 	bl	8008f04 <HAL_GetTick>
 8015c8e:	4602      	mov	r2, r0
 8015c90:	69bb      	ldr	r3, [r7, #24]
 8015c92:	1ad3      	subs	r3, r2, r3
 8015c94:	683a      	ldr	r2, [r7, #0]
 8015c96:	429a      	cmp	r2, r3
 8015c98:	d803      	bhi.n	8015ca2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8015c9a:	683b      	ldr	r3, [r7, #0]
 8015c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015ca0:	d102      	bne.n	8015ca8 <SPI_WaitOnFlagUntilTimeout+0x30>
 8015ca2:	683b      	ldr	r3, [r7, #0]
 8015ca4:	2b00      	cmp	r3, #0
 8015ca6:	d101      	bne.n	8015cac <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8015ca8:	2303      	movs	r3, #3
 8015caa:	e00f      	b.n	8015ccc <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8015cac:	68fb      	ldr	r3, [r7, #12]
 8015cae:	681b      	ldr	r3, [r3, #0]
 8015cb0:	695a      	ldr	r2, [r3, #20]
 8015cb2:	68bb      	ldr	r3, [r7, #8]
 8015cb4:	4013      	ands	r3, r2
 8015cb6:	68ba      	ldr	r2, [r7, #8]
 8015cb8:	429a      	cmp	r2, r3
 8015cba:	bf0c      	ite	eq
 8015cbc:	2301      	moveq	r3, #1
 8015cbe:	2300      	movne	r3, #0
 8015cc0:	b2db      	uxtb	r3, r3
 8015cc2:	461a      	mov	r2, r3
 8015cc4:	79fb      	ldrb	r3, [r7, #7]
 8015cc6:	429a      	cmp	r2, r3
 8015cc8:	d0df      	beq.n	8015c8a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8015cca:	2300      	movs	r3, #0
}
 8015ccc:	4618      	mov	r0, r3
 8015cce:	3710      	adds	r7, #16
 8015cd0:	46bd      	mov	sp, r7
 8015cd2:	bd80      	pop	{r7, pc}

08015cd4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8015cd4:	b480      	push	{r7}
 8015cd6:	b085      	sub	sp, #20
 8015cd8:	af00      	add	r7, sp, #0
 8015cda:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8015cdc:	687b      	ldr	r3, [r7, #4]
 8015cde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015ce0:	095b      	lsrs	r3, r3, #5
 8015ce2:	3301      	adds	r3, #1
 8015ce4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8015ce6:	687b      	ldr	r3, [r7, #4]
 8015ce8:	68db      	ldr	r3, [r3, #12]
 8015cea:	3301      	adds	r3, #1
 8015cec:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8015cee:	68bb      	ldr	r3, [r7, #8]
 8015cf0:	3307      	adds	r3, #7
 8015cf2:	08db      	lsrs	r3, r3, #3
 8015cf4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8015cf6:	68bb      	ldr	r3, [r7, #8]
 8015cf8:	68fa      	ldr	r2, [r7, #12]
 8015cfa:	fb02 f303 	mul.w	r3, r2, r3
}
 8015cfe:	4618      	mov	r0, r3
 8015d00:	3714      	adds	r7, #20
 8015d02:	46bd      	mov	sp, r7
 8015d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d08:	4770      	bx	lr

08015d0a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8015d0a:	b580      	push	{r7, lr}
 8015d0c:	b082      	sub	sp, #8
 8015d0e:	af00      	add	r7, sp, #0
 8015d10:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8015d12:	687b      	ldr	r3, [r7, #4]
 8015d14:	2b00      	cmp	r3, #0
 8015d16:	d101      	bne.n	8015d1c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8015d18:	2301      	movs	r3, #1
 8015d1a:	e049      	b.n	8015db0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8015d1c:	687b      	ldr	r3, [r7, #4]
 8015d1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8015d22:	b2db      	uxtb	r3, r3
 8015d24:	2b00      	cmp	r3, #0
 8015d26:	d106      	bne.n	8015d36 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8015d28:	687b      	ldr	r3, [r7, #4]
 8015d2a:	2200      	movs	r2, #0
 8015d2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8015d30:	6878      	ldr	r0, [r7, #4]
 8015d32:	f7f2 fef1 	bl	8008b18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015d36:	687b      	ldr	r3, [r7, #4]
 8015d38:	2202      	movs	r2, #2
 8015d3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8015d3e:	687b      	ldr	r3, [r7, #4]
 8015d40:	681a      	ldr	r2, [r3, #0]
 8015d42:	687b      	ldr	r3, [r7, #4]
 8015d44:	3304      	adds	r3, #4
 8015d46:	4619      	mov	r1, r3
 8015d48:	4610      	mov	r0, r2
 8015d4a:	f000 fedb 	bl	8016b04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8015d4e:	687b      	ldr	r3, [r7, #4]
 8015d50:	2201      	movs	r2, #1
 8015d52:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8015d56:	687b      	ldr	r3, [r7, #4]
 8015d58:	2201      	movs	r2, #1
 8015d5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8015d5e:	687b      	ldr	r3, [r7, #4]
 8015d60:	2201      	movs	r2, #1
 8015d62:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8015d66:	687b      	ldr	r3, [r7, #4]
 8015d68:	2201      	movs	r2, #1
 8015d6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8015d6e:	687b      	ldr	r3, [r7, #4]
 8015d70:	2201      	movs	r2, #1
 8015d72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8015d76:	687b      	ldr	r3, [r7, #4]
 8015d78:	2201      	movs	r2, #1
 8015d7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8015d7e:	687b      	ldr	r3, [r7, #4]
 8015d80:	2201      	movs	r2, #1
 8015d82:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8015d86:	687b      	ldr	r3, [r7, #4]
 8015d88:	2201      	movs	r2, #1
 8015d8a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8015d8e:	687b      	ldr	r3, [r7, #4]
 8015d90:	2201      	movs	r2, #1
 8015d92:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8015d96:	687b      	ldr	r3, [r7, #4]
 8015d98:	2201      	movs	r2, #1
 8015d9a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8015d9e:	687b      	ldr	r3, [r7, #4]
 8015da0:	2201      	movs	r2, #1
 8015da2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8015da6:	687b      	ldr	r3, [r7, #4]
 8015da8:	2201      	movs	r2, #1
 8015daa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8015dae:	2300      	movs	r3, #0
}
 8015db0:	4618      	mov	r0, r3
 8015db2:	3708      	adds	r7, #8
 8015db4:	46bd      	mov	sp, r7
 8015db6:	bd80      	pop	{r7, pc}

08015db8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8015db8:	b480      	push	{r7}
 8015dba:	b085      	sub	sp, #20
 8015dbc:	af00      	add	r7, sp, #0
 8015dbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8015dc0:	687b      	ldr	r3, [r7, #4]
 8015dc2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8015dc6:	b2db      	uxtb	r3, r3
 8015dc8:	2b01      	cmp	r3, #1
 8015dca:	d001      	beq.n	8015dd0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8015dcc:	2301      	movs	r3, #1
 8015dce:	e056      	b.n	8015e7e <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015dd0:	687b      	ldr	r3, [r7, #4]
 8015dd2:	2202      	movs	r2, #2
 8015dd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8015dd8:	687b      	ldr	r3, [r7, #4]
 8015dda:	681b      	ldr	r3, [r3, #0]
 8015ddc:	4a2b      	ldr	r2, [pc, #172]	@ (8015e8c <HAL_TIM_Base_Start+0xd4>)
 8015dde:	4293      	cmp	r3, r2
 8015de0:	d02c      	beq.n	8015e3c <HAL_TIM_Base_Start+0x84>
 8015de2:	687b      	ldr	r3, [r7, #4]
 8015de4:	681b      	ldr	r3, [r3, #0]
 8015de6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8015dea:	d027      	beq.n	8015e3c <HAL_TIM_Base_Start+0x84>
 8015dec:	687b      	ldr	r3, [r7, #4]
 8015dee:	681b      	ldr	r3, [r3, #0]
 8015df0:	4a27      	ldr	r2, [pc, #156]	@ (8015e90 <HAL_TIM_Base_Start+0xd8>)
 8015df2:	4293      	cmp	r3, r2
 8015df4:	d022      	beq.n	8015e3c <HAL_TIM_Base_Start+0x84>
 8015df6:	687b      	ldr	r3, [r7, #4]
 8015df8:	681b      	ldr	r3, [r3, #0]
 8015dfa:	4a26      	ldr	r2, [pc, #152]	@ (8015e94 <HAL_TIM_Base_Start+0xdc>)
 8015dfc:	4293      	cmp	r3, r2
 8015dfe:	d01d      	beq.n	8015e3c <HAL_TIM_Base_Start+0x84>
 8015e00:	687b      	ldr	r3, [r7, #4]
 8015e02:	681b      	ldr	r3, [r3, #0]
 8015e04:	4a24      	ldr	r2, [pc, #144]	@ (8015e98 <HAL_TIM_Base_Start+0xe0>)
 8015e06:	4293      	cmp	r3, r2
 8015e08:	d018      	beq.n	8015e3c <HAL_TIM_Base_Start+0x84>
 8015e0a:	687b      	ldr	r3, [r7, #4]
 8015e0c:	681b      	ldr	r3, [r3, #0]
 8015e0e:	4a23      	ldr	r2, [pc, #140]	@ (8015e9c <HAL_TIM_Base_Start+0xe4>)
 8015e10:	4293      	cmp	r3, r2
 8015e12:	d013      	beq.n	8015e3c <HAL_TIM_Base_Start+0x84>
 8015e14:	687b      	ldr	r3, [r7, #4]
 8015e16:	681b      	ldr	r3, [r3, #0]
 8015e18:	4a21      	ldr	r2, [pc, #132]	@ (8015ea0 <HAL_TIM_Base_Start+0xe8>)
 8015e1a:	4293      	cmp	r3, r2
 8015e1c:	d00e      	beq.n	8015e3c <HAL_TIM_Base_Start+0x84>
 8015e1e:	687b      	ldr	r3, [r7, #4]
 8015e20:	681b      	ldr	r3, [r3, #0]
 8015e22:	4a20      	ldr	r2, [pc, #128]	@ (8015ea4 <HAL_TIM_Base_Start+0xec>)
 8015e24:	4293      	cmp	r3, r2
 8015e26:	d009      	beq.n	8015e3c <HAL_TIM_Base_Start+0x84>
 8015e28:	687b      	ldr	r3, [r7, #4]
 8015e2a:	681b      	ldr	r3, [r3, #0]
 8015e2c:	4a1e      	ldr	r2, [pc, #120]	@ (8015ea8 <HAL_TIM_Base_Start+0xf0>)
 8015e2e:	4293      	cmp	r3, r2
 8015e30:	d004      	beq.n	8015e3c <HAL_TIM_Base_Start+0x84>
 8015e32:	687b      	ldr	r3, [r7, #4]
 8015e34:	681b      	ldr	r3, [r3, #0]
 8015e36:	4a1d      	ldr	r2, [pc, #116]	@ (8015eac <HAL_TIM_Base_Start+0xf4>)
 8015e38:	4293      	cmp	r3, r2
 8015e3a:	d115      	bne.n	8015e68 <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8015e3c:	687b      	ldr	r3, [r7, #4]
 8015e3e:	681b      	ldr	r3, [r3, #0]
 8015e40:	689a      	ldr	r2, [r3, #8]
 8015e42:	4b1b      	ldr	r3, [pc, #108]	@ (8015eb0 <HAL_TIM_Base_Start+0xf8>)
 8015e44:	4013      	ands	r3, r2
 8015e46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015e48:	68fb      	ldr	r3, [r7, #12]
 8015e4a:	2b06      	cmp	r3, #6
 8015e4c:	d015      	beq.n	8015e7a <HAL_TIM_Base_Start+0xc2>
 8015e4e:	68fb      	ldr	r3, [r7, #12]
 8015e50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015e54:	d011      	beq.n	8015e7a <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 8015e56:	687b      	ldr	r3, [r7, #4]
 8015e58:	681b      	ldr	r3, [r3, #0]
 8015e5a:	681a      	ldr	r2, [r3, #0]
 8015e5c:	687b      	ldr	r3, [r7, #4]
 8015e5e:	681b      	ldr	r3, [r3, #0]
 8015e60:	f042 0201 	orr.w	r2, r2, #1
 8015e64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015e66:	e008      	b.n	8015e7a <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8015e68:	687b      	ldr	r3, [r7, #4]
 8015e6a:	681b      	ldr	r3, [r3, #0]
 8015e6c:	681a      	ldr	r2, [r3, #0]
 8015e6e:	687b      	ldr	r3, [r7, #4]
 8015e70:	681b      	ldr	r3, [r3, #0]
 8015e72:	f042 0201 	orr.w	r2, r2, #1
 8015e76:	601a      	str	r2, [r3, #0]
 8015e78:	e000      	b.n	8015e7c <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015e7a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8015e7c:	2300      	movs	r3, #0
}
 8015e7e:	4618      	mov	r0, r3
 8015e80:	3714      	adds	r7, #20
 8015e82:	46bd      	mov	sp, r7
 8015e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e88:	4770      	bx	lr
 8015e8a:	bf00      	nop
 8015e8c:	40010000 	.word	0x40010000
 8015e90:	40000400 	.word	0x40000400
 8015e94:	40000800 	.word	0x40000800
 8015e98:	40000c00 	.word	0x40000c00
 8015e9c:	40010400 	.word	0x40010400
 8015ea0:	40001800 	.word	0x40001800
 8015ea4:	40014000 	.word	0x40014000
 8015ea8:	4000e000 	.word	0x4000e000
 8015eac:	4000e400 	.word	0x4000e400
 8015eb0:	00010007 	.word	0x00010007

08015eb4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8015eb4:	b480      	push	{r7}
 8015eb6:	b085      	sub	sp, #20
 8015eb8:	af00      	add	r7, sp, #0
 8015eba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8015ebc:	687b      	ldr	r3, [r7, #4]
 8015ebe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8015ec2:	b2db      	uxtb	r3, r3
 8015ec4:	2b01      	cmp	r3, #1
 8015ec6:	d001      	beq.n	8015ecc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8015ec8:	2301      	movs	r3, #1
 8015eca:	e05e      	b.n	8015f8a <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015ecc:	687b      	ldr	r3, [r7, #4]
 8015ece:	2202      	movs	r2, #2
 8015ed0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8015ed4:	687b      	ldr	r3, [r7, #4]
 8015ed6:	681b      	ldr	r3, [r3, #0]
 8015ed8:	68da      	ldr	r2, [r3, #12]
 8015eda:	687b      	ldr	r3, [r7, #4]
 8015edc:	681b      	ldr	r3, [r3, #0]
 8015ede:	f042 0201 	orr.w	r2, r2, #1
 8015ee2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8015ee4:	687b      	ldr	r3, [r7, #4]
 8015ee6:	681b      	ldr	r3, [r3, #0]
 8015ee8:	4a2b      	ldr	r2, [pc, #172]	@ (8015f98 <HAL_TIM_Base_Start_IT+0xe4>)
 8015eea:	4293      	cmp	r3, r2
 8015eec:	d02c      	beq.n	8015f48 <HAL_TIM_Base_Start_IT+0x94>
 8015eee:	687b      	ldr	r3, [r7, #4]
 8015ef0:	681b      	ldr	r3, [r3, #0]
 8015ef2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8015ef6:	d027      	beq.n	8015f48 <HAL_TIM_Base_Start_IT+0x94>
 8015ef8:	687b      	ldr	r3, [r7, #4]
 8015efa:	681b      	ldr	r3, [r3, #0]
 8015efc:	4a27      	ldr	r2, [pc, #156]	@ (8015f9c <HAL_TIM_Base_Start_IT+0xe8>)
 8015efe:	4293      	cmp	r3, r2
 8015f00:	d022      	beq.n	8015f48 <HAL_TIM_Base_Start_IT+0x94>
 8015f02:	687b      	ldr	r3, [r7, #4]
 8015f04:	681b      	ldr	r3, [r3, #0]
 8015f06:	4a26      	ldr	r2, [pc, #152]	@ (8015fa0 <HAL_TIM_Base_Start_IT+0xec>)
 8015f08:	4293      	cmp	r3, r2
 8015f0a:	d01d      	beq.n	8015f48 <HAL_TIM_Base_Start_IT+0x94>
 8015f0c:	687b      	ldr	r3, [r7, #4]
 8015f0e:	681b      	ldr	r3, [r3, #0]
 8015f10:	4a24      	ldr	r2, [pc, #144]	@ (8015fa4 <HAL_TIM_Base_Start_IT+0xf0>)
 8015f12:	4293      	cmp	r3, r2
 8015f14:	d018      	beq.n	8015f48 <HAL_TIM_Base_Start_IT+0x94>
 8015f16:	687b      	ldr	r3, [r7, #4]
 8015f18:	681b      	ldr	r3, [r3, #0]
 8015f1a:	4a23      	ldr	r2, [pc, #140]	@ (8015fa8 <HAL_TIM_Base_Start_IT+0xf4>)
 8015f1c:	4293      	cmp	r3, r2
 8015f1e:	d013      	beq.n	8015f48 <HAL_TIM_Base_Start_IT+0x94>
 8015f20:	687b      	ldr	r3, [r7, #4]
 8015f22:	681b      	ldr	r3, [r3, #0]
 8015f24:	4a21      	ldr	r2, [pc, #132]	@ (8015fac <HAL_TIM_Base_Start_IT+0xf8>)
 8015f26:	4293      	cmp	r3, r2
 8015f28:	d00e      	beq.n	8015f48 <HAL_TIM_Base_Start_IT+0x94>
 8015f2a:	687b      	ldr	r3, [r7, #4]
 8015f2c:	681b      	ldr	r3, [r3, #0]
 8015f2e:	4a20      	ldr	r2, [pc, #128]	@ (8015fb0 <HAL_TIM_Base_Start_IT+0xfc>)
 8015f30:	4293      	cmp	r3, r2
 8015f32:	d009      	beq.n	8015f48 <HAL_TIM_Base_Start_IT+0x94>
 8015f34:	687b      	ldr	r3, [r7, #4]
 8015f36:	681b      	ldr	r3, [r3, #0]
 8015f38:	4a1e      	ldr	r2, [pc, #120]	@ (8015fb4 <HAL_TIM_Base_Start_IT+0x100>)
 8015f3a:	4293      	cmp	r3, r2
 8015f3c:	d004      	beq.n	8015f48 <HAL_TIM_Base_Start_IT+0x94>
 8015f3e:	687b      	ldr	r3, [r7, #4]
 8015f40:	681b      	ldr	r3, [r3, #0]
 8015f42:	4a1d      	ldr	r2, [pc, #116]	@ (8015fb8 <HAL_TIM_Base_Start_IT+0x104>)
 8015f44:	4293      	cmp	r3, r2
 8015f46:	d115      	bne.n	8015f74 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8015f48:	687b      	ldr	r3, [r7, #4]
 8015f4a:	681b      	ldr	r3, [r3, #0]
 8015f4c:	689a      	ldr	r2, [r3, #8]
 8015f4e:	4b1b      	ldr	r3, [pc, #108]	@ (8015fbc <HAL_TIM_Base_Start_IT+0x108>)
 8015f50:	4013      	ands	r3, r2
 8015f52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015f54:	68fb      	ldr	r3, [r7, #12]
 8015f56:	2b06      	cmp	r3, #6
 8015f58:	d015      	beq.n	8015f86 <HAL_TIM_Base_Start_IT+0xd2>
 8015f5a:	68fb      	ldr	r3, [r7, #12]
 8015f5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015f60:	d011      	beq.n	8015f86 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8015f62:	687b      	ldr	r3, [r7, #4]
 8015f64:	681b      	ldr	r3, [r3, #0]
 8015f66:	681a      	ldr	r2, [r3, #0]
 8015f68:	687b      	ldr	r3, [r7, #4]
 8015f6a:	681b      	ldr	r3, [r3, #0]
 8015f6c:	f042 0201 	orr.w	r2, r2, #1
 8015f70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015f72:	e008      	b.n	8015f86 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8015f74:	687b      	ldr	r3, [r7, #4]
 8015f76:	681b      	ldr	r3, [r3, #0]
 8015f78:	681a      	ldr	r2, [r3, #0]
 8015f7a:	687b      	ldr	r3, [r7, #4]
 8015f7c:	681b      	ldr	r3, [r3, #0]
 8015f7e:	f042 0201 	orr.w	r2, r2, #1
 8015f82:	601a      	str	r2, [r3, #0]
 8015f84:	e000      	b.n	8015f88 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015f86:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8015f88:	2300      	movs	r3, #0
}
 8015f8a:	4618      	mov	r0, r3
 8015f8c:	3714      	adds	r7, #20
 8015f8e:	46bd      	mov	sp, r7
 8015f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f94:	4770      	bx	lr
 8015f96:	bf00      	nop
 8015f98:	40010000 	.word	0x40010000
 8015f9c:	40000400 	.word	0x40000400
 8015fa0:	40000800 	.word	0x40000800
 8015fa4:	40000c00 	.word	0x40000c00
 8015fa8:	40010400 	.word	0x40010400
 8015fac:	40001800 	.word	0x40001800
 8015fb0:	40014000 	.word	0x40014000
 8015fb4:	4000e000 	.word	0x4000e000
 8015fb8:	4000e400 	.word	0x4000e400
 8015fbc:	00010007 	.word	0x00010007

08015fc0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8015fc0:	b580      	push	{r7, lr}
 8015fc2:	b082      	sub	sp, #8
 8015fc4:	af00      	add	r7, sp, #0
 8015fc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8015fc8:	687b      	ldr	r3, [r7, #4]
 8015fca:	2b00      	cmp	r3, #0
 8015fcc:	d101      	bne.n	8015fd2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8015fce:	2301      	movs	r3, #1
 8015fd0:	e049      	b.n	8016066 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8015fd2:	687b      	ldr	r3, [r7, #4]
 8015fd4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8015fd8:	b2db      	uxtb	r3, r3
 8015fda:	2b00      	cmp	r3, #0
 8015fdc:	d106      	bne.n	8015fec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8015fde:	687b      	ldr	r3, [r7, #4]
 8015fe0:	2200      	movs	r2, #0
 8015fe2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8015fe6:	6878      	ldr	r0, [r7, #4]
 8015fe8:	f7f2 fd0c 	bl	8008a04 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015fec:	687b      	ldr	r3, [r7, #4]
 8015fee:	2202      	movs	r2, #2
 8015ff0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8015ff4:	687b      	ldr	r3, [r7, #4]
 8015ff6:	681a      	ldr	r2, [r3, #0]
 8015ff8:	687b      	ldr	r3, [r7, #4]
 8015ffa:	3304      	adds	r3, #4
 8015ffc:	4619      	mov	r1, r3
 8015ffe:	4610      	mov	r0, r2
 8016000:	f000 fd80 	bl	8016b04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8016004:	687b      	ldr	r3, [r7, #4]
 8016006:	2201      	movs	r2, #1
 8016008:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801600c:	687b      	ldr	r3, [r7, #4]
 801600e:	2201      	movs	r2, #1
 8016010:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8016014:	687b      	ldr	r3, [r7, #4]
 8016016:	2201      	movs	r2, #1
 8016018:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801601c:	687b      	ldr	r3, [r7, #4]
 801601e:	2201      	movs	r2, #1
 8016020:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8016024:	687b      	ldr	r3, [r7, #4]
 8016026:	2201      	movs	r2, #1
 8016028:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 801602c:	687b      	ldr	r3, [r7, #4]
 801602e:	2201      	movs	r2, #1
 8016030:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8016034:	687b      	ldr	r3, [r7, #4]
 8016036:	2201      	movs	r2, #1
 8016038:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801603c:	687b      	ldr	r3, [r7, #4]
 801603e:	2201      	movs	r2, #1
 8016040:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8016044:	687b      	ldr	r3, [r7, #4]
 8016046:	2201      	movs	r2, #1
 8016048:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801604c:	687b      	ldr	r3, [r7, #4]
 801604e:	2201      	movs	r2, #1
 8016050:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8016054:	687b      	ldr	r3, [r7, #4]
 8016056:	2201      	movs	r2, #1
 8016058:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801605c:	687b      	ldr	r3, [r7, #4]
 801605e:	2201      	movs	r2, #1
 8016060:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8016064:	2300      	movs	r3, #0
}
 8016066:	4618      	mov	r0, r3
 8016068:	3708      	adds	r7, #8
 801606a:	46bd      	mov	sp, r7
 801606c:	bd80      	pop	{r7, pc}
	...

08016070 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8016070:	b580      	push	{r7, lr}
 8016072:	b084      	sub	sp, #16
 8016074:	af00      	add	r7, sp, #0
 8016076:	6078      	str	r0, [r7, #4]
 8016078:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801607a:	683b      	ldr	r3, [r7, #0]
 801607c:	2b00      	cmp	r3, #0
 801607e:	d109      	bne.n	8016094 <HAL_TIM_PWM_Start+0x24>
 8016080:	687b      	ldr	r3, [r7, #4]
 8016082:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8016086:	b2db      	uxtb	r3, r3
 8016088:	2b01      	cmp	r3, #1
 801608a:	bf14      	ite	ne
 801608c:	2301      	movne	r3, #1
 801608e:	2300      	moveq	r3, #0
 8016090:	b2db      	uxtb	r3, r3
 8016092:	e03c      	b.n	801610e <HAL_TIM_PWM_Start+0x9e>
 8016094:	683b      	ldr	r3, [r7, #0]
 8016096:	2b04      	cmp	r3, #4
 8016098:	d109      	bne.n	80160ae <HAL_TIM_PWM_Start+0x3e>
 801609a:	687b      	ldr	r3, [r7, #4]
 801609c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80160a0:	b2db      	uxtb	r3, r3
 80160a2:	2b01      	cmp	r3, #1
 80160a4:	bf14      	ite	ne
 80160a6:	2301      	movne	r3, #1
 80160a8:	2300      	moveq	r3, #0
 80160aa:	b2db      	uxtb	r3, r3
 80160ac:	e02f      	b.n	801610e <HAL_TIM_PWM_Start+0x9e>
 80160ae:	683b      	ldr	r3, [r7, #0]
 80160b0:	2b08      	cmp	r3, #8
 80160b2:	d109      	bne.n	80160c8 <HAL_TIM_PWM_Start+0x58>
 80160b4:	687b      	ldr	r3, [r7, #4]
 80160b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80160ba:	b2db      	uxtb	r3, r3
 80160bc:	2b01      	cmp	r3, #1
 80160be:	bf14      	ite	ne
 80160c0:	2301      	movne	r3, #1
 80160c2:	2300      	moveq	r3, #0
 80160c4:	b2db      	uxtb	r3, r3
 80160c6:	e022      	b.n	801610e <HAL_TIM_PWM_Start+0x9e>
 80160c8:	683b      	ldr	r3, [r7, #0]
 80160ca:	2b0c      	cmp	r3, #12
 80160cc:	d109      	bne.n	80160e2 <HAL_TIM_PWM_Start+0x72>
 80160ce:	687b      	ldr	r3, [r7, #4]
 80160d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80160d4:	b2db      	uxtb	r3, r3
 80160d6:	2b01      	cmp	r3, #1
 80160d8:	bf14      	ite	ne
 80160da:	2301      	movne	r3, #1
 80160dc:	2300      	moveq	r3, #0
 80160de:	b2db      	uxtb	r3, r3
 80160e0:	e015      	b.n	801610e <HAL_TIM_PWM_Start+0x9e>
 80160e2:	683b      	ldr	r3, [r7, #0]
 80160e4:	2b10      	cmp	r3, #16
 80160e6:	d109      	bne.n	80160fc <HAL_TIM_PWM_Start+0x8c>
 80160e8:	687b      	ldr	r3, [r7, #4]
 80160ea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80160ee:	b2db      	uxtb	r3, r3
 80160f0:	2b01      	cmp	r3, #1
 80160f2:	bf14      	ite	ne
 80160f4:	2301      	movne	r3, #1
 80160f6:	2300      	moveq	r3, #0
 80160f8:	b2db      	uxtb	r3, r3
 80160fa:	e008      	b.n	801610e <HAL_TIM_PWM_Start+0x9e>
 80160fc:	687b      	ldr	r3, [r7, #4]
 80160fe:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8016102:	b2db      	uxtb	r3, r3
 8016104:	2b01      	cmp	r3, #1
 8016106:	bf14      	ite	ne
 8016108:	2301      	movne	r3, #1
 801610a:	2300      	moveq	r3, #0
 801610c:	b2db      	uxtb	r3, r3
 801610e:	2b00      	cmp	r3, #0
 8016110:	d001      	beq.n	8016116 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8016112:	2301      	movs	r3, #1
 8016114:	e0ab      	b.n	801626e <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8016116:	683b      	ldr	r3, [r7, #0]
 8016118:	2b00      	cmp	r3, #0
 801611a:	d104      	bne.n	8016126 <HAL_TIM_PWM_Start+0xb6>
 801611c:	687b      	ldr	r3, [r7, #4]
 801611e:	2202      	movs	r2, #2
 8016120:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8016124:	e023      	b.n	801616e <HAL_TIM_PWM_Start+0xfe>
 8016126:	683b      	ldr	r3, [r7, #0]
 8016128:	2b04      	cmp	r3, #4
 801612a:	d104      	bne.n	8016136 <HAL_TIM_PWM_Start+0xc6>
 801612c:	687b      	ldr	r3, [r7, #4]
 801612e:	2202      	movs	r2, #2
 8016130:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8016134:	e01b      	b.n	801616e <HAL_TIM_PWM_Start+0xfe>
 8016136:	683b      	ldr	r3, [r7, #0]
 8016138:	2b08      	cmp	r3, #8
 801613a:	d104      	bne.n	8016146 <HAL_TIM_PWM_Start+0xd6>
 801613c:	687b      	ldr	r3, [r7, #4]
 801613e:	2202      	movs	r2, #2
 8016140:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8016144:	e013      	b.n	801616e <HAL_TIM_PWM_Start+0xfe>
 8016146:	683b      	ldr	r3, [r7, #0]
 8016148:	2b0c      	cmp	r3, #12
 801614a:	d104      	bne.n	8016156 <HAL_TIM_PWM_Start+0xe6>
 801614c:	687b      	ldr	r3, [r7, #4]
 801614e:	2202      	movs	r2, #2
 8016150:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8016154:	e00b      	b.n	801616e <HAL_TIM_PWM_Start+0xfe>
 8016156:	683b      	ldr	r3, [r7, #0]
 8016158:	2b10      	cmp	r3, #16
 801615a:	d104      	bne.n	8016166 <HAL_TIM_PWM_Start+0xf6>
 801615c:	687b      	ldr	r3, [r7, #4]
 801615e:	2202      	movs	r2, #2
 8016160:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8016164:	e003      	b.n	801616e <HAL_TIM_PWM_Start+0xfe>
 8016166:	687b      	ldr	r3, [r7, #4]
 8016168:	2202      	movs	r2, #2
 801616a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801616e:	687b      	ldr	r3, [r7, #4]
 8016170:	681b      	ldr	r3, [r3, #0]
 8016172:	2201      	movs	r2, #1
 8016174:	6839      	ldr	r1, [r7, #0]
 8016176:	4618      	mov	r0, r3
 8016178:	f001 fa20 	bl	80175bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801617c:	687b      	ldr	r3, [r7, #4]
 801617e:	681b      	ldr	r3, [r3, #0]
 8016180:	4a3d      	ldr	r2, [pc, #244]	@ (8016278 <HAL_TIM_PWM_Start+0x208>)
 8016182:	4293      	cmp	r3, r2
 8016184:	d013      	beq.n	80161ae <HAL_TIM_PWM_Start+0x13e>
 8016186:	687b      	ldr	r3, [r7, #4]
 8016188:	681b      	ldr	r3, [r3, #0]
 801618a:	4a3c      	ldr	r2, [pc, #240]	@ (801627c <HAL_TIM_PWM_Start+0x20c>)
 801618c:	4293      	cmp	r3, r2
 801618e:	d00e      	beq.n	80161ae <HAL_TIM_PWM_Start+0x13e>
 8016190:	687b      	ldr	r3, [r7, #4]
 8016192:	681b      	ldr	r3, [r3, #0]
 8016194:	4a3a      	ldr	r2, [pc, #232]	@ (8016280 <HAL_TIM_PWM_Start+0x210>)
 8016196:	4293      	cmp	r3, r2
 8016198:	d009      	beq.n	80161ae <HAL_TIM_PWM_Start+0x13e>
 801619a:	687b      	ldr	r3, [r7, #4]
 801619c:	681b      	ldr	r3, [r3, #0]
 801619e:	4a39      	ldr	r2, [pc, #228]	@ (8016284 <HAL_TIM_PWM_Start+0x214>)
 80161a0:	4293      	cmp	r3, r2
 80161a2:	d004      	beq.n	80161ae <HAL_TIM_PWM_Start+0x13e>
 80161a4:	687b      	ldr	r3, [r7, #4]
 80161a6:	681b      	ldr	r3, [r3, #0]
 80161a8:	4a37      	ldr	r2, [pc, #220]	@ (8016288 <HAL_TIM_PWM_Start+0x218>)
 80161aa:	4293      	cmp	r3, r2
 80161ac:	d101      	bne.n	80161b2 <HAL_TIM_PWM_Start+0x142>
 80161ae:	2301      	movs	r3, #1
 80161b0:	e000      	b.n	80161b4 <HAL_TIM_PWM_Start+0x144>
 80161b2:	2300      	movs	r3, #0
 80161b4:	2b00      	cmp	r3, #0
 80161b6:	d007      	beq.n	80161c8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80161b8:	687b      	ldr	r3, [r7, #4]
 80161ba:	681b      	ldr	r3, [r3, #0]
 80161bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80161be:	687b      	ldr	r3, [r7, #4]
 80161c0:	681b      	ldr	r3, [r3, #0]
 80161c2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80161c6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80161c8:	687b      	ldr	r3, [r7, #4]
 80161ca:	681b      	ldr	r3, [r3, #0]
 80161cc:	4a2a      	ldr	r2, [pc, #168]	@ (8016278 <HAL_TIM_PWM_Start+0x208>)
 80161ce:	4293      	cmp	r3, r2
 80161d0:	d02c      	beq.n	801622c <HAL_TIM_PWM_Start+0x1bc>
 80161d2:	687b      	ldr	r3, [r7, #4]
 80161d4:	681b      	ldr	r3, [r3, #0]
 80161d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80161da:	d027      	beq.n	801622c <HAL_TIM_PWM_Start+0x1bc>
 80161dc:	687b      	ldr	r3, [r7, #4]
 80161de:	681b      	ldr	r3, [r3, #0]
 80161e0:	4a2a      	ldr	r2, [pc, #168]	@ (801628c <HAL_TIM_PWM_Start+0x21c>)
 80161e2:	4293      	cmp	r3, r2
 80161e4:	d022      	beq.n	801622c <HAL_TIM_PWM_Start+0x1bc>
 80161e6:	687b      	ldr	r3, [r7, #4]
 80161e8:	681b      	ldr	r3, [r3, #0]
 80161ea:	4a29      	ldr	r2, [pc, #164]	@ (8016290 <HAL_TIM_PWM_Start+0x220>)
 80161ec:	4293      	cmp	r3, r2
 80161ee:	d01d      	beq.n	801622c <HAL_TIM_PWM_Start+0x1bc>
 80161f0:	687b      	ldr	r3, [r7, #4]
 80161f2:	681b      	ldr	r3, [r3, #0]
 80161f4:	4a27      	ldr	r2, [pc, #156]	@ (8016294 <HAL_TIM_PWM_Start+0x224>)
 80161f6:	4293      	cmp	r3, r2
 80161f8:	d018      	beq.n	801622c <HAL_TIM_PWM_Start+0x1bc>
 80161fa:	687b      	ldr	r3, [r7, #4]
 80161fc:	681b      	ldr	r3, [r3, #0]
 80161fe:	4a1f      	ldr	r2, [pc, #124]	@ (801627c <HAL_TIM_PWM_Start+0x20c>)
 8016200:	4293      	cmp	r3, r2
 8016202:	d013      	beq.n	801622c <HAL_TIM_PWM_Start+0x1bc>
 8016204:	687b      	ldr	r3, [r7, #4]
 8016206:	681b      	ldr	r3, [r3, #0]
 8016208:	4a23      	ldr	r2, [pc, #140]	@ (8016298 <HAL_TIM_PWM_Start+0x228>)
 801620a:	4293      	cmp	r3, r2
 801620c:	d00e      	beq.n	801622c <HAL_TIM_PWM_Start+0x1bc>
 801620e:	687b      	ldr	r3, [r7, #4]
 8016210:	681b      	ldr	r3, [r3, #0]
 8016212:	4a1b      	ldr	r2, [pc, #108]	@ (8016280 <HAL_TIM_PWM_Start+0x210>)
 8016214:	4293      	cmp	r3, r2
 8016216:	d009      	beq.n	801622c <HAL_TIM_PWM_Start+0x1bc>
 8016218:	687b      	ldr	r3, [r7, #4]
 801621a:	681b      	ldr	r3, [r3, #0]
 801621c:	4a1f      	ldr	r2, [pc, #124]	@ (801629c <HAL_TIM_PWM_Start+0x22c>)
 801621e:	4293      	cmp	r3, r2
 8016220:	d004      	beq.n	801622c <HAL_TIM_PWM_Start+0x1bc>
 8016222:	687b      	ldr	r3, [r7, #4]
 8016224:	681b      	ldr	r3, [r3, #0]
 8016226:	4a1e      	ldr	r2, [pc, #120]	@ (80162a0 <HAL_TIM_PWM_Start+0x230>)
 8016228:	4293      	cmp	r3, r2
 801622a:	d115      	bne.n	8016258 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801622c:	687b      	ldr	r3, [r7, #4]
 801622e:	681b      	ldr	r3, [r3, #0]
 8016230:	689a      	ldr	r2, [r3, #8]
 8016232:	4b1c      	ldr	r3, [pc, #112]	@ (80162a4 <HAL_TIM_PWM_Start+0x234>)
 8016234:	4013      	ands	r3, r2
 8016236:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016238:	68fb      	ldr	r3, [r7, #12]
 801623a:	2b06      	cmp	r3, #6
 801623c:	d015      	beq.n	801626a <HAL_TIM_PWM_Start+0x1fa>
 801623e:	68fb      	ldr	r3, [r7, #12]
 8016240:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8016244:	d011      	beq.n	801626a <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 8016246:	687b      	ldr	r3, [r7, #4]
 8016248:	681b      	ldr	r3, [r3, #0]
 801624a:	681a      	ldr	r2, [r3, #0]
 801624c:	687b      	ldr	r3, [r7, #4]
 801624e:	681b      	ldr	r3, [r3, #0]
 8016250:	f042 0201 	orr.w	r2, r2, #1
 8016254:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016256:	e008      	b.n	801626a <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8016258:	687b      	ldr	r3, [r7, #4]
 801625a:	681b      	ldr	r3, [r3, #0]
 801625c:	681a      	ldr	r2, [r3, #0]
 801625e:	687b      	ldr	r3, [r7, #4]
 8016260:	681b      	ldr	r3, [r3, #0]
 8016262:	f042 0201 	orr.w	r2, r2, #1
 8016266:	601a      	str	r2, [r3, #0]
 8016268:	e000      	b.n	801626c <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801626a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801626c:	2300      	movs	r3, #0
}
 801626e:	4618      	mov	r0, r3
 8016270:	3710      	adds	r7, #16
 8016272:	46bd      	mov	sp, r7
 8016274:	bd80      	pop	{r7, pc}
 8016276:	bf00      	nop
 8016278:	40010000 	.word	0x40010000
 801627c:	40010400 	.word	0x40010400
 8016280:	40014000 	.word	0x40014000
 8016284:	40014400 	.word	0x40014400
 8016288:	40014800 	.word	0x40014800
 801628c:	40000400 	.word	0x40000400
 8016290:	40000800 	.word	0x40000800
 8016294:	40000c00 	.word	0x40000c00
 8016298:	40001800 	.word	0x40001800
 801629c:	4000e000 	.word	0x4000e000
 80162a0:	4000e400 	.word	0x4000e400
 80162a4:	00010007 	.word	0x00010007

080162a8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80162a8:	b580      	push	{r7, lr}
 80162aa:	b082      	sub	sp, #8
 80162ac:	af00      	add	r7, sp, #0
 80162ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80162b0:	687b      	ldr	r3, [r7, #4]
 80162b2:	2b00      	cmp	r3, #0
 80162b4:	d101      	bne.n	80162ba <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80162b6:	2301      	movs	r3, #1
 80162b8:	e049      	b.n	801634e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80162ba:	687b      	ldr	r3, [r7, #4]
 80162bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80162c0:	b2db      	uxtb	r3, r3
 80162c2:	2b00      	cmp	r3, #0
 80162c4:	d106      	bne.n	80162d4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80162c6:	687b      	ldr	r3, [r7, #4]
 80162c8:	2200      	movs	r2, #0
 80162ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80162ce:	6878      	ldr	r0, [r7, #4]
 80162d0:	f7f2 fbd2 	bl	8008a78 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80162d4:	687b      	ldr	r3, [r7, #4]
 80162d6:	2202      	movs	r2, #2
 80162d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80162dc:	687b      	ldr	r3, [r7, #4]
 80162de:	681a      	ldr	r2, [r3, #0]
 80162e0:	687b      	ldr	r3, [r7, #4]
 80162e2:	3304      	adds	r3, #4
 80162e4:	4619      	mov	r1, r3
 80162e6:	4610      	mov	r0, r2
 80162e8:	f000 fc0c 	bl	8016b04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80162ec:	687b      	ldr	r3, [r7, #4]
 80162ee:	2201      	movs	r2, #1
 80162f0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80162f4:	687b      	ldr	r3, [r7, #4]
 80162f6:	2201      	movs	r2, #1
 80162f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80162fc:	687b      	ldr	r3, [r7, #4]
 80162fe:	2201      	movs	r2, #1
 8016300:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8016304:	687b      	ldr	r3, [r7, #4]
 8016306:	2201      	movs	r2, #1
 8016308:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801630c:	687b      	ldr	r3, [r7, #4]
 801630e:	2201      	movs	r2, #1
 8016310:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8016314:	687b      	ldr	r3, [r7, #4]
 8016316:	2201      	movs	r2, #1
 8016318:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801631c:	687b      	ldr	r3, [r7, #4]
 801631e:	2201      	movs	r2, #1
 8016320:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8016324:	687b      	ldr	r3, [r7, #4]
 8016326:	2201      	movs	r2, #1
 8016328:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801632c:	687b      	ldr	r3, [r7, #4]
 801632e:	2201      	movs	r2, #1
 8016330:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8016334:	687b      	ldr	r3, [r7, #4]
 8016336:	2201      	movs	r2, #1
 8016338:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 801633c:	687b      	ldr	r3, [r7, #4]
 801633e:	2201      	movs	r2, #1
 8016340:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8016344:	687b      	ldr	r3, [r7, #4]
 8016346:	2201      	movs	r2, #1
 8016348:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 801634c:	2300      	movs	r3, #0
}
 801634e:	4618      	mov	r0, r3
 8016350:	3708      	adds	r7, #8
 8016352:	46bd      	mov	sp, r7
 8016354:	bd80      	pop	{r7, pc}

08016356 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8016356:	b580      	push	{r7, lr}
 8016358:	b084      	sub	sp, #16
 801635a:	af00      	add	r7, sp, #0
 801635c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 801635e:	687b      	ldr	r3, [r7, #4]
 8016360:	681b      	ldr	r3, [r3, #0]
 8016362:	68db      	ldr	r3, [r3, #12]
 8016364:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8016366:	687b      	ldr	r3, [r7, #4]
 8016368:	681b      	ldr	r3, [r3, #0]
 801636a:	691b      	ldr	r3, [r3, #16]
 801636c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 801636e:	68bb      	ldr	r3, [r7, #8]
 8016370:	f003 0302 	and.w	r3, r3, #2
 8016374:	2b00      	cmp	r3, #0
 8016376:	d020      	beq.n	80163ba <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8016378:	68fb      	ldr	r3, [r7, #12]
 801637a:	f003 0302 	and.w	r3, r3, #2
 801637e:	2b00      	cmp	r3, #0
 8016380:	d01b      	beq.n	80163ba <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8016382:	687b      	ldr	r3, [r7, #4]
 8016384:	681b      	ldr	r3, [r3, #0]
 8016386:	f06f 0202 	mvn.w	r2, #2
 801638a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801638c:	687b      	ldr	r3, [r7, #4]
 801638e:	2201      	movs	r2, #1
 8016390:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8016392:	687b      	ldr	r3, [r7, #4]
 8016394:	681b      	ldr	r3, [r3, #0]
 8016396:	699b      	ldr	r3, [r3, #24]
 8016398:	f003 0303 	and.w	r3, r3, #3
 801639c:	2b00      	cmp	r3, #0
 801639e:	d003      	beq.n	80163a8 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80163a0:	6878      	ldr	r0, [r7, #4]
 80163a2:	f000 fb91 	bl	8016ac8 <HAL_TIM_IC_CaptureCallback>
 80163a6:	e005      	b.n	80163b4 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80163a8:	6878      	ldr	r0, [r7, #4]
 80163aa:	f000 fb83 	bl	8016ab4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80163ae:	6878      	ldr	r0, [r7, #4]
 80163b0:	f000 fb94 	bl	8016adc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80163b4:	687b      	ldr	r3, [r7, #4]
 80163b6:	2200      	movs	r2, #0
 80163b8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80163ba:	68bb      	ldr	r3, [r7, #8]
 80163bc:	f003 0304 	and.w	r3, r3, #4
 80163c0:	2b00      	cmp	r3, #0
 80163c2:	d020      	beq.n	8016406 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80163c4:	68fb      	ldr	r3, [r7, #12]
 80163c6:	f003 0304 	and.w	r3, r3, #4
 80163ca:	2b00      	cmp	r3, #0
 80163cc:	d01b      	beq.n	8016406 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80163ce:	687b      	ldr	r3, [r7, #4]
 80163d0:	681b      	ldr	r3, [r3, #0]
 80163d2:	f06f 0204 	mvn.w	r2, #4
 80163d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80163d8:	687b      	ldr	r3, [r7, #4]
 80163da:	2202      	movs	r2, #2
 80163dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80163de:	687b      	ldr	r3, [r7, #4]
 80163e0:	681b      	ldr	r3, [r3, #0]
 80163e2:	699b      	ldr	r3, [r3, #24]
 80163e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80163e8:	2b00      	cmp	r3, #0
 80163ea:	d003      	beq.n	80163f4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80163ec:	6878      	ldr	r0, [r7, #4]
 80163ee:	f000 fb6b 	bl	8016ac8 <HAL_TIM_IC_CaptureCallback>
 80163f2:	e005      	b.n	8016400 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80163f4:	6878      	ldr	r0, [r7, #4]
 80163f6:	f000 fb5d 	bl	8016ab4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80163fa:	6878      	ldr	r0, [r7, #4]
 80163fc:	f000 fb6e 	bl	8016adc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8016400:	687b      	ldr	r3, [r7, #4]
 8016402:	2200      	movs	r2, #0
 8016404:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8016406:	68bb      	ldr	r3, [r7, #8]
 8016408:	f003 0308 	and.w	r3, r3, #8
 801640c:	2b00      	cmp	r3, #0
 801640e:	d020      	beq.n	8016452 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8016410:	68fb      	ldr	r3, [r7, #12]
 8016412:	f003 0308 	and.w	r3, r3, #8
 8016416:	2b00      	cmp	r3, #0
 8016418:	d01b      	beq.n	8016452 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 801641a:	687b      	ldr	r3, [r7, #4]
 801641c:	681b      	ldr	r3, [r3, #0]
 801641e:	f06f 0208 	mvn.w	r2, #8
 8016422:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8016424:	687b      	ldr	r3, [r7, #4]
 8016426:	2204      	movs	r2, #4
 8016428:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801642a:	687b      	ldr	r3, [r7, #4]
 801642c:	681b      	ldr	r3, [r3, #0]
 801642e:	69db      	ldr	r3, [r3, #28]
 8016430:	f003 0303 	and.w	r3, r3, #3
 8016434:	2b00      	cmp	r3, #0
 8016436:	d003      	beq.n	8016440 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8016438:	6878      	ldr	r0, [r7, #4]
 801643a:	f000 fb45 	bl	8016ac8 <HAL_TIM_IC_CaptureCallback>
 801643e:	e005      	b.n	801644c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8016440:	6878      	ldr	r0, [r7, #4]
 8016442:	f000 fb37 	bl	8016ab4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8016446:	6878      	ldr	r0, [r7, #4]
 8016448:	f000 fb48 	bl	8016adc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801644c:	687b      	ldr	r3, [r7, #4]
 801644e:	2200      	movs	r2, #0
 8016450:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8016452:	68bb      	ldr	r3, [r7, #8]
 8016454:	f003 0310 	and.w	r3, r3, #16
 8016458:	2b00      	cmp	r3, #0
 801645a:	d020      	beq.n	801649e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 801645c:	68fb      	ldr	r3, [r7, #12]
 801645e:	f003 0310 	and.w	r3, r3, #16
 8016462:	2b00      	cmp	r3, #0
 8016464:	d01b      	beq.n	801649e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8016466:	687b      	ldr	r3, [r7, #4]
 8016468:	681b      	ldr	r3, [r3, #0]
 801646a:	f06f 0210 	mvn.w	r2, #16
 801646e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8016470:	687b      	ldr	r3, [r7, #4]
 8016472:	2208      	movs	r2, #8
 8016474:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8016476:	687b      	ldr	r3, [r7, #4]
 8016478:	681b      	ldr	r3, [r3, #0]
 801647a:	69db      	ldr	r3, [r3, #28]
 801647c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8016480:	2b00      	cmp	r3, #0
 8016482:	d003      	beq.n	801648c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8016484:	6878      	ldr	r0, [r7, #4]
 8016486:	f000 fb1f 	bl	8016ac8 <HAL_TIM_IC_CaptureCallback>
 801648a:	e005      	b.n	8016498 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801648c:	6878      	ldr	r0, [r7, #4]
 801648e:	f000 fb11 	bl	8016ab4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8016492:	6878      	ldr	r0, [r7, #4]
 8016494:	f000 fb22 	bl	8016adc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8016498:	687b      	ldr	r3, [r7, #4]
 801649a:	2200      	movs	r2, #0
 801649c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 801649e:	68bb      	ldr	r3, [r7, #8]
 80164a0:	f003 0301 	and.w	r3, r3, #1
 80164a4:	2b00      	cmp	r3, #0
 80164a6:	d00c      	beq.n	80164c2 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80164a8:	68fb      	ldr	r3, [r7, #12]
 80164aa:	f003 0301 	and.w	r3, r3, #1
 80164ae:	2b00      	cmp	r3, #0
 80164b0:	d007      	beq.n	80164c2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80164b2:	687b      	ldr	r3, [r7, #4]
 80164b4:	681b      	ldr	r3, [r3, #0]
 80164b6:	f06f 0201 	mvn.w	r2, #1
 80164ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80164bc:	6878      	ldr	r0, [r7, #4]
 80164be:	f7ef fcdb 	bl	8005e78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80164c2:	68bb      	ldr	r3, [r7, #8]
 80164c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80164c8:	2b00      	cmp	r3, #0
 80164ca:	d104      	bne.n	80164d6 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80164cc:	68bb      	ldr	r3, [r7, #8]
 80164ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80164d2:	2b00      	cmp	r3, #0
 80164d4:	d00c      	beq.n	80164f0 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80164d6:	68fb      	ldr	r3, [r7, #12]
 80164d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80164dc:	2b00      	cmp	r3, #0
 80164de:	d007      	beq.n	80164f0 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80164e0:	687b      	ldr	r3, [r7, #4]
 80164e2:	681b      	ldr	r3, [r3, #0]
 80164e4:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80164e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80164ea:	6878      	ldr	r0, [r7, #4]
 80164ec:	f001 f9be 	bl	801786c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80164f0:	68bb      	ldr	r3, [r7, #8]
 80164f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80164f6:	2b00      	cmp	r3, #0
 80164f8:	d00c      	beq.n	8016514 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80164fa:	68fb      	ldr	r3, [r7, #12]
 80164fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8016500:	2b00      	cmp	r3, #0
 8016502:	d007      	beq.n	8016514 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8016504:	687b      	ldr	r3, [r7, #4]
 8016506:	681b      	ldr	r3, [r3, #0]
 8016508:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 801650c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 801650e:	6878      	ldr	r0, [r7, #4]
 8016510:	f001 f9b6 	bl	8017880 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8016514:	68bb      	ldr	r3, [r7, #8]
 8016516:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801651a:	2b00      	cmp	r3, #0
 801651c:	d00c      	beq.n	8016538 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 801651e:	68fb      	ldr	r3, [r7, #12]
 8016520:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016524:	2b00      	cmp	r3, #0
 8016526:	d007      	beq.n	8016538 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8016528:	687b      	ldr	r3, [r7, #4]
 801652a:	681b      	ldr	r3, [r3, #0]
 801652c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8016530:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8016532:	6878      	ldr	r0, [r7, #4]
 8016534:	f000 fadc 	bl	8016af0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8016538:	68bb      	ldr	r3, [r7, #8]
 801653a:	f003 0320 	and.w	r3, r3, #32
 801653e:	2b00      	cmp	r3, #0
 8016540:	d00c      	beq.n	801655c <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8016542:	68fb      	ldr	r3, [r7, #12]
 8016544:	f003 0320 	and.w	r3, r3, #32
 8016548:	2b00      	cmp	r3, #0
 801654a:	d007      	beq.n	801655c <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 801654c:	687b      	ldr	r3, [r7, #4]
 801654e:	681b      	ldr	r3, [r3, #0]
 8016550:	f06f 0220 	mvn.w	r2, #32
 8016554:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8016556:	6878      	ldr	r0, [r7, #4]
 8016558:	f001 f97e 	bl	8017858 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801655c:	bf00      	nop
 801655e:	3710      	adds	r7, #16
 8016560:	46bd      	mov	sp, r7
 8016562:	bd80      	pop	{r7, pc}

08016564 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8016564:	b580      	push	{r7, lr}
 8016566:	b086      	sub	sp, #24
 8016568:	af00      	add	r7, sp, #0
 801656a:	60f8      	str	r0, [r7, #12]
 801656c:	60b9      	str	r1, [r7, #8]
 801656e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8016570:	2300      	movs	r3, #0
 8016572:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8016574:	68fb      	ldr	r3, [r7, #12]
 8016576:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801657a:	2b01      	cmp	r3, #1
 801657c:	d101      	bne.n	8016582 <HAL_TIM_IC_ConfigChannel+0x1e>
 801657e:	2302      	movs	r3, #2
 8016580:	e088      	b.n	8016694 <HAL_TIM_IC_ConfigChannel+0x130>
 8016582:	68fb      	ldr	r3, [r7, #12]
 8016584:	2201      	movs	r2, #1
 8016586:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 801658a:	687b      	ldr	r3, [r7, #4]
 801658c:	2b00      	cmp	r3, #0
 801658e:	d11b      	bne.n	80165c8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8016590:	68fb      	ldr	r3, [r7, #12]
 8016592:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8016594:	68bb      	ldr	r3, [r7, #8]
 8016596:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8016598:	68bb      	ldr	r3, [r7, #8]
 801659a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 801659c:	68bb      	ldr	r3, [r7, #8]
 801659e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80165a0:	f000 fe38 	bl	8017214 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80165a4:	68fb      	ldr	r3, [r7, #12]
 80165a6:	681b      	ldr	r3, [r3, #0]
 80165a8:	699a      	ldr	r2, [r3, #24]
 80165aa:	68fb      	ldr	r3, [r7, #12]
 80165ac:	681b      	ldr	r3, [r3, #0]
 80165ae:	f022 020c 	bic.w	r2, r2, #12
 80165b2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80165b4:	68fb      	ldr	r3, [r7, #12]
 80165b6:	681b      	ldr	r3, [r3, #0]
 80165b8:	6999      	ldr	r1, [r3, #24]
 80165ba:	68bb      	ldr	r3, [r7, #8]
 80165bc:	689a      	ldr	r2, [r3, #8]
 80165be:	68fb      	ldr	r3, [r7, #12]
 80165c0:	681b      	ldr	r3, [r3, #0]
 80165c2:	430a      	orrs	r2, r1
 80165c4:	619a      	str	r2, [r3, #24]
 80165c6:	e060      	b.n	801668a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80165c8:	687b      	ldr	r3, [r7, #4]
 80165ca:	2b04      	cmp	r3, #4
 80165cc:	d11c      	bne.n	8016608 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80165ce:	68fb      	ldr	r3, [r7, #12]
 80165d0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80165d2:	68bb      	ldr	r3, [r7, #8]
 80165d4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80165d6:	68bb      	ldr	r3, [r7, #8]
 80165d8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80165da:	68bb      	ldr	r3, [r7, #8]
 80165dc:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80165de:	f000 fec8 	bl	8017372 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80165e2:	68fb      	ldr	r3, [r7, #12]
 80165e4:	681b      	ldr	r3, [r3, #0]
 80165e6:	699a      	ldr	r2, [r3, #24]
 80165e8:	68fb      	ldr	r3, [r7, #12]
 80165ea:	681b      	ldr	r3, [r3, #0]
 80165ec:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80165f0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80165f2:	68fb      	ldr	r3, [r7, #12]
 80165f4:	681b      	ldr	r3, [r3, #0]
 80165f6:	6999      	ldr	r1, [r3, #24]
 80165f8:	68bb      	ldr	r3, [r7, #8]
 80165fa:	689b      	ldr	r3, [r3, #8]
 80165fc:	021a      	lsls	r2, r3, #8
 80165fe:	68fb      	ldr	r3, [r7, #12]
 8016600:	681b      	ldr	r3, [r3, #0]
 8016602:	430a      	orrs	r2, r1
 8016604:	619a      	str	r2, [r3, #24]
 8016606:	e040      	b.n	801668a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8016608:	687b      	ldr	r3, [r7, #4]
 801660a:	2b08      	cmp	r3, #8
 801660c:	d11b      	bne.n	8016646 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 801660e:	68fb      	ldr	r3, [r7, #12]
 8016610:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8016612:	68bb      	ldr	r3, [r7, #8]
 8016614:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8016616:	68bb      	ldr	r3, [r7, #8]
 8016618:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 801661a:	68bb      	ldr	r3, [r7, #8]
 801661c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 801661e:	f000 ff15 	bl	801744c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8016622:	68fb      	ldr	r3, [r7, #12]
 8016624:	681b      	ldr	r3, [r3, #0]
 8016626:	69da      	ldr	r2, [r3, #28]
 8016628:	68fb      	ldr	r3, [r7, #12]
 801662a:	681b      	ldr	r3, [r3, #0]
 801662c:	f022 020c 	bic.w	r2, r2, #12
 8016630:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8016632:	68fb      	ldr	r3, [r7, #12]
 8016634:	681b      	ldr	r3, [r3, #0]
 8016636:	69d9      	ldr	r1, [r3, #28]
 8016638:	68bb      	ldr	r3, [r7, #8]
 801663a:	689a      	ldr	r2, [r3, #8]
 801663c:	68fb      	ldr	r3, [r7, #12]
 801663e:	681b      	ldr	r3, [r3, #0]
 8016640:	430a      	orrs	r2, r1
 8016642:	61da      	str	r2, [r3, #28]
 8016644:	e021      	b.n	801668a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8016646:	687b      	ldr	r3, [r7, #4]
 8016648:	2b0c      	cmp	r3, #12
 801664a:	d11c      	bne.n	8016686 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 801664c:	68fb      	ldr	r3, [r7, #12]
 801664e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8016650:	68bb      	ldr	r3, [r7, #8]
 8016652:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8016654:	68bb      	ldr	r3, [r7, #8]
 8016656:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8016658:	68bb      	ldr	r3, [r7, #8]
 801665a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 801665c:	f000 ff32 	bl	80174c4 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8016660:	68fb      	ldr	r3, [r7, #12]
 8016662:	681b      	ldr	r3, [r3, #0]
 8016664:	69da      	ldr	r2, [r3, #28]
 8016666:	68fb      	ldr	r3, [r7, #12]
 8016668:	681b      	ldr	r3, [r3, #0]
 801666a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 801666e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8016670:	68fb      	ldr	r3, [r7, #12]
 8016672:	681b      	ldr	r3, [r3, #0]
 8016674:	69d9      	ldr	r1, [r3, #28]
 8016676:	68bb      	ldr	r3, [r7, #8]
 8016678:	689b      	ldr	r3, [r3, #8]
 801667a:	021a      	lsls	r2, r3, #8
 801667c:	68fb      	ldr	r3, [r7, #12]
 801667e:	681b      	ldr	r3, [r3, #0]
 8016680:	430a      	orrs	r2, r1
 8016682:	61da      	str	r2, [r3, #28]
 8016684:	e001      	b.n	801668a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8016686:	2301      	movs	r3, #1
 8016688:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 801668a:	68fb      	ldr	r3, [r7, #12]
 801668c:	2200      	movs	r2, #0
 801668e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8016692:	7dfb      	ldrb	r3, [r7, #23]
}
 8016694:	4618      	mov	r0, r3
 8016696:	3718      	adds	r7, #24
 8016698:	46bd      	mov	sp, r7
 801669a:	bd80      	pop	{r7, pc}

0801669c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801669c:	b580      	push	{r7, lr}
 801669e:	b086      	sub	sp, #24
 80166a0:	af00      	add	r7, sp, #0
 80166a2:	60f8      	str	r0, [r7, #12]
 80166a4:	60b9      	str	r1, [r7, #8]
 80166a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80166a8:	2300      	movs	r3, #0
 80166aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80166ac:	68fb      	ldr	r3, [r7, #12]
 80166ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80166b2:	2b01      	cmp	r3, #1
 80166b4:	d101      	bne.n	80166ba <HAL_TIM_PWM_ConfigChannel+0x1e>
 80166b6:	2302      	movs	r3, #2
 80166b8:	e0ff      	b.n	80168ba <HAL_TIM_PWM_ConfigChannel+0x21e>
 80166ba:	68fb      	ldr	r3, [r7, #12]
 80166bc:	2201      	movs	r2, #1
 80166be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80166c2:	687b      	ldr	r3, [r7, #4]
 80166c4:	2b14      	cmp	r3, #20
 80166c6:	f200 80f0 	bhi.w	80168aa <HAL_TIM_PWM_ConfigChannel+0x20e>
 80166ca:	a201      	add	r2, pc, #4	@ (adr r2, 80166d0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80166cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80166d0:	08016725 	.word	0x08016725
 80166d4:	080168ab 	.word	0x080168ab
 80166d8:	080168ab 	.word	0x080168ab
 80166dc:	080168ab 	.word	0x080168ab
 80166e0:	08016765 	.word	0x08016765
 80166e4:	080168ab 	.word	0x080168ab
 80166e8:	080168ab 	.word	0x080168ab
 80166ec:	080168ab 	.word	0x080168ab
 80166f0:	080167a7 	.word	0x080167a7
 80166f4:	080168ab 	.word	0x080168ab
 80166f8:	080168ab 	.word	0x080168ab
 80166fc:	080168ab 	.word	0x080168ab
 8016700:	080167e7 	.word	0x080167e7
 8016704:	080168ab 	.word	0x080168ab
 8016708:	080168ab 	.word	0x080168ab
 801670c:	080168ab 	.word	0x080168ab
 8016710:	08016829 	.word	0x08016829
 8016714:	080168ab 	.word	0x080168ab
 8016718:	080168ab 	.word	0x080168ab
 801671c:	080168ab 	.word	0x080168ab
 8016720:	08016869 	.word	0x08016869
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8016724:	68fb      	ldr	r3, [r7, #12]
 8016726:	681b      	ldr	r3, [r3, #0]
 8016728:	68b9      	ldr	r1, [r7, #8]
 801672a:	4618      	mov	r0, r3
 801672c:	f000 fa9c 	bl	8016c68 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8016730:	68fb      	ldr	r3, [r7, #12]
 8016732:	681b      	ldr	r3, [r3, #0]
 8016734:	699a      	ldr	r2, [r3, #24]
 8016736:	68fb      	ldr	r3, [r7, #12]
 8016738:	681b      	ldr	r3, [r3, #0]
 801673a:	f042 0208 	orr.w	r2, r2, #8
 801673e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8016740:	68fb      	ldr	r3, [r7, #12]
 8016742:	681b      	ldr	r3, [r3, #0]
 8016744:	699a      	ldr	r2, [r3, #24]
 8016746:	68fb      	ldr	r3, [r7, #12]
 8016748:	681b      	ldr	r3, [r3, #0]
 801674a:	f022 0204 	bic.w	r2, r2, #4
 801674e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8016750:	68fb      	ldr	r3, [r7, #12]
 8016752:	681b      	ldr	r3, [r3, #0]
 8016754:	6999      	ldr	r1, [r3, #24]
 8016756:	68bb      	ldr	r3, [r7, #8]
 8016758:	691a      	ldr	r2, [r3, #16]
 801675a:	68fb      	ldr	r3, [r7, #12]
 801675c:	681b      	ldr	r3, [r3, #0]
 801675e:	430a      	orrs	r2, r1
 8016760:	619a      	str	r2, [r3, #24]
      break;
 8016762:	e0a5      	b.n	80168b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8016764:	68fb      	ldr	r3, [r7, #12]
 8016766:	681b      	ldr	r3, [r3, #0]
 8016768:	68b9      	ldr	r1, [r7, #8]
 801676a:	4618      	mov	r0, r3
 801676c:	f000 fb0c 	bl	8016d88 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8016770:	68fb      	ldr	r3, [r7, #12]
 8016772:	681b      	ldr	r3, [r3, #0]
 8016774:	699a      	ldr	r2, [r3, #24]
 8016776:	68fb      	ldr	r3, [r7, #12]
 8016778:	681b      	ldr	r3, [r3, #0]
 801677a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801677e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8016780:	68fb      	ldr	r3, [r7, #12]
 8016782:	681b      	ldr	r3, [r3, #0]
 8016784:	699a      	ldr	r2, [r3, #24]
 8016786:	68fb      	ldr	r3, [r7, #12]
 8016788:	681b      	ldr	r3, [r3, #0]
 801678a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801678e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8016790:	68fb      	ldr	r3, [r7, #12]
 8016792:	681b      	ldr	r3, [r3, #0]
 8016794:	6999      	ldr	r1, [r3, #24]
 8016796:	68bb      	ldr	r3, [r7, #8]
 8016798:	691b      	ldr	r3, [r3, #16]
 801679a:	021a      	lsls	r2, r3, #8
 801679c:	68fb      	ldr	r3, [r7, #12]
 801679e:	681b      	ldr	r3, [r3, #0]
 80167a0:	430a      	orrs	r2, r1
 80167a2:	619a      	str	r2, [r3, #24]
      break;
 80167a4:	e084      	b.n	80168b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80167a6:	68fb      	ldr	r3, [r7, #12]
 80167a8:	681b      	ldr	r3, [r3, #0]
 80167aa:	68b9      	ldr	r1, [r7, #8]
 80167ac:	4618      	mov	r0, r3
 80167ae:	f000 fb75 	bl	8016e9c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80167b2:	68fb      	ldr	r3, [r7, #12]
 80167b4:	681b      	ldr	r3, [r3, #0]
 80167b6:	69da      	ldr	r2, [r3, #28]
 80167b8:	68fb      	ldr	r3, [r7, #12]
 80167ba:	681b      	ldr	r3, [r3, #0]
 80167bc:	f042 0208 	orr.w	r2, r2, #8
 80167c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80167c2:	68fb      	ldr	r3, [r7, #12]
 80167c4:	681b      	ldr	r3, [r3, #0]
 80167c6:	69da      	ldr	r2, [r3, #28]
 80167c8:	68fb      	ldr	r3, [r7, #12]
 80167ca:	681b      	ldr	r3, [r3, #0]
 80167cc:	f022 0204 	bic.w	r2, r2, #4
 80167d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80167d2:	68fb      	ldr	r3, [r7, #12]
 80167d4:	681b      	ldr	r3, [r3, #0]
 80167d6:	69d9      	ldr	r1, [r3, #28]
 80167d8:	68bb      	ldr	r3, [r7, #8]
 80167da:	691a      	ldr	r2, [r3, #16]
 80167dc:	68fb      	ldr	r3, [r7, #12]
 80167de:	681b      	ldr	r3, [r3, #0]
 80167e0:	430a      	orrs	r2, r1
 80167e2:	61da      	str	r2, [r3, #28]
      break;
 80167e4:	e064      	b.n	80168b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80167e6:	68fb      	ldr	r3, [r7, #12]
 80167e8:	681b      	ldr	r3, [r3, #0]
 80167ea:	68b9      	ldr	r1, [r7, #8]
 80167ec:	4618      	mov	r0, r3
 80167ee:	f000 fbdd 	bl	8016fac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80167f2:	68fb      	ldr	r3, [r7, #12]
 80167f4:	681b      	ldr	r3, [r3, #0]
 80167f6:	69da      	ldr	r2, [r3, #28]
 80167f8:	68fb      	ldr	r3, [r7, #12]
 80167fa:	681b      	ldr	r3, [r3, #0]
 80167fc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8016800:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8016802:	68fb      	ldr	r3, [r7, #12]
 8016804:	681b      	ldr	r3, [r3, #0]
 8016806:	69da      	ldr	r2, [r3, #28]
 8016808:	68fb      	ldr	r3, [r7, #12]
 801680a:	681b      	ldr	r3, [r3, #0]
 801680c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8016810:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8016812:	68fb      	ldr	r3, [r7, #12]
 8016814:	681b      	ldr	r3, [r3, #0]
 8016816:	69d9      	ldr	r1, [r3, #28]
 8016818:	68bb      	ldr	r3, [r7, #8]
 801681a:	691b      	ldr	r3, [r3, #16]
 801681c:	021a      	lsls	r2, r3, #8
 801681e:	68fb      	ldr	r3, [r7, #12]
 8016820:	681b      	ldr	r3, [r3, #0]
 8016822:	430a      	orrs	r2, r1
 8016824:	61da      	str	r2, [r3, #28]
      break;
 8016826:	e043      	b.n	80168b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8016828:	68fb      	ldr	r3, [r7, #12]
 801682a:	681b      	ldr	r3, [r3, #0]
 801682c:	68b9      	ldr	r1, [r7, #8]
 801682e:	4618      	mov	r0, r3
 8016830:	f000 fc26 	bl	8017080 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8016834:	68fb      	ldr	r3, [r7, #12]
 8016836:	681b      	ldr	r3, [r3, #0]
 8016838:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801683a:	68fb      	ldr	r3, [r7, #12]
 801683c:	681b      	ldr	r3, [r3, #0]
 801683e:	f042 0208 	orr.w	r2, r2, #8
 8016842:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8016844:	68fb      	ldr	r3, [r7, #12]
 8016846:	681b      	ldr	r3, [r3, #0]
 8016848:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801684a:	68fb      	ldr	r3, [r7, #12]
 801684c:	681b      	ldr	r3, [r3, #0]
 801684e:	f022 0204 	bic.w	r2, r2, #4
 8016852:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8016854:	68fb      	ldr	r3, [r7, #12]
 8016856:	681b      	ldr	r3, [r3, #0]
 8016858:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 801685a:	68bb      	ldr	r3, [r7, #8]
 801685c:	691a      	ldr	r2, [r3, #16]
 801685e:	68fb      	ldr	r3, [r7, #12]
 8016860:	681b      	ldr	r3, [r3, #0]
 8016862:	430a      	orrs	r2, r1
 8016864:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8016866:	e023      	b.n	80168b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8016868:	68fb      	ldr	r3, [r7, #12]
 801686a:	681b      	ldr	r3, [r3, #0]
 801686c:	68b9      	ldr	r1, [r7, #8]
 801686e:	4618      	mov	r0, r3
 8016870:	f000 fc6a 	bl	8017148 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8016874:	68fb      	ldr	r3, [r7, #12]
 8016876:	681b      	ldr	r3, [r3, #0]
 8016878:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801687a:	68fb      	ldr	r3, [r7, #12]
 801687c:	681b      	ldr	r3, [r3, #0]
 801687e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8016882:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8016884:	68fb      	ldr	r3, [r7, #12]
 8016886:	681b      	ldr	r3, [r3, #0]
 8016888:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801688a:	68fb      	ldr	r3, [r7, #12]
 801688c:	681b      	ldr	r3, [r3, #0]
 801688e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8016892:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8016894:	68fb      	ldr	r3, [r7, #12]
 8016896:	681b      	ldr	r3, [r3, #0]
 8016898:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 801689a:	68bb      	ldr	r3, [r7, #8]
 801689c:	691b      	ldr	r3, [r3, #16]
 801689e:	021a      	lsls	r2, r3, #8
 80168a0:	68fb      	ldr	r3, [r7, #12]
 80168a2:	681b      	ldr	r3, [r3, #0]
 80168a4:	430a      	orrs	r2, r1
 80168a6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80168a8:	e002      	b.n	80168b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80168aa:	2301      	movs	r3, #1
 80168ac:	75fb      	strb	r3, [r7, #23]
      break;
 80168ae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80168b0:	68fb      	ldr	r3, [r7, #12]
 80168b2:	2200      	movs	r2, #0
 80168b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80168b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80168ba:	4618      	mov	r0, r3
 80168bc:	3718      	adds	r7, #24
 80168be:	46bd      	mov	sp, r7
 80168c0:	bd80      	pop	{r7, pc}
 80168c2:	bf00      	nop

080168c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80168c4:	b580      	push	{r7, lr}
 80168c6:	b084      	sub	sp, #16
 80168c8:	af00      	add	r7, sp, #0
 80168ca:	6078      	str	r0, [r7, #4]
 80168cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80168ce:	2300      	movs	r3, #0
 80168d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80168d2:	687b      	ldr	r3, [r7, #4]
 80168d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80168d8:	2b01      	cmp	r3, #1
 80168da:	d101      	bne.n	80168e0 <HAL_TIM_ConfigClockSource+0x1c>
 80168dc:	2302      	movs	r3, #2
 80168de:	e0dc      	b.n	8016a9a <HAL_TIM_ConfigClockSource+0x1d6>
 80168e0:	687b      	ldr	r3, [r7, #4]
 80168e2:	2201      	movs	r2, #1
 80168e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80168e8:	687b      	ldr	r3, [r7, #4]
 80168ea:	2202      	movs	r2, #2
 80168ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80168f0:	687b      	ldr	r3, [r7, #4]
 80168f2:	681b      	ldr	r3, [r3, #0]
 80168f4:	689b      	ldr	r3, [r3, #8]
 80168f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80168f8:	68ba      	ldr	r2, [r7, #8]
 80168fa:	4b6a      	ldr	r3, [pc, #424]	@ (8016aa4 <HAL_TIM_ConfigClockSource+0x1e0>)
 80168fc:	4013      	ands	r3, r2
 80168fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8016900:	68bb      	ldr	r3, [r7, #8]
 8016902:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8016906:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8016908:	687b      	ldr	r3, [r7, #4]
 801690a:	681b      	ldr	r3, [r3, #0]
 801690c:	68ba      	ldr	r2, [r7, #8]
 801690e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8016910:	683b      	ldr	r3, [r7, #0]
 8016912:	681b      	ldr	r3, [r3, #0]
 8016914:	4a64      	ldr	r2, [pc, #400]	@ (8016aa8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8016916:	4293      	cmp	r3, r2
 8016918:	f000 80a9 	beq.w	8016a6e <HAL_TIM_ConfigClockSource+0x1aa>
 801691c:	4a62      	ldr	r2, [pc, #392]	@ (8016aa8 <HAL_TIM_ConfigClockSource+0x1e4>)
 801691e:	4293      	cmp	r3, r2
 8016920:	f200 80ae 	bhi.w	8016a80 <HAL_TIM_ConfigClockSource+0x1bc>
 8016924:	4a61      	ldr	r2, [pc, #388]	@ (8016aac <HAL_TIM_ConfigClockSource+0x1e8>)
 8016926:	4293      	cmp	r3, r2
 8016928:	f000 80a1 	beq.w	8016a6e <HAL_TIM_ConfigClockSource+0x1aa>
 801692c:	4a5f      	ldr	r2, [pc, #380]	@ (8016aac <HAL_TIM_ConfigClockSource+0x1e8>)
 801692e:	4293      	cmp	r3, r2
 8016930:	f200 80a6 	bhi.w	8016a80 <HAL_TIM_ConfigClockSource+0x1bc>
 8016934:	4a5e      	ldr	r2, [pc, #376]	@ (8016ab0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8016936:	4293      	cmp	r3, r2
 8016938:	f000 8099 	beq.w	8016a6e <HAL_TIM_ConfigClockSource+0x1aa>
 801693c:	4a5c      	ldr	r2, [pc, #368]	@ (8016ab0 <HAL_TIM_ConfigClockSource+0x1ec>)
 801693e:	4293      	cmp	r3, r2
 8016940:	f200 809e 	bhi.w	8016a80 <HAL_TIM_ConfigClockSource+0x1bc>
 8016944:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8016948:	f000 8091 	beq.w	8016a6e <HAL_TIM_ConfigClockSource+0x1aa>
 801694c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8016950:	f200 8096 	bhi.w	8016a80 <HAL_TIM_ConfigClockSource+0x1bc>
 8016954:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8016958:	f000 8089 	beq.w	8016a6e <HAL_TIM_ConfigClockSource+0x1aa>
 801695c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8016960:	f200 808e 	bhi.w	8016a80 <HAL_TIM_ConfigClockSource+0x1bc>
 8016964:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8016968:	d03e      	beq.n	80169e8 <HAL_TIM_ConfigClockSource+0x124>
 801696a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801696e:	f200 8087 	bhi.w	8016a80 <HAL_TIM_ConfigClockSource+0x1bc>
 8016972:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8016976:	f000 8086 	beq.w	8016a86 <HAL_TIM_ConfigClockSource+0x1c2>
 801697a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801697e:	d87f      	bhi.n	8016a80 <HAL_TIM_ConfigClockSource+0x1bc>
 8016980:	2b70      	cmp	r3, #112	@ 0x70
 8016982:	d01a      	beq.n	80169ba <HAL_TIM_ConfigClockSource+0xf6>
 8016984:	2b70      	cmp	r3, #112	@ 0x70
 8016986:	d87b      	bhi.n	8016a80 <HAL_TIM_ConfigClockSource+0x1bc>
 8016988:	2b60      	cmp	r3, #96	@ 0x60
 801698a:	d050      	beq.n	8016a2e <HAL_TIM_ConfigClockSource+0x16a>
 801698c:	2b60      	cmp	r3, #96	@ 0x60
 801698e:	d877      	bhi.n	8016a80 <HAL_TIM_ConfigClockSource+0x1bc>
 8016990:	2b50      	cmp	r3, #80	@ 0x50
 8016992:	d03c      	beq.n	8016a0e <HAL_TIM_ConfigClockSource+0x14a>
 8016994:	2b50      	cmp	r3, #80	@ 0x50
 8016996:	d873      	bhi.n	8016a80 <HAL_TIM_ConfigClockSource+0x1bc>
 8016998:	2b40      	cmp	r3, #64	@ 0x40
 801699a:	d058      	beq.n	8016a4e <HAL_TIM_ConfigClockSource+0x18a>
 801699c:	2b40      	cmp	r3, #64	@ 0x40
 801699e:	d86f      	bhi.n	8016a80 <HAL_TIM_ConfigClockSource+0x1bc>
 80169a0:	2b30      	cmp	r3, #48	@ 0x30
 80169a2:	d064      	beq.n	8016a6e <HAL_TIM_ConfigClockSource+0x1aa>
 80169a4:	2b30      	cmp	r3, #48	@ 0x30
 80169a6:	d86b      	bhi.n	8016a80 <HAL_TIM_ConfigClockSource+0x1bc>
 80169a8:	2b20      	cmp	r3, #32
 80169aa:	d060      	beq.n	8016a6e <HAL_TIM_ConfigClockSource+0x1aa>
 80169ac:	2b20      	cmp	r3, #32
 80169ae:	d867      	bhi.n	8016a80 <HAL_TIM_ConfigClockSource+0x1bc>
 80169b0:	2b00      	cmp	r3, #0
 80169b2:	d05c      	beq.n	8016a6e <HAL_TIM_ConfigClockSource+0x1aa>
 80169b4:	2b10      	cmp	r3, #16
 80169b6:	d05a      	beq.n	8016a6e <HAL_TIM_ConfigClockSource+0x1aa>
 80169b8:	e062      	b.n	8016a80 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80169ba:	687b      	ldr	r3, [r7, #4]
 80169bc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80169be:	683b      	ldr	r3, [r7, #0]
 80169c0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80169c2:	683b      	ldr	r3, [r7, #0]
 80169c4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80169c6:	683b      	ldr	r3, [r7, #0]
 80169c8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80169ca:	f000 fdd7 	bl	801757c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80169ce:	687b      	ldr	r3, [r7, #4]
 80169d0:	681b      	ldr	r3, [r3, #0]
 80169d2:	689b      	ldr	r3, [r3, #8]
 80169d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80169d6:	68bb      	ldr	r3, [r7, #8]
 80169d8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80169dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80169de:	687b      	ldr	r3, [r7, #4]
 80169e0:	681b      	ldr	r3, [r3, #0]
 80169e2:	68ba      	ldr	r2, [r7, #8]
 80169e4:	609a      	str	r2, [r3, #8]
      break;
 80169e6:	e04f      	b.n	8016a88 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80169e8:	687b      	ldr	r3, [r7, #4]
 80169ea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80169ec:	683b      	ldr	r3, [r7, #0]
 80169ee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80169f0:	683b      	ldr	r3, [r7, #0]
 80169f2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80169f4:	683b      	ldr	r3, [r7, #0]
 80169f6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80169f8:	f000 fdc0 	bl	801757c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80169fc:	687b      	ldr	r3, [r7, #4]
 80169fe:	681b      	ldr	r3, [r3, #0]
 8016a00:	689a      	ldr	r2, [r3, #8]
 8016a02:	687b      	ldr	r3, [r7, #4]
 8016a04:	681b      	ldr	r3, [r3, #0]
 8016a06:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8016a0a:	609a      	str	r2, [r3, #8]
      break;
 8016a0c:	e03c      	b.n	8016a88 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8016a0e:	687b      	ldr	r3, [r7, #4]
 8016a10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8016a12:	683b      	ldr	r3, [r7, #0]
 8016a14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8016a16:	683b      	ldr	r3, [r7, #0]
 8016a18:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8016a1a:	461a      	mov	r2, r3
 8016a1c:	f000 fc7a 	bl	8017314 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8016a20:	687b      	ldr	r3, [r7, #4]
 8016a22:	681b      	ldr	r3, [r3, #0]
 8016a24:	2150      	movs	r1, #80	@ 0x50
 8016a26:	4618      	mov	r0, r3
 8016a28:	f000 fd8a 	bl	8017540 <TIM_ITRx_SetConfig>
      break;
 8016a2c:	e02c      	b.n	8016a88 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8016a2e:	687b      	ldr	r3, [r7, #4]
 8016a30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8016a32:	683b      	ldr	r3, [r7, #0]
 8016a34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8016a36:	683b      	ldr	r3, [r7, #0]
 8016a38:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8016a3a:	461a      	mov	r2, r3
 8016a3c:	f000 fcd6 	bl	80173ec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8016a40:	687b      	ldr	r3, [r7, #4]
 8016a42:	681b      	ldr	r3, [r3, #0]
 8016a44:	2160      	movs	r1, #96	@ 0x60
 8016a46:	4618      	mov	r0, r3
 8016a48:	f000 fd7a 	bl	8017540 <TIM_ITRx_SetConfig>
      break;
 8016a4c:	e01c      	b.n	8016a88 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8016a4e:	687b      	ldr	r3, [r7, #4]
 8016a50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8016a52:	683b      	ldr	r3, [r7, #0]
 8016a54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8016a56:	683b      	ldr	r3, [r7, #0]
 8016a58:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8016a5a:	461a      	mov	r2, r3
 8016a5c:	f000 fc5a 	bl	8017314 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8016a60:	687b      	ldr	r3, [r7, #4]
 8016a62:	681b      	ldr	r3, [r3, #0]
 8016a64:	2140      	movs	r1, #64	@ 0x40
 8016a66:	4618      	mov	r0, r3
 8016a68:	f000 fd6a 	bl	8017540 <TIM_ITRx_SetConfig>
      break;
 8016a6c:	e00c      	b.n	8016a88 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8016a6e:	687b      	ldr	r3, [r7, #4]
 8016a70:	681a      	ldr	r2, [r3, #0]
 8016a72:	683b      	ldr	r3, [r7, #0]
 8016a74:	681b      	ldr	r3, [r3, #0]
 8016a76:	4619      	mov	r1, r3
 8016a78:	4610      	mov	r0, r2
 8016a7a:	f000 fd61 	bl	8017540 <TIM_ITRx_SetConfig>
      break;
 8016a7e:	e003      	b.n	8016a88 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8016a80:	2301      	movs	r3, #1
 8016a82:	73fb      	strb	r3, [r7, #15]
      break;
 8016a84:	e000      	b.n	8016a88 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8016a86:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8016a88:	687b      	ldr	r3, [r7, #4]
 8016a8a:	2201      	movs	r2, #1
 8016a8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8016a90:	687b      	ldr	r3, [r7, #4]
 8016a92:	2200      	movs	r2, #0
 8016a94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8016a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8016a9a:	4618      	mov	r0, r3
 8016a9c:	3710      	adds	r7, #16
 8016a9e:	46bd      	mov	sp, r7
 8016aa0:	bd80      	pop	{r7, pc}
 8016aa2:	bf00      	nop
 8016aa4:	ffceff88 	.word	0xffceff88
 8016aa8:	00100040 	.word	0x00100040
 8016aac:	00100030 	.word	0x00100030
 8016ab0:	00100020 	.word	0x00100020

08016ab4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8016ab4:	b480      	push	{r7}
 8016ab6:	b083      	sub	sp, #12
 8016ab8:	af00      	add	r7, sp, #0
 8016aba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8016abc:	bf00      	nop
 8016abe:	370c      	adds	r7, #12
 8016ac0:	46bd      	mov	sp, r7
 8016ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ac6:	4770      	bx	lr

08016ac8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8016ac8:	b480      	push	{r7}
 8016aca:	b083      	sub	sp, #12
 8016acc:	af00      	add	r7, sp, #0
 8016ace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8016ad0:	bf00      	nop
 8016ad2:	370c      	adds	r7, #12
 8016ad4:	46bd      	mov	sp, r7
 8016ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ada:	4770      	bx	lr

08016adc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8016adc:	b480      	push	{r7}
 8016ade:	b083      	sub	sp, #12
 8016ae0:	af00      	add	r7, sp, #0
 8016ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8016ae4:	bf00      	nop
 8016ae6:	370c      	adds	r7, #12
 8016ae8:	46bd      	mov	sp, r7
 8016aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016aee:	4770      	bx	lr

08016af0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8016af0:	b480      	push	{r7}
 8016af2:	b083      	sub	sp, #12
 8016af4:	af00      	add	r7, sp, #0
 8016af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8016af8:	bf00      	nop
 8016afa:	370c      	adds	r7, #12
 8016afc:	46bd      	mov	sp, r7
 8016afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b02:	4770      	bx	lr

08016b04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8016b04:	b480      	push	{r7}
 8016b06:	b085      	sub	sp, #20
 8016b08:	af00      	add	r7, sp, #0
 8016b0a:	6078      	str	r0, [r7, #4]
 8016b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8016b0e:	687b      	ldr	r3, [r7, #4]
 8016b10:	681b      	ldr	r3, [r3, #0]
 8016b12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8016b14:	687b      	ldr	r3, [r7, #4]
 8016b16:	4a4a      	ldr	r2, [pc, #296]	@ (8016c40 <TIM_Base_SetConfig+0x13c>)
 8016b18:	4293      	cmp	r3, r2
 8016b1a:	d013      	beq.n	8016b44 <TIM_Base_SetConfig+0x40>
 8016b1c:	687b      	ldr	r3, [r7, #4]
 8016b1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8016b22:	d00f      	beq.n	8016b44 <TIM_Base_SetConfig+0x40>
 8016b24:	687b      	ldr	r3, [r7, #4]
 8016b26:	4a47      	ldr	r2, [pc, #284]	@ (8016c44 <TIM_Base_SetConfig+0x140>)
 8016b28:	4293      	cmp	r3, r2
 8016b2a:	d00b      	beq.n	8016b44 <TIM_Base_SetConfig+0x40>
 8016b2c:	687b      	ldr	r3, [r7, #4]
 8016b2e:	4a46      	ldr	r2, [pc, #280]	@ (8016c48 <TIM_Base_SetConfig+0x144>)
 8016b30:	4293      	cmp	r3, r2
 8016b32:	d007      	beq.n	8016b44 <TIM_Base_SetConfig+0x40>
 8016b34:	687b      	ldr	r3, [r7, #4]
 8016b36:	4a45      	ldr	r2, [pc, #276]	@ (8016c4c <TIM_Base_SetConfig+0x148>)
 8016b38:	4293      	cmp	r3, r2
 8016b3a:	d003      	beq.n	8016b44 <TIM_Base_SetConfig+0x40>
 8016b3c:	687b      	ldr	r3, [r7, #4]
 8016b3e:	4a44      	ldr	r2, [pc, #272]	@ (8016c50 <TIM_Base_SetConfig+0x14c>)
 8016b40:	4293      	cmp	r3, r2
 8016b42:	d108      	bne.n	8016b56 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8016b44:	68fb      	ldr	r3, [r7, #12]
 8016b46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8016b4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8016b4c:	683b      	ldr	r3, [r7, #0]
 8016b4e:	685b      	ldr	r3, [r3, #4]
 8016b50:	68fa      	ldr	r2, [r7, #12]
 8016b52:	4313      	orrs	r3, r2
 8016b54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8016b56:	687b      	ldr	r3, [r7, #4]
 8016b58:	4a39      	ldr	r2, [pc, #228]	@ (8016c40 <TIM_Base_SetConfig+0x13c>)
 8016b5a:	4293      	cmp	r3, r2
 8016b5c:	d027      	beq.n	8016bae <TIM_Base_SetConfig+0xaa>
 8016b5e:	687b      	ldr	r3, [r7, #4]
 8016b60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8016b64:	d023      	beq.n	8016bae <TIM_Base_SetConfig+0xaa>
 8016b66:	687b      	ldr	r3, [r7, #4]
 8016b68:	4a36      	ldr	r2, [pc, #216]	@ (8016c44 <TIM_Base_SetConfig+0x140>)
 8016b6a:	4293      	cmp	r3, r2
 8016b6c:	d01f      	beq.n	8016bae <TIM_Base_SetConfig+0xaa>
 8016b6e:	687b      	ldr	r3, [r7, #4]
 8016b70:	4a35      	ldr	r2, [pc, #212]	@ (8016c48 <TIM_Base_SetConfig+0x144>)
 8016b72:	4293      	cmp	r3, r2
 8016b74:	d01b      	beq.n	8016bae <TIM_Base_SetConfig+0xaa>
 8016b76:	687b      	ldr	r3, [r7, #4]
 8016b78:	4a34      	ldr	r2, [pc, #208]	@ (8016c4c <TIM_Base_SetConfig+0x148>)
 8016b7a:	4293      	cmp	r3, r2
 8016b7c:	d017      	beq.n	8016bae <TIM_Base_SetConfig+0xaa>
 8016b7e:	687b      	ldr	r3, [r7, #4]
 8016b80:	4a33      	ldr	r2, [pc, #204]	@ (8016c50 <TIM_Base_SetConfig+0x14c>)
 8016b82:	4293      	cmp	r3, r2
 8016b84:	d013      	beq.n	8016bae <TIM_Base_SetConfig+0xaa>
 8016b86:	687b      	ldr	r3, [r7, #4]
 8016b88:	4a32      	ldr	r2, [pc, #200]	@ (8016c54 <TIM_Base_SetConfig+0x150>)
 8016b8a:	4293      	cmp	r3, r2
 8016b8c:	d00f      	beq.n	8016bae <TIM_Base_SetConfig+0xaa>
 8016b8e:	687b      	ldr	r3, [r7, #4]
 8016b90:	4a31      	ldr	r2, [pc, #196]	@ (8016c58 <TIM_Base_SetConfig+0x154>)
 8016b92:	4293      	cmp	r3, r2
 8016b94:	d00b      	beq.n	8016bae <TIM_Base_SetConfig+0xaa>
 8016b96:	687b      	ldr	r3, [r7, #4]
 8016b98:	4a30      	ldr	r2, [pc, #192]	@ (8016c5c <TIM_Base_SetConfig+0x158>)
 8016b9a:	4293      	cmp	r3, r2
 8016b9c:	d007      	beq.n	8016bae <TIM_Base_SetConfig+0xaa>
 8016b9e:	687b      	ldr	r3, [r7, #4]
 8016ba0:	4a2f      	ldr	r2, [pc, #188]	@ (8016c60 <TIM_Base_SetConfig+0x15c>)
 8016ba2:	4293      	cmp	r3, r2
 8016ba4:	d003      	beq.n	8016bae <TIM_Base_SetConfig+0xaa>
 8016ba6:	687b      	ldr	r3, [r7, #4]
 8016ba8:	4a2e      	ldr	r2, [pc, #184]	@ (8016c64 <TIM_Base_SetConfig+0x160>)
 8016baa:	4293      	cmp	r3, r2
 8016bac:	d108      	bne.n	8016bc0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8016bae:	68fb      	ldr	r3, [r7, #12]
 8016bb0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8016bb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8016bb6:	683b      	ldr	r3, [r7, #0]
 8016bb8:	68db      	ldr	r3, [r3, #12]
 8016bba:	68fa      	ldr	r2, [r7, #12]
 8016bbc:	4313      	orrs	r3, r2
 8016bbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8016bc0:	68fb      	ldr	r3, [r7, #12]
 8016bc2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8016bc6:	683b      	ldr	r3, [r7, #0]
 8016bc8:	695b      	ldr	r3, [r3, #20]
 8016bca:	4313      	orrs	r3, r2
 8016bcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8016bce:	687b      	ldr	r3, [r7, #4]
 8016bd0:	68fa      	ldr	r2, [r7, #12]
 8016bd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8016bd4:	683b      	ldr	r3, [r7, #0]
 8016bd6:	689a      	ldr	r2, [r3, #8]
 8016bd8:	687b      	ldr	r3, [r7, #4]
 8016bda:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8016bdc:	683b      	ldr	r3, [r7, #0]
 8016bde:	681a      	ldr	r2, [r3, #0]
 8016be0:	687b      	ldr	r3, [r7, #4]
 8016be2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8016be4:	687b      	ldr	r3, [r7, #4]
 8016be6:	4a16      	ldr	r2, [pc, #88]	@ (8016c40 <TIM_Base_SetConfig+0x13c>)
 8016be8:	4293      	cmp	r3, r2
 8016bea:	d00f      	beq.n	8016c0c <TIM_Base_SetConfig+0x108>
 8016bec:	687b      	ldr	r3, [r7, #4]
 8016bee:	4a18      	ldr	r2, [pc, #96]	@ (8016c50 <TIM_Base_SetConfig+0x14c>)
 8016bf0:	4293      	cmp	r3, r2
 8016bf2:	d00b      	beq.n	8016c0c <TIM_Base_SetConfig+0x108>
 8016bf4:	687b      	ldr	r3, [r7, #4]
 8016bf6:	4a17      	ldr	r2, [pc, #92]	@ (8016c54 <TIM_Base_SetConfig+0x150>)
 8016bf8:	4293      	cmp	r3, r2
 8016bfa:	d007      	beq.n	8016c0c <TIM_Base_SetConfig+0x108>
 8016bfc:	687b      	ldr	r3, [r7, #4]
 8016bfe:	4a16      	ldr	r2, [pc, #88]	@ (8016c58 <TIM_Base_SetConfig+0x154>)
 8016c00:	4293      	cmp	r3, r2
 8016c02:	d003      	beq.n	8016c0c <TIM_Base_SetConfig+0x108>
 8016c04:	687b      	ldr	r3, [r7, #4]
 8016c06:	4a15      	ldr	r2, [pc, #84]	@ (8016c5c <TIM_Base_SetConfig+0x158>)
 8016c08:	4293      	cmp	r3, r2
 8016c0a:	d103      	bne.n	8016c14 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8016c0c:	683b      	ldr	r3, [r7, #0]
 8016c0e:	691a      	ldr	r2, [r3, #16]
 8016c10:	687b      	ldr	r3, [r7, #4]
 8016c12:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8016c14:	687b      	ldr	r3, [r7, #4]
 8016c16:	2201      	movs	r2, #1
 8016c18:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8016c1a:	687b      	ldr	r3, [r7, #4]
 8016c1c:	691b      	ldr	r3, [r3, #16]
 8016c1e:	f003 0301 	and.w	r3, r3, #1
 8016c22:	2b01      	cmp	r3, #1
 8016c24:	d105      	bne.n	8016c32 <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8016c26:	687b      	ldr	r3, [r7, #4]
 8016c28:	691b      	ldr	r3, [r3, #16]
 8016c2a:	f023 0201 	bic.w	r2, r3, #1
 8016c2e:	687b      	ldr	r3, [r7, #4]
 8016c30:	611a      	str	r2, [r3, #16]
  }
}
 8016c32:	bf00      	nop
 8016c34:	3714      	adds	r7, #20
 8016c36:	46bd      	mov	sp, r7
 8016c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c3c:	4770      	bx	lr
 8016c3e:	bf00      	nop
 8016c40:	40010000 	.word	0x40010000
 8016c44:	40000400 	.word	0x40000400
 8016c48:	40000800 	.word	0x40000800
 8016c4c:	40000c00 	.word	0x40000c00
 8016c50:	40010400 	.word	0x40010400
 8016c54:	40014000 	.word	0x40014000
 8016c58:	40014400 	.word	0x40014400
 8016c5c:	40014800 	.word	0x40014800
 8016c60:	4000e000 	.word	0x4000e000
 8016c64:	4000e400 	.word	0x4000e400

08016c68 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8016c68:	b480      	push	{r7}
 8016c6a:	b087      	sub	sp, #28
 8016c6c:	af00      	add	r7, sp, #0
 8016c6e:	6078      	str	r0, [r7, #4]
 8016c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016c72:	687b      	ldr	r3, [r7, #4]
 8016c74:	6a1b      	ldr	r3, [r3, #32]
 8016c76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8016c78:	687b      	ldr	r3, [r7, #4]
 8016c7a:	6a1b      	ldr	r3, [r3, #32]
 8016c7c:	f023 0201 	bic.w	r2, r3, #1
 8016c80:	687b      	ldr	r3, [r7, #4]
 8016c82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016c84:	687b      	ldr	r3, [r7, #4]
 8016c86:	685b      	ldr	r3, [r3, #4]
 8016c88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8016c8a:	687b      	ldr	r3, [r7, #4]
 8016c8c:	699b      	ldr	r3, [r3, #24]
 8016c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8016c90:	68fa      	ldr	r2, [r7, #12]
 8016c92:	4b37      	ldr	r3, [pc, #220]	@ (8016d70 <TIM_OC1_SetConfig+0x108>)
 8016c94:	4013      	ands	r3, r2
 8016c96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8016c98:	68fb      	ldr	r3, [r7, #12]
 8016c9a:	f023 0303 	bic.w	r3, r3, #3
 8016c9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8016ca0:	683b      	ldr	r3, [r7, #0]
 8016ca2:	681b      	ldr	r3, [r3, #0]
 8016ca4:	68fa      	ldr	r2, [r7, #12]
 8016ca6:	4313      	orrs	r3, r2
 8016ca8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8016caa:	697b      	ldr	r3, [r7, #20]
 8016cac:	f023 0302 	bic.w	r3, r3, #2
 8016cb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8016cb2:	683b      	ldr	r3, [r7, #0]
 8016cb4:	689b      	ldr	r3, [r3, #8]
 8016cb6:	697a      	ldr	r2, [r7, #20]
 8016cb8:	4313      	orrs	r3, r2
 8016cba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8016cbc:	687b      	ldr	r3, [r7, #4]
 8016cbe:	4a2d      	ldr	r2, [pc, #180]	@ (8016d74 <TIM_OC1_SetConfig+0x10c>)
 8016cc0:	4293      	cmp	r3, r2
 8016cc2:	d00f      	beq.n	8016ce4 <TIM_OC1_SetConfig+0x7c>
 8016cc4:	687b      	ldr	r3, [r7, #4]
 8016cc6:	4a2c      	ldr	r2, [pc, #176]	@ (8016d78 <TIM_OC1_SetConfig+0x110>)
 8016cc8:	4293      	cmp	r3, r2
 8016cca:	d00b      	beq.n	8016ce4 <TIM_OC1_SetConfig+0x7c>
 8016ccc:	687b      	ldr	r3, [r7, #4]
 8016cce:	4a2b      	ldr	r2, [pc, #172]	@ (8016d7c <TIM_OC1_SetConfig+0x114>)
 8016cd0:	4293      	cmp	r3, r2
 8016cd2:	d007      	beq.n	8016ce4 <TIM_OC1_SetConfig+0x7c>
 8016cd4:	687b      	ldr	r3, [r7, #4]
 8016cd6:	4a2a      	ldr	r2, [pc, #168]	@ (8016d80 <TIM_OC1_SetConfig+0x118>)
 8016cd8:	4293      	cmp	r3, r2
 8016cda:	d003      	beq.n	8016ce4 <TIM_OC1_SetConfig+0x7c>
 8016cdc:	687b      	ldr	r3, [r7, #4]
 8016cde:	4a29      	ldr	r2, [pc, #164]	@ (8016d84 <TIM_OC1_SetConfig+0x11c>)
 8016ce0:	4293      	cmp	r3, r2
 8016ce2:	d10c      	bne.n	8016cfe <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8016ce4:	697b      	ldr	r3, [r7, #20]
 8016ce6:	f023 0308 	bic.w	r3, r3, #8
 8016cea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8016cec:	683b      	ldr	r3, [r7, #0]
 8016cee:	68db      	ldr	r3, [r3, #12]
 8016cf0:	697a      	ldr	r2, [r7, #20]
 8016cf2:	4313      	orrs	r3, r2
 8016cf4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8016cf6:	697b      	ldr	r3, [r7, #20]
 8016cf8:	f023 0304 	bic.w	r3, r3, #4
 8016cfc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8016cfe:	687b      	ldr	r3, [r7, #4]
 8016d00:	4a1c      	ldr	r2, [pc, #112]	@ (8016d74 <TIM_OC1_SetConfig+0x10c>)
 8016d02:	4293      	cmp	r3, r2
 8016d04:	d00f      	beq.n	8016d26 <TIM_OC1_SetConfig+0xbe>
 8016d06:	687b      	ldr	r3, [r7, #4]
 8016d08:	4a1b      	ldr	r2, [pc, #108]	@ (8016d78 <TIM_OC1_SetConfig+0x110>)
 8016d0a:	4293      	cmp	r3, r2
 8016d0c:	d00b      	beq.n	8016d26 <TIM_OC1_SetConfig+0xbe>
 8016d0e:	687b      	ldr	r3, [r7, #4]
 8016d10:	4a1a      	ldr	r2, [pc, #104]	@ (8016d7c <TIM_OC1_SetConfig+0x114>)
 8016d12:	4293      	cmp	r3, r2
 8016d14:	d007      	beq.n	8016d26 <TIM_OC1_SetConfig+0xbe>
 8016d16:	687b      	ldr	r3, [r7, #4]
 8016d18:	4a19      	ldr	r2, [pc, #100]	@ (8016d80 <TIM_OC1_SetConfig+0x118>)
 8016d1a:	4293      	cmp	r3, r2
 8016d1c:	d003      	beq.n	8016d26 <TIM_OC1_SetConfig+0xbe>
 8016d1e:	687b      	ldr	r3, [r7, #4]
 8016d20:	4a18      	ldr	r2, [pc, #96]	@ (8016d84 <TIM_OC1_SetConfig+0x11c>)
 8016d22:	4293      	cmp	r3, r2
 8016d24:	d111      	bne.n	8016d4a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8016d26:	693b      	ldr	r3, [r7, #16]
 8016d28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8016d2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8016d2e:	693b      	ldr	r3, [r7, #16]
 8016d30:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8016d34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8016d36:	683b      	ldr	r3, [r7, #0]
 8016d38:	695b      	ldr	r3, [r3, #20]
 8016d3a:	693a      	ldr	r2, [r7, #16]
 8016d3c:	4313      	orrs	r3, r2
 8016d3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8016d40:	683b      	ldr	r3, [r7, #0]
 8016d42:	699b      	ldr	r3, [r3, #24]
 8016d44:	693a      	ldr	r2, [r7, #16]
 8016d46:	4313      	orrs	r3, r2
 8016d48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016d4a:	687b      	ldr	r3, [r7, #4]
 8016d4c:	693a      	ldr	r2, [r7, #16]
 8016d4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8016d50:	687b      	ldr	r3, [r7, #4]
 8016d52:	68fa      	ldr	r2, [r7, #12]
 8016d54:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8016d56:	683b      	ldr	r3, [r7, #0]
 8016d58:	685a      	ldr	r2, [r3, #4]
 8016d5a:	687b      	ldr	r3, [r7, #4]
 8016d5c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016d5e:	687b      	ldr	r3, [r7, #4]
 8016d60:	697a      	ldr	r2, [r7, #20]
 8016d62:	621a      	str	r2, [r3, #32]
}
 8016d64:	bf00      	nop
 8016d66:	371c      	adds	r7, #28
 8016d68:	46bd      	mov	sp, r7
 8016d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d6e:	4770      	bx	lr
 8016d70:	fffeff8f 	.word	0xfffeff8f
 8016d74:	40010000 	.word	0x40010000
 8016d78:	40010400 	.word	0x40010400
 8016d7c:	40014000 	.word	0x40014000
 8016d80:	40014400 	.word	0x40014400
 8016d84:	40014800 	.word	0x40014800

08016d88 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8016d88:	b480      	push	{r7}
 8016d8a:	b087      	sub	sp, #28
 8016d8c:	af00      	add	r7, sp, #0
 8016d8e:	6078      	str	r0, [r7, #4]
 8016d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016d92:	687b      	ldr	r3, [r7, #4]
 8016d94:	6a1b      	ldr	r3, [r3, #32]
 8016d96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8016d98:	687b      	ldr	r3, [r7, #4]
 8016d9a:	6a1b      	ldr	r3, [r3, #32]
 8016d9c:	f023 0210 	bic.w	r2, r3, #16
 8016da0:	687b      	ldr	r3, [r7, #4]
 8016da2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016da4:	687b      	ldr	r3, [r7, #4]
 8016da6:	685b      	ldr	r3, [r3, #4]
 8016da8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8016daa:	687b      	ldr	r3, [r7, #4]
 8016dac:	699b      	ldr	r3, [r3, #24]
 8016dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8016db0:	68fa      	ldr	r2, [r7, #12]
 8016db2:	4b34      	ldr	r3, [pc, #208]	@ (8016e84 <TIM_OC2_SetConfig+0xfc>)
 8016db4:	4013      	ands	r3, r2
 8016db6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8016db8:	68fb      	ldr	r3, [r7, #12]
 8016dba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8016dbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8016dc0:	683b      	ldr	r3, [r7, #0]
 8016dc2:	681b      	ldr	r3, [r3, #0]
 8016dc4:	021b      	lsls	r3, r3, #8
 8016dc6:	68fa      	ldr	r2, [r7, #12]
 8016dc8:	4313      	orrs	r3, r2
 8016dca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8016dcc:	697b      	ldr	r3, [r7, #20]
 8016dce:	f023 0320 	bic.w	r3, r3, #32
 8016dd2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8016dd4:	683b      	ldr	r3, [r7, #0]
 8016dd6:	689b      	ldr	r3, [r3, #8]
 8016dd8:	011b      	lsls	r3, r3, #4
 8016dda:	697a      	ldr	r2, [r7, #20]
 8016ddc:	4313      	orrs	r3, r2
 8016dde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8016de0:	687b      	ldr	r3, [r7, #4]
 8016de2:	4a29      	ldr	r2, [pc, #164]	@ (8016e88 <TIM_OC2_SetConfig+0x100>)
 8016de4:	4293      	cmp	r3, r2
 8016de6:	d003      	beq.n	8016df0 <TIM_OC2_SetConfig+0x68>
 8016de8:	687b      	ldr	r3, [r7, #4]
 8016dea:	4a28      	ldr	r2, [pc, #160]	@ (8016e8c <TIM_OC2_SetConfig+0x104>)
 8016dec:	4293      	cmp	r3, r2
 8016dee:	d10d      	bne.n	8016e0c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8016df0:	697b      	ldr	r3, [r7, #20]
 8016df2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8016df6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8016df8:	683b      	ldr	r3, [r7, #0]
 8016dfa:	68db      	ldr	r3, [r3, #12]
 8016dfc:	011b      	lsls	r3, r3, #4
 8016dfe:	697a      	ldr	r2, [r7, #20]
 8016e00:	4313      	orrs	r3, r2
 8016e02:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8016e04:	697b      	ldr	r3, [r7, #20]
 8016e06:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8016e0a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8016e0c:	687b      	ldr	r3, [r7, #4]
 8016e0e:	4a1e      	ldr	r2, [pc, #120]	@ (8016e88 <TIM_OC2_SetConfig+0x100>)
 8016e10:	4293      	cmp	r3, r2
 8016e12:	d00f      	beq.n	8016e34 <TIM_OC2_SetConfig+0xac>
 8016e14:	687b      	ldr	r3, [r7, #4]
 8016e16:	4a1d      	ldr	r2, [pc, #116]	@ (8016e8c <TIM_OC2_SetConfig+0x104>)
 8016e18:	4293      	cmp	r3, r2
 8016e1a:	d00b      	beq.n	8016e34 <TIM_OC2_SetConfig+0xac>
 8016e1c:	687b      	ldr	r3, [r7, #4]
 8016e1e:	4a1c      	ldr	r2, [pc, #112]	@ (8016e90 <TIM_OC2_SetConfig+0x108>)
 8016e20:	4293      	cmp	r3, r2
 8016e22:	d007      	beq.n	8016e34 <TIM_OC2_SetConfig+0xac>
 8016e24:	687b      	ldr	r3, [r7, #4]
 8016e26:	4a1b      	ldr	r2, [pc, #108]	@ (8016e94 <TIM_OC2_SetConfig+0x10c>)
 8016e28:	4293      	cmp	r3, r2
 8016e2a:	d003      	beq.n	8016e34 <TIM_OC2_SetConfig+0xac>
 8016e2c:	687b      	ldr	r3, [r7, #4]
 8016e2e:	4a1a      	ldr	r2, [pc, #104]	@ (8016e98 <TIM_OC2_SetConfig+0x110>)
 8016e30:	4293      	cmp	r3, r2
 8016e32:	d113      	bne.n	8016e5c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8016e34:	693b      	ldr	r3, [r7, #16]
 8016e36:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8016e3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8016e3c:	693b      	ldr	r3, [r7, #16]
 8016e3e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8016e42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8016e44:	683b      	ldr	r3, [r7, #0]
 8016e46:	695b      	ldr	r3, [r3, #20]
 8016e48:	009b      	lsls	r3, r3, #2
 8016e4a:	693a      	ldr	r2, [r7, #16]
 8016e4c:	4313      	orrs	r3, r2
 8016e4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8016e50:	683b      	ldr	r3, [r7, #0]
 8016e52:	699b      	ldr	r3, [r3, #24]
 8016e54:	009b      	lsls	r3, r3, #2
 8016e56:	693a      	ldr	r2, [r7, #16]
 8016e58:	4313      	orrs	r3, r2
 8016e5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016e5c:	687b      	ldr	r3, [r7, #4]
 8016e5e:	693a      	ldr	r2, [r7, #16]
 8016e60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8016e62:	687b      	ldr	r3, [r7, #4]
 8016e64:	68fa      	ldr	r2, [r7, #12]
 8016e66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8016e68:	683b      	ldr	r3, [r7, #0]
 8016e6a:	685a      	ldr	r2, [r3, #4]
 8016e6c:	687b      	ldr	r3, [r7, #4]
 8016e6e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016e70:	687b      	ldr	r3, [r7, #4]
 8016e72:	697a      	ldr	r2, [r7, #20]
 8016e74:	621a      	str	r2, [r3, #32]
}
 8016e76:	bf00      	nop
 8016e78:	371c      	adds	r7, #28
 8016e7a:	46bd      	mov	sp, r7
 8016e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e80:	4770      	bx	lr
 8016e82:	bf00      	nop
 8016e84:	feff8fff 	.word	0xfeff8fff
 8016e88:	40010000 	.word	0x40010000
 8016e8c:	40010400 	.word	0x40010400
 8016e90:	40014000 	.word	0x40014000
 8016e94:	40014400 	.word	0x40014400
 8016e98:	40014800 	.word	0x40014800

08016e9c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8016e9c:	b480      	push	{r7}
 8016e9e:	b087      	sub	sp, #28
 8016ea0:	af00      	add	r7, sp, #0
 8016ea2:	6078      	str	r0, [r7, #4]
 8016ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016ea6:	687b      	ldr	r3, [r7, #4]
 8016ea8:	6a1b      	ldr	r3, [r3, #32]
 8016eaa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8016eac:	687b      	ldr	r3, [r7, #4]
 8016eae:	6a1b      	ldr	r3, [r3, #32]
 8016eb0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8016eb4:	687b      	ldr	r3, [r7, #4]
 8016eb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016eb8:	687b      	ldr	r3, [r7, #4]
 8016eba:	685b      	ldr	r3, [r3, #4]
 8016ebc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8016ebe:	687b      	ldr	r3, [r7, #4]
 8016ec0:	69db      	ldr	r3, [r3, #28]
 8016ec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8016ec4:	68fa      	ldr	r2, [r7, #12]
 8016ec6:	4b33      	ldr	r3, [pc, #204]	@ (8016f94 <TIM_OC3_SetConfig+0xf8>)
 8016ec8:	4013      	ands	r3, r2
 8016eca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8016ecc:	68fb      	ldr	r3, [r7, #12]
 8016ece:	f023 0303 	bic.w	r3, r3, #3
 8016ed2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8016ed4:	683b      	ldr	r3, [r7, #0]
 8016ed6:	681b      	ldr	r3, [r3, #0]
 8016ed8:	68fa      	ldr	r2, [r7, #12]
 8016eda:	4313      	orrs	r3, r2
 8016edc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8016ede:	697b      	ldr	r3, [r7, #20]
 8016ee0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8016ee4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8016ee6:	683b      	ldr	r3, [r7, #0]
 8016ee8:	689b      	ldr	r3, [r3, #8]
 8016eea:	021b      	lsls	r3, r3, #8
 8016eec:	697a      	ldr	r2, [r7, #20]
 8016eee:	4313      	orrs	r3, r2
 8016ef0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8016ef2:	687b      	ldr	r3, [r7, #4]
 8016ef4:	4a28      	ldr	r2, [pc, #160]	@ (8016f98 <TIM_OC3_SetConfig+0xfc>)
 8016ef6:	4293      	cmp	r3, r2
 8016ef8:	d003      	beq.n	8016f02 <TIM_OC3_SetConfig+0x66>
 8016efa:	687b      	ldr	r3, [r7, #4]
 8016efc:	4a27      	ldr	r2, [pc, #156]	@ (8016f9c <TIM_OC3_SetConfig+0x100>)
 8016efe:	4293      	cmp	r3, r2
 8016f00:	d10d      	bne.n	8016f1e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8016f02:	697b      	ldr	r3, [r7, #20]
 8016f04:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8016f08:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8016f0a:	683b      	ldr	r3, [r7, #0]
 8016f0c:	68db      	ldr	r3, [r3, #12]
 8016f0e:	021b      	lsls	r3, r3, #8
 8016f10:	697a      	ldr	r2, [r7, #20]
 8016f12:	4313      	orrs	r3, r2
 8016f14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8016f16:	697b      	ldr	r3, [r7, #20]
 8016f18:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8016f1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8016f1e:	687b      	ldr	r3, [r7, #4]
 8016f20:	4a1d      	ldr	r2, [pc, #116]	@ (8016f98 <TIM_OC3_SetConfig+0xfc>)
 8016f22:	4293      	cmp	r3, r2
 8016f24:	d00f      	beq.n	8016f46 <TIM_OC3_SetConfig+0xaa>
 8016f26:	687b      	ldr	r3, [r7, #4]
 8016f28:	4a1c      	ldr	r2, [pc, #112]	@ (8016f9c <TIM_OC3_SetConfig+0x100>)
 8016f2a:	4293      	cmp	r3, r2
 8016f2c:	d00b      	beq.n	8016f46 <TIM_OC3_SetConfig+0xaa>
 8016f2e:	687b      	ldr	r3, [r7, #4]
 8016f30:	4a1b      	ldr	r2, [pc, #108]	@ (8016fa0 <TIM_OC3_SetConfig+0x104>)
 8016f32:	4293      	cmp	r3, r2
 8016f34:	d007      	beq.n	8016f46 <TIM_OC3_SetConfig+0xaa>
 8016f36:	687b      	ldr	r3, [r7, #4]
 8016f38:	4a1a      	ldr	r2, [pc, #104]	@ (8016fa4 <TIM_OC3_SetConfig+0x108>)
 8016f3a:	4293      	cmp	r3, r2
 8016f3c:	d003      	beq.n	8016f46 <TIM_OC3_SetConfig+0xaa>
 8016f3e:	687b      	ldr	r3, [r7, #4]
 8016f40:	4a19      	ldr	r2, [pc, #100]	@ (8016fa8 <TIM_OC3_SetConfig+0x10c>)
 8016f42:	4293      	cmp	r3, r2
 8016f44:	d113      	bne.n	8016f6e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8016f46:	693b      	ldr	r3, [r7, #16]
 8016f48:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8016f4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8016f4e:	693b      	ldr	r3, [r7, #16]
 8016f50:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8016f54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8016f56:	683b      	ldr	r3, [r7, #0]
 8016f58:	695b      	ldr	r3, [r3, #20]
 8016f5a:	011b      	lsls	r3, r3, #4
 8016f5c:	693a      	ldr	r2, [r7, #16]
 8016f5e:	4313      	orrs	r3, r2
 8016f60:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8016f62:	683b      	ldr	r3, [r7, #0]
 8016f64:	699b      	ldr	r3, [r3, #24]
 8016f66:	011b      	lsls	r3, r3, #4
 8016f68:	693a      	ldr	r2, [r7, #16]
 8016f6a:	4313      	orrs	r3, r2
 8016f6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016f6e:	687b      	ldr	r3, [r7, #4]
 8016f70:	693a      	ldr	r2, [r7, #16]
 8016f72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8016f74:	687b      	ldr	r3, [r7, #4]
 8016f76:	68fa      	ldr	r2, [r7, #12]
 8016f78:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8016f7a:	683b      	ldr	r3, [r7, #0]
 8016f7c:	685a      	ldr	r2, [r3, #4]
 8016f7e:	687b      	ldr	r3, [r7, #4]
 8016f80:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016f82:	687b      	ldr	r3, [r7, #4]
 8016f84:	697a      	ldr	r2, [r7, #20]
 8016f86:	621a      	str	r2, [r3, #32]
}
 8016f88:	bf00      	nop
 8016f8a:	371c      	adds	r7, #28
 8016f8c:	46bd      	mov	sp, r7
 8016f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f92:	4770      	bx	lr
 8016f94:	fffeff8f 	.word	0xfffeff8f
 8016f98:	40010000 	.word	0x40010000
 8016f9c:	40010400 	.word	0x40010400
 8016fa0:	40014000 	.word	0x40014000
 8016fa4:	40014400 	.word	0x40014400
 8016fa8:	40014800 	.word	0x40014800

08016fac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8016fac:	b480      	push	{r7}
 8016fae:	b087      	sub	sp, #28
 8016fb0:	af00      	add	r7, sp, #0
 8016fb2:	6078      	str	r0, [r7, #4]
 8016fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016fb6:	687b      	ldr	r3, [r7, #4]
 8016fb8:	6a1b      	ldr	r3, [r3, #32]
 8016fba:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8016fbc:	687b      	ldr	r3, [r7, #4]
 8016fbe:	6a1b      	ldr	r3, [r3, #32]
 8016fc0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8016fc4:	687b      	ldr	r3, [r7, #4]
 8016fc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016fc8:	687b      	ldr	r3, [r7, #4]
 8016fca:	685b      	ldr	r3, [r3, #4]
 8016fcc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8016fce:	687b      	ldr	r3, [r7, #4]
 8016fd0:	69db      	ldr	r3, [r3, #28]
 8016fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8016fd4:	68fa      	ldr	r2, [r7, #12]
 8016fd6:	4b24      	ldr	r3, [pc, #144]	@ (8017068 <TIM_OC4_SetConfig+0xbc>)
 8016fd8:	4013      	ands	r3, r2
 8016fda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8016fdc:	68fb      	ldr	r3, [r7, #12]
 8016fde:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8016fe2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8016fe4:	683b      	ldr	r3, [r7, #0]
 8016fe6:	681b      	ldr	r3, [r3, #0]
 8016fe8:	021b      	lsls	r3, r3, #8
 8016fea:	68fa      	ldr	r2, [r7, #12]
 8016fec:	4313      	orrs	r3, r2
 8016fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8016ff0:	693b      	ldr	r3, [r7, #16]
 8016ff2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8016ff6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8016ff8:	683b      	ldr	r3, [r7, #0]
 8016ffa:	689b      	ldr	r3, [r3, #8]
 8016ffc:	031b      	lsls	r3, r3, #12
 8016ffe:	693a      	ldr	r2, [r7, #16]
 8017000:	4313      	orrs	r3, r2
 8017002:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8017004:	687b      	ldr	r3, [r7, #4]
 8017006:	4a19      	ldr	r2, [pc, #100]	@ (801706c <TIM_OC4_SetConfig+0xc0>)
 8017008:	4293      	cmp	r3, r2
 801700a:	d00f      	beq.n	801702c <TIM_OC4_SetConfig+0x80>
 801700c:	687b      	ldr	r3, [r7, #4]
 801700e:	4a18      	ldr	r2, [pc, #96]	@ (8017070 <TIM_OC4_SetConfig+0xc4>)
 8017010:	4293      	cmp	r3, r2
 8017012:	d00b      	beq.n	801702c <TIM_OC4_SetConfig+0x80>
 8017014:	687b      	ldr	r3, [r7, #4]
 8017016:	4a17      	ldr	r2, [pc, #92]	@ (8017074 <TIM_OC4_SetConfig+0xc8>)
 8017018:	4293      	cmp	r3, r2
 801701a:	d007      	beq.n	801702c <TIM_OC4_SetConfig+0x80>
 801701c:	687b      	ldr	r3, [r7, #4]
 801701e:	4a16      	ldr	r2, [pc, #88]	@ (8017078 <TIM_OC4_SetConfig+0xcc>)
 8017020:	4293      	cmp	r3, r2
 8017022:	d003      	beq.n	801702c <TIM_OC4_SetConfig+0x80>
 8017024:	687b      	ldr	r3, [r7, #4]
 8017026:	4a15      	ldr	r2, [pc, #84]	@ (801707c <TIM_OC4_SetConfig+0xd0>)
 8017028:	4293      	cmp	r3, r2
 801702a:	d109      	bne.n	8017040 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801702c:	697b      	ldr	r3, [r7, #20]
 801702e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8017032:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8017034:	683b      	ldr	r3, [r7, #0]
 8017036:	695b      	ldr	r3, [r3, #20]
 8017038:	019b      	lsls	r3, r3, #6
 801703a:	697a      	ldr	r2, [r7, #20]
 801703c:	4313      	orrs	r3, r2
 801703e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8017040:	687b      	ldr	r3, [r7, #4]
 8017042:	697a      	ldr	r2, [r7, #20]
 8017044:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8017046:	687b      	ldr	r3, [r7, #4]
 8017048:	68fa      	ldr	r2, [r7, #12]
 801704a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801704c:	683b      	ldr	r3, [r7, #0]
 801704e:	685a      	ldr	r2, [r3, #4]
 8017050:	687b      	ldr	r3, [r7, #4]
 8017052:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8017054:	687b      	ldr	r3, [r7, #4]
 8017056:	693a      	ldr	r2, [r7, #16]
 8017058:	621a      	str	r2, [r3, #32]
}
 801705a:	bf00      	nop
 801705c:	371c      	adds	r7, #28
 801705e:	46bd      	mov	sp, r7
 8017060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017064:	4770      	bx	lr
 8017066:	bf00      	nop
 8017068:	feff8fff 	.word	0xfeff8fff
 801706c:	40010000 	.word	0x40010000
 8017070:	40010400 	.word	0x40010400
 8017074:	40014000 	.word	0x40014000
 8017078:	40014400 	.word	0x40014400
 801707c:	40014800 	.word	0x40014800

08017080 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8017080:	b480      	push	{r7}
 8017082:	b087      	sub	sp, #28
 8017084:	af00      	add	r7, sp, #0
 8017086:	6078      	str	r0, [r7, #4]
 8017088:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801708a:	687b      	ldr	r3, [r7, #4]
 801708c:	6a1b      	ldr	r3, [r3, #32]
 801708e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8017090:	687b      	ldr	r3, [r7, #4]
 8017092:	6a1b      	ldr	r3, [r3, #32]
 8017094:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8017098:	687b      	ldr	r3, [r7, #4]
 801709a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801709c:	687b      	ldr	r3, [r7, #4]
 801709e:	685b      	ldr	r3, [r3, #4]
 80170a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80170a2:	687b      	ldr	r3, [r7, #4]
 80170a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80170a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80170a8:	68fa      	ldr	r2, [r7, #12]
 80170aa:	4b21      	ldr	r3, [pc, #132]	@ (8017130 <TIM_OC5_SetConfig+0xb0>)
 80170ac:	4013      	ands	r3, r2
 80170ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80170b0:	683b      	ldr	r3, [r7, #0]
 80170b2:	681b      	ldr	r3, [r3, #0]
 80170b4:	68fa      	ldr	r2, [r7, #12]
 80170b6:	4313      	orrs	r3, r2
 80170b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80170ba:	693b      	ldr	r3, [r7, #16]
 80170bc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80170c0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80170c2:	683b      	ldr	r3, [r7, #0]
 80170c4:	689b      	ldr	r3, [r3, #8]
 80170c6:	041b      	lsls	r3, r3, #16
 80170c8:	693a      	ldr	r2, [r7, #16]
 80170ca:	4313      	orrs	r3, r2
 80170cc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80170ce:	687b      	ldr	r3, [r7, #4]
 80170d0:	4a18      	ldr	r2, [pc, #96]	@ (8017134 <TIM_OC5_SetConfig+0xb4>)
 80170d2:	4293      	cmp	r3, r2
 80170d4:	d00f      	beq.n	80170f6 <TIM_OC5_SetConfig+0x76>
 80170d6:	687b      	ldr	r3, [r7, #4]
 80170d8:	4a17      	ldr	r2, [pc, #92]	@ (8017138 <TIM_OC5_SetConfig+0xb8>)
 80170da:	4293      	cmp	r3, r2
 80170dc:	d00b      	beq.n	80170f6 <TIM_OC5_SetConfig+0x76>
 80170de:	687b      	ldr	r3, [r7, #4]
 80170e0:	4a16      	ldr	r2, [pc, #88]	@ (801713c <TIM_OC5_SetConfig+0xbc>)
 80170e2:	4293      	cmp	r3, r2
 80170e4:	d007      	beq.n	80170f6 <TIM_OC5_SetConfig+0x76>
 80170e6:	687b      	ldr	r3, [r7, #4]
 80170e8:	4a15      	ldr	r2, [pc, #84]	@ (8017140 <TIM_OC5_SetConfig+0xc0>)
 80170ea:	4293      	cmp	r3, r2
 80170ec:	d003      	beq.n	80170f6 <TIM_OC5_SetConfig+0x76>
 80170ee:	687b      	ldr	r3, [r7, #4]
 80170f0:	4a14      	ldr	r2, [pc, #80]	@ (8017144 <TIM_OC5_SetConfig+0xc4>)
 80170f2:	4293      	cmp	r3, r2
 80170f4:	d109      	bne.n	801710a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80170f6:	697b      	ldr	r3, [r7, #20]
 80170f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80170fc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80170fe:	683b      	ldr	r3, [r7, #0]
 8017100:	695b      	ldr	r3, [r3, #20]
 8017102:	021b      	lsls	r3, r3, #8
 8017104:	697a      	ldr	r2, [r7, #20]
 8017106:	4313      	orrs	r3, r2
 8017108:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801710a:	687b      	ldr	r3, [r7, #4]
 801710c:	697a      	ldr	r2, [r7, #20]
 801710e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8017110:	687b      	ldr	r3, [r7, #4]
 8017112:	68fa      	ldr	r2, [r7, #12]
 8017114:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8017116:	683b      	ldr	r3, [r7, #0]
 8017118:	685a      	ldr	r2, [r3, #4]
 801711a:	687b      	ldr	r3, [r7, #4]
 801711c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801711e:	687b      	ldr	r3, [r7, #4]
 8017120:	693a      	ldr	r2, [r7, #16]
 8017122:	621a      	str	r2, [r3, #32]
}
 8017124:	bf00      	nop
 8017126:	371c      	adds	r7, #28
 8017128:	46bd      	mov	sp, r7
 801712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801712e:	4770      	bx	lr
 8017130:	fffeff8f 	.word	0xfffeff8f
 8017134:	40010000 	.word	0x40010000
 8017138:	40010400 	.word	0x40010400
 801713c:	40014000 	.word	0x40014000
 8017140:	40014400 	.word	0x40014400
 8017144:	40014800 	.word	0x40014800

08017148 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8017148:	b480      	push	{r7}
 801714a:	b087      	sub	sp, #28
 801714c:	af00      	add	r7, sp, #0
 801714e:	6078      	str	r0, [r7, #4]
 8017150:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8017152:	687b      	ldr	r3, [r7, #4]
 8017154:	6a1b      	ldr	r3, [r3, #32]
 8017156:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8017158:	687b      	ldr	r3, [r7, #4]
 801715a:	6a1b      	ldr	r3, [r3, #32]
 801715c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8017160:	687b      	ldr	r3, [r7, #4]
 8017162:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8017164:	687b      	ldr	r3, [r7, #4]
 8017166:	685b      	ldr	r3, [r3, #4]
 8017168:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801716a:	687b      	ldr	r3, [r7, #4]
 801716c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801716e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8017170:	68fa      	ldr	r2, [r7, #12]
 8017172:	4b22      	ldr	r3, [pc, #136]	@ (80171fc <TIM_OC6_SetConfig+0xb4>)
 8017174:	4013      	ands	r3, r2
 8017176:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8017178:	683b      	ldr	r3, [r7, #0]
 801717a:	681b      	ldr	r3, [r3, #0]
 801717c:	021b      	lsls	r3, r3, #8
 801717e:	68fa      	ldr	r2, [r7, #12]
 8017180:	4313      	orrs	r3, r2
 8017182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8017184:	693b      	ldr	r3, [r7, #16]
 8017186:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 801718a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 801718c:	683b      	ldr	r3, [r7, #0]
 801718e:	689b      	ldr	r3, [r3, #8]
 8017190:	051b      	lsls	r3, r3, #20
 8017192:	693a      	ldr	r2, [r7, #16]
 8017194:	4313      	orrs	r3, r2
 8017196:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8017198:	687b      	ldr	r3, [r7, #4]
 801719a:	4a19      	ldr	r2, [pc, #100]	@ (8017200 <TIM_OC6_SetConfig+0xb8>)
 801719c:	4293      	cmp	r3, r2
 801719e:	d00f      	beq.n	80171c0 <TIM_OC6_SetConfig+0x78>
 80171a0:	687b      	ldr	r3, [r7, #4]
 80171a2:	4a18      	ldr	r2, [pc, #96]	@ (8017204 <TIM_OC6_SetConfig+0xbc>)
 80171a4:	4293      	cmp	r3, r2
 80171a6:	d00b      	beq.n	80171c0 <TIM_OC6_SetConfig+0x78>
 80171a8:	687b      	ldr	r3, [r7, #4]
 80171aa:	4a17      	ldr	r2, [pc, #92]	@ (8017208 <TIM_OC6_SetConfig+0xc0>)
 80171ac:	4293      	cmp	r3, r2
 80171ae:	d007      	beq.n	80171c0 <TIM_OC6_SetConfig+0x78>
 80171b0:	687b      	ldr	r3, [r7, #4]
 80171b2:	4a16      	ldr	r2, [pc, #88]	@ (801720c <TIM_OC6_SetConfig+0xc4>)
 80171b4:	4293      	cmp	r3, r2
 80171b6:	d003      	beq.n	80171c0 <TIM_OC6_SetConfig+0x78>
 80171b8:	687b      	ldr	r3, [r7, #4]
 80171ba:	4a15      	ldr	r2, [pc, #84]	@ (8017210 <TIM_OC6_SetConfig+0xc8>)
 80171bc:	4293      	cmp	r3, r2
 80171be:	d109      	bne.n	80171d4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80171c0:	697b      	ldr	r3, [r7, #20]
 80171c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80171c6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80171c8:	683b      	ldr	r3, [r7, #0]
 80171ca:	695b      	ldr	r3, [r3, #20]
 80171cc:	029b      	lsls	r3, r3, #10
 80171ce:	697a      	ldr	r2, [r7, #20]
 80171d0:	4313      	orrs	r3, r2
 80171d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80171d4:	687b      	ldr	r3, [r7, #4]
 80171d6:	697a      	ldr	r2, [r7, #20]
 80171d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80171da:	687b      	ldr	r3, [r7, #4]
 80171dc:	68fa      	ldr	r2, [r7, #12]
 80171de:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80171e0:	683b      	ldr	r3, [r7, #0]
 80171e2:	685a      	ldr	r2, [r3, #4]
 80171e4:	687b      	ldr	r3, [r7, #4]
 80171e6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80171e8:	687b      	ldr	r3, [r7, #4]
 80171ea:	693a      	ldr	r2, [r7, #16]
 80171ec:	621a      	str	r2, [r3, #32]
}
 80171ee:	bf00      	nop
 80171f0:	371c      	adds	r7, #28
 80171f2:	46bd      	mov	sp, r7
 80171f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171f8:	4770      	bx	lr
 80171fa:	bf00      	nop
 80171fc:	feff8fff 	.word	0xfeff8fff
 8017200:	40010000 	.word	0x40010000
 8017204:	40010400 	.word	0x40010400
 8017208:	40014000 	.word	0x40014000
 801720c:	40014400 	.word	0x40014400
 8017210:	40014800 	.word	0x40014800

08017214 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8017214:	b480      	push	{r7}
 8017216:	b087      	sub	sp, #28
 8017218:	af00      	add	r7, sp, #0
 801721a:	60f8      	str	r0, [r7, #12]
 801721c:	60b9      	str	r1, [r7, #8]
 801721e:	607a      	str	r2, [r7, #4]
 8017220:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8017222:	68fb      	ldr	r3, [r7, #12]
 8017224:	6a1b      	ldr	r3, [r3, #32]
 8017226:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8017228:	68fb      	ldr	r3, [r7, #12]
 801722a:	6a1b      	ldr	r3, [r3, #32]
 801722c:	f023 0201 	bic.w	r2, r3, #1
 8017230:	68fb      	ldr	r3, [r7, #12]
 8017232:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8017234:	68fb      	ldr	r3, [r7, #12]
 8017236:	699b      	ldr	r3, [r3, #24]
 8017238:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 801723a:	68fb      	ldr	r3, [r7, #12]
 801723c:	4a2c      	ldr	r2, [pc, #176]	@ (80172f0 <TIM_TI1_SetConfig+0xdc>)
 801723e:	4293      	cmp	r3, r2
 8017240:	d023      	beq.n	801728a <TIM_TI1_SetConfig+0x76>
 8017242:	68fb      	ldr	r3, [r7, #12]
 8017244:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8017248:	d01f      	beq.n	801728a <TIM_TI1_SetConfig+0x76>
 801724a:	68fb      	ldr	r3, [r7, #12]
 801724c:	4a29      	ldr	r2, [pc, #164]	@ (80172f4 <TIM_TI1_SetConfig+0xe0>)
 801724e:	4293      	cmp	r3, r2
 8017250:	d01b      	beq.n	801728a <TIM_TI1_SetConfig+0x76>
 8017252:	68fb      	ldr	r3, [r7, #12]
 8017254:	4a28      	ldr	r2, [pc, #160]	@ (80172f8 <TIM_TI1_SetConfig+0xe4>)
 8017256:	4293      	cmp	r3, r2
 8017258:	d017      	beq.n	801728a <TIM_TI1_SetConfig+0x76>
 801725a:	68fb      	ldr	r3, [r7, #12]
 801725c:	4a27      	ldr	r2, [pc, #156]	@ (80172fc <TIM_TI1_SetConfig+0xe8>)
 801725e:	4293      	cmp	r3, r2
 8017260:	d013      	beq.n	801728a <TIM_TI1_SetConfig+0x76>
 8017262:	68fb      	ldr	r3, [r7, #12]
 8017264:	4a26      	ldr	r2, [pc, #152]	@ (8017300 <TIM_TI1_SetConfig+0xec>)
 8017266:	4293      	cmp	r3, r2
 8017268:	d00f      	beq.n	801728a <TIM_TI1_SetConfig+0x76>
 801726a:	68fb      	ldr	r3, [r7, #12]
 801726c:	4a25      	ldr	r2, [pc, #148]	@ (8017304 <TIM_TI1_SetConfig+0xf0>)
 801726e:	4293      	cmp	r3, r2
 8017270:	d00b      	beq.n	801728a <TIM_TI1_SetConfig+0x76>
 8017272:	68fb      	ldr	r3, [r7, #12]
 8017274:	4a24      	ldr	r2, [pc, #144]	@ (8017308 <TIM_TI1_SetConfig+0xf4>)
 8017276:	4293      	cmp	r3, r2
 8017278:	d007      	beq.n	801728a <TIM_TI1_SetConfig+0x76>
 801727a:	68fb      	ldr	r3, [r7, #12]
 801727c:	4a23      	ldr	r2, [pc, #140]	@ (801730c <TIM_TI1_SetConfig+0xf8>)
 801727e:	4293      	cmp	r3, r2
 8017280:	d003      	beq.n	801728a <TIM_TI1_SetConfig+0x76>
 8017282:	68fb      	ldr	r3, [r7, #12]
 8017284:	4a22      	ldr	r2, [pc, #136]	@ (8017310 <TIM_TI1_SetConfig+0xfc>)
 8017286:	4293      	cmp	r3, r2
 8017288:	d101      	bne.n	801728e <TIM_TI1_SetConfig+0x7a>
 801728a:	2301      	movs	r3, #1
 801728c:	e000      	b.n	8017290 <TIM_TI1_SetConfig+0x7c>
 801728e:	2300      	movs	r3, #0
 8017290:	2b00      	cmp	r3, #0
 8017292:	d008      	beq.n	80172a6 <TIM_TI1_SetConfig+0x92>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8017294:	697b      	ldr	r3, [r7, #20]
 8017296:	f023 0303 	bic.w	r3, r3, #3
 801729a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 801729c:	697a      	ldr	r2, [r7, #20]
 801729e:	687b      	ldr	r3, [r7, #4]
 80172a0:	4313      	orrs	r3, r2
 80172a2:	617b      	str	r3, [r7, #20]
 80172a4:	e003      	b.n	80172ae <TIM_TI1_SetConfig+0x9a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80172a6:	697b      	ldr	r3, [r7, #20]
 80172a8:	f043 0301 	orr.w	r3, r3, #1
 80172ac:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80172ae:	697b      	ldr	r3, [r7, #20]
 80172b0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80172b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80172b6:	683b      	ldr	r3, [r7, #0]
 80172b8:	011b      	lsls	r3, r3, #4
 80172ba:	b2db      	uxtb	r3, r3
 80172bc:	697a      	ldr	r2, [r7, #20]
 80172be:	4313      	orrs	r3, r2
 80172c0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80172c2:	693b      	ldr	r3, [r7, #16]
 80172c4:	f023 030a 	bic.w	r3, r3, #10
 80172c8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80172ca:	68bb      	ldr	r3, [r7, #8]
 80172cc:	f003 030a 	and.w	r3, r3, #10
 80172d0:	693a      	ldr	r2, [r7, #16]
 80172d2:	4313      	orrs	r3, r2
 80172d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80172d6:	68fb      	ldr	r3, [r7, #12]
 80172d8:	697a      	ldr	r2, [r7, #20]
 80172da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80172dc:	68fb      	ldr	r3, [r7, #12]
 80172de:	693a      	ldr	r2, [r7, #16]
 80172e0:	621a      	str	r2, [r3, #32]
}
 80172e2:	bf00      	nop
 80172e4:	371c      	adds	r7, #28
 80172e6:	46bd      	mov	sp, r7
 80172e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172ec:	4770      	bx	lr
 80172ee:	bf00      	nop
 80172f0:	40010000 	.word	0x40010000
 80172f4:	40000400 	.word	0x40000400
 80172f8:	40000800 	.word	0x40000800
 80172fc:	40000c00 	.word	0x40000c00
 8017300:	40010400 	.word	0x40010400
 8017304:	40001800 	.word	0x40001800
 8017308:	40014000 	.word	0x40014000
 801730c:	4000e000 	.word	0x4000e000
 8017310:	4000e400 	.word	0x4000e400

08017314 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8017314:	b480      	push	{r7}
 8017316:	b087      	sub	sp, #28
 8017318:	af00      	add	r7, sp, #0
 801731a:	60f8      	str	r0, [r7, #12]
 801731c:	60b9      	str	r1, [r7, #8]
 801731e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8017320:	68fb      	ldr	r3, [r7, #12]
 8017322:	6a1b      	ldr	r3, [r3, #32]
 8017324:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8017326:	68fb      	ldr	r3, [r7, #12]
 8017328:	6a1b      	ldr	r3, [r3, #32]
 801732a:	f023 0201 	bic.w	r2, r3, #1
 801732e:	68fb      	ldr	r3, [r7, #12]
 8017330:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8017332:	68fb      	ldr	r3, [r7, #12]
 8017334:	699b      	ldr	r3, [r3, #24]
 8017336:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8017338:	693b      	ldr	r3, [r7, #16]
 801733a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 801733e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8017340:	687b      	ldr	r3, [r7, #4]
 8017342:	011b      	lsls	r3, r3, #4
 8017344:	693a      	ldr	r2, [r7, #16]
 8017346:	4313      	orrs	r3, r2
 8017348:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801734a:	697b      	ldr	r3, [r7, #20]
 801734c:	f023 030a 	bic.w	r3, r3, #10
 8017350:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8017352:	697a      	ldr	r2, [r7, #20]
 8017354:	68bb      	ldr	r3, [r7, #8]
 8017356:	4313      	orrs	r3, r2
 8017358:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801735a:	68fb      	ldr	r3, [r7, #12]
 801735c:	693a      	ldr	r2, [r7, #16]
 801735e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8017360:	68fb      	ldr	r3, [r7, #12]
 8017362:	697a      	ldr	r2, [r7, #20]
 8017364:	621a      	str	r2, [r3, #32]
}
 8017366:	bf00      	nop
 8017368:	371c      	adds	r7, #28
 801736a:	46bd      	mov	sp, r7
 801736c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017370:	4770      	bx	lr

08017372 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8017372:	b480      	push	{r7}
 8017374:	b087      	sub	sp, #28
 8017376:	af00      	add	r7, sp, #0
 8017378:	60f8      	str	r0, [r7, #12]
 801737a:	60b9      	str	r1, [r7, #8]
 801737c:	607a      	str	r2, [r7, #4]
 801737e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8017380:	68fb      	ldr	r3, [r7, #12]
 8017382:	6a1b      	ldr	r3, [r3, #32]
 8017384:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8017386:	68fb      	ldr	r3, [r7, #12]
 8017388:	6a1b      	ldr	r3, [r3, #32]
 801738a:	f023 0210 	bic.w	r2, r3, #16
 801738e:	68fb      	ldr	r3, [r7, #12]
 8017390:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8017392:	68fb      	ldr	r3, [r7, #12]
 8017394:	699b      	ldr	r3, [r3, #24]
 8017396:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8017398:	693b      	ldr	r3, [r7, #16]
 801739a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801739e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80173a0:	687b      	ldr	r3, [r7, #4]
 80173a2:	021b      	lsls	r3, r3, #8
 80173a4:	693a      	ldr	r2, [r7, #16]
 80173a6:	4313      	orrs	r3, r2
 80173a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80173aa:	693b      	ldr	r3, [r7, #16]
 80173ac:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80173b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80173b2:	683b      	ldr	r3, [r7, #0]
 80173b4:	031b      	lsls	r3, r3, #12
 80173b6:	b29b      	uxth	r3, r3
 80173b8:	693a      	ldr	r2, [r7, #16]
 80173ba:	4313      	orrs	r3, r2
 80173bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80173be:	697b      	ldr	r3, [r7, #20]
 80173c0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80173c4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80173c6:	68bb      	ldr	r3, [r7, #8]
 80173c8:	011b      	lsls	r3, r3, #4
 80173ca:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80173ce:	697a      	ldr	r2, [r7, #20]
 80173d0:	4313      	orrs	r3, r2
 80173d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80173d4:	68fb      	ldr	r3, [r7, #12]
 80173d6:	693a      	ldr	r2, [r7, #16]
 80173d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80173da:	68fb      	ldr	r3, [r7, #12]
 80173dc:	697a      	ldr	r2, [r7, #20]
 80173de:	621a      	str	r2, [r3, #32]
}
 80173e0:	bf00      	nop
 80173e2:	371c      	adds	r7, #28
 80173e4:	46bd      	mov	sp, r7
 80173e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173ea:	4770      	bx	lr

080173ec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80173ec:	b480      	push	{r7}
 80173ee:	b087      	sub	sp, #28
 80173f0:	af00      	add	r7, sp, #0
 80173f2:	60f8      	str	r0, [r7, #12]
 80173f4:	60b9      	str	r1, [r7, #8]
 80173f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80173f8:	68fb      	ldr	r3, [r7, #12]
 80173fa:	6a1b      	ldr	r3, [r3, #32]
 80173fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80173fe:	68fb      	ldr	r3, [r7, #12]
 8017400:	6a1b      	ldr	r3, [r3, #32]
 8017402:	f023 0210 	bic.w	r2, r3, #16
 8017406:	68fb      	ldr	r3, [r7, #12]
 8017408:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801740a:	68fb      	ldr	r3, [r7, #12]
 801740c:	699b      	ldr	r3, [r3, #24]
 801740e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8017410:	693b      	ldr	r3, [r7, #16]
 8017412:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8017416:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8017418:	687b      	ldr	r3, [r7, #4]
 801741a:	031b      	lsls	r3, r3, #12
 801741c:	693a      	ldr	r2, [r7, #16]
 801741e:	4313      	orrs	r3, r2
 8017420:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8017422:	697b      	ldr	r3, [r7, #20]
 8017424:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8017428:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 801742a:	68bb      	ldr	r3, [r7, #8]
 801742c:	011b      	lsls	r3, r3, #4
 801742e:	697a      	ldr	r2, [r7, #20]
 8017430:	4313      	orrs	r3, r2
 8017432:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8017434:	68fb      	ldr	r3, [r7, #12]
 8017436:	693a      	ldr	r2, [r7, #16]
 8017438:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801743a:	68fb      	ldr	r3, [r7, #12]
 801743c:	697a      	ldr	r2, [r7, #20]
 801743e:	621a      	str	r2, [r3, #32]
}
 8017440:	bf00      	nop
 8017442:	371c      	adds	r7, #28
 8017444:	46bd      	mov	sp, r7
 8017446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801744a:	4770      	bx	lr

0801744c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 801744c:	b480      	push	{r7}
 801744e:	b087      	sub	sp, #28
 8017450:	af00      	add	r7, sp, #0
 8017452:	60f8      	str	r0, [r7, #12]
 8017454:	60b9      	str	r1, [r7, #8]
 8017456:	607a      	str	r2, [r7, #4]
 8017458:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 801745a:	68fb      	ldr	r3, [r7, #12]
 801745c:	6a1b      	ldr	r3, [r3, #32]
 801745e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8017460:	68fb      	ldr	r3, [r7, #12]
 8017462:	6a1b      	ldr	r3, [r3, #32]
 8017464:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8017468:	68fb      	ldr	r3, [r7, #12]
 801746a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 801746c:	68fb      	ldr	r3, [r7, #12]
 801746e:	69db      	ldr	r3, [r3, #28]
 8017470:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8017472:	693b      	ldr	r3, [r7, #16]
 8017474:	f023 0303 	bic.w	r3, r3, #3
 8017478:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 801747a:	693a      	ldr	r2, [r7, #16]
 801747c:	687b      	ldr	r3, [r7, #4]
 801747e:	4313      	orrs	r3, r2
 8017480:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8017482:	693b      	ldr	r3, [r7, #16]
 8017484:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8017488:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 801748a:	683b      	ldr	r3, [r7, #0]
 801748c:	011b      	lsls	r3, r3, #4
 801748e:	b2db      	uxtb	r3, r3
 8017490:	693a      	ldr	r2, [r7, #16]
 8017492:	4313      	orrs	r3, r2
 8017494:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8017496:	697b      	ldr	r3, [r7, #20]
 8017498:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 801749c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 801749e:	68bb      	ldr	r3, [r7, #8]
 80174a0:	021b      	lsls	r3, r3, #8
 80174a2:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80174a6:	697a      	ldr	r2, [r7, #20]
 80174a8:	4313      	orrs	r3, r2
 80174aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80174ac:	68fb      	ldr	r3, [r7, #12]
 80174ae:	693a      	ldr	r2, [r7, #16]
 80174b0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80174b2:	68fb      	ldr	r3, [r7, #12]
 80174b4:	697a      	ldr	r2, [r7, #20]
 80174b6:	621a      	str	r2, [r3, #32]
}
 80174b8:	bf00      	nop
 80174ba:	371c      	adds	r7, #28
 80174bc:	46bd      	mov	sp, r7
 80174be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174c2:	4770      	bx	lr

080174c4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80174c4:	b480      	push	{r7}
 80174c6:	b087      	sub	sp, #28
 80174c8:	af00      	add	r7, sp, #0
 80174ca:	60f8      	str	r0, [r7, #12]
 80174cc:	60b9      	str	r1, [r7, #8]
 80174ce:	607a      	str	r2, [r7, #4]
 80174d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80174d2:	68fb      	ldr	r3, [r7, #12]
 80174d4:	6a1b      	ldr	r3, [r3, #32]
 80174d6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80174d8:	68fb      	ldr	r3, [r7, #12]
 80174da:	6a1b      	ldr	r3, [r3, #32]
 80174dc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80174e0:	68fb      	ldr	r3, [r7, #12]
 80174e2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80174e4:	68fb      	ldr	r3, [r7, #12]
 80174e6:	69db      	ldr	r3, [r3, #28]
 80174e8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80174ea:	693b      	ldr	r3, [r7, #16]
 80174ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80174f0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80174f2:	687b      	ldr	r3, [r7, #4]
 80174f4:	021b      	lsls	r3, r3, #8
 80174f6:	693a      	ldr	r2, [r7, #16]
 80174f8:	4313      	orrs	r3, r2
 80174fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80174fc:	693b      	ldr	r3, [r7, #16]
 80174fe:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8017502:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8017504:	683b      	ldr	r3, [r7, #0]
 8017506:	031b      	lsls	r3, r3, #12
 8017508:	b29b      	uxth	r3, r3
 801750a:	693a      	ldr	r2, [r7, #16]
 801750c:	4313      	orrs	r3, r2
 801750e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8017510:	697b      	ldr	r3, [r7, #20]
 8017512:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8017516:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8017518:	68bb      	ldr	r3, [r7, #8]
 801751a:	031b      	lsls	r3, r3, #12
 801751c:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8017520:	697a      	ldr	r2, [r7, #20]
 8017522:	4313      	orrs	r3, r2
 8017524:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8017526:	68fb      	ldr	r3, [r7, #12]
 8017528:	693a      	ldr	r2, [r7, #16]
 801752a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 801752c:	68fb      	ldr	r3, [r7, #12]
 801752e:	697a      	ldr	r2, [r7, #20]
 8017530:	621a      	str	r2, [r3, #32]
}
 8017532:	bf00      	nop
 8017534:	371c      	adds	r7, #28
 8017536:	46bd      	mov	sp, r7
 8017538:	f85d 7b04 	ldr.w	r7, [sp], #4
 801753c:	4770      	bx	lr
	...

08017540 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8017540:	b480      	push	{r7}
 8017542:	b085      	sub	sp, #20
 8017544:	af00      	add	r7, sp, #0
 8017546:	6078      	str	r0, [r7, #4]
 8017548:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801754a:	687b      	ldr	r3, [r7, #4]
 801754c:	689b      	ldr	r3, [r3, #8]
 801754e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8017550:	68fa      	ldr	r2, [r7, #12]
 8017552:	4b09      	ldr	r3, [pc, #36]	@ (8017578 <TIM_ITRx_SetConfig+0x38>)
 8017554:	4013      	ands	r3, r2
 8017556:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8017558:	683a      	ldr	r2, [r7, #0]
 801755a:	68fb      	ldr	r3, [r7, #12]
 801755c:	4313      	orrs	r3, r2
 801755e:	f043 0307 	orr.w	r3, r3, #7
 8017562:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8017564:	687b      	ldr	r3, [r7, #4]
 8017566:	68fa      	ldr	r2, [r7, #12]
 8017568:	609a      	str	r2, [r3, #8]
}
 801756a:	bf00      	nop
 801756c:	3714      	adds	r7, #20
 801756e:	46bd      	mov	sp, r7
 8017570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017574:	4770      	bx	lr
 8017576:	bf00      	nop
 8017578:	ffcfff8f 	.word	0xffcfff8f

0801757c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801757c:	b480      	push	{r7}
 801757e:	b087      	sub	sp, #28
 8017580:	af00      	add	r7, sp, #0
 8017582:	60f8      	str	r0, [r7, #12]
 8017584:	60b9      	str	r1, [r7, #8]
 8017586:	607a      	str	r2, [r7, #4]
 8017588:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801758a:	68fb      	ldr	r3, [r7, #12]
 801758c:	689b      	ldr	r3, [r3, #8]
 801758e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8017590:	697b      	ldr	r3, [r7, #20]
 8017592:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8017596:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8017598:	683b      	ldr	r3, [r7, #0]
 801759a:	021a      	lsls	r2, r3, #8
 801759c:	687b      	ldr	r3, [r7, #4]
 801759e:	431a      	orrs	r2, r3
 80175a0:	68bb      	ldr	r3, [r7, #8]
 80175a2:	4313      	orrs	r3, r2
 80175a4:	697a      	ldr	r2, [r7, #20]
 80175a6:	4313      	orrs	r3, r2
 80175a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80175aa:	68fb      	ldr	r3, [r7, #12]
 80175ac:	697a      	ldr	r2, [r7, #20]
 80175ae:	609a      	str	r2, [r3, #8]
}
 80175b0:	bf00      	nop
 80175b2:	371c      	adds	r7, #28
 80175b4:	46bd      	mov	sp, r7
 80175b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175ba:	4770      	bx	lr

080175bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80175bc:	b480      	push	{r7}
 80175be:	b087      	sub	sp, #28
 80175c0:	af00      	add	r7, sp, #0
 80175c2:	60f8      	str	r0, [r7, #12]
 80175c4:	60b9      	str	r1, [r7, #8]
 80175c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80175c8:	68bb      	ldr	r3, [r7, #8]
 80175ca:	f003 031f 	and.w	r3, r3, #31
 80175ce:	2201      	movs	r2, #1
 80175d0:	fa02 f303 	lsl.w	r3, r2, r3
 80175d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80175d6:	68fb      	ldr	r3, [r7, #12]
 80175d8:	6a1a      	ldr	r2, [r3, #32]
 80175da:	697b      	ldr	r3, [r7, #20]
 80175dc:	43db      	mvns	r3, r3
 80175de:	401a      	ands	r2, r3
 80175e0:	68fb      	ldr	r3, [r7, #12]
 80175e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80175e4:	68fb      	ldr	r3, [r7, #12]
 80175e6:	6a1a      	ldr	r2, [r3, #32]
 80175e8:	68bb      	ldr	r3, [r7, #8]
 80175ea:	f003 031f 	and.w	r3, r3, #31
 80175ee:	6879      	ldr	r1, [r7, #4]
 80175f0:	fa01 f303 	lsl.w	r3, r1, r3
 80175f4:	431a      	orrs	r2, r3
 80175f6:	68fb      	ldr	r3, [r7, #12]
 80175f8:	621a      	str	r2, [r3, #32]
}
 80175fa:	bf00      	nop
 80175fc:	371c      	adds	r7, #28
 80175fe:	46bd      	mov	sp, r7
 8017600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017604:	4770      	bx	lr
	...

08017608 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8017608:	b480      	push	{r7}
 801760a:	b085      	sub	sp, #20
 801760c:	af00      	add	r7, sp, #0
 801760e:	6078      	str	r0, [r7, #4]
 8017610:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8017612:	687b      	ldr	r3, [r7, #4]
 8017614:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8017618:	2b01      	cmp	r3, #1
 801761a:	d101      	bne.n	8017620 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801761c:	2302      	movs	r3, #2
 801761e:	e077      	b.n	8017710 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8017620:	687b      	ldr	r3, [r7, #4]
 8017622:	2201      	movs	r2, #1
 8017624:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8017628:	687b      	ldr	r3, [r7, #4]
 801762a:	2202      	movs	r2, #2
 801762c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8017630:	687b      	ldr	r3, [r7, #4]
 8017632:	681b      	ldr	r3, [r3, #0]
 8017634:	685b      	ldr	r3, [r3, #4]
 8017636:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8017638:	687b      	ldr	r3, [r7, #4]
 801763a:	681b      	ldr	r3, [r3, #0]
 801763c:	689b      	ldr	r3, [r3, #8]
 801763e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8017640:	687b      	ldr	r3, [r7, #4]
 8017642:	681b      	ldr	r3, [r3, #0]
 8017644:	4a35      	ldr	r2, [pc, #212]	@ (801771c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8017646:	4293      	cmp	r3, r2
 8017648:	d004      	beq.n	8017654 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 801764a:	687b      	ldr	r3, [r7, #4]
 801764c:	681b      	ldr	r3, [r3, #0]
 801764e:	4a34      	ldr	r2, [pc, #208]	@ (8017720 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8017650:	4293      	cmp	r3, r2
 8017652:	d108      	bne.n	8017666 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8017654:	68fb      	ldr	r3, [r7, #12]
 8017656:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 801765a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 801765c:	683b      	ldr	r3, [r7, #0]
 801765e:	685b      	ldr	r3, [r3, #4]
 8017660:	68fa      	ldr	r2, [r7, #12]
 8017662:	4313      	orrs	r3, r2
 8017664:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8017666:	68fb      	ldr	r3, [r7, #12]
 8017668:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801766c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801766e:	683b      	ldr	r3, [r7, #0]
 8017670:	681b      	ldr	r3, [r3, #0]
 8017672:	68fa      	ldr	r2, [r7, #12]
 8017674:	4313      	orrs	r3, r2
 8017676:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8017678:	687b      	ldr	r3, [r7, #4]
 801767a:	681b      	ldr	r3, [r3, #0]
 801767c:	68fa      	ldr	r2, [r7, #12]
 801767e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8017680:	687b      	ldr	r3, [r7, #4]
 8017682:	681b      	ldr	r3, [r3, #0]
 8017684:	4a25      	ldr	r2, [pc, #148]	@ (801771c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8017686:	4293      	cmp	r3, r2
 8017688:	d02c      	beq.n	80176e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801768a:	687b      	ldr	r3, [r7, #4]
 801768c:	681b      	ldr	r3, [r3, #0]
 801768e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8017692:	d027      	beq.n	80176e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017694:	687b      	ldr	r3, [r7, #4]
 8017696:	681b      	ldr	r3, [r3, #0]
 8017698:	4a22      	ldr	r2, [pc, #136]	@ (8017724 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 801769a:	4293      	cmp	r3, r2
 801769c:	d022      	beq.n	80176e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801769e:	687b      	ldr	r3, [r7, #4]
 80176a0:	681b      	ldr	r3, [r3, #0]
 80176a2:	4a21      	ldr	r2, [pc, #132]	@ (8017728 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80176a4:	4293      	cmp	r3, r2
 80176a6:	d01d      	beq.n	80176e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80176a8:	687b      	ldr	r3, [r7, #4]
 80176aa:	681b      	ldr	r3, [r3, #0]
 80176ac:	4a1f      	ldr	r2, [pc, #124]	@ (801772c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80176ae:	4293      	cmp	r3, r2
 80176b0:	d018      	beq.n	80176e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80176b2:	687b      	ldr	r3, [r7, #4]
 80176b4:	681b      	ldr	r3, [r3, #0]
 80176b6:	4a1a      	ldr	r2, [pc, #104]	@ (8017720 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80176b8:	4293      	cmp	r3, r2
 80176ba:	d013      	beq.n	80176e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80176bc:	687b      	ldr	r3, [r7, #4]
 80176be:	681b      	ldr	r3, [r3, #0]
 80176c0:	4a1b      	ldr	r2, [pc, #108]	@ (8017730 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80176c2:	4293      	cmp	r3, r2
 80176c4:	d00e      	beq.n	80176e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80176c6:	687b      	ldr	r3, [r7, #4]
 80176c8:	681b      	ldr	r3, [r3, #0]
 80176ca:	4a1a      	ldr	r2, [pc, #104]	@ (8017734 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 80176cc:	4293      	cmp	r3, r2
 80176ce:	d009      	beq.n	80176e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80176d0:	687b      	ldr	r3, [r7, #4]
 80176d2:	681b      	ldr	r3, [r3, #0]
 80176d4:	4a18      	ldr	r2, [pc, #96]	@ (8017738 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 80176d6:	4293      	cmp	r3, r2
 80176d8:	d004      	beq.n	80176e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80176da:	687b      	ldr	r3, [r7, #4]
 80176dc:	681b      	ldr	r3, [r3, #0]
 80176de:	4a17      	ldr	r2, [pc, #92]	@ (801773c <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 80176e0:	4293      	cmp	r3, r2
 80176e2:	d10c      	bne.n	80176fe <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80176e4:	68bb      	ldr	r3, [r7, #8]
 80176e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80176ea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80176ec:	683b      	ldr	r3, [r7, #0]
 80176ee:	689b      	ldr	r3, [r3, #8]
 80176f0:	68ba      	ldr	r2, [r7, #8]
 80176f2:	4313      	orrs	r3, r2
 80176f4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80176f6:	687b      	ldr	r3, [r7, #4]
 80176f8:	681b      	ldr	r3, [r3, #0]
 80176fa:	68ba      	ldr	r2, [r7, #8]
 80176fc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80176fe:	687b      	ldr	r3, [r7, #4]
 8017700:	2201      	movs	r2, #1
 8017702:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8017706:	687b      	ldr	r3, [r7, #4]
 8017708:	2200      	movs	r2, #0
 801770a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 801770e:	2300      	movs	r3, #0
}
 8017710:	4618      	mov	r0, r3
 8017712:	3714      	adds	r7, #20
 8017714:	46bd      	mov	sp, r7
 8017716:	f85d 7b04 	ldr.w	r7, [sp], #4
 801771a:	4770      	bx	lr
 801771c:	40010000 	.word	0x40010000
 8017720:	40010400 	.word	0x40010400
 8017724:	40000400 	.word	0x40000400
 8017728:	40000800 	.word	0x40000800
 801772c:	40000c00 	.word	0x40000c00
 8017730:	40001800 	.word	0x40001800
 8017734:	40014000 	.word	0x40014000
 8017738:	4000e000 	.word	0x4000e000
 801773c:	4000e400 	.word	0x4000e400

08017740 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8017740:	b480      	push	{r7}
 8017742:	b085      	sub	sp, #20
 8017744:	af00      	add	r7, sp, #0
 8017746:	6078      	str	r0, [r7, #4]
 8017748:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 801774a:	2300      	movs	r3, #0
 801774c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 801774e:	687b      	ldr	r3, [r7, #4]
 8017750:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8017754:	2b01      	cmp	r3, #1
 8017756:	d101      	bne.n	801775c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8017758:	2302      	movs	r3, #2
 801775a:	e073      	b.n	8017844 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 801775c:	687b      	ldr	r3, [r7, #4]
 801775e:	2201      	movs	r2, #1
 8017760:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8017764:	68fb      	ldr	r3, [r7, #12]
 8017766:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 801776a:	683b      	ldr	r3, [r7, #0]
 801776c:	68db      	ldr	r3, [r3, #12]
 801776e:	4313      	orrs	r3, r2
 8017770:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8017772:	68fb      	ldr	r3, [r7, #12]
 8017774:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8017778:	683b      	ldr	r3, [r7, #0]
 801777a:	689b      	ldr	r3, [r3, #8]
 801777c:	4313      	orrs	r3, r2
 801777e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8017780:	68fb      	ldr	r3, [r7, #12]
 8017782:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8017786:	683b      	ldr	r3, [r7, #0]
 8017788:	685b      	ldr	r3, [r3, #4]
 801778a:	4313      	orrs	r3, r2
 801778c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 801778e:	68fb      	ldr	r3, [r7, #12]
 8017790:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8017794:	683b      	ldr	r3, [r7, #0]
 8017796:	681b      	ldr	r3, [r3, #0]
 8017798:	4313      	orrs	r3, r2
 801779a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 801779c:	68fb      	ldr	r3, [r7, #12]
 801779e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80177a2:	683b      	ldr	r3, [r7, #0]
 80177a4:	691b      	ldr	r3, [r3, #16]
 80177a6:	4313      	orrs	r3, r2
 80177a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80177aa:	68fb      	ldr	r3, [r7, #12]
 80177ac:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80177b0:	683b      	ldr	r3, [r7, #0]
 80177b2:	695b      	ldr	r3, [r3, #20]
 80177b4:	4313      	orrs	r3, r2
 80177b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80177b8:	68fb      	ldr	r3, [r7, #12]
 80177ba:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80177be:	683b      	ldr	r3, [r7, #0]
 80177c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80177c2:	4313      	orrs	r3, r2
 80177c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80177c6:	68fb      	ldr	r3, [r7, #12]
 80177c8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80177cc:	683b      	ldr	r3, [r7, #0]
 80177ce:	699b      	ldr	r3, [r3, #24]
 80177d0:	041b      	lsls	r3, r3, #16
 80177d2:	4313      	orrs	r3, r2
 80177d4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80177d6:	68fb      	ldr	r3, [r7, #12]
 80177d8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80177dc:	683b      	ldr	r3, [r7, #0]
 80177de:	69db      	ldr	r3, [r3, #28]
 80177e0:	4313      	orrs	r3, r2
 80177e2:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80177e4:	687b      	ldr	r3, [r7, #4]
 80177e6:	681b      	ldr	r3, [r3, #0]
 80177e8:	4a19      	ldr	r2, [pc, #100]	@ (8017850 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80177ea:	4293      	cmp	r3, r2
 80177ec:	d004      	beq.n	80177f8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 80177ee:	687b      	ldr	r3, [r7, #4]
 80177f0:	681b      	ldr	r3, [r3, #0]
 80177f2:	4a18      	ldr	r2, [pc, #96]	@ (8017854 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80177f4:	4293      	cmp	r3, r2
 80177f6:	d11c      	bne.n	8017832 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80177f8:	68fb      	ldr	r3, [r7, #12]
 80177fa:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80177fe:	683b      	ldr	r3, [r7, #0]
 8017800:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017802:	051b      	lsls	r3, r3, #20
 8017804:	4313      	orrs	r3, r2
 8017806:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8017808:	68fb      	ldr	r3, [r7, #12]
 801780a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 801780e:	683b      	ldr	r3, [r7, #0]
 8017810:	6a1b      	ldr	r3, [r3, #32]
 8017812:	4313      	orrs	r3, r2
 8017814:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8017816:	68fb      	ldr	r3, [r7, #12]
 8017818:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 801781c:	683b      	ldr	r3, [r7, #0]
 801781e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017820:	4313      	orrs	r3, r2
 8017822:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8017824:	68fb      	ldr	r3, [r7, #12]
 8017826:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 801782a:	683b      	ldr	r3, [r7, #0]
 801782c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801782e:	4313      	orrs	r3, r2
 8017830:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8017832:	687b      	ldr	r3, [r7, #4]
 8017834:	681b      	ldr	r3, [r3, #0]
 8017836:	68fa      	ldr	r2, [r7, #12]
 8017838:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 801783a:	687b      	ldr	r3, [r7, #4]
 801783c:	2200      	movs	r2, #0
 801783e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8017842:	2300      	movs	r3, #0
}
 8017844:	4618      	mov	r0, r3
 8017846:	3714      	adds	r7, #20
 8017848:	46bd      	mov	sp, r7
 801784a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801784e:	4770      	bx	lr
 8017850:	40010000 	.word	0x40010000
 8017854:	40010400 	.word	0x40010400

08017858 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8017858:	b480      	push	{r7}
 801785a:	b083      	sub	sp, #12
 801785c:	af00      	add	r7, sp, #0
 801785e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8017860:	bf00      	nop
 8017862:	370c      	adds	r7, #12
 8017864:	46bd      	mov	sp, r7
 8017866:	f85d 7b04 	ldr.w	r7, [sp], #4
 801786a:	4770      	bx	lr

0801786c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801786c:	b480      	push	{r7}
 801786e:	b083      	sub	sp, #12
 8017870:	af00      	add	r7, sp, #0
 8017872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8017874:	bf00      	nop
 8017876:	370c      	adds	r7, #12
 8017878:	46bd      	mov	sp, r7
 801787a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801787e:	4770      	bx	lr

08017880 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8017880:	b480      	push	{r7}
 8017882:	b083      	sub	sp, #12
 8017884:	af00      	add	r7, sp, #0
 8017886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8017888:	bf00      	nop
 801788a:	370c      	adds	r7, #12
 801788c:	46bd      	mov	sp, r7
 801788e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017892:	4770      	bx	lr

08017894 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8017894:	b580      	push	{r7, lr}
 8017896:	b082      	sub	sp, #8
 8017898:	af00      	add	r7, sp, #0
 801789a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801789c:	687b      	ldr	r3, [r7, #4]
 801789e:	2b00      	cmp	r3, #0
 80178a0:	d101      	bne.n	80178a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80178a2:	2301      	movs	r3, #1
 80178a4:	e042      	b.n	801792c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80178a6:	687b      	ldr	r3, [r7, #4]
 80178a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80178ac:	2b00      	cmp	r3, #0
 80178ae:	d106      	bne.n	80178be <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80178b0:	687b      	ldr	r3, [r7, #4]
 80178b2:	2200      	movs	r2, #0
 80178b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80178b8:	6878      	ldr	r0, [r7, #4]
 80178ba:	f7f1 fa01 	bl	8008cc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80178be:	687b      	ldr	r3, [r7, #4]
 80178c0:	2224      	movs	r2, #36	@ 0x24
 80178c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80178c6:	687b      	ldr	r3, [r7, #4]
 80178c8:	681b      	ldr	r3, [r3, #0]
 80178ca:	681a      	ldr	r2, [r3, #0]
 80178cc:	687b      	ldr	r3, [r7, #4]
 80178ce:	681b      	ldr	r3, [r3, #0]
 80178d0:	f022 0201 	bic.w	r2, r2, #1
 80178d4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80178d6:	687b      	ldr	r3, [r7, #4]
 80178d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80178da:	2b00      	cmp	r3, #0
 80178dc:	d002      	beq.n	80178e4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80178de:	6878      	ldr	r0, [r7, #4]
 80178e0:	f001 fbdc 	bl	801909c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80178e4:	6878      	ldr	r0, [r7, #4]
 80178e6:	f000 fd6d 	bl	80183c4 <UART_SetConfig>
 80178ea:	4603      	mov	r3, r0
 80178ec:	2b01      	cmp	r3, #1
 80178ee:	d101      	bne.n	80178f4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80178f0:	2301      	movs	r3, #1
 80178f2:	e01b      	b.n	801792c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80178f4:	687b      	ldr	r3, [r7, #4]
 80178f6:	681b      	ldr	r3, [r3, #0]
 80178f8:	685a      	ldr	r2, [r3, #4]
 80178fa:	687b      	ldr	r3, [r7, #4]
 80178fc:	681b      	ldr	r3, [r3, #0]
 80178fe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8017902:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8017904:	687b      	ldr	r3, [r7, #4]
 8017906:	681b      	ldr	r3, [r3, #0]
 8017908:	689a      	ldr	r2, [r3, #8]
 801790a:	687b      	ldr	r3, [r7, #4]
 801790c:	681b      	ldr	r3, [r3, #0]
 801790e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8017912:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8017914:	687b      	ldr	r3, [r7, #4]
 8017916:	681b      	ldr	r3, [r3, #0]
 8017918:	681a      	ldr	r2, [r3, #0]
 801791a:	687b      	ldr	r3, [r7, #4]
 801791c:	681b      	ldr	r3, [r3, #0]
 801791e:	f042 0201 	orr.w	r2, r2, #1
 8017922:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8017924:	6878      	ldr	r0, [r7, #4]
 8017926:	f001 fc5b 	bl	80191e0 <UART_CheckIdleState>
 801792a:	4603      	mov	r3, r0
}
 801792c:	4618      	mov	r0, r3
 801792e:	3708      	adds	r7, #8
 8017930:	46bd      	mov	sp, r7
 8017932:	bd80      	pop	{r7, pc}

08017934 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8017934:	b580      	push	{r7, lr}
 8017936:	b08a      	sub	sp, #40	@ 0x28
 8017938:	af02      	add	r7, sp, #8
 801793a:	60f8      	str	r0, [r7, #12]
 801793c:	60b9      	str	r1, [r7, #8]
 801793e:	603b      	str	r3, [r7, #0]
 8017940:	4613      	mov	r3, r2
 8017942:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8017944:	68fb      	ldr	r3, [r7, #12]
 8017946:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801794a:	2b20      	cmp	r3, #32
 801794c:	d17b      	bne.n	8017a46 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 801794e:	68bb      	ldr	r3, [r7, #8]
 8017950:	2b00      	cmp	r3, #0
 8017952:	d002      	beq.n	801795a <HAL_UART_Transmit+0x26>
 8017954:	88fb      	ldrh	r3, [r7, #6]
 8017956:	2b00      	cmp	r3, #0
 8017958:	d101      	bne.n	801795e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 801795a:	2301      	movs	r3, #1
 801795c:	e074      	b.n	8017a48 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801795e:	68fb      	ldr	r3, [r7, #12]
 8017960:	2200      	movs	r2, #0
 8017962:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8017966:	68fb      	ldr	r3, [r7, #12]
 8017968:	2221      	movs	r2, #33	@ 0x21
 801796a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801796e:	f7f1 fac9 	bl	8008f04 <HAL_GetTick>
 8017972:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8017974:	68fb      	ldr	r3, [r7, #12]
 8017976:	88fa      	ldrh	r2, [r7, #6]
 8017978:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 801797c:	68fb      	ldr	r3, [r7, #12]
 801797e:	88fa      	ldrh	r2, [r7, #6]
 8017980:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017984:	68fb      	ldr	r3, [r7, #12]
 8017986:	689b      	ldr	r3, [r3, #8]
 8017988:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801798c:	d108      	bne.n	80179a0 <HAL_UART_Transmit+0x6c>
 801798e:	68fb      	ldr	r3, [r7, #12]
 8017990:	691b      	ldr	r3, [r3, #16]
 8017992:	2b00      	cmp	r3, #0
 8017994:	d104      	bne.n	80179a0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8017996:	2300      	movs	r3, #0
 8017998:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801799a:	68bb      	ldr	r3, [r7, #8]
 801799c:	61bb      	str	r3, [r7, #24]
 801799e:	e003      	b.n	80179a8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80179a0:	68bb      	ldr	r3, [r7, #8]
 80179a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80179a4:	2300      	movs	r3, #0
 80179a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80179a8:	e030      	b.n	8017a0c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80179aa:	683b      	ldr	r3, [r7, #0]
 80179ac:	9300      	str	r3, [sp, #0]
 80179ae:	697b      	ldr	r3, [r7, #20]
 80179b0:	2200      	movs	r2, #0
 80179b2:	2180      	movs	r1, #128	@ 0x80
 80179b4:	68f8      	ldr	r0, [r7, #12]
 80179b6:	f001 fcbd 	bl	8019334 <UART_WaitOnFlagUntilTimeout>
 80179ba:	4603      	mov	r3, r0
 80179bc:	2b00      	cmp	r3, #0
 80179be:	d005      	beq.n	80179cc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80179c0:	68fb      	ldr	r3, [r7, #12]
 80179c2:	2220      	movs	r2, #32
 80179c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80179c8:	2303      	movs	r3, #3
 80179ca:	e03d      	b.n	8017a48 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80179cc:	69fb      	ldr	r3, [r7, #28]
 80179ce:	2b00      	cmp	r3, #0
 80179d0:	d10b      	bne.n	80179ea <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80179d2:	69bb      	ldr	r3, [r7, #24]
 80179d4:	881b      	ldrh	r3, [r3, #0]
 80179d6:	461a      	mov	r2, r3
 80179d8:	68fb      	ldr	r3, [r7, #12]
 80179da:	681b      	ldr	r3, [r3, #0]
 80179dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80179e0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80179e2:	69bb      	ldr	r3, [r7, #24]
 80179e4:	3302      	adds	r3, #2
 80179e6:	61bb      	str	r3, [r7, #24]
 80179e8:	e007      	b.n	80179fa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80179ea:	69fb      	ldr	r3, [r7, #28]
 80179ec:	781a      	ldrb	r2, [r3, #0]
 80179ee:	68fb      	ldr	r3, [r7, #12]
 80179f0:	681b      	ldr	r3, [r3, #0]
 80179f2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80179f4:	69fb      	ldr	r3, [r7, #28]
 80179f6:	3301      	adds	r3, #1
 80179f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80179fa:	68fb      	ldr	r3, [r7, #12]
 80179fc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8017a00:	b29b      	uxth	r3, r3
 8017a02:	3b01      	subs	r3, #1
 8017a04:	b29a      	uxth	r2, r3
 8017a06:	68fb      	ldr	r3, [r7, #12]
 8017a08:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8017a0c:	68fb      	ldr	r3, [r7, #12]
 8017a0e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8017a12:	b29b      	uxth	r3, r3
 8017a14:	2b00      	cmp	r3, #0
 8017a16:	d1c8      	bne.n	80179aa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8017a18:	683b      	ldr	r3, [r7, #0]
 8017a1a:	9300      	str	r3, [sp, #0]
 8017a1c:	697b      	ldr	r3, [r7, #20]
 8017a1e:	2200      	movs	r2, #0
 8017a20:	2140      	movs	r1, #64	@ 0x40
 8017a22:	68f8      	ldr	r0, [r7, #12]
 8017a24:	f001 fc86 	bl	8019334 <UART_WaitOnFlagUntilTimeout>
 8017a28:	4603      	mov	r3, r0
 8017a2a:	2b00      	cmp	r3, #0
 8017a2c:	d005      	beq.n	8017a3a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8017a2e:	68fb      	ldr	r3, [r7, #12]
 8017a30:	2220      	movs	r2, #32
 8017a32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8017a36:	2303      	movs	r3, #3
 8017a38:	e006      	b.n	8017a48 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8017a3a:	68fb      	ldr	r3, [r7, #12]
 8017a3c:	2220      	movs	r2, #32
 8017a3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8017a42:	2300      	movs	r3, #0
 8017a44:	e000      	b.n	8017a48 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8017a46:	2302      	movs	r3, #2
  }
}
 8017a48:	4618      	mov	r0, r3
 8017a4a:	3720      	adds	r7, #32
 8017a4c:	46bd      	mov	sp, r7
 8017a4e:	bd80      	pop	{r7, pc}

08017a50 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8017a50:	b480      	push	{r7}
 8017a52:	b091      	sub	sp, #68	@ 0x44
 8017a54:	af00      	add	r7, sp, #0
 8017a56:	60f8      	str	r0, [r7, #12]
 8017a58:	60b9      	str	r1, [r7, #8]
 8017a5a:	4613      	mov	r3, r2
 8017a5c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8017a5e:	68fb      	ldr	r3, [r7, #12]
 8017a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017a64:	2b20      	cmp	r3, #32
 8017a66:	d178      	bne.n	8017b5a <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8017a68:	68bb      	ldr	r3, [r7, #8]
 8017a6a:	2b00      	cmp	r3, #0
 8017a6c:	d002      	beq.n	8017a74 <HAL_UART_Transmit_IT+0x24>
 8017a6e:	88fb      	ldrh	r3, [r7, #6]
 8017a70:	2b00      	cmp	r3, #0
 8017a72:	d101      	bne.n	8017a78 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8017a74:	2301      	movs	r3, #1
 8017a76:	e071      	b.n	8017b5c <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8017a78:	68fb      	ldr	r3, [r7, #12]
 8017a7a:	68ba      	ldr	r2, [r7, #8]
 8017a7c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8017a7e:	68fb      	ldr	r3, [r7, #12]
 8017a80:	88fa      	ldrh	r2, [r7, #6]
 8017a82:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8017a86:	68fb      	ldr	r3, [r7, #12]
 8017a88:	88fa      	ldrh	r2, [r7, #6]
 8017a8a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 8017a8e:	68fb      	ldr	r3, [r7, #12]
 8017a90:	2200      	movs	r2, #0
 8017a92:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017a94:	68fb      	ldr	r3, [r7, #12]
 8017a96:	2200      	movs	r2, #0
 8017a98:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8017a9c:	68fb      	ldr	r3, [r7, #12]
 8017a9e:	2221      	movs	r2, #33	@ 0x21
 8017aa0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8017aa4:	68fb      	ldr	r3, [r7, #12]
 8017aa6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8017aa8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8017aac:	d12a      	bne.n	8017b04 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017aae:	68fb      	ldr	r3, [r7, #12]
 8017ab0:	689b      	ldr	r3, [r3, #8]
 8017ab2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8017ab6:	d107      	bne.n	8017ac8 <HAL_UART_Transmit_IT+0x78>
 8017ab8:	68fb      	ldr	r3, [r7, #12]
 8017aba:	691b      	ldr	r3, [r3, #16]
 8017abc:	2b00      	cmp	r3, #0
 8017abe:	d103      	bne.n	8017ac8 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8017ac0:	68fb      	ldr	r3, [r7, #12]
 8017ac2:	4a29      	ldr	r2, [pc, #164]	@ (8017b68 <HAL_UART_Transmit_IT+0x118>)
 8017ac4:	679a      	str	r2, [r3, #120]	@ 0x78
 8017ac6:	e002      	b.n	8017ace <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8017ac8:	68fb      	ldr	r3, [r7, #12]
 8017aca:	4a28      	ldr	r2, [pc, #160]	@ (8017b6c <HAL_UART_Transmit_IT+0x11c>)
 8017acc:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8017ace:	68fb      	ldr	r3, [r7, #12]
 8017ad0:	681b      	ldr	r3, [r3, #0]
 8017ad2:	3308      	adds	r3, #8
 8017ad4:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017ad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017ad8:	e853 3f00 	ldrex	r3, [r3]
 8017adc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8017ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017ae0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8017ae4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8017ae6:	68fb      	ldr	r3, [r7, #12]
 8017ae8:	681b      	ldr	r3, [r3, #0]
 8017aea:	3308      	adds	r3, #8
 8017aec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8017aee:	637a      	str	r2, [r7, #52]	@ 0x34
 8017af0:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017af2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8017af4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8017af6:	e841 2300 	strex	r3, r2, [r1]
 8017afa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8017afc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017afe:	2b00      	cmp	r3, #0
 8017b00:	d1e5      	bne.n	8017ace <HAL_UART_Transmit_IT+0x7e>
 8017b02:	e028      	b.n	8017b56 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017b04:	68fb      	ldr	r3, [r7, #12]
 8017b06:	689b      	ldr	r3, [r3, #8]
 8017b08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8017b0c:	d107      	bne.n	8017b1e <HAL_UART_Transmit_IT+0xce>
 8017b0e:	68fb      	ldr	r3, [r7, #12]
 8017b10:	691b      	ldr	r3, [r3, #16]
 8017b12:	2b00      	cmp	r3, #0
 8017b14:	d103      	bne.n	8017b1e <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8017b16:	68fb      	ldr	r3, [r7, #12]
 8017b18:	4a15      	ldr	r2, [pc, #84]	@ (8017b70 <HAL_UART_Transmit_IT+0x120>)
 8017b1a:	679a      	str	r2, [r3, #120]	@ 0x78
 8017b1c:	e002      	b.n	8017b24 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8017b1e:	68fb      	ldr	r3, [r7, #12]
 8017b20:	4a14      	ldr	r2, [pc, #80]	@ (8017b74 <HAL_UART_Transmit_IT+0x124>)
 8017b22:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8017b24:	68fb      	ldr	r3, [r7, #12]
 8017b26:	681b      	ldr	r3, [r3, #0]
 8017b28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017b2a:	697b      	ldr	r3, [r7, #20]
 8017b2c:	e853 3f00 	ldrex	r3, [r3]
 8017b30:	613b      	str	r3, [r7, #16]
   return(result);
 8017b32:	693b      	ldr	r3, [r7, #16]
 8017b34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017b38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8017b3a:	68fb      	ldr	r3, [r7, #12]
 8017b3c:	681b      	ldr	r3, [r3, #0]
 8017b3e:	461a      	mov	r2, r3
 8017b40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017b42:	623b      	str	r3, [r7, #32]
 8017b44:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017b46:	69f9      	ldr	r1, [r7, #28]
 8017b48:	6a3a      	ldr	r2, [r7, #32]
 8017b4a:	e841 2300 	strex	r3, r2, [r1]
 8017b4e:	61bb      	str	r3, [r7, #24]
   return(result);
 8017b50:	69bb      	ldr	r3, [r7, #24]
 8017b52:	2b00      	cmp	r3, #0
 8017b54:	d1e6      	bne.n	8017b24 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8017b56:	2300      	movs	r3, #0
 8017b58:	e000      	b.n	8017b5c <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8017b5a:	2302      	movs	r3, #2
  }
}
 8017b5c:	4618      	mov	r0, r3
 8017b5e:	3744      	adds	r7, #68	@ 0x44
 8017b60:	46bd      	mov	sp, r7
 8017b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b66:	4770      	bx	lr
 8017b68:	080199a7 	.word	0x080199a7
 8017b6c:	080198c7 	.word	0x080198c7
 8017b70:	08019805 	.word	0x08019805
 8017b74:	0801974d 	.word	0x0801974d

08017b78 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8017b78:	b580      	push	{r7, lr}
 8017b7a:	b08a      	sub	sp, #40	@ 0x28
 8017b7c:	af00      	add	r7, sp, #0
 8017b7e:	60f8      	str	r0, [r7, #12]
 8017b80:	60b9      	str	r1, [r7, #8]
 8017b82:	4613      	mov	r3, r2
 8017b84:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8017b86:	68fb      	ldr	r3, [r7, #12]
 8017b88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8017b8c:	2b20      	cmp	r3, #32
 8017b8e:	d137      	bne.n	8017c00 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8017b90:	68bb      	ldr	r3, [r7, #8]
 8017b92:	2b00      	cmp	r3, #0
 8017b94:	d002      	beq.n	8017b9c <HAL_UART_Receive_IT+0x24>
 8017b96:	88fb      	ldrh	r3, [r7, #6]
 8017b98:	2b00      	cmp	r3, #0
 8017b9a:	d101      	bne.n	8017ba0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8017b9c:	2301      	movs	r3, #1
 8017b9e:	e030      	b.n	8017c02 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017ba0:	68fb      	ldr	r3, [r7, #12]
 8017ba2:	2200      	movs	r2, #0
 8017ba4:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8017ba6:	68fb      	ldr	r3, [r7, #12]
 8017ba8:	681b      	ldr	r3, [r3, #0]
 8017baa:	4a18      	ldr	r2, [pc, #96]	@ (8017c0c <HAL_UART_Receive_IT+0x94>)
 8017bac:	4293      	cmp	r3, r2
 8017bae:	d01f      	beq.n	8017bf0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8017bb0:	68fb      	ldr	r3, [r7, #12]
 8017bb2:	681b      	ldr	r3, [r3, #0]
 8017bb4:	685b      	ldr	r3, [r3, #4]
 8017bb6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8017bba:	2b00      	cmp	r3, #0
 8017bbc:	d018      	beq.n	8017bf0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8017bbe:	68fb      	ldr	r3, [r7, #12]
 8017bc0:	681b      	ldr	r3, [r3, #0]
 8017bc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017bc4:	697b      	ldr	r3, [r7, #20]
 8017bc6:	e853 3f00 	ldrex	r3, [r3]
 8017bca:	613b      	str	r3, [r7, #16]
   return(result);
 8017bcc:	693b      	ldr	r3, [r7, #16]
 8017bce:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8017bd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8017bd4:	68fb      	ldr	r3, [r7, #12]
 8017bd6:	681b      	ldr	r3, [r3, #0]
 8017bd8:	461a      	mov	r2, r3
 8017bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017bdc:	623b      	str	r3, [r7, #32]
 8017bde:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017be0:	69f9      	ldr	r1, [r7, #28]
 8017be2:	6a3a      	ldr	r2, [r7, #32]
 8017be4:	e841 2300 	strex	r3, r2, [r1]
 8017be8:	61bb      	str	r3, [r7, #24]
   return(result);
 8017bea:	69bb      	ldr	r3, [r7, #24]
 8017bec:	2b00      	cmp	r3, #0
 8017bee:	d1e6      	bne.n	8017bbe <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8017bf0:	88fb      	ldrh	r3, [r7, #6]
 8017bf2:	461a      	mov	r2, r3
 8017bf4:	68b9      	ldr	r1, [r7, #8]
 8017bf6:	68f8      	ldr	r0, [r7, #12]
 8017bf8:	f001 fc0a 	bl	8019410 <UART_Start_Receive_IT>
 8017bfc:	4603      	mov	r3, r0
 8017bfe:	e000      	b.n	8017c02 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8017c00:	2302      	movs	r3, #2
  }
}
 8017c02:	4618      	mov	r0, r3
 8017c04:	3728      	adds	r7, #40	@ 0x28
 8017c06:	46bd      	mov	sp, r7
 8017c08:	bd80      	pop	{r7, pc}
 8017c0a:	bf00      	nop
 8017c0c:	58000c00 	.word	0x58000c00

08017c10 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8017c10:	b580      	push	{r7, lr}
 8017c12:	b0ba      	sub	sp, #232	@ 0xe8
 8017c14:	af00      	add	r7, sp, #0
 8017c16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8017c18:	687b      	ldr	r3, [r7, #4]
 8017c1a:	681b      	ldr	r3, [r3, #0]
 8017c1c:	69db      	ldr	r3, [r3, #28]
 8017c1e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8017c22:	687b      	ldr	r3, [r7, #4]
 8017c24:	681b      	ldr	r3, [r3, #0]
 8017c26:	681b      	ldr	r3, [r3, #0]
 8017c28:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8017c2c:	687b      	ldr	r3, [r7, #4]
 8017c2e:	681b      	ldr	r3, [r3, #0]
 8017c30:	689b      	ldr	r3, [r3, #8]
 8017c32:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8017c36:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8017c3a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8017c3e:	4013      	ands	r3, r2
 8017c40:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8017c44:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8017c48:	2b00      	cmp	r3, #0
 8017c4a:	d11b      	bne.n	8017c84 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8017c4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017c50:	f003 0320 	and.w	r3, r3, #32
 8017c54:	2b00      	cmp	r3, #0
 8017c56:	d015      	beq.n	8017c84 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8017c58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8017c5c:	f003 0320 	and.w	r3, r3, #32
 8017c60:	2b00      	cmp	r3, #0
 8017c62:	d105      	bne.n	8017c70 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8017c64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8017c68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8017c6c:	2b00      	cmp	r3, #0
 8017c6e:	d009      	beq.n	8017c84 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8017c70:	687b      	ldr	r3, [r7, #4]
 8017c72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017c74:	2b00      	cmp	r3, #0
 8017c76:	f000 8377 	beq.w	8018368 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8017c7a:	687b      	ldr	r3, [r7, #4]
 8017c7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017c7e:	6878      	ldr	r0, [r7, #4]
 8017c80:	4798      	blx	r3
      }
      return;
 8017c82:	e371      	b.n	8018368 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8017c84:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8017c88:	2b00      	cmp	r3, #0
 8017c8a:	f000 8123 	beq.w	8017ed4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8017c8e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8017c92:	4b8d      	ldr	r3, [pc, #564]	@ (8017ec8 <HAL_UART_IRQHandler+0x2b8>)
 8017c94:	4013      	ands	r3, r2
 8017c96:	2b00      	cmp	r3, #0
 8017c98:	d106      	bne.n	8017ca8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8017c9a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8017c9e:	4b8b      	ldr	r3, [pc, #556]	@ (8017ecc <HAL_UART_IRQHandler+0x2bc>)
 8017ca0:	4013      	ands	r3, r2
 8017ca2:	2b00      	cmp	r3, #0
 8017ca4:	f000 8116 	beq.w	8017ed4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8017ca8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017cac:	f003 0301 	and.w	r3, r3, #1
 8017cb0:	2b00      	cmp	r3, #0
 8017cb2:	d011      	beq.n	8017cd8 <HAL_UART_IRQHandler+0xc8>
 8017cb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8017cb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8017cbc:	2b00      	cmp	r3, #0
 8017cbe:	d00b      	beq.n	8017cd8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8017cc0:	687b      	ldr	r3, [r7, #4]
 8017cc2:	681b      	ldr	r3, [r3, #0]
 8017cc4:	2201      	movs	r2, #1
 8017cc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8017cc8:	687b      	ldr	r3, [r7, #4]
 8017cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017cce:	f043 0201 	orr.w	r2, r3, #1
 8017cd2:	687b      	ldr	r3, [r7, #4]
 8017cd4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8017cd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017cdc:	f003 0302 	and.w	r3, r3, #2
 8017ce0:	2b00      	cmp	r3, #0
 8017ce2:	d011      	beq.n	8017d08 <HAL_UART_IRQHandler+0xf8>
 8017ce4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8017ce8:	f003 0301 	and.w	r3, r3, #1
 8017cec:	2b00      	cmp	r3, #0
 8017cee:	d00b      	beq.n	8017d08 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8017cf0:	687b      	ldr	r3, [r7, #4]
 8017cf2:	681b      	ldr	r3, [r3, #0]
 8017cf4:	2202      	movs	r2, #2
 8017cf6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8017cf8:	687b      	ldr	r3, [r7, #4]
 8017cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017cfe:	f043 0204 	orr.w	r2, r3, #4
 8017d02:	687b      	ldr	r3, [r7, #4]
 8017d04:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8017d08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017d0c:	f003 0304 	and.w	r3, r3, #4
 8017d10:	2b00      	cmp	r3, #0
 8017d12:	d011      	beq.n	8017d38 <HAL_UART_IRQHandler+0x128>
 8017d14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8017d18:	f003 0301 	and.w	r3, r3, #1
 8017d1c:	2b00      	cmp	r3, #0
 8017d1e:	d00b      	beq.n	8017d38 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8017d20:	687b      	ldr	r3, [r7, #4]
 8017d22:	681b      	ldr	r3, [r3, #0]
 8017d24:	2204      	movs	r2, #4
 8017d26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8017d28:	687b      	ldr	r3, [r7, #4]
 8017d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017d2e:	f043 0202 	orr.w	r2, r3, #2
 8017d32:	687b      	ldr	r3, [r7, #4]
 8017d34:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8017d38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017d3c:	f003 0308 	and.w	r3, r3, #8
 8017d40:	2b00      	cmp	r3, #0
 8017d42:	d017      	beq.n	8017d74 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8017d44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8017d48:	f003 0320 	and.w	r3, r3, #32
 8017d4c:	2b00      	cmp	r3, #0
 8017d4e:	d105      	bne.n	8017d5c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8017d50:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8017d54:	4b5c      	ldr	r3, [pc, #368]	@ (8017ec8 <HAL_UART_IRQHandler+0x2b8>)
 8017d56:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8017d58:	2b00      	cmp	r3, #0
 8017d5a:	d00b      	beq.n	8017d74 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8017d5c:	687b      	ldr	r3, [r7, #4]
 8017d5e:	681b      	ldr	r3, [r3, #0]
 8017d60:	2208      	movs	r2, #8
 8017d62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8017d64:	687b      	ldr	r3, [r7, #4]
 8017d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017d6a:	f043 0208 	orr.w	r2, r3, #8
 8017d6e:	687b      	ldr	r3, [r7, #4]
 8017d70:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8017d74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017d78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8017d7c:	2b00      	cmp	r3, #0
 8017d7e:	d012      	beq.n	8017da6 <HAL_UART_IRQHandler+0x196>
 8017d80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8017d84:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8017d88:	2b00      	cmp	r3, #0
 8017d8a:	d00c      	beq.n	8017da6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8017d8c:	687b      	ldr	r3, [r7, #4]
 8017d8e:	681b      	ldr	r3, [r3, #0]
 8017d90:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8017d94:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8017d96:	687b      	ldr	r3, [r7, #4]
 8017d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017d9c:	f043 0220 	orr.w	r2, r3, #32
 8017da0:	687b      	ldr	r3, [r7, #4]
 8017da2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8017da6:	687b      	ldr	r3, [r7, #4]
 8017da8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017dac:	2b00      	cmp	r3, #0
 8017dae:	f000 82dd 	beq.w	801836c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8017db2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017db6:	f003 0320 	and.w	r3, r3, #32
 8017dba:	2b00      	cmp	r3, #0
 8017dbc:	d013      	beq.n	8017de6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8017dbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8017dc2:	f003 0320 	and.w	r3, r3, #32
 8017dc6:	2b00      	cmp	r3, #0
 8017dc8:	d105      	bne.n	8017dd6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8017dca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8017dce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8017dd2:	2b00      	cmp	r3, #0
 8017dd4:	d007      	beq.n	8017de6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8017dd6:	687b      	ldr	r3, [r7, #4]
 8017dd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017dda:	2b00      	cmp	r3, #0
 8017ddc:	d003      	beq.n	8017de6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8017dde:	687b      	ldr	r3, [r7, #4]
 8017de0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017de2:	6878      	ldr	r0, [r7, #4]
 8017de4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8017de6:	687b      	ldr	r3, [r7, #4]
 8017de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017dec:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8017df0:	687b      	ldr	r3, [r7, #4]
 8017df2:	681b      	ldr	r3, [r3, #0]
 8017df4:	689b      	ldr	r3, [r3, #8]
 8017df6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8017dfa:	2b40      	cmp	r3, #64	@ 0x40
 8017dfc:	d005      	beq.n	8017e0a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8017dfe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8017e02:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8017e06:	2b00      	cmp	r3, #0
 8017e08:	d054      	beq.n	8017eb4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8017e0a:	6878      	ldr	r0, [r7, #4]
 8017e0c:	f001 fc22 	bl	8019654 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017e10:	687b      	ldr	r3, [r7, #4]
 8017e12:	681b      	ldr	r3, [r3, #0]
 8017e14:	689b      	ldr	r3, [r3, #8]
 8017e16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8017e1a:	2b40      	cmp	r3, #64	@ 0x40
 8017e1c:	d146      	bne.n	8017eac <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8017e1e:	687b      	ldr	r3, [r7, #4]
 8017e20:	681b      	ldr	r3, [r3, #0]
 8017e22:	3308      	adds	r3, #8
 8017e24:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017e28:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8017e2c:	e853 3f00 	ldrex	r3, [r3]
 8017e30:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8017e34:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8017e38:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8017e3c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8017e40:	687b      	ldr	r3, [r7, #4]
 8017e42:	681b      	ldr	r3, [r3, #0]
 8017e44:	3308      	adds	r3, #8
 8017e46:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8017e4a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8017e4e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017e52:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8017e56:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8017e5a:	e841 2300 	strex	r3, r2, [r1]
 8017e5e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8017e62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8017e66:	2b00      	cmp	r3, #0
 8017e68:	d1d9      	bne.n	8017e1e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8017e6a:	687b      	ldr	r3, [r7, #4]
 8017e6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017e70:	2b00      	cmp	r3, #0
 8017e72:	d017      	beq.n	8017ea4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8017e74:	687b      	ldr	r3, [r7, #4]
 8017e76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017e7a:	4a15      	ldr	r2, [pc, #84]	@ (8017ed0 <HAL_UART_IRQHandler+0x2c0>)
 8017e7c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8017e7e:	687b      	ldr	r3, [r7, #4]
 8017e80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017e84:	4618      	mov	r0, r3
 8017e86:	f7f4 fa75 	bl	800c374 <HAL_DMA_Abort_IT>
 8017e8a:	4603      	mov	r3, r0
 8017e8c:	2b00      	cmp	r3, #0
 8017e8e:	d019      	beq.n	8017ec4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8017e90:	687b      	ldr	r3, [r7, #4]
 8017e92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017e96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017e98:	687a      	ldr	r2, [r7, #4]
 8017e9a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8017e9e:	4610      	mov	r0, r2
 8017ea0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017ea2:	e00f      	b.n	8017ec4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8017ea4:	6878      	ldr	r0, [r7, #4]
 8017ea6:	f000 fa77 	bl	8018398 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017eaa:	e00b      	b.n	8017ec4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8017eac:	6878      	ldr	r0, [r7, #4]
 8017eae:	f000 fa73 	bl	8018398 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017eb2:	e007      	b.n	8017ec4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8017eb4:	6878      	ldr	r0, [r7, #4]
 8017eb6:	f000 fa6f 	bl	8018398 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017eba:	687b      	ldr	r3, [r7, #4]
 8017ebc:	2200      	movs	r2, #0
 8017ebe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8017ec2:	e253      	b.n	801836c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017ec4:	bf00      	nop
    return;
 8017ec6:	e251      	b.n	801836c <HAL_UART_IRQHandler+0x75c>
 8017ec8:	10000001 	.word	0x10000001
 8017ecc:	04000120 	.word	0x04000120
 8017ed0:	08019721 	.word	0x08019721

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017ed4:	687b      	ldr	r3, [r7, #4]
 8017ed6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017ed8:	2b01      	cmp	r3, #1
 8017eda:	f040 81e7 	bne.w	80182ac <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8017ede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017ee2:	f003 0310 	and.w	r3, r3, #16
 8017ee6:	2b00      	cmp	r3, #0
 8017ee8:	f000 81e0 	beq.w	80182ac <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8017eec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8017ef0:	f003 0310 	and.w	r3, r3, #16
 8017ef4:	2b00      	cmp	r3, #0
 8017ef6:	f000 81d9 	beq.w	80182ac <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8017efa:	687b      	ldr	r3, [r7, #4]
 8017efc:	681b      	ldr	r3, [r3, #0]
 8017efe:	2210      	movs	r2, #16
 8017f00:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017f02:	687b      	ldr	r3, [r7, #4]
 8017f04:	681b      	ldr	r3, [r3, #0]
 8017f06:	689b      	ldr	r3, [r3, #8]
 8017f08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8017f0c:	2b40      	cmp	r3, #64	@ 0x40
 8017f0e:	f040 8151 	bne.w	80181b4 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8017f12:	687b      	ldr	r3, [r7, #4]
 8017f14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017f18:	681b      	ldr	r3, [r3, #0]
 8017f1a:	4a96      	ldr	r2, [pc, #600]	@ (8018174 <HAL_UART_IRQHandler+0x564>)
 8017f1c:	4293      	cmp	r3, r2
 8017f1e:	d068      	beq.n	8017ff2 <HAL_UART_IRQHandler+0x3e2>
 8017f20:	687b      	ldr	r3, [r7, #4]
 8017f22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017f26:	681b      	ldr	r3, [r3, #0]
 8017f28:	4a93      	ldr	r2, [pc, #588]	@ (8018178 <HAL_UART_IRQHandler+0x568>)
 8017f2a:	4293      	cmp	r3, r2
 8017f2c:	d061      	beq.n	8017ff2 <HAL_UART_IRQHandler+0x3e2>
 8017f2e:	687b      	ldr	r3, [r7, #4]
 8017f30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017f34:	681b      	ldr	r3, [r3, #0]
 8017f36:	4a91      	ldr	r2, [pc, #580]	@ (801817c <HAL_UART_IRQHandler+0x56c>)
 8017f38:	4293      	cmp	r3, r2
 8017f3a:	d05a      	beq.n	8017ff2 <HAL_UART_IRQHandler+0x3e2>
 8017f3c:	687b      	ldr	r3, [r7, #4]
 8017f3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017f42:	681b      	ldr	r3, [r3, #0]
 8017f44:	4a8e      	ldr	r2, [pc, #568]	@ (8018180 <HAL_UART_IRQHandler+0x570>)
 8017f46:	4293      	cmp	r3, r2
 8017f48:	d053      	beq.n	8017ff2 <HAL_UART_IRQHandler+0x3e2>
 8017f4a:	687b      	ldr	r3, [r7, #4]
 8017f4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017f50:	681b      	ldr	r3, [r3, #0]
 8017f52:	4a8c      	ldr	r2, [pc, #560]	@ (8018184 <HAL_UART_IRQHandler+0x574>)
 8017f54:	4293      	cmp	r3, r2
 8017f56:	d04c      	beq.n	8017ff2 <HAL_UART_IRQHandler+0x3e2>
 8017f58:	687b      	ldr	r3, [r7, #4]
 8017f5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017f5e:	681b      	ldr	r3, [r3, #0]
 8017f60:	4a89      	ldr	r2, [pc, #548]	@ (8018188 <HAL_UART_IRQHandler+0x578>)
 8017f62:	4293      	cmp	r3, r2
 8017f64:	d045      	beq.n	8017ff2 <HAL_UART_IRQHandler+0x3e2>
 8017f66:	687b      	ldr	r3, [r7, #4]
 8017f68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017f6c:	681b      	ldr	r3, [r3, #0]
 8017f6e:	4a87      	ldr	r2, [pc, #540]	@ (801818c <HAL_UART_IRQHandler+0x57c>)
 8017f70:	4293      	cmp	r3, r2
 8017f72:	d03e      	beq.n	8017ff2 <HAL_UART_IRQHandler+0x3e2>
 8017f74:	687b      	ldr	r3, [r7, #4]
 8017f76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017f7a:	681b      	ldr	r3, [r3, #0]
 8017f7c:	4a84      	ldr	r2, [pc, #528]	@ (8018190 <HAL_UART_IRQHandler+0x580>)
 8017f7e:	4293      	cmp	r3, r2
 8017f80:	d037      	beq.n	8017ff2 <HAL_UART_IRQHandler+0x3e2>
 8017f82:	687b      	ldr	r3, [r7, #4]
 8017f84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017f88:	681b      	ldr	r3, [r3, #0]
 8017f8a:	4a82      	ldr	r2, [pc, #520]	@ (8018194 <HAL_UART_IRQHandler+0x584>)
 8017f8c:	4293      	cmp	r3, r2
 8017f8e:	d030      	beq.n	8017ff2 <HAL_UART_IRQHandler+0x3e2>
 8017f90:	687b      	ldr	r3, [r7, #4]
 8017f92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017f96:	681b      	ldr	r3, [r3, #0]
 8017f98:	4a7f      	ldr	r2, [pc, #508]	@ (8018198 <HAL_UART_IRQHandler+0x588>)
 8017f9a:	4293      	cmp	r3, r2
 8017f9c:	d029      	beq.n	8017ff2 <HAL_UART_IRQHandler+0x3e2>
 8017f9e:	687b      	ldr	r3, [r7, #4]
 8017fa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017fa4:	681b      	ldr	r3, [r3, #0]
 8017fa6:	4a7d      	ldr	r2, [pc, #500]	@ (801819c <HAL_UART_IRQHandler+0x58c>)
 8017fa8:	4293      	cmp	r3, r2
 8017faa:	d022      	beq.n	8017ff2 <HAL_UART_IRQHandler+0x3e2>
 8017fac:	687b      	ldr	r3, [r7, #4]
 8017fae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017fb2:	681b      	ldr	r3, [r3, #0]
 8017fb4:	4a7a      	ldr	r2, [pc, #488]	@ (80181a0 <HAL_UART_IRQHandler+0x590>)
 8017fb6:	4293      	cmp	r3, r2
 8017fb8:	d01b      	beq.n	8017ff2 <HAL_UART_IRQHandler+0x3e2>
 8017fba:	687b      	ldr	r3, [r7, #4]
 8017fbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017fc0:	681b      	ldr	r3, [r3, #0]
 8017fc2:	4a78      	ldr	r2, [pc, #480]	@ (80181a4 <HAL_UART_IRQHandler+0x594>)
 8017fc4:	4293      	cmp	r3, r2
 8017fc6:	d014      	beq.n	8017ff2 <HAL_UART_IRQHandler+0x3e2>
 8017fc8:	687b      	ldr	r3, [r7, #4]
 8017fca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017fce:	681b      	ldr	r3, [r3, #0]
 8017fd0:	4a75      	ldr	r2, [pc, #468]	@ (80181a8 <HAL_UART_IRQHandler+0x598>)
 8017fd2:	4293      	cmp	r3, r2
 8017fd4:	d00d      	beq.n	8017ff2 <HAL_UART_IRQHandler+0x3e2>
 8017fd6:	687b      	ldr	r3, [r7, #4]
 8017fd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017fdc:	681b      	ldr	r3, [r3, #0]
 8017fde:	4a73      	ldr	r2, [pc, #460]	@ (80181ac <HAL_UART_IRQHandler+0x59c>)
 8017fe0:	4293      	cmp	r3, r2
 8017fe2:	d006      	beq.n	8017ff2 <HAL_UART_IRQHandler+0x3e2>
 8017fe4:	687b      	ldr	r3, [r7, #4]
 8017fe6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017fea:	681b      	ldr	r3, [r3, #0]
 8017fec:	4a70      	ldr	r2, [pc, #448]	@ (80181b0 <HAL_UART_IRQHandler+0x5a0>)
 8017fee:	4293      	cmp	r3, r2
 8017ff0:	d106      	bne.n	8018000 <HAL_UART_IRQHandler+0x3f0>
 8017ff2:	687b      	ldr	r3, [r7, #4]
 8017ff4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017ff8:	681b      	ldr	r3, [r3, #0]
 8017ffa:	685b      	ldr	r3, [r3, #4]
 8017ffc:	b29b      	uxth	r3, r3
 8017ffe:	e005      	b.n	801800c <HAL_UART_IRQHandler+0x3fc>
 8018000:	687b      	ldr	r3, [r7, #4]
 8018002:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018006:	681b      	ldr	r3, [r3, #0]
 8018008:	685b      	ldr	r3, [r3, #4]
 801800a:	b29b      	uxth	r3, r3
 801800c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8018010:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8018014:	2b00      	cmp	r3, #0
 8018016:	f000 81ab 	beq.w	8018370 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801801a:	687b      	ldr	r3, [r7, #4]
 801801c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8018020:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8018024:	429a      	cmp	r2, r3
 8018026:	f080 81a3 	bcs.w	8018370 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801802a:	687b      	ldr	r3, [r7, #4]
 801802c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8018030:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8018034:	687b      	ldr	r3, [r7, #4]
 8018036:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801803a:	69db      	ldr	r3, [r3, #28]
 801803c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8018040:	f000 8087 	beq.w	8018152 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8018044:	687b      	ldr	r3, [r7, #4]
 8018046:	681b      	ldr	r3, [r3, #0]
 8018048:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801804c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8018050:	e853 3f00 	ldrex	r3, [r3]
 8018054:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8018058:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801805c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8018060:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8018064:	687b      	ldr	r3, [r7, #4]
 8018066:	681b      	ldr	r3, [r3, #0]
 8018068:	461a      	mov	r2, r3
 801806a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801806e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8018072:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018076:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 801807a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801807e:	e841 2300 	strex	r3, r2, [r1]
 8018082:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8018086:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801808a:	2b00      	cmp	r3, #0
 801808c:	d1da      	bne.n	8018044 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801808e:	687b      	ldr	r3, [r7, #4]
 8018090:	681b      	ldr	r3, [r3, #0]
 8018092:	3308      	adds	r3, #8
 8018094:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018096:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8018098:	e853 3f00 	ldrex	r3, [r3]
 801809c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 801809e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80180a0:	f023 0301 	bic.w	r3, r3, #1
 80180a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80180a8:	687b      	ldr	r3, [r7, #4]
 80180aa:	681b      	ldr	r3, [r3, #0]
 80180ac:	3308      	adds	r3, #8
 80180ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80180b2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80180b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80180b8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80180ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80180be:	e841 2300 	strex	r3, r2, [r1]
 80180c2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80180c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80180c6:	2b00      	cmp	r3, #0
 80180c8:	d1e1      	bne.n	801808e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80180ca:	687b      	ldr	r3, [r7, #4]
 80180cc:	681b      	ldr	r3, [r3, #0]
 80180ce:	3308      	adds	r3, #8
 80180d0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80180d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80180d4:	e853 3f00 	ldrex	r3, [r3]
 80180d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80180da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80180dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80180e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80180e4:	687b      	ldr	r3, [r7, #4]
 80180e6:	681b      	ldr	r3, [r3, #0]
 80180e8:	3308      	adds	r3, #8
 80180ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80180ee:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80180f0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80180f2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80180f4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80180f6:	e841 2300 	strex	r3, r2, [r1]
 80180fa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80180fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80180fe:	2b00      	cmp	r3, #0
 8018100:	d1e3      	bne.n	80180ca <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8018102:	687b      	ldr	r3, [r7, #4]
 8018104:	2220      	movs	r2, #32
 8018106:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801810a:	687b      	ldr	r3, [r7, #4]
 801810c:	2200      	movs	r2, #0
 801810e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8018110:	687b      	ldr	r3, [r7, #4]
 8018112:	681b      	ldr	r3, [r3, #0]
 8018114:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018116:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018118:	e853 3f00 	ldrex	r3, [r3]
 801811c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801811e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018120:	f023 0310 	bic.w	r3, r3, #16
 8018124:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8018128:	687b      	ldr	r3, [r7, #4]
 801812a:	681b      	ldr	r3, [r3, #0]
 801812c:	461a      	mov	r2, r3
 801812e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8018132:	65bb      	str	r3, [r7, #88]	@ 0x58
 8018134:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018136:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8018138:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801813a:	e841 2300 	strex	r3, r2, [r1]
 801813e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8018140:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018142:	2b00      	cmp	r3, #0
 8018144:	d1e4      	bne.n	8018110 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8018146:	687b      	ldr	r3, [r7, #4]
 8018148:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801814c:	4618      	mov	r0, r3
 801814e:	f7f3 fdf3 	bl	800bd38 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8018152:	687b      	ldr	r3, [r7, #4]
 8018154:	2202      	movs	r2, #2
 8018156:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8018158:	687b      	ldr	r3, [r7, #4]
 801815a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 801815e:	687b      	ldr	r3, [r7, #4]
 8018160:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8018164:	b29b      	uxth	r3, r3
 8018166:	1ad3      	subs	r3, r2, r3
 8018168:	b29b      	uxth	r3, r3
 801816a:	4619      	mov	r1, r3
 801816c:	6878      	ldr	r0, [r7, #4]
 801816e:	f000 f91d 	bl	80183ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8018172:	e0fd      	b.n	8018370 <HAL_UART_IRQHandler+0x760>
 8018174:	40020010 	.word	0x40020010
 8018178:	40020028 	.word	0x40020028
 801817c:	40020040 	.word	0x40020040
 8018180:	40020058 	.word	0x40020058
 8018184:	40020070 	.word	0x40020070
 8018188:	40020088 	.word	0x40020088
 801818c:	400200a0 	.word	0x400200a0
 8018190:	400200b8 	.word	0x400200b8
 8018194:	40020410 	.word	0x40020410
 8018198:	40020428 	.word	0x40020428
 801819c:	40020440 	.word	0x40020440
 80181a0:	40020458 	.word	0x40020458
 80181a4:	40020470 	.word	0x40020470
 80181a8:	40020488 	.word	0x40020488
 80181ac:	400204a0 	.word	0x400204a0
 80181b0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80181b4:	687b      	ldr	r3, [r7, #4]
 80181b6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80181ba:	687b      	ldr	r3, [r7, #4]
 80181bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80181c0:	b29b      	uxth	r3, r3
 80181c2:	1ad3      	subs	r3, r2, r3
 80181c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80181c8:	687b      	ldr	r3, [r7, #4]
 80181ca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80181ce:	b29b      	uxth	r3, r3
 80181d0:	2b00      	cmp	r3, #0
 80181d2:	f000 80cf 	beq.w	8018374 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 80181d6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80181da:	2b00      	cmp	r3, #0
 80181dc:	f000 80ca 	beq.w	8018374 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80181e0:	687b      	ldr	r3, [r7, #4]
 80181e2:	681b      	ldr	r3, [r3, #0]
 80181e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80181e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80181e8:	e853 3f00 	ldrex	r3, [r3]
 80181ec:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80181ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80181f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80181f4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80181f8:	687b      	ldr	r3, [r7, #4]
 80181fa:	681b      	ldr	r3, [r3, #0]
 80181fc:	461a      	mov	r2, r3
 80181fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8018202:	647b      	str	r3, [r7, #68]	@ 0x44
 8018204:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018206:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8018208:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801820a:	e841 2300 	strex	r3, r2, [r1]
 801820e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8018210:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018212:	2b00      	cmp	r3, #0
 8018214:	d1e4      	bne.n	80181e0 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8018216:	687b      	ldr	r3, [r7, #4]
 8018218:	681b      	ldr	r3, [r3, #0]
 801821a:	3308      	adds	r3, #8
 801821c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801821e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018220:	e853 3f00 	ldrex	r3, [r3]
 8018224:	623b      	str	r3, [r7, #32]
   return(result);
 8018226:	6a3a      	ldr	r2, [r7, #32]
 8018228:	4b55      	ldr	r3, [pc, #340]	@ (8018380 <HAL_UART_IRQHandler+0x770>)
 801822a:	4013      	ands	r3, r2
 801822c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8018230:	687b      	ldr	r3, [r7, #4]
 8018232:	681b      	ldr	r3, [r3, #0]
 8018234:	3308      	adds	r3, #8
 8018236:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 801823a:	633a      	str	r2, [r7, #48]	@ 0x30
 801823c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801823e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8018240:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018242:	e841 2300 	strex	r3, r2, [r1]
 8018246:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8018248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801824a:	2b00      	cmp	r3, #0
 801824c:	d1e3      	bne.n	8018216 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801824e:	687b      	ldr	r3, [r7, #4]
 8018250:	2220      	movs	r2, #32
 8018252:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018256:	687b      	ldr	r3, [r7, #4]
 8018258:	2200      	movs	r2, #0
 801825a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801825c:	687b      	ldr	r3, [r7, #4]
 801825e:	2200      	movs	r2, #0
 8018260:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8018262:	687b      	ldr	r3, [r7, #4]
 8018264:	681b      	ldr	r3, [r3, #0]
 8018266:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018268:	693b      	ldr	r3, [r7, #16]
 801826a:	e853 3f00 	ldrex	r3, [r3]
 801826e:	60fb      	str	r3, [r7, #12]
   return(result);
 8018270:	68fb      	ldr	r3, [r7, #12]
 8018272:	f023 0310 	bic.w	r3, r3, #16
 8018276:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 801827a:	687b      	ldr	r3, [r7, #4]
 801827c:	681b      	ldr	r3, [r3, #0]
 801827e:	461a      	mov	r2, r3
 8018280:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8018284:	61fb      	str	r3, [r7, #28]
 8018286:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018288:	69b9      	ldr	r1, [r7, #24]
 801828a:	69fa      	ldr	r2, [r7, #28]
 801828c:	e841 2300 	strex	r3, r2, [r1]
 8018290:	617b      	str	r3, [r7, #20]
   return(result);
 8018292:	697b      	ldr	r3, [r7, #20]
 8018294:	2b00      	cmp	r3, #0
 8018296:	d1e4      	bne.n	8018262 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8018298:	687b      	ldr	r3, [r7, #4]
 801829a:	2202      	movs	r2, #2
 801829c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 801829e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80182a2:	4619      	mov	r1, r3
 80182a4:	6878      	ldr	r0, [r7, #4]
 80182a6:	f000 f881 	bl	80183ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80182aa:	e063      	b.n	8018374 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80182ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80182b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80182b4:	2b00      	cmp	r3, #0
 80182b6:	d00e      	beq.n	80182d6 <HAL_UART_IRQHandler+0x6c6>
 80182b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80182bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80182c0:	2b00      	cmp	r3, #0
 80182c2:	d008      	beq.n	80182d6 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80182c4:	687b      	ldr	r3, [r7, #4]
 80182c6:	681b      	ldr	r3, [r3, #0]
 80182c8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80182cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80182ce:	6878      	ldr	r0, [r7, #4]
 80182d0:	f002 f926 	bl	801a520 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80182d4:	e051      	b.n	801837a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80182d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80182da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80182de:	2b00      	cmp	r3, #0
 80182e0:	d014      	beq.n	801830c <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80182e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80182e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80182ea:	2b00      	cmp	r3, #0
 80182ec:	d105      	bne.n	80182fa <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80182ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80182f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80182f6:	2b00      	cmp	r3, #0
 80182f8:	d008      	beq.n	801830c <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 80182fa:	687b      	ldr	r3, [r7, #4]
 80182fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80182fe:	2b00      	cmp	r3, #0
 8018300:	d03a      	beq.n	8018378 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8018302:	687b      	ldr	r3, [r7, #4]
 8018304:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8018306:	6878      	ldr	r0, [r7, #4]
 8018308:	4798      	blx	r3
    }
    return;
 801830a:	e035      	b.n	8018378 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801830c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018310:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8018314:	2b00      	cmp	r3, #0
 8018316:	d009      	beq.n	801832c <HAL_UART_IRQHandler+0x71c>
 8018318:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801831c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8018320:	2b00      	cmp	r3, #0
 8018322:	d003      	beq.n	801832c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8018324:	6878      	ldr	r0, [r7, #4]
 8018326:	f001 fbb3 	bl	8019a90 <UART_EndTransmit_IT>
    return;
 801832a:	e026      	b.n	801837a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 801832c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018330:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8018334:	2b00      	cmp	r3, #0
 8018336:	d009      	beq.n	801834c <HAL_UART_IRQHandler+0x73c>
 8018338:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801833c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8018340:	2b00      	cmp	r3, #0
 8018342:	d003      	beq.n	801834c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8018344:	6878      	ldr	r0, [r7, #4]
 8018346:	f002 f8ff 	bl	801a548 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801834a:	e016      	b.n	801837a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 801834c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018350:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8018354:	2b00      	cmp	r3, #0
 8018356:	d010      	beq.n	801837a <HAL_UART_IRQHandler+0x76a>
 8018358:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801835c:	2b00      	cmp	r3, #0
 801835e:	da0c      	bge.n	801837a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8018360:	6878      	ldr	r0, [r7, #4]
 8018362:	f002 f8e7 	bl	801a534 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8018366:	e008      	b.n	801837a <HAL_UART_IRQHandler+0x76a>
      return;
 8018368:	bf00      	nop
 801836a:	e006      	b.n	801837a <HAL_UART_IRQHandler+0x76a>
    return;
 801836c:	bf00      	nop
 801836e:	e004      	b.n	801837a <HAL_UART_IRQHandler+0x76a>
      return;
 8018370:	bf00      	nop
 8018372:	e002      	b.n	801837a <HAL_UART_IRQHandler+0x76a>
      return;
 8018374:	bf00      	nop
 8018376:	e000      	b.n	801837a <HAL_UART_IRQHandler+0x76a>
    return;
 8018378:	bf00      	nop
  }
}
 801837a:	37e8      	adds	r7, #232	@ 0xe8
 801837c:	46bd      	mov	sp, r7
 801837e:	bd80      	pop	{r7, pc}
 8018380:	effffffe 	.word	0xeffffffe

08018384 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8018384:	b480      	push	{r7}
 8018386:	b083      	sub	sp, #12
 8018388:	af00      	add	r7, sp, #0
 801838a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 801838c:	bf00      	nop
 801838e:	370c      	adds	r7, #12
 8018390:	46bd      	mov	sp, r7
 8018392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018396:	4770      	bx	lr

08018398 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8018398:	b480      	push	{r7}
 801839a:	b083      	sub	sp, #12
 801839c:	af00      	add	r7, sp, #0
 801839e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80183a0:	bf00      	nop
 80183a2:	370c      	adds	r7, #12
 80183a4:	46bd      	mov	sp, r7
 80183a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183aa:	4770      	bx	lr

080183ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80183ac:	b480      	push	{r7}
 80183ae:	b083      	sub	sp, #12
 80183b0:	af00      	add	r7, sp, #0
 80183b2:	6078      	str	r0, [r7, #4]
 80183b4:	460b      	mov	r3, r1
 80183b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80183b8:	bf00      	nop
 80183ba:	370c      	adds	r7, #12
 80183bc:	46bd      	mov	sp, r7
 80183be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183c2:	4770      	bx	lr

080183c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80183c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80183c8:	b092      	sub	sp, #72	@ 0x48
 80183ca:	af00      	add	r7, sp, #0
 80183cc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80183ce:	2300      	movs	r3, #0
 80183d0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80183d4:	697b      	ldr	r3, [r7, #20]
 80183d6:	689a      	ldr	r2, [r3, #8]
 80183d8:	697b      	ldr	r3, [r7, #20]
 80183da:	691b      	ldr	r3, [r3, #16]
 80183dc:	431a      	orrs	r2, r3
 80183de:	697b      	ldr	r3, [r7, #20]
 80183e0:	695b      	ldr	r3, [r3, #20]
 80183e2:	431a      	orrs	r2, r3
 80183e4:	697b      	ldr	r3, [r7, #20]
 80183e6:	69db      	ldr	r3, [r3, #28]
 80183e8:	4313      	orrs	r3, r2
 80183ea:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80183ec:	697b      	ldr	r3, [r7, #20]
 80183ee:	681b      	ldr	r3, [r3, #0]
 80183f0:	681a      	ldr	r2, [r3, #0]
 80183f2:	4bbe      	ldr	r3, [pc, #760]	@ (80186ec <UART_SetConfig+0x328>)
 80183f4:	4013      	ands	r3, r2
 80183f6:	697a      	ldr	r2, [r7, #20]
 80183f8:	6812      	ldr	r2, [r2, #0]
 80183fa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80183fc:	430b      	orrs	r3, r1
 80183fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8018400:	697b      	ldr	r3, [r7, #20]
 8018402:	681b      	ldr	r3, [r3, #0]
 8018404:	685b      	ldr	r3, [r3, #4]
 8018406:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 801840a:	697b      	ldr	r3, [r7, #20]
 801840c:	68da      	ldr	r2, [r3, #12]
 801840e:	697b      	ldr	r3, [r7, #20]
 8018410:	681b      	ldr	r3, [r3, #0]
 8018412:	430a      	orrs	r2, r1
 8018414:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8018416:	697b      	ldr	r3, [r7, #20]
 8018418:	699b      	ldr	r3, [r3, #24]
 801841a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801841c:	697b      	ldr	r3, [r7, #20]
 801841e:	681b      	ldr	r3, [r3, #0]
 8018420:	4ab3      	ldr	r2, [pc, #716]	@ (80186f0 <UART_SetConfig+0x32c>)
 8018422:	4293      	cmp	r3, r2
 8018424:	d004      	beq.n	8018430 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8018426:	697b      	ldr	r3, [r7, #20]
 8018428:	6a1b      	ldr	r3, [r3, #32]
 801842a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801842c:	4313      	orrs	r3, r2
 801842e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8018430:	697b      	ldr	r3, [r7, #20]
 8018432:	681b      	ldr	r3, [r3, #0]
 8018434:	689a      	ldr	r2, [r3, #8]
 8018436:	4baf      	ldr	r3, [pc, #700]	@ (80186f4 <UART_SetConfig+0x330>)
 8018438:	4013      	ands	r3, r2
 801843a:	697a      	ldr	r2, [r7, #20]
 801843c:	6812      	ldr	r2, [r2, #0]
 801843e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8018440:	430b      	orrs	r3, r1
 8018442:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8018444:	697b      	ldr	r3, [r7, #20]
 8018446:	681b      	ldr	r3, [r3, #0]
 8018448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801844a:	f023 010f 	bic.w	r1, r3, #15
 801844e:	697b      	ldr	r3, [r7, #20]
 8018450:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018452:	697b      	ldr	r3, [r7, #20]
 8018454:	681b      	ldr	r3, [r3, #0]
 8018456:	430a      	orrs	r2, r1
 8018458:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801845a:	697b      	ldr	r3, [r7, #20]
 801845c:	681b      	ldr	r3, [r3, #0]
 801845e:	4aa6      	ldr	r2, [pc, #664]	@ (80186f8 <UART_SetConfig+0x334>)
 8018460:	4293      	cmp	r3, r2
 8018462:	d177      	bne.n	8018554 <UART_SetConfig+0x190>
 8018464:	4ba5      	ldr	r3, [pc, #660]	@ (80186fc <UART_SetConfig+0x338>)
 8018466:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018468:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801846c:	2b28      	cmp	r3, #40	@ 0x28
 801846e:	d86d      	bhi.n	801854c <UART_SetConfig+0x188>
 8018470:	a201      	add	r2, pc, #4	@ (adr r2, 8018478 <UART_SetConfig+0xb4>)
 8018472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018476:	bf00      	nop
 8018478:	0801851d 	.word	0x0801851d
 801847c:	0801854d 	.word	0x0801854d
 8018480:	0801854d 	.word	0x0801854d
 8018484:	0801854d 	.word	0x0801854d
 8018488:	0801854d 	.word	0x0801854d
 801848c:	0801854d 	.word	0x0801854d
 8018490:	0801854d 	.word	0x0801854d
 8018494:	0801854d 	.word	0x0801854d
 8018498:	08018525 	.word	0x08018525
 801849c:	0801854d 	.word	0x0801854d
 80184a0:	0801854d 	.word	0x0801854d
 80184a4:	0801854d 	.word	0x0801854d
 80184a8:	0801854d 	.word	0x0801854d
 80184ac:	0801854d 	.word	0x0801854d
 80184b0:	0801854d 	.word	0x0801854d
 80184b4:	0801854d 	.word	0x0801854d
 80184b8:	0801852d 	.word	0x0801852d
 80184bc:	0801854d 	.word	0x0801854d
 80184c0:	0801854d 	.word	0x0801854d
 80184c4:	0801854d 	.word	0x0801854d
 80184c8:	0801854d 	.word	0x0801854d
 80184cc:	0801854d 	.word	0x0801854d
 80184d0:	0801854d 	.word	0x0801854d
 80184d4:	0801854d 	.word	0x0801854d
 80184d8:	08018535 	.word	0x08018535
 80184dc:	0801854d 	.word	0x0801854d
 80184e0:	0801854d 	.word	0x0801854d
 80184e4:	0801854d 	.word	0x0801854d
 80184e8:	0801854d 	.word	0x0801854d
 80184ec:	0801854d 	.word	0x0801854d
 80184f0:	0801854d 	.word	0x0801854d
 80184f4:	0801854d 	.word	0x0801854d
 80184f8:	0801853d 	.word	0x0801853d
 80184fc:	0801854d 	.word	0x0801854d
 8018500:	0801854d 	.word	0x0801854d
 8018504:	0801854d 	.word	0x0801854d
 8018508:	0801854d 	.word	0x0801854d
 801850c:	0801854d 	.word	0x0801854d
 8018510:	0801854d 	.word	0x0801854d
 8018514:	0801854d 	.word	0x0801854d
 8018518:	08018545 	.word	0x08018545
 801851c:	2301      	movs	r3, #1
 801851e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018522:	e326      	b.n	8018b72 <UART_SetConfig+0x7ae>
 8018524:	2304      	movs	r3, #4
 8018526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801852a:	e322      	b.n	8018b72 <UART_SetConfig+0x7ae>
 801852c:	2308      	movs	r3, #8
 801852e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018532:	e31e      	b.n	8018b72 <UART_SetConfig+0x7ae>
 8018534:	2310      	movs	r3, #16
 8018536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801853a:	e31a      	b.n	8018b72 <UART_SetConfig+0x7ae>
 801853c:	2320      	movs	r3, #32
 801853e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018542:	e316      	b.n	8018b72 <UART_SetConfig+0x7ae>
 8018544:	2340      	movs	r3, #64	@ 0x40
 8018546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801854a:	e312      	b.n	8018b72 <UART_SetConfig+0x7ae>
 801854c:	2380      	movs	r3, #128	@ 0x80
 801854e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018552:	e30e      	b.n	8018b72 <UART_SetConfig+0x7ae>
 8018554:	697b      	ldr	r3, [r7, #20]
 8018556:	681b      	ldr	r3, [r3, #0]
 8018558:	4a69      	ldr	r2, [pc, #420]	@ (8018700 <UART_SetConfig+0x33c>)
 801855a:	4293      	cmp	r3, r2
 801855c:	d130      	bne.n	80185c0 <UART_SetConfig+0x1fc>
 801855e:	4b67      	ldr	r3, [pc, #412]	@ (80186fc <UART_SetConfig+0x338>)
 8018560:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018562:	f003 0307 	and.w	r3, r3, #7
 8018566:	2b05      	cmp	r3, #5
 8018568:	d826      	bhi.n	80185b8 <UART_SetConfig+0x1f4>
 801856a:	a201      	add	r2, pc, #4	@ (adr r2, 8018570 <UART_SetConfig+0x1ac>)
 801856c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018570:	08018589 	.word	0x08018589
 8018574:	08018591 	.word	0x08018591
 8018578:	08018599 	.word	0x08018599
 801857c:	080185a1 	.word	0x080185a1
 8018580:	080185a9 	.word	0x080185a9
 8018584:	080185b1 	.word	0x080185b1
 8018588:	2300      	movs	r3, #0
 801858a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801858e:	e2f0      	b.n	8018b72 <UART_SetConfig+0x7ae>
 8018590:	2304      	movs	r3, #4
 8018592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018596:	e2ec      	b.n	8018b72 <UART_SetConfig+0x7ae>
 8018598:	2308      	movs	r3, #8
 801859a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801859e:	e2e8      	b.n	8018b72 <UART_SetConfig+0x7ae>
 80185a0:	2310      	movs	r3, #16
 80185a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80185a6:	e2e4      	b.n	8018b72 <UART_SetConfig+0x7ae>
 80185a8:	2320      	movs	r3, #32
 80185aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80185ae:	e2e0      	b.n	8018b72 <UART_SetConfig+0x7ae>
 80185b0:	2340      	movs	r3, #64	@ 0x40
 80185b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80185b6:	e2dc      	b.n	8018b72 <UART_SetConfig+0x7ae>
 80185b8:	2380      	movs	r3, #128	@ 0x80
 80185ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80185be:	e2d8      	b.n	8018b72 <UART_SetConfig+0x7ae>
 80185c0:	697b      	ldr	r3, [r7, #20]
 80185c2:	681b      	ldr	r3, [r3, #0]
 80185c4:	4a4f      	ldr	r2, [pc, #316]	@ (8018704 <UART_SetConfig+0x340>)
 80185c6:	4293      	cmp	r3, r2
 80185c8:	d130      	bne.n	801862c <UART_SetConfig+0x268>
 80185ca:	4b4c      	ldr	r3, [pc, #304]	@ (80186fc <UART_SetConfig+0x338>)
 80185cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80185ce:	f003 0307 	and.w	r3, r3, #7
 80185d2:	2b05      	cmp	r3, #5
 80185d4:	d826      	bhi.n	8018624 <UART_SetConfig+0x260>
 80185d6:	a201      	add	r2, pc, #4	@ (adr r2, 80185dc <UART_SetConfig+0x218>)
 80185d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80185dc:	080185f5 	.word	0x080185f5
 80185e0:	080185fd 	.word	0x080185fd
 80185e4:	08018605 	.word	0x08018605
 80185e8:	0801860d 	.word	0x0801860d
 80185ec:	08018615 	.word	0x08018615
 80185f0:	0801861d 	.word	0x0801861d
 80185f4:	2300      	movs	r3, #0
 80185f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80185fa:	e2ba      	b.n	8018b72 <UART_SetConfig+0x7ae>
 80185fc:	2304      	movs	r3, #4
 80185fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018602:	e2b6      	b.n	8018b72 <UART_SetConfig+0x7ae>
 8018604:	2308      	movs	r3, #8
 8018606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801860a:	e2b2      	b.n	8018b72 <UART_SetConfig+0x7ae>
 801860c:	2310      	movs	r3, #16
 801860e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018612:	e2ae      	b.n	8018b72 <UART_SetConfig+0x7ae>
 8018614:	2320      	movs	r3, #32
 8018616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801861a:	e2aa      	b.n	8018b72 <UART_SetConfig+0x7ae>
 801861c:	2340      	movs	r3, #64	@ 0x40
 801861e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018622:	e2a6      	b.n	8018b72 <UART_SetConfig+0x7ae>
 8018624:	2380      	movs	r3, #128	@ 0x80
 8018626:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801862a:	e2a2      	b.n	8018b72 <UART_SetConfig+0x7ae>
 801862c:	697b      	ldr	r3, [r7, #20]
 801862e:	681b      	ldr	r3, [r3, #0]
 8018630:	4a35      	ldr	r2, [pc, #212]	@ (8018708 <UART_SetConfig+0x344>)
 8018632:	4293      	cmp	r3, r2
 8018634:	d130      	bne.n	8018698 <UART_SetConfig+0x2d4>
 8018636:	4b31      	ldr	r3, [pc, #196]	@ (80186fc <UART_SetConfig+0x338>)
 8018638:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801863a:	f003 0307 	and.w	r3, r3, #7
 801863e:	2b05      	cmp	r3, #5
 8018640:	d826      	bhi.n	8018690 <UART_SetConfig+0x2cc>
 8018642:	a201      	add	r2, pc, #4	@ (adr r2, 8018648 <UART_SetConfig+0x284>)
 8018644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018648:	08018661 	.word	0x08018661
 801864c:	08018669 	.word	0x08018669
 8018650:	08018671 	.word	0x08018671
 8018654:	08018679 	.word	0x08018679
 8018658:	08018681 	.word	0x08018681
 801865c:	08018689 	.word	0x08018689
 8018660:	2300      	movs	r3, #0
 8018662:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018666:	e284      	b.n	8018b72 <UART_SetConfig+0x7ae>
 8018668:	2304      	movs	r3, #4
 801866a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801866e:	e280      	b.n	8018b72 <UART_SetConfig+0x7ae>
 8018670:	2308      	movs	r3, #8
 8018672:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018676:	e27c      	b.n	8018b72 <UART_SetConfig+0x7ae>
 8018678:	2310      	movs	r3, #16
 801867a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801867e:	e278      	b.n	8018b72 <UART_SetConfig+0x7ae>
 8018680:	2320      	movs	r3, #32
 8018682:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018686:	e274      	b.n	8018b72 <UART_SetConfig+0x7ae>
 8018688:	2340      	movs	r3, #64	@ 0x40
 801868a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801868e:	e270      	b.n	8018b72 <UART_SetConfig+0x7ae>
 8018690:	2380      	movs	r3, #128	@ 0x80
 8018692:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018696:	e26c      	b.n	8018b72 <UART_SetConfig+0x7ae>
 8018698:	697b      	ldr	r3, [r7, #20]
 801869a:	681b      	ldr	r3, [r3, #0]
 801869c:	4a1b      	ldr	r2, [pc, #108]	@ (801870c <UART_SetConfig+0x348>)
 801869e:	4293      	cmp	r3, r2
 80186a0:	d142      	bne.n	8018728 <UART_SetConfig+0x364>
 80186a2:	4b16      	ldr	r3, [pc, #88]	@ (80186fc <UART_SetConfig+0x338>)
 80186a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80186a6:	f003 0307 	and.w	r3, r3, #7
 80186aa:	2b05      	cmp	r3, #5
 80186ac:	d838      	bhi.n	8018720 <UART_SetConfig+0x35c>
 80186ae:	a201      	add	r2, pc, #4	@ (adr r2, 80186b4 <UART_SetConfig+0x2f0>)
 80186b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80186b4:	080186cd 	.word	0x080186cd
 80186b8:	080186d5 	.word	0x080186d5
 80186bc:	080186dd 	.word	0x080186dd
 80186c0:	080186e5 	.word	0x080186e5
 80186c4:	08018711 	.word	0x08018711
 80186c8:	08018719 	.word	0x08018719
 80186cc:	2300      	movs	r3, #0
 80186ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80186d2:	e24e      	b.n	8018b72 <UART_SetConfig+0x7ae>
 80186d4:	2304      	movs	r3, #4
 80186d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80186da:	e24a      	b.n	8018b72 <UART_SetConfig+0x7ae>
 80186dc:	2308      	movs	r3, #8
 80186de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80186e2:	e246      	b.n	8018b72 <UART_SetConfig+0x7ae>
 80186e4:	2310      	movs	r3, #16
 80186e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80186ea:	e242      	b.n	8018b72 <UART_SetConfig+0x7ae>
 80186ec:	cfff69f3 	.word	0xcfff69f3
 80186f0:	58000c00 	.word	0x58000c00
 80186f4:	11fff4ff 	.word	0x11fff4ff
 80186f8:	40011000 	.word	0x40011000
 80186fc:	58024400 	.word	0x58024400
 8018700:	40004400 	.word	0x40004400
 8018704:	40004800 	.word	0x40004800
 8018708:	40004c00 	.word	0x40004c00
 801870c:	40005000 	.word	0x40005000
 8018710:	2320      	movs	r3, #32
 8018712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018716:	e22c      	b.n	8018b72 <UART_SetConfig+0x7ae>
 8018718:	2340      	movs	r3, #64	@ 0x40
 801871a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801871e:	e228      	b.n	8018b72 <UART_SetConfig+0x7ae>
 8018720:	2380      	movs	r3, #128	@ 0x80
 8018722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018726:	e224      	b.n	8018b72 <UART_SetConfig+0x7ae>
 8018728:	697b      	ldr	r3, [r7, #20]
 801872a:	681b      	ldr	r3, [r3, #0]
 801872c:	4ab1      	ldr	r2, [pc, #708]	@ (80189f4 <UART_SetConfig+0x630>)
 801872e:	4293      	cmp	r3, r2
 8018730:	d176      	bne.n	8018820 <UART_SetConfig+0x45c>
 8018732:	4bb1      	ldr	r3, [pc, #708]	@ (80189f8 <UART_SetConfig+0x634>)
 8018734:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018736:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801873a:	2b28      	cmp	r3, #40	@ 0x28
 801873c:	d86c      	bhi.n	8018818 <UART_SetConfig+0x454>
 801873e:	a201      	add	r2, pc, #4	@ (adr r2, 8018744 <UART_SetConfig+0x380>)
 8018740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018744:	080187e9 	.word	0x080187e9
 8018748:	08018819 	.word	0x08018819
 801874c:	08018819 	.word	0x08018819
 8018750:	08018819 	.word	0x08018819
 8018754:	08018819 	.word	0x08018819
 8018758:	08018819 	.word	0x08018819
 801875c:	08018819 	.word	0x08018819
 8018760:	08018819 	.word	0x08018819
 8018764:	080187f1 	.word	0x080187f1
 8018768:	08018819 	.word	0x08018819
 801876c:	08018819 	.word	0x08018819
 8018770:	08018819 	.word	0x08018819
 8018774:	08018819 	.word	0x08018819
 8018778:	08018819 	.word	0x08018819
 801877c:	08018819 	.word	0x08018819
 8018780:	08018819 	.word	0x08018819
 8018784:	080187f9 	.word	0x080187f9
 8018788:	08018819 	.word	0x08018819
 801878c:	08018819 	.word	0x08018819
 8018790:	08018819 	.word	0x08018819
 8018794:	08018819 	.word	0x08018819
 8018798:	08018819 	.word	0x08018819
 801879c:	08018819 	.word	0x08018819
 80187a0:	08018819 	.word	0x08018819
 80187a4:	08018801 	.word	0x08018801
 80187a8:	08018819 	.word	0x08018819
 80187ac:	08018819 	.word	0x08018819
 80187b0:	08018819 	.word	0x08018819
 80187b4:	08018819 	.word	0x08018819
 80187b8:	08018819 	.word	0x08018819
 80187bc:	08018819 	.word	0x08018819
 80187c0:	08018819 	.word	0x08018819
 80187c4:	08018809 	.word	0x08018809
 80187c8:	08018819 	.word	0x08018819
 80187cc:	08018819 	.word	0x08018819
 80187d0:	08018819 	.word	0x08018819
 80187d4:	08018819 	.word	0x08018819
 80187d8:	08018819 	.word	0x08018819
 80187dc:	08018819 	.word	0x08018819
 80187e0:	08018819 	.word	0x08018819
 80187e4:	08018811 	.word	0x08018811
 80187e8:	2301      	movs	r3, #1
 80187ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80187ee:	e1c0      	b.n	8018b72 <UART_SetConfig+0x7ae>
 80187f0:	2304      	movs	r3, #4
 80187f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80187f6:	e1bc      	b.n	8018b72 <UART_SetConfig+0x7ae>
 80187f8:	2308      	movs	r3, #8
 80187fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80187fe:	e1b8      	b.n	8018b72 <UART_SetConfig+0x7ae>
 8018800:	2310      	movs	r3, #16
 8018802:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018806:	e1b4      	b.n	8018b72 <UART_SetConfig+0x7ae>
 8018808:	2320      	movs	r3, #32
 801880a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801880e:	e1b0      	b.n	8018b72 <UART_SetConfig+0x7ae>
 8018810:	2340      	movs	r3, #64	@ 0x40
 8018812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018816:	e1ac      	b.n	8018b72 <UART_SetConfig+0x7ae>
 8018818:	2380      	movs	r3, #128	@ 0x80
 801881a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801881e:	e1a8      	b.n	8018b72 <UART_SetConfig+0x7ae>
 8018820:	697b      	ldr	r3, [r7, #20]
 8018822:	681b      	ldr	r3, [r3, #0]
 8018824:	4a75      	ldr	r2, [pc, #468]	@ (80189fc <UART_SetConfig+0x638>)
 8018826:	4293      	cmp	r3, r2
 8018828:	d130      	bne.n	801888c <UART_SetConfig+0x4c8>
 801882a:	4b73      	ldr	r3, [pc, #460]	@ (80189f8 <UART_SetConfig+0x634>)
 801882c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801882e:	f003 0307 	and.w	r3, r3, #7
 8018832:	2b05      	cmp	r3, #5
 8018834:	d826      	bhi.n	8018884 <UART_SetConfig+0x4c0>
 8018836:	a201      	add	r2, pc, #4	@ (adr r2, 801883c <UART_SetConfig+0x478>)
 8018838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801883c:	08018855 	.word	0x08018855
 8018840:	0801885d 	.word	0x0801885d
 8018844:	08018865 	.word	0x08018865
 8018848:	0801886d 	.word	0x0801886d
 801884c:	08018875 	.word	0x08018875
 8018850:	0801887d 	.word	0x0801887d
 8018854:	2300      	movs	r3, #0
 8018856:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801885a:	e18a      	b.n	8018b72 <UART_SetConfig+0x7ae>
 801885c:	2304      	movs	r3, #4
 801885e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018862:	e186      	b.n	8018b72 <UART_SetConfig+0x7ae>
 8018864:	2308      	movs	r3, #8
 8018866:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801886a:	e182      	b.n	8018b72 <UART_SetConfig+0x7ae>
 801886c:	2310      	movs	r3, #16
 801886e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018872:	e17e      	b.n	8018b72 <UART_SetConfig+0x7ae>
 8018874:	2320      	movs	r3, #32
 8018876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801887a:	e17a      	b.n	8018b72 <UART_SetConfig+0x7ae>
 801887c:	2340      	movs	r3, #64	@ 0x40
 801887e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018882:	e176      	b.n	8018b72 <UART_SetConfig+0x7ae>
 8018884:	2380      	movs	r3, #128	@ 0x80
 8018886:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801888a:	e172      	b.n	8018b72 <UART_SetConfig+0x7ae>
 801888c:	697b      	ldr	r3, [r7, #20]
 801888e:	681b      	ldr	r3, [r3, #0]
 8018890:	4a5b      	ldr	r2, [pc, #364]	@ (8018a00 <UART_SetConfig+0x63c>)
 8018892:	4293      	cmp	r3, r2
 8018894:	d130      	bne.n	80188f8 <UART_SetConfig+0x534>
 8018896:	4b58      	ldr	r3, [pc, #352]	@ (80189f8 <UART_SetConfig+0x634>)
 8018898:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801889a:	f003 0307 	and.w	r3, r3, #7
 801889e:	2b05      	cmp	r3, #5
 80188a0:	d826      	bhi.n	80188f0 <UART_SetConfig+0x52c>
 80188a2:	a201      	add	r2, pc, #4	@ (adr r2, 80188a8 <UART_SetConfig+0x4e4>)
 80188a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80188a8:	080188c1 	.word	0x080188c1
 80188ac:	080188c9 	.word	0x080188c9
 80188b0:	080188d1 	.word	0x080188d1
 80188b4:	080188d9 	.word	0x080188d9
 80188b8:	080188e1 	.word	0x080188e1
 80188bc:	080188e9 	.word	0x080188e9
 80188c0:	2300      	movs	r3, #0
 80188c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80188c6:	e154      	b.n	8018b72 <UART_SetConfig+0x7ae>
 80188c8:	2304      	movs	r3, #4
 80188ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80188ce:	e150      	b.n	8018b72 <UART_SetConfig+0x7ae>
 80188d0:	2308      	movs	r3, #8
 80188d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80188d6:	e14c      	b.n	8018b72 <UART_SetConfig+0x7ae>
 80188d8:	2310      	movs	r3, #16
 80188da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80188de:	e148      	b.n	8018b72 <UART_SetConfig+0x7ae>
 80188e0:	2320      	movs	r3, #32
 80188e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80188e6:	e144      	b.n	8018b72 <UART_SetConfig+0x7ae>
 80188e8:	2340      	movs	r3, #64	@ 0x40
 80188ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80188ee:	e140      	b.n	8018b72 <UART_SetConfig+0x7ae>
 80188f0:	2380      	movs	r3, #128	@ 0x80
 80188f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80188f6:	e13c      	b.n	8018b72 <UART_SetConfig+0x7ae>
 80188f8:	697b      	ldr	r3, [r7, #20]
 80188fa:	681b      	ldr	r3, [r3, #0]
 80188fc:	4a41      	ldr	r2, [pc, #260]	@ (8018a04 <UART_SetConfig+0x640>)
 80188fe:	4293      	cmp	r3, r2
 8018900:	f040 8082 	bne.w	8018a08 <UART_SetConfig+0x644>
 8018904:	4b3c      	ldr	r3, [pc, #240]	@ (80189f8 <UART_SetConfig+0x634>)
 8018906:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018908:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801890c:	2b28      	cmp	r3, #40	@ 0x28
 801890e:	d86d      	bhi.n	80189ec <UART_SetConfig+0x628>
 8018910:	a201      	add	r2, pc, #4	@ (adr r2, 8018918 <UART_SetConfig+0x554>)
 8018912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018916:	bf00      	nop
 8018918:	080189bd 	.word	0x080189bd
 801891c:	080189ed 	.word	0x080189ed
 8018920:	080189ed 	.word	0x080189ed
 8018924:	080189ed 	.word	0x080189ed
 8018928:	080189ed 	.word	0x080189ed
 801892c:	080189ed 	.word	0x080189ed
 8018930:	080189ed 	.word	0x080189ed
 8018934:	080189ed 	.word	0x080189ed
 8018938:	080189c5 	.word	0x080189c5
 801893c:	080189ed 	.word	0x080189ed
 8018940:	080189ed 	.word	0x080189ed
 8018944:	080189ed 	.word	0x080189ed
 8018948:	080189ed 	.word	0x080189ed
 801894c:	080189ed 	.word	0x080189ed
 8018950:	080189ed 	.word	0x080189ed
 8018954:	080189ed 	.word	0x080189ed
 8018958:	080189cd 	.word	0x080189cd
 801895c:	080189ed 	.word	0x080189ed
 8018960:	080189ed 	.word	0x080189ed
 8018964:	080189ed 	.word	0x080189ed
 8018968:	080189ed 	.word	0x080189ed
 801896c:	080189ed 	.word	0x080189ed
 8018970:	080189ed 	.word	0x080189ed
 8018974:	080189ed 	.word	0x080189ed
 8018978:	080189d5 	.word	0x080189d5
 801897c:	080189ed 	.word	0x080189ed
 8018980:	080189ed 	.word	0x080189ed
 8018984:	080189ed 	.word	0x080189ed
 8018988:	080189ed 	.word	0x080189ed
 801898c:	080189ed 	.word	0x080189ed
 8018990:	080189ed 	.word	0x080189ed
 8018994:	080189ed 	.word	0x080189ed
 8018998:	080189dd 	.word	0x080189dd
 801899c:	080189ed 	.word	0x080189ed
 80189a0:	080189ed 	.word	0x080189ed
 80189a4:	080189ed 	.word	0x080189ed
 80189a8:	080189ed 	.word	0x080189ed
 80189ac:	080189ed 	.word	0x080189ed
 80189b0:	080189ed 	.word	0x080189ed
 80189b4:	080189ed 	.word	0x080189ed
 80189b8:	080189e5 	.word	0x080189e5
 80189bc:	2301      	movs	r3, #1
 80189be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80189c2:	e0d6      	b.n	8018b72 <UART_SetConfig+0x7ae>
 80189c4:	2304      	movs	r3, #4
 80189c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80189ca:	e0d2      	b.n	8018b72 <UART_SetConfig+0x7ae>
 80189cc:	2308      	movs	r3, #8
 80189ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80189d2:	e0ce      	b.n	8018b72 <UART_SetConfig+0x7ae>
 80189d4:	2310      	movs	r3, #16
 80189d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80189da:	e0ca      	b.n	8018b72 <UART_SetConfig+0x7ae>
 80189dc:	2320      	movs	r3, #32
 80189de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80189e2:	e0c6      	b.n	8018b72 <UART_SetConfig+0x7ae>
 80189e4:	2340      	movs	r3, #64	@ 0x40
 80189e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80189ea:	e0c2      	b.n	8018b72 <UART_SetConfig+0x7ae>
 80189ec:	2380      	movs	r3, #128	@ 0x80
 80189ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80189f2:	e0be      	b.n	8018b72 <UART_SetConfig+0x7ae>
 80189f4:	40011400 	.word	0x40011400
 80189f8:	58024400 	.word	0x58024400
 80189fc:	40007800 	.word	0x40007800
 8018a00:	40007c00 	.word	0x40007c00
 8018a04:	40011800 	.word	0x40011800
 8018a08:	697b      	ldr	r3, [r7, #20]
 8018a0a:	681b      	ldr	r3, [r3, #0]
 8018a0c:	4aad      	ldr	r2, [pc, #692]	@ (8018cc4 <UART_SetConfig+0x900>)
 8018a0e:	4293      	cmp	r3, r2
 8018a10:	d176      	bne.n	8018b00 <UART_SetConfig+0x73c>
 8018a12:	4bad      	ldr	r3, [pc, #692]	@ (8018cc8 <UART_SetConfig+0x904>)
 8018a14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018a16:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8018a1a:	2b28      	cmp	r3, #40	@ 0x28
 8018a1c:	d86c      	bhi.n	8018af8 <UART_SetConfig+0x734>
 8018a1e:	a201      	add	r2, pc, #4	@ (adr r2, 8018a24 <UART_SetConfig+0x660>)
 8018a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018a24:	08018ac9 	.word	0x08018ac9
 8018a28:	08018af9 	.word	0x08018af9
 8018a2c:	08018af9 	.word	0x08018af9
 8018a30:	08018af9 	.word	0x08018af9
 8018a34:	08018af9 	.word	0x08018af9
 8018a38:	08018af9 	.word	0x08018af9
 8018a3c:	08018af9 	.word	0x08018af9
 8018a40:	08018af9 	.word	0x08018af9
 8018a44:	08018ad1 	.word	0x08018ad1
 8018a48:	08018af9 	.word	0x08018af9
 8018a4c:	08018af9 	.word	0x08018af9
 8018a50:	08018af9 	.word	0x08018af9
 8018a54:	08018af9 	.word	0x08018af9
 8018a58:	08018af9 	.word	0x08018af9
 8018a5c:	08018af9 	.word	0x08018af9
 8018a60:	08018af9 	.word	0x08018af9
 8018a64:	08018ad9 	.word	0x08018ad9
 8018a68:	08018af9 	.word	0x08018af9
 8018a6c:	08018af9 	.word	0x08018af9
 8018a70:	08018af9 	.word	0x08018af9
 8018a74:	08018af9 	.word	0x08018af9
 8018a78:	08018af9 	.word	0x08018af9
 8018a7c:	08018af9 	.word	0x08018af9
 8018a80:	08018af9 	.word	0x08018af9
 8018a84:	08018ae1 	.word	0x08018ae1
 8018a88:	08018af9 	.word	0x08018af9
 8018a8c:	08018af9 	.word	0x08018af9
 8018a90:	08018af9 	.word	0x08018af9
 8018a94:	08018af9 	.word	0x08018af9
 8018a98:	08018af9 	.word	0x08018af9
 8018a9c:	08018af9 	.word	0x08018af9
 8018aa0:	08018af9 	.word	0x08018af9
 8018aa4:	08018ae9 	.word	0x08018ae9
 8018aa8:	08018af9 	.word	0x08018af9
 8018aac:	08018af9 	.word	0x08018af9
 8018ab0:	08018af9 	.word	0x08018af9
 8018ab4:	08018af9 	.word	0x08018af9
 8018ab8:	08018af9 	.word	0x08018af9
 8018abc:	08018af9 	.word	0x08018af9
 8018ac0:	08018af9 	.word	0x08018af9
 8018ac4:	08018af1 	.word	0x08018af1
 8018ac8:	2301      	movs	r3, #1
 8018aca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018ace:	e050      	b.n	8018b72 <UART_SetConfig+0x7ae>
 8018ad0:	2304      	movs	r3, #4
 8018ad2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018ad6:	e04c      	b.n	8018b72 <UART_SetConfig+0x7ae>
 8018ad8:	2308      	movs	r3, #8
 8018ada:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018ade:	e048      	b.n	8018b72 <UART_SetConfig+0x7ae>
 8018ae0:	2310      	movs	r3, #16
 8018ae2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018ae6:	e044      	b.n	8018b72 <UART_SetConfig+0x7ae>
 8018ae8:	2320      	movs	r3, #32
 8018aea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018aee:	e040      	b.n	8018b72 <UART_SetConfig+0x7ae>
 8018af0:	2340      	movs	r3, #64	@ 0x40
 8018af2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018af6:	e03c      	b.n	8018b72 <UART_SetConfig+0x7ae>
 8018af8:	2380      	movs	r3, #128	@ 0x80
 8018afa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018afe:	e038      	b.n	8018b72 <UART_SetConfig+0x7ae>
 8018b00:	697b      	ldr	r3, [r7, #20]
 8018b02:	681b      	ldr	r3, [r3, #0]
 8018b04:	4a71      	ldr	r2, [pc, #452]	@ (8018ccc <UART_SetConfig+0x908>)
 8018b06:	4293      	cmp	r3, r2
 8018b08:	d130      	bne.n	8018b6c <UART_SetConfig+0x7a8>
 8018b0a:	4b6f      	ldr	r3, [pc, #444]	@ (8018cc8 <UART_SetConfig+0x904>)
 8018b0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018b0e:	f003 0307 	and.w	r3, r3, #7
 8018b12:	2b05      	cmp	r3, #5
 8018b14:	d826      	bhi.n	8018b64 <UART_SetConfig+0x7a0>
 8018b16:	a201      	add	r2, pc, #4	@ (adr r2, 8018b1c <UART_SetConfig+0x758>)
 8018b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018b1c:	08018b35 	.word	0x08018b35
 8018b20:	08018b3d 	.word	0x08018b3d
 8018b24:	08018b45 	.word	0x08018b45
 8018b28:	08018b4d 	.word	0x08018b4d
 8018b2c:	08018b55 	.word	0x08018b55
 8018b30:	08018b5d 	.word	0x08018b5d
 8018b34:	2302      	movs	r3, #2
 8018b36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b3a:	e01a      	b.n	8018b72 <UART_SetConfig+0x7ae>
 8018b3c:	2304      	movs	r3, #4
 8018b3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b42:	e016      	b.n	8018b72 <UART_SetConfig+0x7ae>
 8018b44:	2308      	movs	r3, #8
 8018b46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b4a:	e012      	b.n	8018b72 <UART_SetConfig+0x7ae>
 8018b4c:	2310      	movs	r3, #16
 8018b4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b52:	e00e      	b.n	8018b72 <UART_SetConfig+0x7ae>
 8018b54:	2320      	movs	r3, #32
 8018b56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b5a:	e00a      	b.n	8018b72 <UART_SetConfig+0x7ae>
 8018b5c:	2340      	movs	r3, #64	@ 0x40
 8018b5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b62:	e006      	b.n	8018b72 <UART_SetConfig+0x7ae>
 8018b64:	2380      	movs	r3, #128	@ 0x80
 8018b66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b6a:	e002      	b.n	8018b72 <UART_SetConfig+0x7ae>
 8018b6c:	2380      	movs	r3, #128	@ 0x80
 8018b6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8018b72:	697b      	ldr	r3, [r7, #20]
 8018b74:	681b      	ldr	r3, [r3, #0]
 8018b76:	4a55      	ldr	r2, [pc, #340]	@ (8018ccc <UART_SetConfig+0x908>)
 8018b78:	4293      	cmp	r3, r2
 8018b7a:	f040 80f8 	bne.w	8018d6e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8018b7e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8018b82:	2b20      	cmp	r3, #32
 8018b84:	dc46      	bgt.n	8018c14 <UART_SetConfig+0x850>
 8018b86:	2b02      	cmp	r3, #2
 8018b88:	db75      	blt.n	8018c76 <UART_SetConfig+0x8b2>
 8018b8a:	3b02      	subs	r3, #2
 8018b8c:	2b1e      	cmp	r3, #30
 8018b8e:	d872      	bhi.n	8018c76 <UART_SetConfig+0x8b2>
 8018b90:	a201      	add	r2, pc, #4	@ (adr r2, 8018b98 <UART_SetConfig+0x7d4>)
 8018b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018b96:	bf00      	nop
 8018b98:	08018c1b 	.word	0x08018c1b
 8018b9c:	08018c77 	.word	0x08018c77
 8018ba0:	08018c23 	.word	0x08018c23
 8018ba4:	08018c77 	.word	0x08018c77
 8018ba8:	08018c77 	.word	0x08018c77
 8018bac:	08018c77 	.word	0x08018c77
 8018bb0:	08018c33 	.word	0x08018c33
 8018bb4:	08018c77 	.word	0x08018c77
 8018bb8:	08018c77 	.word	0x08018c77
 8018bbc:	08018c77 	.word	0x08018c77
 8018bc0:	08018c77 	.word	0x08018c77
 8018bc4:	08018c77 	.word	0x08018c77
 8018bc8:	08018c77 	.word	0x08018c77
 8018bcc:	08018c77 	.word	0x08018c77
 8018bd0:	08018c43 	.word	0x08018c43
 8018bd4:	08018c77 	.word	0x08018c77
 8018bd8:	08018c77 	.word	0x08018c77
 8018bdc:	08018c77 	.word	0x08018c77
 8018be0:	08018c77 	.word	0x08018c77
 8018be4:	08018c77 	.word	0x08018c77
 8018be8:	08018c77 	.word	0x08018c77
 8018bec:	08018c77 	.word	0x08018c77
 8018bf0:	08018c77 	.word	0x08018c77
 8018bf4:	08018c77 	.word	0x08018c77
 8018bf8:	08018c77 	.word	0x08018c77
 8018bfc:	08018c77 	.word	0x08018c77
 8018c00:	08018c77 	.word	0x08018c77
 8018c04:	08018c77 	.word	0x08018c77
 8018c08:	08018c77 	.word	0x08018c77
 8018c0c:	08018c77 	.word	0x08018c77
 8018c10:	08018c69 	.word	0x08018c69
 8018c14:	2b40      	cmp	r3, #64	@ 0x40
 8018c16:	d02a      	beq.n	8018c6e <UART_SetConfig+0x8aa>
 8018c18:	e02d      	b.n	8018c76 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8018c1a:	f7fa fda1 	bl	8013760 <HAL_RCCEx_GetD3PCLK1Freq>
 8018c1e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8018c20:	e02f      	b.n	8018c82 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8018c22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8018c26:	4618      	mov	r0, r3
 8018c28:	f7fa fdb0 	bl	801378c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8018c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018c2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018c30:	e027      	b.n	8018c82 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8018c32:	f107 0318 	add.w	r3, r7, #24
 8018c36:	4618      	mov	r0, r3
 8018c38:	f7fa fefc 	bl	8013a34 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8018c3c:	69fb      	ldr	r3, [r7, #28]
 8018c3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018c40:	e01f      	b.n	8018c82 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8018c42:	4b21      	ldr	r3, [pc, #132]	@ (8018cc8 <UART_SetConfig+0x904>)
 8018c44:	681b      	ldr	r3, [r3, #0]
 8018c46:	f003 0320 	and.w	r3, r3, #32
 8018c4a:	2b00      	cmp	r3, #0
 8018c4c:	d009      	beq.n	8018c62 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8018c4e:	4b1e      	ldr	r3, [pc, #120]	@ (8018cc8 <UART_SetConfig+0x904>)
 8018c50:	681b      	ldr	r3, [r3, #0]
 8018c52:	08db      	lsrs	r3, r3, #3
 8018c54:	f003 0303 	and.w	r3, r3, #3
 8018c58:	4a1d      	ldr	r2, [pc, #116]	@ (8018cd0 <UART_SetConfig+0x90c>)
 8018c5a:	fa22 f303 	lsr.w	r3, r2, r3
 8018c5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8018c60:	e00f      	b.n	8018c82 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8018c62:	4b1b      	ldr	r3, [pc, #108]	@ (8018cd0 <UART_SetConfig+0x90c>)
 8018c64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018c66:	e00c      	b.n	8018c82 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8018c68:	4b1a      	ldr	r3, [pc, #104]	@ (8018cd4 <UART_SetConfig+0x910>)
 8018c6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018c6c:	e009      	b.n	8018c82 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8018c6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8018c72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018c74:	e005      	b.n	8018c82 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8018c76:	2300      	movs	r3, #0
 8018c78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8018c7a:	2301      	movs	r3, #1
 8018c7c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8018c80:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8018c82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018c84:	2b00      	cmp	r3, #0
 8018c86:	f000 81ee 	beq.w	8019066 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8018c8a:	697b      	ldr	r3, [r7, #20]
 8018c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018c8e:	4a12      	ldr	r2, [pc, #72]	@ (8018cd8 <UART_SetConfig+0x914>)
 8018c90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8018c94:	461a      	mov	r2, r3
 8018c96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018c98:	fbb3 f3f2 	udiv	r3, r3, r2
 8018c9c:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8018c9e:	697b      	ldr	r3, [r7, #20]
 8018ca0:	685a      	ldr	r2, [r3, #4]
 8018ca2:	4613      	mov	r3, r2
 8018ca4:	005b      	lsls	r3, r3, #1
 8018ca6:	4413      	add	r3, r2
 8018ca8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018caa:	429a      	cmp	r2, r3
 8018cac:	d305      	bcc.n	8018cba <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8018cae:	697b      	ldr	r3, [r7, #20]
 8018cb0:	685b      	ldr	r3, [r3, #4]
 8018cb2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8018cb4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018cb6:	429a      	cmp	r2, r3
 8018cb8:	d910      	bls.n	8018cdc <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8018cba:	2301      	movs	r3, #1
 8018cbc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8018cc0:	e1d1      	b.n	8019066 <UART_SetConfig+0xca2>
 8018cc2:	bf00      	nop
 8018cc4:	40011c00 	.word	0x40011c00
 8018cc8:	58024400 	.word	0x58024400
 8018ccc:	58000c00 	.word	0x58000c00
 8018cd0:	03d09000 	.word	0x03d09000
 8018cd4:	003d0900 	.word	0x003d0900
 8018cd8:	0801e5ac 	.word	0x0801e5ac
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8018cdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018cde:	2200      	movs	r2, #0
 8018ce0:	60bb      	str	r3, [r7, #8]
 8018ce2:	60fa      	str	r2, [r7, #12]
 8018ce4:	697b      	ldr	r3, [r7, #20]
 8018ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018ce8:	4ac0      	ldr	r2, [pc, #768]	@ (8018fec <UART_SetConfig+0xc28>)
 8018cea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8018cee:	b29b      	uxth	r3, r3
 8018cf0:	2200      	movs	r2, #0
 8018cf2:	603b      	str	r3, [r7, #0]
 8018cf4:	607a      	str	r2, [r7, #4]
 8018cf6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018cfa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8018cfe:	f7e7 fb57 	bl	80003b0 <__aeabi_uldivmod>
 8018d02:	4602      	mov	r2, r0
 8018d04:	460b      	mov	r3, r1
 8018d06:	4610      	mov	r0, r2
 8018d08:	4619      	mov	r1, r3
 8018d0a:	f04f 0200 	mov.w	r2, #0
 8018d0e:	f04f 0300 	mov.w	r3, #0
 8018d12:	020b      	lsls	r3, r1, #8
 8018d14:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8018d18:	0202      	lsls	r2, r0, #8
 8018d1a:	6979      	ldr	r1, [r7, #20]
 8018d1c:	6849      	ldr	r1, [r1, #4]
 8018d1e:	0849      	lsrs	r1, r1, #1
 8018d20:	2000      	movs	r0, #0
 8018d22:	460c      	mov	r4, r1
 8018d24:	4605      	mov	r5, r0
 8018d26:	eb12 0804 	adds.w	r8, r2, r4
 8018d2a:	eb43 0905 	adc.w	r9, r3, r5
 8018d2e:	697b      	ldr	r3, [r7, #20]
 8018d30:	685b      	ldr	r3, [r3, #4]
 8018d32:	2200      	movs	r2, #0
 8018d34:	469a      	mov	sl, r3
 8018d36:	4693      	mov	fp, r2
 8018d38:	4652      	mov	r2, sl
 8018d3a:	465b      	mov	r3, fp
 8018d3c:	4640      	mov	r0, r8
 8018d3e:	4649      	mov	r1, r9
 8018d40:	f7e7 fb36 	bl	80003b0 <__aeabi_uldivmod>
 8018d44:	4602      	mov	r2, r0
 8018d46:	460b      	mov	r3, r1
 8018d48:	4613      	mov	r3, r2
 8018d4a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8018d4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018d4e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8018d52:	d308      	bcc.n	8018d66 <UART_SetConfig+0x9a2>
 8018d54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018d56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8018d5a:	d204      	bcs.n	8018d66 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8018d5c:	697b      	ldr	r3, [r7, #20]
 8018d5e:	681b      	ldr	r3, [r3, #0]
 8018d60:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8018d62:	60da      	str	r2, [r3, #12]
 8018d64:	e17f      	b.n	8019066 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8018d66:	2301      	movs	r3, #1
 8018d68:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8018d6c:	e17b      	b.n	8019066 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8018d6e:	697b      	ldr	r3, [r7, #20]
 8018d70:	69db      	ldr	r3, [r3, #28]
 8018d72:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8018d76:	f040 80bd 	bne.w	8018ef4 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8018d7a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8018d7e:	2b20      	cmp	r3, #32
 8018d80:	dc48      	bgt.n	8018e14 <UART_SetConfig+0xa50>
 8018d82:	2b00      	cmp	r3, #0
 8018d84:	db7b      	blt.n	8018e7e <UART_SetConfig+0xaba>
 8018d86:	2b20      	cmp	r3, #32
 8018d88:	d879      	bhi.n	8018e7e <UART_SetConfig+0xaba>
 8018d8a:	a201      	add	r2, pc, #4	@ (adr r2, 8018d90 <UART_SetConfig+0x9cc>)
 8018d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018d90:	08018e1b 	.word	0x08018e1b
 8018d94:	08018e23 	.word	0x08018e23
 8018d98:	08018e7f 	.word	0x08018e7f
 8018d9c:	08018e7f 	.word	0x08018e7f
 8018da0:	08018e2b 	.word	0x08018e2b
 8018da4:	08018e7f 	.word	0x08018e7f
 8018da8:	08018e7f 	.word	0x08018e7f
 8018dac:	08018e7f 	.word	0x08018e7f
 8018db0:	08018e3b 	.word	0x08018e3b
 8018db4:	08018e7f 	.word	0x08018e7f
 8018db8:	08018e7f 	.word	0x08018e7f
 8018dbc:	08018e7f 	.word	0x08018e7f
 8018dc0:	08018e7f 	.word	0x08018e7f
 8018dc4:	08018e7f 	.word	0x08018e7f
 8018dc8:	08018e7f 	.word	0x08018e7f
 8018dcc:	08018e7f 	.word	0x08018e7f
 8018dd0:	08018e4b 	.word	0x08018e4b
 8018dd4:	08018e7f 	.word	0x08018e7f
 8018dd8:	08018e7f 	.word	0x08018e7f
 8018ddc:	08018e7f 	.word	0x08018e7f
 8018de0:	08018e7f 	.word	0x08018e7f
 8018de4:	08018e7f 	.word	0x08018e7f
 8018de8:	08018e7f 	.word	0x08018e7f
 8018dec:	08018e7f 	.word	0x08018e7f
 8018df0:	08018e7f 	.word	0x08018e7f
 8018df4:	08018e7f 	.word	0x08018e7f
 8018df8:	08018e7f 	.word	0x08018e7f
 8018dfc:	08018e7f 	.word	0x08018e7f
 8018e00:	08018e7f 	.word	0x08018e7f
 8018e04:	08018e7f 	.word	0x08018e7f
 8018e08:	08018e7f 	.word	0x08018e7f
 8018e0c:	08018e7f 	.word	0x08018e7f
 8018e10:	08018e71 	.word	0x08018e71
 8018e14:	2b40      	cmp	r3, #64	@ 0x40
 8018e16:	d02e      	beq.n	8018e76 <UART_SetConfig+0xab2>
 8018e18:	e031      	b.n	8018e7e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8018e1a:	f7f8 fe03 	bl	8011a24 <HAL_RCC_GetPCLK1Freq>
 8018e1e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8018e20:	e033      	b.n	8018e8a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8018e22:	f7f8 fe15 	bl	8011a50 <HAL_RCC_GetPCLK2Freq>
 8018e26:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8018e28:	e02f      	b.n	8018e8a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8018e2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8018e2e:	4618      	mov	r0, r3
 8018e30:	f7fa fcac 	bl	801378c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8018e34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018e36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018e38:	e027      	b.n	8018e8a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8018e3a:	f107 0318 	add.w	r3, r7, #24
 8018e3e:	4618      	mov	r0, r3
 8018e40:	f7fa fdf8 	bl	8013a34 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8018e44:	69fb      	ldr	r3, [r7, #28]
 8018e46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018e48:	e01f      	b.n	8018e8a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8018e4a:	4b69      	ldr	r3, [pc, #420]	@ (8018ff0 <UART_SetConfig+0xc2c>)
 8018e4c:	681b      	ldr	r3, [r3, #0]
 8018e4e:	f003 0320 	and.w	r3, r3, #32
 8018e52:	2b00      	cmp	r3, #0
 8018e54:	d009      	beq.n	8018e6a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8018e56:	4b66      	ldr	r3, [pc, #408]	@ (8018ff0 <UART_SetConfig+0xc2c>)
 8018e58:	681b      	ldr	r3, [r3, #0]
 8018e5a:	08db      	lsrs	r3, r3, #3
 8018e5c:	f003 0303 	and.w	r3, r3, #3
 8018e60:	4a64      	ldr	r2, [pc, #400]	@ (8018ff4 <UART_SetConfig+0xc30>)
 8018e62:	fa22 f303 	lsr.w	r3, r2, r3
 8018e66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8018e68:	e00f      	b.n	8018e8a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8018e6a:	4b62      	ldr	r3, [pc, #392]	@ (8018ff4 <UART_SetConfig+0xc30>)
 8018e6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018e6e:	e00c      	b.n	8018e8a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8018e70:	4b61      	ldr	r3, [pc, #388]	@ (8018ff8 <UART_SetConfig+0xc34>)
 8018e72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018e74:	e009      	b.n	8018e8a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8018e76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8018e7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018e7c:	e005      	b.n	8018e8a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8018e7e:	2300      	movs	r3, #0
 8018e80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8018e82:	2301      	movs	r3, #1
 8018e84:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8018e88:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8018e8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018e8c:	2b00      	cmp	r3, #0
 8018e8e:	f000 80ea 	beq.w	8019066 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8018e92:	697b      	ldr	r3, [r7, #20]
 8018e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018e96:	4a55      	ldr	r2, [pc, #340]	@ (8018fec <UART_SetConfig+0xc28>)
 8018e98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8018e9c:	461a      	mov	r2, r3
 8018e9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018ea0:	fbb3 f3f2 	udiv	r3, r3, r2
 8018ea4:	005a      	lsls	r2, r3, #1
 8018ea6:	697b      	ldr	r3, [r7, #20]
 8018ea8:	685b      	ldr	r3, [r3, #4]
 8018eaa:	085b      	lsrs	r3, r3, #1
 8018eac:	441a      	add	r2, r3
 8018eae:	697b      	ldr	r3, [r7, #20]
 8018eb0:	685b      	ldr	r3, [r3, #4]
 8018eb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8018eb6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8018eb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018eba:	2b0f      	cmp	r3, #15
 8018ebc:	d916      	bls.n	8018eec <UART_SetConfig+0xb28>
 8018ebe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018ec0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8018ec4:	d212      	bcs.n	8018eec <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8018ec6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018ec8:	b29b      	uxth	r3, r3
 8018eca:	f023 030f 	bic.w	r3, r3, #15
 8018ece:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8018ed0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018ed2:	085b      	lsrs	r3, r3, #1
 8018ed4:	b29b      	uxth	r3, r3
 8018ed6:	f003 0307 	and.w	r3, r3, #7
 8018eda:	b29a      	uxth	r2, r3
 8018edc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8018ede:	4313      	orrs	r3, r2
 8018ee0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8018ee2:	697b      	ldr	r3, [r7, #20]
 8018ee4:	681b      	ldr	r3, [r3, #0]
 8018ee6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8018ee8:	60da      	str	r2, [r3, #12]
 8018eea:	e0bc      	b.n	8019066 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8018eec:	2301      	movs	r3, #1
 8018eee:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8018ef2:	e0b8      	b.n	8019066 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8018ef4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8018ef8:	2b20      	cmp	r3, #32
 8018efa:	dc4b      	bgt.n	8018f94 <UART_SetConfig+0xbd0>
 8018efc:	2b00      	cmp	r3, #0
 8018efe:	f2c0 8087 	blt.w	8019010 <UART_SetConfig+0xc4c>
 8018f02:	2b20      	cmp	r3, #32
 8018f04:	f200 8084 	bhi.w	8019010 <UART_SetConfig+0xc4c>
 8018f08:	a201      	add	r2, pc, #4	@ (adr r2, 8018f10 <UART_SetConfig+0xb4c>)
 8018f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018f0e:	bf00      	nop
 8018f10:	08018f9b 	.word	0x08018f9b
 8018f14:	08018fa3 	.word	0x08018fa3
 8018f18:	08019011 	.word	0x08019011
 8018f1c:	08019011 	.word	0x08019011
 8018f20:	08018fab 	.word	0x08018fab
 8018f24:	08019011 	.word	0x08019011
 8018f28:	08019011 	.word	0x08019011
 8018f2c:	08019011 	.word	0x08019011
 8018f30:	08018fbb 	.word	0x08018fbb
 8018f34:	08019011 	.word	0x08019011
 8018f38:	08019011 	.word	0x08019011
 8018f3c:	08019011 	.word	0x08019011
 8018f40:	08019011 	.word	0x08019011
 8018f44:	08019011 	.word	0x08019011
 8018f48:	08019011 	.word	0x08019011
 8018f4c:	08019011 	.word	0x08019011
 8018f50:	08018fcb 	.word	0x08018fcb
 8018f54:	08019011 	.word	0x08019011
 8018f58:	08019011 	.word	0x08019011
 8018f5c:	08019011 	.word	0x08019011
 8018f60:	08019011 	.word	0x08019011
 8018f64:	08019011 	.word	0x08019011
 8018f68:	08019011 	.word	0x08019011
 8018f6c:	08019011 	.word	0x08019011
 8018f70:	08019011 	.word	0x08019011
 8018f74:	08019011 	.word	0x08019011
 8018f78:	08019011 	.word	0x08019011
 8018f7c:	08019011 	.word	0x08019011
 8018f80:	08019011 	.word	0x08019011
 8018f84:	08019011 	.word	0x08019011
 8018f88:	08019011 	.word	0x08019011
 8018f8c:	08019011 	.word	0x08019011
 8018f90:	08019003 	.word	0x08019003
 8018f94:	2b40      	cmp	r3, #64	@ 0x40
 8018f96:	d037      	beq.n	8019008 <UART_SetConfig+0xc44>
 8018f98:	e03a      	b.n	8019010 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8018f9a:	f7f8 fd43 	bl	8011a24 <HAL_RCC_GetPCLK1Freq>
 8018f9e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8018fa0:	e03c      	b.n	801901c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8018fa2:	f7f8 fd55 	bl	8011a50 <HAL_RCC_GetPCLK2Freq>
 8018fa6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8018fa8:	e038      	b.n	801901c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8018faa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8018fae:	4618      	mov	r0, r3
 8018fb0:	f7fa fbec 	bl	801378c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8018fb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018fb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018fb8:	e030      	b.n	801901c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8018fba:	f107 0318 	add.w	r3, r7, #24
 8018fbe:	4618      	mov	r0, r3
 8018fc0:	f7fa fd38 	bl	8013a34 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8018fc4:	69fb      	ldr	r3, [r7, #28]
 8018fc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018fc8:	e028      	b.n	801901c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8018fca:	4b09      	ldr	r3, [pc, #36]	@ (8018ff0 <UART_SetConfig+0xc2c>)
 8018fcc:	681b      	ldr	r3, [r3, #0]
 8018fce:	f003 0320 	and.w	r3, r3, #32
 8018fd2:	2b00      	cmp	r3, #0
 8018fd4:	d012      	beq.n	8018ffc <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8018fd6:	4b06      	ldr	r3, [pc, #24]	@ (8018ff0 <UART_SetConfig+0xc2c>)
 8018fd8:	681b      	ldr	r3, [r3, #0]
 8018fda:	08db      	lsrs	r3, r3, #3
 8018fdc:	f003 0303 	and.w	r3, r3, #3
 8018fe0:	4a04      	ldr	r2, [pc, #16]	@ (8018ff4 <UART_SetConfig+0xc30>)
 8018fe2:	fa22 f303 	lsr.w	r3, r2, r3
 8018fe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8018fe8:	e018      	b.n	801901c <UART_SetConfig+0xc58>
 8018fea:	bf00      	nop
 8018fec:	0801e5ac 	.word	0x0801e5ac
 8018ff0:	58024400 	.word	0x58024400
 8018ff4:	03d09000 	.word	0x03d09000
 8018ff8:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8018ffc:	4b24      	ldr	r3, [pc, #144]	@ (8019090 <UART_SetConfig+0xccc>)
 8018ffe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8019000:	e00c      	b.n	801901c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8019002:	4b24      	ldr	r3, [pc, #144]	@ (8019094 <UART_SetConfig+0xcd0>)
 8019004:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8019006:	e009      	b.n	801901c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8019008:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801900c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801900e:	e005      	b.n	801901c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8019010:	2300      	movs	r3, #0
 8019012:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8019014:	2301      	movs	r3, #1
 8019016:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 801901a:	bf00      	nop
    }

    if (pclk != 0U)
 801901c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801901e:	2b00      	cmp	r3, #0
 8019020:	d021      	beq.n	8019066 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8019022:	697b      	ldr	r3, [r7, #20]
 8019024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019026:	4a1c      	ldr	r2, [pc, #112]	@ (8019098 <UART_SetConfig+0xcd4>)
 8019028:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801902c:	461a      	mov	r2, r3
 801902e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019030:	fbb3 f2f2 	udiv	r2, r3, r2
 8019034:	697b      	ldr	r3, [r7, #20]
 8019036:	685b      	ldr	r3, [r3, #4]
 8019038:	085b      	lsrs	r3, r3, #1
 801903a:	441a      	add	r2, r3
 801903c:	697b      	ldr	r3, [r7, #20]
 801903e:	685b      	ldr	r3, [r3, #4]
 8019040:	fbb2 f3f3 	udiv	r3, r2, r3
 8019044:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8019046:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019048:	2b0f      	cmp	r3, #15
 801904a:	d909      	bls.n	8019060 <UART_SetConfig+0xc9c>
 801904c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801904e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8019052:	d205      	bcs.n	8019060 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8019054:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019056:	b29a      	uxth	r2, r3
 8019058:	697b      	ldr	r3, [r7, #20]
 801905a:	681b      	ldr	r3, [r3, #0]
 801905c:	60da      	str	r2, [r3, #12]
 801905e:	e002      	b.n	8019066 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8019060:	2301      	movs	r3, #1
 8019062:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8019066:	697b      	ldr	r3, [r7, #20]
 8019068:	2201      	movs	r2, #1
 801906a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 801906e:	697b      	ldr	r3, [r7, #20]
 8019070:	2201      	movs	r2, #1
 8019072:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8019076:	697b      	ldr	r3, [r7, #20]
 8019078:	2200      	movs	r2, #0
 801907a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 801907c:	697b      	ldr	r3, [r7, #20]
 801907e:	2200      	movs	r2, #0
 8019080:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8019082:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8019086:	4618      	mov	r0, r3
 8019088:	3748      	adds	r7, #72	@ 0x48
 801908a:	46bd      	mov	sp, r7
 801908c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8019090:	03d09000 	.word	0x03d09000
 8019094:	003d0900 	.word	0x003d0900
 8019098:	0801e5ac 	.word	0x0801e5ac

0801909c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801909c:	b480      	push	{r7}
 801909e:	b083      	sub	sp, #12
 80190a0:	af00      	add	r7, sp, #0
 80190a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80190a4:	687b      	ldr	r3, [r7, #4]
 80190a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80190a8:	f003 0308 	and.w	r3, r3, #8
 80190ac:	2b00      	cmp	r3, #0
 80190ae:	d00a      	beq.n	80190c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80190b0:	687b      	ldr	r3, [r7, #4]
 80190b2:	681b      	ldr	r3, [r3, #0]
 80190b4:	685b      	ldr	r3, [r3, #4]
 80190b6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80190ba:	687b      	ldr	r3, [r7, #4]
 80190bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80190be:	687b      	ldr	r3, [r7, #4]
 80190c0:	681b      	ldr	r3, [r3, #0]
 80190c2:	430a      	orrs	r2, r1
 80190c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80190c6:	687b      	ldr	r3, [r7, #4]
 80190c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80190ca:	f003 0301 	and.w	r3, r3, #1
 80190ce:	2b00      	cmp	r3, #0
 80190d0:	d00a      	beq.n	80190e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80190d2:	687b      	ldr	r3, [r7, #4]
 80190d4:	681b      	ldr	r3, [r3, #0]
 80190d6:	685b      	ldr	r3, [r3, #4]
 80190d8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80190dc:	687b      	ldr	r3, [r7, #4]
 80190de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80190e0:	687b      	ldr	r3, [r7, #4]
 80190e2:	681b      	ldr	r3, [r3, #0]
 80190e4:	430a      	orrs	r2, r1
 80190e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80190e8:	687b      	ldr	r3, [r7, #4]
 80190ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80190ec:	f003 0302 	and.w	r3, r3, #2
 80190f0:	2b00      	cmp	r3, #0
 80190f2:	d00a      	beq.n	801910a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80190f4:	687b      	ldr	r3, [r7, #4]
 80190f6:	681b      	ldr	r3, [r3, #0]
 80190f8:	685b      	ldr	r3, [r3, #4]
 80190fa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80190fe:	687b      	ldr	r3, [r7, #4]
 8019100:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8019102:	687b      	ldr	r3, [r7, #4]
 8019104:	681b      	ldr	r3, [r3, #0]
 8019106:	430a      	orrs	r2, r1
 8019108:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801910a:	687b      	ldr	r3, [r7, #4]
 801910c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801910e:	f003 0304 	and.w	r3, r3, #4
 8019112:	2b00      	cmp	r3, #0
 8019114:	d00a      	beq.n	801912c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8019116:	687b      	ldr	r3, [r7, #4]
 8019118:	681b      	ldr	r3, [r3, #0]
 801911a:	685b      	ldr	r3, [r3, #4]
 801911c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8019120:	687b      	ldr	r3, [r7, #4]
 8019122:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8019124:	687b      	ldr	r3, [r7, #4]
 8019126:	681b      	ldr	r3, [r3, #0]
 8019128:	430a      	orrs	r2, r1
 801912a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801912c:	687b      	ldr	r3, [r7, #4]
 801912e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019130:	f003 0310 	and.w	r3, r3, #16
 8019134:	2b00      	cmp	r3, #0
 8019136:	d00a      	beq.n	801914e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8019138:	687b      	ldr	r3, [r7, #4]
 801913a:	681b      	ldr	r3, [r3, #0]
 801913c:	689b      	ldr	r3, [r3, #8]
 801913e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8019142:	687b      	ldr	r3, [r7, #4]
 8019144:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8019146:	687b      	ldr	r3, [r7, #4]
 8019148:	681b      	ldr	r3, [r3, #0]
 801914a:	430a      	orrs	r2, r1
 801914c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801914e:	687b      	ldr	r3, [r7, #4]
 8019150:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019152:	f003 0320 	and.w	r3, r3, #32
 8019156:	2b00      	cmp	r3, #0
 8019158:	d00a      	beq.n	8019170 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801915a:	687b      	ldr	r3, [r7, #4]
 801915c:	681b      	ldr	r3, [r3, #0]
 801915e:	689b      	ldr	r3, [r3, #8]
 8019160:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8019164:	687b      	ldr	r3, [r7, #4]
 8019166:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8019168:	687b      	ldr	r3, [r7, #4]
 801916a:	681b      	ldr	r3, [r3, #0]
 801916c:	430a      	orrs	r2, r1
 801916e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8019170:	687b      	ldr	r3, [r7, #4]
 8019172:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019174:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8019178:	2b00      	cmp	r3, #0
 801917a:	d01a      	beq.n	80191b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801917c:	687b      	ldr	r3, [r7, #4]
 801917e:	681b      	ldr	r3, [r3, #0]
 8019180:	685b      	ldr	r3, [r3, #4]
 8019182:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8019186:	687b      	ldr	r3, [r7, #4]
 8019188:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801918a:	687b      	ldr	r3, [r7, #4]
 801918c:	681b      	ldr	r3, [r3, #0]
 801918e:	430a      	orrs	r2, r1
 8019190:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8019192:	687b      	ldr	r3, [r7, #4]
 8019194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8019196:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801919a:	d10a      	bne.n	80191b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801919c:	687b      	ldr	r3, [r7, #4]
 801919e:	681b      	ldr	r3, [r3, #0]
 80191a0:	685b      	ldr	r3, [r3, #4]
 80191a2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80191a6:	687b      	ldr	r3, [r7, #4]
 80191a8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80191aa:	687b      	ldr	r3, [r7, #4]
 80191ac:	681b      	ldr	r3, [r3, #0]
 80191ae:	430a      	orrs	r2, r1
 80191b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80191b2:	687b      	ldr	r3, [r7, #4]
 80191b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80191b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80191ba:	2b00      	cmp	r3, #0
 80191bc:	d00a      	beq.n	80191d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80191be:	687b      	ldr	r3, [r7, #4]
 80191c0:	681b      	ldr	r3, [r3, #0]
 80191c2:	685b      	ldr	r3, [r3, #4]
 80191c4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80191c8:	687b      	ldr	r3, [r7, #4]
 80191ca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80191cc:	687b      	ldr	r3, [r7, #4]
 80191ce:	681b      	ldr	r3, [r3, #0]
 80191d0:	430a      	orrs	r2, r1
 80191d2:	605a      	str	r2, [r3, #4]
  }
}
 80191d4:	bf00      	nop
 80191d6:	370c      	adds	r7, #12
 80191d8:	46bd      	mov	sp, r7
 80191da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191de:	4770      	bx	lr

080191e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80191e0:	b580      	push	{r7, lr}
 80191e2:	b098      	sub	sp, #96	@ 0x60
 80191e4:	af02      	add	r7, sp, #8
 80191e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80191e8:	687b      	ldr	r3, [r7, #4]
 80191ea:	2200      	movs	r2, #0
 80191ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80191f0:	f7ef fe88 	bl	8008f04 <HAL_GetTick>
 80191f4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80191f6:	687b      	ldr	r3, [r7, #4]
 80191f8:	681b      	ldr	r3, [r3, #0]
 80191fa:	681b      	ldr	r3, [r3, #0]
 80191fc:	f003 0308 	and.w	r3, r3, #8
 8019200:	2b08      	cmp	r3, #8
 8019202:	d12f      	bne.n	8019264 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8019204:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8019208:	9300      	str	r3, [sp, #0]
 801920a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801920c:	2200      	movs	r2, #0
 801920e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8019212:	6878      	ldr	r0, [r7, #4]
 8019214:	f000 f88e 	bl	8019334 <UART_WaitOnFlagUntilTimeout>
 8019218:	4603      	mov	r3, r0
 801921a:	2b00      	cmp	r3, #0
 801921c:	d022      	beq.n	8019264 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801921e:	687b      	ldr	r3, [r7, #4]
 8019220:	681b      	ldr	r3, [r3, #0]
 8019222:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019224:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019226:	e853 3f00 	ldrex	r3, [r3]
 801922a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801922c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801922e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8019232:	653b      	str	r3, [r7, #80]	@ 0x50
 8019234:	687b      	ldr	r3, [r7, #4]
 8019236:	681b      	ldr	r3, [r3, #0]
 8019238:	461a      	mov	r2, r3
 801923a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801923c:	647b      	str	r3, [r7, #68]	@ 0x44
 801923e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019240:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8019242:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8019244:	e841 2300 	strex	r3, r2, [r1]
 8019248:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801924a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801924c:	2b00      	cmp	r3, #0
 801924e:	d1e6      	bne.n	801921e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8019250:	687b      	ldr	r3, [r7, #4]
 8019252:	2220      	movs	r2, #32
 8019254:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8019258:	687b      	ldr	r3, [r7, #4]
 801925a:	2200      	movs	r2, #0
 801925c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8019260:	2303      	movs	r3, #3
 8019262:	e063      	b.n	801932c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8019264:	687b      	ldr	r3, [r7, #4]
 8019266:	681b      	ldr	r3, [r3, #0]
 8019268:	681b      	ldr	r3, [r3, #0]
 801926a:	f003 0304 	and.w	r3, r3, #4
 801926e:	2b04      	cmp	r3, #4
 8019270:	d149      	bne.n	8019306 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8019272:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8019276:	9300      	str	r3, [sp, #0]
 8019278:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801927a:	2200      	movs	r2, #0
 801927c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8019280:	6878      	ldr	r0, [r7, #4]
 8019282:	f000 f857 	bl	8019334 <UART_WaitOnFlagUntilTimeout>
 8019286:	4603      	mov	r3, r0
 8019288:	2b00      	cmp	r3, #0
 801928a:	d03c      	beq.n	8019306 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801928c:	687b      	ldr	r3, [r7, #4]
 801928e:	681b      	ldr	r3, [r3, #0]
 8019290:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019294:	e853 3f00 	ldrex	r3, [r3]
 8019298:	623b      	str	r3, [r7, #32]
   return(result);
 801929a:	6a3b      	ldr	r3, [r7, #32]
 801929c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80192a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80192a2:	687b      	ldr	r3, [r7, #4]
 80192a4:	681b      	ldr	r3, [r3, #0]
 80192a6:	461a      	mov	r2, r3
 80192a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80192aa:	633b      	str	r3, [r7, #48]	@ 0x30
 80192ac:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80192ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80192b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80192b2:	e841 2300 	strex	r3, r2, [r1]
 80192b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80192b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80192ba:	2b00      	cmp	r3, #0
 80192bc:	d1e6      	bne.n	801928c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80192be:	687b      	ldr	r3, [r7, #4]
 80192c0:	681b      	ldr	r3, [r3, #0]
 80192c2:	3308      	adds	r3, #8
 80192c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80192c6:	693b      	ldr	r3, [r7, #16]
 80192c8:	e853 3f00 	ldrex	r3, [r3]
 80192cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80192ce:	68fb      	ldr	r3, [r7, #12]
 80192d0:	f023 0301 	bic.w	r3, r3, #1
 80192d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80192d6:	687b      	ldr	r3, [r7, #4]
 80192d8:	681b      	ldr	r3, [r3, #0]
 80192da:	3308      	adds	r3, #8
 80192dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80192de:	61fa      	str	r2, [r7, #28]
 80192e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80192e2:	69b9      	ldr	r1, [r7, #24]
 80192e4:	69fa      	ldr	r2, [r7, #28]
 80192e6:	e841 2300 	strex	r3, r2, [r1]
 80192ea:	617b      	str	r3, [r7, #20]
   return(result);
 80192ec:	697b      	ldr	r3, [r7, #20]
 80192ee:	2b00      	cmp	r3, #0
 80192f0:	d1e5      	bne.n	80192be <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80192f2:	687b      	ldr	r3, [r7, #4]
 80192f4:	2220      	movs	r2, #32
 80192f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80192fa:	687b      	ldr	r3, [r7, #4]
 80192fc:	2200      	movs	r2, #0
 80192fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8019302:	2303      	movs	r3, #3
 8019304:	e012      	b.n	801932c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8019306:	687b      	ldr	r3, [r7, #4]
 8019308:	2220      	movs	r2, #32
 801930a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801930e:	687b      	ldr	r3, [r7, #4]
 8019310:	2220      	movs	r2, #32
 8019312:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8019316:	687b      	ldr	r3, [r7, #4]
 8019318:	2200      	movs	r2, #0
 801931a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801931c:	687b      	ldr	r3, [r7, #4]
 801931e:	2200      	movs	r2, #0
 8019320:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8019322:	687b      	ldr	r3, [r7, #4]
 8019324:	2200      	movs	r2, #0
 8019326:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801932a:	2300      	movs	r3, #0
}
 801932c:	4618      	mov	r0, r3
 801932e:	3758      	adds	r7, #88	@ 0x58
 8019330:	46bd      	mov	sp, r7
 8019332:	bd80      	pop	{r7, pc}

08019334 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8019334:	b580      	push	{r7, lr}
 8019336:	b084      	sub	sp, #16
 8019338:	af00      	add	r7, sp, #0
 801933a:	60f8      	str	r0, [r7, #12]
 801933c:	60b9      	str	r1, [r7, #8]
 801933e:	603b      	str	r3, [r7, #0]
 8019340:	4613      	mov	r3, r2
 8019342:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8019344:	e04f      	b.n	80193e6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8019346:	69bb      	ldr	r3, [r7, #24]
 8019348:	f1b3 3fff 	cmp.w	r3, #4294967295
 801934c:	d04b      	beq.n	80193e6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801934e:	f7ef fdd9 	bl	8008f04 <HAL_GetTick>
 8019352:	4602      	mov	r2, r0
 8019354:	683b      	ldr	r3, [r7, #0]
 8019356:	1ad3      	subs	r3, r2, r3
 8019358:	69ba      	ldr	r2, [r7, #24]
 801935a:	429a      	cmp	r2, r3
 801935c:	d302      	bcc.n	8019364 <UART_WaitOnFlagUntilTimeout+0x30>
 801935e:	69bb      	ldr	r3, [r7, #24]
 8019360:	2b00      	cmp	r3, #0
 8019362:	d101      	bne.n	8019368 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8019364:	2303      	movs	r3, #3
 8019366:	e04e      	b.n	8019406 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8019368:	68fb      	ldr	r3, [r7, #12]
 801936a:	681b      	ldr	r3, [r3, #0]
 801936c:	681b      	ldr	r3, [r3, #0]
 801936e:	f003 0304 	and.w	r3, r3, #4
 8019372:	2b00      	cmp	r3, #0
 8019374:	d037      	beq.n	80193e6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8019376:	68bb      	ldr	r3, [r7, #8]
 8019378:	2b80      	cmp	r3, #128	@ 0x80
 801937a:	d034      	beq.n	80193e6 <UART_WaitOnFlagUntilTimeout+0xb2>
 801937c:	68bb      	ldr	r3, [r7, #8]
 801937e:	2b40      	cmp	r3, #64	@ 0x40
 8019380:	d031      	beq.n	80193e6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8019382:	68fb      	ldr	r3, [r7, #12]
 8019384:	681b      	ldr	r3, [r3, #0]
 8019386:	69db      	ldr	r3, [r3, #28]
 8019388:	f003 0308 	and.w	r3, r3, #8
 801938c:	2b08      	cmp	r3, #8
 801938e:	d110      	bne.n	80193b2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8019390:	68fb      	ldr	r3, [r7, #12]
 8019392:	681b      	ldr	r3, [r3, #0]
 8019394:	2208      	movs	r2, #8
 8019396:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8019398:	68f8      	ldr	r0, [r7, #12]
 801939a:	f000 f95b 	bl	8019654 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 801939e:	68fb      	ldr	r3, [r7, #12]
 80193a0:	2208      	movs	r2, #8
 80193a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80193a6:	68fb      	ldr	r3, [r7, #12]
 80193a8:	2200      	movs	r2, #0
 80193aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80193ae:	2301      	movs	r3, #1
 80193b0:	e029      	b.n	8019406 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80193b2:	68fb      	ldr	r3, [r7, #12]
 80193b4:	681b      	ldr	r3, [r3, #0]
 80193b6:	69db      	ldr	r3, [r3, #28]
 80193b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80193bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80193c0:	d111      	bne.n	80193e6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80193c2:	68fb      	ldr	r3, [r7, #12]
 80193c4:	681b      	ldr	r3, [r3, #0]
 80193c6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80193ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80193cc:	68f8      	ldr	r0, [r7, #12]
 80193ce:	f000 f941 	bl	8019654 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80193d2:	68fb      	ldr	r3, [r7, #12]
 80193d4:	2220      	movs	r2, #32
 80193d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80193da:	68fb      	ldr	r3, [r7, #12]
 80193dc:	2200      	movs	r2, #0
 80193de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80193e2:	2303      	movs	r3, #3
 80193e4:	e00f      	b.n	8019406 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80193e6:	68fb      	ldr	r3, [r7, #12]
 80193e8:	681b      	ldr	r3, [r3, #0]
 80193ea:	69da      	ldr	r2, [r3, #28]
 80193ec:	68bb      	ldr	r3, [r7, #8]
 80193ee:	4013      	ands	r3, r2
 80193f0:	68ba      	ldr	r2, [r7, #8]
 80193f2:	429a      	cmp	r2, r3
 80193f4:	bf0c      	ite	eq
 80193f6:	2301      	moveq	r3, #1
 80193f8:	2300      	movne	r3, #0
 80193fa:	b2db      	uxtb	r3, r3
 80193fc:	461a      	mov	r2, r3
 80193fe:	79fb      	ldrb	r3, [r7, #7]
 8019400:	429a      	cmp	r2, r3
 8019402:	d0a0      	beq.n	8019346 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8019404:	2300      	movs	r3, #0
}
 8019406:	4618      	mov	r0, r3
 8019408:	3710      	adds	r7, #16
 801940a:	46bd      	mov	sp, r7
 801940c:	bd80      	pop	{r7, pc}
	...

08019410 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8019410:	b480      	push	{r7}
 8019412:	b0a3      	sub	sp, #140	@ 0x8c
 8019414:	af00      	add	r7, sp, #0
 8019416:	60f8      	str	r0, [r7, #12]
 8019418:	60b9      	str	r1, [r7, #8]
 801941a:	4613      	mov	r3, r2
 801941c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 801941e:	68fb      	ldr	r3, [r7, #12]
 8019420:	68ba      	ldr	r2, [r7, #8]
 8019422:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8019424:	68fb      	ldr	r3, [r7, #12]
 8019426:	88fa      	ldrh	r2, [r7, #6]
 8019428:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 801942c:	68fb      	ldr	r3, [r7, #12]
 801942e:	88fa      	ldrh	r2, [r7, #6]
 8019430:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8019434:	68fb      	ldr	r3, [r7, #12]
 8019436:	2200      	movs	r2, #0
 8019438:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801943a:	68fb      	ldr	r3, [r7, #12]
 801943c:	689b      	ldr	r3, [r3, #8]
 801943e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8019442:	d10e      	bne.n	8019462 <UART_Start_Receive_IT+0x52>
 8019444:	68fb      	ldr	r3, [r7, #12]
 8019446:	691b      	ldr	r3, [r3, #16]
 8019448:	2b00      	cmp	r3, #0
 801944a:	d105      	bne.n	8019458 <UART_Start_Receive_IT+0x48>
 801944c:	68fb      	ldr	r3, [r7, #12]
 801944e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8019452:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8019456:	e02d      	b.n	80194b4 <UART_Start_Receive_IT+0xa4>
 8019458:	68fb      	ldr	r3, [r7, #12]
 801945a:	22ff      	movs	r2, #255	@ 0xff
 801945c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8019460:	e028      	b.n	80194b4 <UART_Start_Receive_IT+0xa4>
 8019462:	68fb      	ldr	r3, [r7, #12]
 8019464:	689b      	ldr	r3, [r3, #8]
 8019466:	2b00      	cmp	r3, #0
 8019468:	d10d      	bne.n	8019486 <UART_Start_Receive_IT+0x76>
 801946a:	68fb      	ldr	r3, [r7, #12]
 801946c:	691b      	ldr	r3, [r3, #16]
 801946e:	2b00      	cmp	r3, #0
 8019470:	d104      	bne.n	801947c <UART_Start_Receive_IT+0x6c>
 8019472:	68fb      	ldr	r3, [r7, #12]
 8019474:	22ff      	movs	r2, #255	@ 0xff
 8019476:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801947a:	e01b      	b.n	80194b4 <UART_Start_Receive_IT+0xa4>
 801947c:	68fb      	ldr	r3, [r7, #12]
 801947e:	227f      	movs	r2, #127	@ 0x7f
 8019480:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8019484:	e016      	b.n	80194b4 <UART_Start_Receive_IT+0xa4>
 8019486:	68fb      	ldr	r3, [r7, #12]
 8019488:	689b      	ldr	r3, [r3, #8]
 801948a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801948e:	d10d      	bne.n	80194ac <UART_Start_Receive_IT+0x9c>
 8019490:	68fb      	ldr	r3, [r7, #12]
 8019492:	691b      	ldr	r3, [r3, #16]
 8019494:	2b00      	cmp	r3, #0
 8019496:	d104      	bne.n	80194a2 <UART_Start_Receive_IT+0x92>
 8019498:	68fb      	ldr	r3, [r7, #12]
 801949a:	227f      	movs	r2, #127	@ 0x7f
 801949c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80194a0:	e008      	b.n	80194b4 <UART_Start_Receive_IT+0xa4>
 80194a2:	68fb      	ldr	r3, [r7, #12]
 80194a4:	223f      	movs	r2, #63	@ 0x3f
 80194a6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80194aa:	e003      	b.n	80194b4 <UART_Start_Receive_IT+0xa4>
 80194ac:	68fb      	ldr	r3, [r7, #12]
 80194ae:	2200      	movs	r2, #0
 80194b0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80194b4:	68fb      	ldr	r3, [r7, #12]
 80194b6:	2200      	movs	r2, #0
 80194b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80194bc:	68fb      	ldr	r3, [r7, #12]
 80194be:	2222      	movs	r2, #34	@ 0x22
 80194c0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80194c4:	68fb      	ldr	r3, [r7, #12]
 80194c6:	681b      	ldr	r3, [r3, #0]
 80194c8:	3308      	adds	r3, #8
 80194ca:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80194cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80194ce:	e853 3f00 	ldrex	r3, [r3]
 80194d2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80194d4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80194d6:	f043 0301 	orr.w	r3, r3, #1
 80194da:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80194de:	68fb      	ldr	r3, [r7, #12]
 80194e0:	681b      	ldr	r3, [r3, #0]
 80194e2:	3308      	adds	r3, #8
 80194e4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80194e8:	673a      	str	r2, [r7, #112]	@ 0x70
 80194ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80194ec:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80194ee:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80194f0:	e841 2300 	strex	r3, r2, [r1]
 80194f4:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80194f6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80194f8:	2b00      	cmp	r3, #0
 80194fa:	d1e3      	bne.n	80194c4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80194fc:	68fb      	ldr	r3, [r7, #12]
 80194fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8019500:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8019504:	d14f      	bne.n	80195a6 <UART_Start_Receive_IT+0x196>
 8019506:	68fb      	ldr	r3, [r7, #12]
 8019508:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801950c:	88fa      	ldrh	r2, [r7, #6]
 801950e:	429a      	cmp	r2, r3
 8019510:	d349      	bcc.n	80195a6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8019512:	68fb      	ldr	r3, [r7, #12]
 8019514:	689b      	ldr	r3, [r3, #8]
 8019516:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801951a:	d107      	bne.n	801952c <UART_Start_Receive_IT+0x11c>
 801951c:	68fb      	ldr	r3, [r7, #12]
 801951e:	691b      	ldr	r3, [r3, #16]
 8019520:	2b00      	cmp	r3, #0
 8019522:	d103      	bne.n	801952c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8019524:	68fb      	ldr	r3, [r7, #12]
 8019526:	4a47      	ldr	r2, [pc, #284]	@ (8019644 <UART_Start_Receive_IT+0x234>)
 8019528:	675a      	str	r2, [r3, #116]	@ 0x74
 801952a:	e002      	b.n	8019532 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 801952c:	68fb      	ldr	r3, [r7, #12]
 801952e:	4a46      	ldr	r2, [pc, #280]	@ (8019648 <UART_Start_Receive_IT+0x238>)
 8019530:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8019532:	68fb      	ldr	r3, [r7, #12]
 8019534:	691b      	ldr	r3, [r3, #16]
 8019536:	2b00      	cmp	r3, #0
 8019538:	d01a      	beq.n	8019570 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801953a:	68fb      	ldr	r3, [r7, #12]
 801953c:	681b      	ldr	r3, [r3, #0]
 801953e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019540:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019542:	e853 3f00 	ldrex	r3, [r3]
 8019546:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8019548:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801954a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801954e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8019552:	68fb      	ldr	r3, [r7, #12]
 8019554:	681b      	ldr	r3, [r3, #0]
 8019556:	461a      	mov	r2, r3
 8019558:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801955c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801955e:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019560:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8019562:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8019564:	e841 2300 	strex	r3, r2, [r1]
 8019568:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 801956a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801956c:	2b00      	cmp	r3, #0
 801956e:	d1e4      	bne.n	801953a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8019570:	68fb      	ldr	r3, [r7, #12]
 8019572:	681b      	ldr	r3, [r3, #0]
 8019574:	3308      	adds	r3, #8
 8019576:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019578:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801957a:	e853 3f00 	ldrex	r3, [r3]
 801957e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8019580:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019582:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8019586:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8019588:	68fb      	ldr	r3, [r7, #12]
 801958a:	681b      	ldr	r3, [r3, #0]
 801958c:	3308      	adds	r3, #8
 801958e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8019590:	64ba      	str	r2, [r7, #72]	@ 0x48
 8019592:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019594:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8019596:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8019598:	e841 2300 	strex	r3, r2, [r1]
 801959c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 801959e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80195a0:	2b00      	cmp	r3, #0
 80195a2:	d1e5      	bne.n	8019570 <UART_Start_Receive_IT+0x160>
 80195a4:	e046      	b.n	8019634 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80195a6:	68fb      	ldr	r3, [r7, #12]
 80195a8:	689b      	ldr	r3, [r3, #8]
 80195aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80195ae:	d107      	bne.n	80195c0 <UART_Start_Receive_IT+0x1b0>
 80195b0:	68fb      	ldr	r3, [r7, #12]
 80195b2:	691b      	ldr	r3, [r3, #16]
 80195b4:	2b00      	cmp	r3, #0
 80195b6:	d103      	bne.n	80195c0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80195b8:	68fb      	ldr	r3, [r7, #12]
 80195ba:	4a24      	ldr	r2, [pc, #144]	@ (801964c <UART_Start_Receive_IT+0x23c>)
 80195bc:	675a      	str	r2, [r3, #116]	@ 0x74
 80195be:	e002      	b.n	80195c6 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80195c0:	68fb      	ldr	r3, [r7, #12]
 80195c2:	4a23      	ldr	r2, [pc, #140]	@ (8019650 <UART_Start_Receive_IT+0x240>)
 80195c4:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80195c6:	68fb      	ldr	r3, [r7, #12]
 80195c8:	691b      	ldr	r3, [r3, #16]
 80195ca:	2b00      	cmp	r3, #0
 80195cc:	d019      	beq.n	8019602 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80195ce:	68fb      	ldr	r3, [r7, #12]
 80195d0:	681b      	ldr	r3, [r3, #0]
 80195d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80195d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80195d6:	e853 3f00 	ldrex	r3, [r3]
 80195da:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80195dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80195de:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80195e2:	677b      	str	r3, [r7, #116]	@ 0x74
 80195e4:	68fb      	ldr	r3, [r7, #12]
 80195e6:	681b      	ldr	r3, [r3, #0]
 80195e8:	461a      	mov	r2, r3
 80195ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80195ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80195ee:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80195f0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80195f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80195f4:	e841 2300 	strex	r3, r2, [r1]
 80195f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80195fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80195fc:	2b00      	cmp	r3, #0
 80195fe:	d1e6      	bne.n	80195ce <UART_Start_Receive_IT+0x1be>
 8019600:	e018      	b.n	8019634 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8019602:	68fb      	ldr	r3, [r7, #12]
 8019604:	681b      	ldr	r3, [r3, #0]
 8019606:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019608:	697b      	ldr	r3, [r7, #20]
 801960a:	e853 3f00 	ldrex	r3, [r3]
 801960e:	613b      	str	r3, [r7, #16]
   return(result);
 8019610:	693b      	ldr	r3, [r7, #16]
 8019612:	f043 0320 	orr.w	r3, r3, #32
 8019616:	67bb      	str	r3, [r7, #120]	@ 0x78
 8019618:	68fb      	ldr	r3, [r7, #12]
 801961a:	681b      	ldr	r3, [r3, #0]
 801961c:	461a      	mov	r2, r3
 801961e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019620:	623b      	str	r3, [r7, #32]
 8019622:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019624:	69f9      	ldr	r1, [r7, #28]
 8019626:	6a3a      	ldr	r2, [r7, #32]
 8019628:	e841 2300 	strex	r3, r2, [r1]
 801962c:	61bb      	str	r3, [r7, #24]
   return(result);
 801962e:	69bb      	ldr	r3, [r7, #24]
 8019630:	2b00      	cmp	r3, #0
 8019632:	d1e6      	bne.n	8019602 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8019634:	2300      	movs	r3, #0
}
 8019636:	4618      	mov	r0, r3
 8019638:	378c      	adds	r7, #140	@ 0x8c
 801963a:	46bd      	mov	sp, r7
 801963c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019640:	4770      	bx	lr
 8019642:	bf00      	nop
 8019644:	0801a1b9 	.word	0x0801a1b9
 8019648:	08019e59 	.word	0x08019e59
 801964c:	08019ca1 	.word	0x08019ca1
 8019650:	08019ae9 	.word	0x08019ae9

08019654 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8019654:	b480      	push	{r7}
 8019656:	b095      	sub	sp, #84	@ 0x54
 8019658:	af00      	add	r7, sp, #0
 801965a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801965c:	687b      	ldr	r3, [r7, #4]
 801965e:	681b      	ldr	r3, [r3, #0]
 8019660:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019662:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019664:	e853 3f00 	ldrex	r3, [r3]
 8019668:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801966a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801966c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8019670:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8019672:	687b      	ldr	r3, [r7, #4]
 8019674:	681b      	ldr	r3, [r3, #0]
 8019676:	461a      	mov	r2, r3
 8019678:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801967a:	643b      	str	r3, [r7, #64]	@ 0x40
 801967c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801967e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8019680:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8019682:	e841 2300 	strex	r3, r2, [r1]
 8019686:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8019688:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801968a:	2b00      	cmp	r3, #0
 801968c:	d1e6      	bne.n	801965c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801968e:	687b      	ldr	r3, [r7, #4]
 8019690:	681b      	ldr	r3, [r3, #0]
 8019692:	3308      	adds	r3, #8
 8019694:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019696:	6a3b      	ldr	r3, [r7, #32]
 8019698:	e853 3f00 	ldrex	r3, [r3]
 801969c:	61fb      	str	r3, [r7, #28]
   return(result);
 801969e:	69fa      	ldr	r2, [r7, #28]
 80196a0:	4b1e      	ldr	r3, [pc, #120]	@ (801971c <UART_EndRxTransfer+0xc8>)
 80196a2:	4013      	ands	r3, r2
 80196a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80196a6:	687b      	ldr	r3, [r7, #4]
 80196a8:	681b      	ldr	r3, [r3, #0]
 80196aa:	3308      	adds	r3, #8
 80196ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80196ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80196b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80196b2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80196b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80196b6:	e841 2300 	strex	r3, r2, [r1]
 80196ba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80196bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80196be:	2b00      	cmp	r3, #0
 80196c0:	d1e5      	bne.n	801968e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80196c2:	687b      	ldr	r3, [r7, #4]
 80196c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80196c6:	2b01      	cmp	r3, #1
 80196c8:	d118      	bne.n	80196fc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80196ca:	687b      	ldr	r3, [r7, #4]
 80196cc:	681b      	ldr	r3, [r3, #0]
 80196ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80196d0:	68fb      	ldr	r3, [r7, #12]
 80196d2:	e853 3f00 	ldrex	r3, [r3]
 80196d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80196d8:	68bb      	ldr	r3, [r7, #8]
 80196da:	f023 0310 	bic.w	r3, r3, #16
 80196de:	647b      	str	r3, [r7, #68]	@ 0x44
 80196e0:	687b      	ldr	r3, [r7, #4]
 80196e2:	681b      	ldr	r3, [r3, #0]
 80196e4:	461a      	mov	r2, r3
 80196e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80196e8:	61bb      	str	r3, [r7, #24]
 80196ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80196ec:	6979      	ldr	r1, [r7, #20]
 80196ee:	69ba      	ldr	r2, [r7, #24]
 80196f0:	e841 2300 	strex	r3, r2, [r1]
 80196f4:	613b      	str	r3, [r7, #16]
   return(result);
 80196f6:	693b      	ldr	r3, [r7, #16]
 80196f8:	2b00      	cmp	r3, #0
 80196fa:	d1e6      	bne.n	80196ca <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80196fc:	687b      	ldr	r3, [r7, #4]
 80196fe:	2220      	movs	r2, #32
 8019700:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8019704:	687b      	ldr	r3, [r7, #4]
 8019706:	2200      	movs	r2, #0
 8019708:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801970a:	687b      	ldr	r3, [r7, #4]
 801970c:	2200      	movs	r2, #0
 801970e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8019710:	bf00      	nop
 8019712:	3754      	adds	r7, #84	@ 0x54
 8019714:	46bd      	mov	sp, r7
 8019716:	f85d 7b04 	ldr.w	r7, [sp], #4
 801971a:	4770      	bx	lr
 801971c:	effffffe 	.word	0xeffffffe

08019720 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8019720:	b580      	push	{r7, lr}
 8019722:	b084      	sub	sp, #16
 8019724:	af00      	add	r7, sp, #0
 8019726:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8019728:	687b      	ldr	r3, [r7, #4]
 801972a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801972c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801972e:	68fb      	ldr	r3, [r7, #12]
 8019730:	2200      	movs	r2, #0
 8019732:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8019736:	68fb      	ldr	r3, [r7, #12]
 8019738:	2200      	movs	r2, #0
 801973a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801973e:	68f8      	ldr	r0, [r7, #12]
 8019740:	f7fe fe2a 	bl	8018398 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8019744:	bf00      	nop
 8019746:	3710      	adds	r7, #16
 8019748:	46bd      	mov	sp, r7
 801974a:	bd80      	pop	{r7, pc}

0801974c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 801974c:	b480      	push	{r7}
 801974e:	b08f      	sub	sp, #60	@ 0x3c
 8019750:	af00      	add	r7, sp, #0
 8019752:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8019754:	687b      	ldr	r3, [r7, #4]
 8019756:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801975a:	2b21      	cmp	r3, #33	@ 0x21
 801975c:	d14c      	bne.n	80197f8 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 801975e:	687b      	ldr	r3, [r7, #4]
 8019760:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019764:	b29b      	uxth	r3, r3
 8019766:	2b00      	cmp	r3, #0
 8019768:	d132      	bne.n	80197d0 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 801976a:	687b      	ldr	r3, [r7, #4]
 801976c:	681b      	ldr	r3, [r3, #0]
 801976e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019770:	6a3b      	ldr	r3, [r7, #32]
 8019772:	e853 3f00 	ldrex	r3, [r3]
 8019776:	61fb      	str	r3, [r7, #28]
   return(result);
 8019778:	69fb      	ldr	r3, [r7, #28]
 801977a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801977e:	637b      	str	r3, [r7, #52]	@ 0x34
 8019780:	687b      	ldr	r3, [r7, #4]
 8019782:	681b      	ldr	r3, [r3, #0]
 8019784:	461a      	mov	r2, r3
 8019786:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019788:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801978a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801978c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801978e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019790:	e841 2300 	strex	r3, r2, [r1]
 8019794:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8019796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019798:	2b00      	cmp	r3, #0
 801979a:	d1e6      	bne.n	801976a <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801979c:	687b      	ldr	r3, [r7, #4]
 801979e:	681b      	ldr	r3, [r3, #0]
 80197a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80197a2:	68fb      	ldr	r3, [r7, #12]
 80197a4:	e853 3f00 	ldrex	r3, [r3]
 80197a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80197aa:	68bb      	ldr	r3, [r7, #8]
 80197ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80197b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80197b2:	687b      	ldr	r3, [r7, #4]
 80197b4:	681b      	ldr	r3, [r3, #0]
 80197b6:	461a      	mov	r2, r3
 80197b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80197ba:	61bb      	str	r3, [r7, #24]
 80197bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80197be:	6979      	ldr	r1, [r7, #20]
 80197c0:	69ba      	ldr	r2, [r7, #24]
 80197c2:	e841 2300 	strex	r3, r2, [r1]
 80197c6:	613b      	str	r3, [r7, #16]
   return(result);
 80197c8:	693b      	ldr	r3, [r7, #16]
 80197ca:	2b00      	cmp	r3, #0
 80197cc:	d1e6      	bne.n	801979c <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80197ce:	e013      	b.n	80197f8 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80197d0:	687b      	ldr	r3, [r7, #4]
 80197d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80197d4:	781a      	ldrb	r2, [r3, #0]
 80197d6:	687b      	ldr	r3, [r7, #4]
 80197d8:	681b      	ldr	r3, [r3, #0]
 80197da:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 80197dc:	687b      	ldr	r3, [r7, #4]
 80197de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80197e0:	1c5a      	adds	r2, r3, #1
 80197e2:	687b      	ldr	r3, [r7, #4]
 80197e4:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 80197e6:	687b      	ldr	r3, [r7, #4]
 80197e8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80197ec:	b29b      	uxth	r3, r3
 80197ee:	3b01      	subs	r3, #1
 80197f0:	b29a      	uxth	r2, r3
 80197f2:	687b      	ldr	r3, [r7, #4]
 80197f4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 80197f8:	bf00      	nop
 80197fa:	373c      	adds	r7, #60	@ 0x3c
 80197fc:	46bd      	mov	sp, r7
 80197fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019802:	4770      	bx	lr

08019804 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8019804:	b480      	push	{r7}
 8019806:	b091      	sub	sp, #68	@ 0x44
 8019808:	af00      	add	r7, sp, #0
 801980a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801980c:	687b      	ldr	r3, [r7, #4]
 801980e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8019812:	2b21      	cmp	r3, #33	@ 0x21
 8019814:	d151      	bne.n	80198ba <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8019816:	687b      	ldr	r3, [r7, #4]
 8019818:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801981c:	b29b      	uxth	r3, r3
 801981e:	2b00      	cmp	r3, #0
 8019820:	d132      	bne.n	8019888 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8019822:	687b      	ldr	r3, [r7, #4]
 8019824:	681b      	ldr	r3, [r3, #0]
 8019826:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801982a:	e853 3f00 	ldrex	r3, [r3]
 801982e:	623b      	str	r3, [r7, #32]
   return(result);
 8019830:	6a3b      	ldr	r3, [r7, #32]
 8019832:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8019836:	63bb      	str	r3, [r7, #56]	@ 0x38
 8019838:	687b      	ldr	r3, [r7, #4]
 801983a:	681b      	ldr	r3, [r3, #0]
 801983c:	461a      	mov	r2, r3
 801983e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019840:	633b      	str	r3, [r7, #48]	@ 0x30
 8019842:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019844:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8019846:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019848:	e841 2300 	strex	r3, r2, [r1]
 801984c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801984e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019850:	2b00      	cmp	r3, #0
 8019852:	d1e6      	bne.n	8019822 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8019854:	687b      	ldr	r3, [r7, #4]
 8019856:	681b      	ldr	r3, [r3, #0]
 8019858:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801985a:	693b      	ldr	r3, [r7, #16]
 801985c:	e853 3f00 	ldrex	r3, [r3]
 8019860:	60fb      	str	r3, [r7, #12]
   return(result);
 8019862:	68fb      	ldr	r3, [r7, #12]
 8019864:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019868:	637b      	str	r3, [r7, #52]	@ 0x34
 801986a:	687b      	ldr	r3, [r7, #4]
 801986c:	681b      	ldr	r3, [r3, #0]
 801986e:	461a      	mov	r2, r3
 8019870:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019872:	61fb      	str	r3, [r7, #28]
 8019874:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019876:	69b9      	ldr	r1, [r7, #24]
 8019878:	69fa      	ldr	r2, [r7, #28]
 801987a:	e841 2300 	strex	r3, r2, [r1]
 801987e:	617b      	str	r3, [r7, #20]
   return(result);
 8019880:	697b      	ldr	r3, [r7, #20]
 8019882:	2b00      	cmp	r3, #0
 8019884:	d1e6      	bne.n	8019854 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8019886:	e018      	b.n	80198ba <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8019888:	687b      	ldr	r3, [r7, #4]
 801988a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801988c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 801988e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019890:	881b      	ldrh	r3, [r3, #0]
 8019892:	461a      	mov	r2, r3
 8019894:	687b      	ldr	r3, [r7, #4]
 8019896:	681b      	ldr	r3, [r3, #0]
 8019898:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801989c:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 801989e:	687b      	ldr	r3, [r7, #4]
 80198a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80198a2:	1c9a      	adds	r2, r3, #2
 80198a4:	687b      	ldr	r3, [r7, #4]
 80198a6:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 80198a8:	687b      	ldr	r3, [r7, #4]
 80198aa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80198ae:	b29b      	uxth	r3, r3
 80198b0:	3b01      	subs	r3, #1
 80198b2:	b29a      	uxth	r2, r3
 80198b4:	687b      	ldr	r3, [r7, #4]
 80198b6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 80198ba:	bf00      	nop
 80198bc:	3744      	adds	r7, #68	@ 0x44
 80198be:	46bd      	mov	sp, r7
 80198c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198c4:	4770      	bx	lr

080198c6 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80198c6:	b480      	push	{r7}
 80198c8:	b091      	sub	sp, #68	@ 0x44
 80198ca:	af00      	add	r7, sp, #0
 80198cc:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80198ce:	687b      	ldr	r3, [r7, #4]
 80198d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80198d4:	2b21      	cmp	r3, #33	@ 0x21
 80198d6:	d160      	bne.n	801999a <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80198d8:	687b      	ldr	r3, [r7, #4]
 80198da:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80198de:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80198e0:	e057      	b.n	8019992 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 80198e2:	687b      	ldr	r3, [r7, #4]
 80198e4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80198e8:	b29b      	uxth	r3, r3
 80198ea:	2b00      	cmp	r3, #0
 80198ec:	d133      	bne.n	8019956 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80198ee:	687b      	ldr	r3, [r7, #4]
 80198f0:	681b      	ldr	r3, [r3, #0]
 80198f2:	3308      	adds	r3, #8
 80198f4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80198f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80198f8:	e853 3f00 	ldrex	r3, [r3]
 80198fc:	623b      	str	r3, [r7, #32]
   return(result);
 80198fe:	6a3b      	ldr	r3, [r7, #32]
 8019900:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8019904:	63bb      	str	r3, [r7, #56]	@ 0x38
 8019906:	687b      	ldr	r3, [r7, #4]
 8019908:	681b      	ldr	r3, [r3, #0]
 801990a:	3308      	adds	r3, #8
 801990c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801990e:	633a      	str	r2, [r7, #48]	@ 0x30
 8019910:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019912:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8019914:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019916:	e841 2300 	strex	r3, r2, [r1]
 801991a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801991c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801991e:	2b00      	cmp	r3, #0
 8019920:	d1e5      	bne.n	80198ee <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8019922:	687b      	ldr	r3, [r7, #4]
 8019924:	681b      	ldr	r3, [r3, #0]
 8019926:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019928:	693b      	ldr	r3, [r7, #16]
 801992a:	e853 3f00 	ldrex	r3, [r3]
 801992e:	60fb      	str	r3, [r7, #12]
   return(result);
 8019930:	68fb      	ldr	r3, [r7, #12]
 8019932:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019936:	637b      	str	r3, [r7, #52]	@ 0x34
 8019938:	687b      	ldr	r3, [r7, #4]
 801993a:	681b      	ldr	r3, [r3, #0]
 801993c:	461a      	mov	r2, r3
 801993e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019940:	61fb      	str	r3, [r7, #28]
 8019942:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019944:	69b9      	ldr	r1, [r7, #24]
 8019946:	69fa      	ldr	r2, [r7, #28]
 8019948:	e841 2300 	strex	r3, r2, [r1]
 801994c:	617b      	str	r3, [r7, #20]
   return(result);
 801994e:	697b      	ldr	r3, [r7, #20]
 8019950:	2b00      	cmp	r3, #0
 8019952:	d1e6      	bne.n	8019922 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8019954:	e021      	b.n	801999a <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8019956:	687b      	ldr	r3, [r7, #4]
 8019958:	681b      	ldr	r3, [r3, #0]
 801995a:	69db      	ldr	r3, [r3, #28]
 801995c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8019960:	2b00      	cmp	r3, #0
 8019962:	d013      	beq.n	801998c <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8019964:	687b      	ldr	r3, [r7, #4]
 8019966:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019968:	781a      	ldrb	r2, [r3, #0]
 801996a:	687b      	ldr	r3, [r7, #4]
 801996c:	681b      	ldr	r3, [r3, #0]
 801996e:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8019970:	687b      	ldr	r3, [r7, #4]
 8019972:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019974:	1c5a      	adds	r2, r3, #1
 8019976:	687b      	ldr	r3, [r7, #4]
 8019978:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 801997a:	687b      	ldr	r3, [r7, #4]
 801997c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019980:	b29b      	uxth	r3, r3
 8019982:	3b01      	subs	r3, #1
 8019984:	b29a      	uxth	r2, r3
 8019986:	687b      	ldr	r3, [r7, #4]
 8019988:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 801998c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801998e:	3b01      	subs	r3, #1
 8019990:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8019992:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8019994:	2b00      	cmp	r3, #0
 8019996:	d1a4      	bne.n	80198e2 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8019998:	e7ff      	b.n	801999a <UART_TxISR_8BIT_FIFOEN+0xd4>
 801999a:	bf00      	nop
 801999c:	3744      	adds	r7, #68	@ 0x44
 801999e:	46bd      	mov	sp, r7
 80199a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199a4:	4770      	bx	lr

080199a6 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80199a6:	b480      	push	{r7}
 80199a8:	b091      	sub	sp, #68	@ 0x44
 80199aa:	af00      	add	r7, sp, #0
 80199ac:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80199ae:	687b      	ldr	r3, [r7, #4]
 80199b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80199b4:	2b21      	cmp	r3, #33	@ 0x21
 80199b6:	d165      	bne.n	8019a84 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80199b8:	687b      	ldr	r3, [r7, #4]
 80199ba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80199be:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80199c0:	e05c      	b.n	8019a7c <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 80199c2:	687b      	ldr	r3, [r7, #4]
 80199c4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80199c8:	b29b      	uxth	r3, r3
 80199ca:	2b00      	cmp	r3, #0
 80199cc:	d133      	bne.n	8019a36 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80199ce:	687b      	ldr	r3, [r7, #4]
 80199d0:	681b      	ldr	r3, [r3, #0]
 80199d2:	3308      	adds	r3, #8
 80199d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80199d6:	6a3b      	ldr	r3, [r7, #32]
 80199d8:	e853 3f00 	ldrex	r3, [r3]
 80199dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80199de:	69fb      	ldr	r3, [r7, #28]
 80199e0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80199e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80199e6:	687b      	ldr	r3, [r7, #4]
 80199e8:	681b      	ldr	r3, [r3, #0]
 80199ea:	3308      	adds	r3, #8
 80199ec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80199ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80199f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80199f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80199f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80199f6:	e841 2300 	strex	r3, r2, [r1]
 80199fa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80199fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80199fe:	2b00      	cmp	r3, #0
 8019a00:	d1e5      	bne.n	80199ce <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8019a02:	687b      	ldr	r3, [r7, #4]
 8019a04:	681b      	ldr	r3, [r3, #0]
 8019a06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019a08:	68fb      	ldr	r3, [r7, #12]
 8019a0a:	e853 3f00 	ldrex	r3, [r3]
 8019a0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8019a10:	68bb      	ldr	r3, [r7, #8]
 8019a12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019a16:	633b      	str	r3, [r7, #48]	@ 0x30
 8019a18:	687b      	ldr	r3, [r7, #4]
 8019a1a:	681b      	ldr	r3, [r3, #0]
 8019a1c:	461a      	mov	r2, r3
 8019a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019a20:	61bb      	str	r3, [r7, #24]
 8019a22:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019a24:	6979      	ldr	r1, [r7, #20]
 8019a26:	69ba      	ldr	r2, [r7, #24]
 8019a28:	e841 2300 	strex	r3, r2, [r1]
 8019a2c:	613b      	str	r3, [r7, #16]
   return(result);
 8019a2e:	693b      	ldr	r3, [r7, #16]
 8019a30:	2b00      	cmp	r3, #0
 8019a32:	d1e6      	bne.n	8019a02 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8019a34:	e026      	b.n	8019a84 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8019a36:	687b      	ldr	r3, [r7, #4]
 8019a38:	681b      	ldr	r3, [r3, #0]
 8019a3a:	69db      	ldr	r3, [r3, #28]
 8019a3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8019a40:	2b00      	cmp	r3, #0
 8019a42:	d018      	beq.n	8019a76 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8019a44:	687b      	ldr	r3, [r7, #4]
 8019a46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019a48:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8019a4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019a4c:	881b      	ldrh	r3, [r3, #0]
 8019a4e:	461a      	mov	r2, r3
 8019a50:	687b      	ldr	r3, [r7, #4]
 8019a52:	681b      	ldr	r3, [r3, #0]
 8019a54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8019a58:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 8019a5a:	687b      	ldr	r3, [r7, #4]
 8019a5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019a5e:	1c9a      	adds	r2, r3, #2
 8019a60:	687b      	ldr	r3, [r7, #4]
 8019a62:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8019a64:	687b      	ldr	r3, [r7, #4]
 8019a66:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019a6a:	b29b      	uxth	r3, r3
 8019a6c:	3b01      	subs	r3, #1
 8019a6e:	b29a      	uxth	r2, r3
 8019a70:	687b      	ldr	r3, [r7, #4]
 8019a72:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8019a76:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8019a78:	3b01      	subs	r3, #1
 8019a7a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8019a7c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8019a7e:	2b00      	cmp	r3, #0
 8019a80:	d19f      	bne.n	80199c2 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8019a82:	e7ff      	b.n	8019a84 <UART_TxISR_16BIT_FIFOEN+0xde>
 8019a84:	bf00      	nop
 8019a86:	3744      	adds	r7, #68	@ 0x44
 8019a88:	46bd      	mov	sp, r7
 8019a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a8e:	4770      	bx	lr

08019a90 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8019a90:	b580      	push	{r7, lr}
 8019a92:	b088      	sub	sp, #32
 8019a94:	af00      	add	r7, sp, #0
 8019a96:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8019a98:	687b      	ldr	r3, [r7, #4]
 8019a9a:	681b      	ldr	r3, [r3, #0]
 8019a9c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019a9e:	68fb      	ldr	r3, [r7, #12]
 8019aa0:	e853 3f00 	ldrex	r3, [r3]
 8019aa4:	60bb      	str	r3, [r7, #8]
   return(result);
 8019aa6:	68bb      	ldr	r3, [r7, #8]
 8019aa8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8019aac:	61fb      	str	r3, [r7, #28]
 8019aae:	687b      	ldr	r3, [r7, #4]
 8019ab0:	681b      	ldr	r3, [r3, #0]
 8019ab2:	461a      	mov	r2, r3
 8019ab4:	69fb      	ldr	r3, [r7, #28]
 8019ab6:	61bb      	str	r3, [r7, #24]
 8019ab8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019aba:	6979      	ldr	r1, [r7, #20]
 8019abc:	69ba      	ldr	r2, [r7, #24]
 8019abe:	e841 2300 	strex	r3, r2, [r1]
 8019ac2:	613b      	str	r3, [r7, #16]
   return(result);
 8019ac4:	693b      	ldr	r3, [r7, #16]
 8019ac6:	2b00      	cmp	r3, #0
 8019ac8:	d1e6      	bne.n	8019a98 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8019aca:	687b      	ldr	r3, [r7, #4]
 8019acc:	2220      	movs	r2, #32
 8019ace:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8019ad2:	687b      	ldr	r3, [r7, #4]
 8019ad4:	2200      	movs	r2, #0
 8019ad6:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8019ad8:	6878      	ldr	r0, [r7, #4]
 8019ada:	f7fe fc53 	bl	8018384 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8019ade:	bf00      	nop
 8019ae0:	3720      	adds	r7, #32
 8019ae2:	46bd      	mov	sp, r7
 8019ae4:	bd80      	pop	{r7, pc}
	...

08019ae8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8019ae8:	b580      	push	{r7, lr}
 8019aea:	b09c      	sub	sp, #112	@ 0x70
 8019aec:	af00      	add	r7, sp, #0
 8019aee:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8019af0:	687b      	ldr	r3, [r7, #4]
 8019af2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8019af6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8019afa:	687b      	ldr	r3, [r7, #4]
 8019afc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8019b00:	2b22      	cmp	r3, #34	@ 0x22
 8019b02:	f040 80be 	bne.w	8019c82 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8019b06:	687b      	ldr	r3, [r7, #4]
 8019b08:	681b      	ldr	r3, [r3, #0]
 8019b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019b0c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8019b10:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8019b14:	b2d9      	uxtb	r1, r3
 8019b16:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8019b1a:	b2da      	uxtb	r2, r3
 8019b1c:	687b      	ldr	r3, [r7, #4]
 8019b1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019b20:	400a      	ands	r2, r1
 8019b22:	b2d2      	uxtb	r2, r2
 8019b24:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8019b26:	687b      	ldr	r3, [r7, #4]
 8019b28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019b2a:	1c5a      	adds	r2, r3, #1
 8019b2c:	687b      	ldr	r3, [r7, #4]
 8019b2e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8019b30:	687b      	ldr	r3, [r7, #4]
 8019b32:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8019b36:	b29b      	uxth	r3, r3
 8019b38:	3b01      	subs	r3, #1
 8019b3a:	b29a      	uxth	r2, r3
 8019b3c:	687b      	ldr	r3, [r7, #4]
 8019b3e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8019b42:	687b      	ldr	r3, [r7, #4]
 8019b44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8019b48:	b29b      	uxth	r3, r3
 8019b4a:	2b00      	cmp	r3, #0
 8019b4c:	f040 80a1 	bne.w	8019c92 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8019b50:	687b      	ldr	r3, [r7, #4]
 8019b52:	681b      	ldr	r3, [r3, #0]
 8019b54:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019b56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019b58:	e853 3f00 	ldrex	r3, [r3]
 8019b5c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8019b5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019b60:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8019b64:	66bb      	str	r3, [r7, #104]	@ 0x68
 8019b66:	687b      	ldr	r3, [r7, #4]
 8019b68:	681b      	ldr	r3, [r3, #0]
 8019b6a:	461a      	mov	r2, r3
 8019b6c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8019b6e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8019b70:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019b72:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8019b74:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8019b76:	e841 2300 	strex	r3, r2, [r1]
 8019b7a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8019b7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019b7e:	2b00      	cmp	r3, #0
 8019b80:	d1e6      	bne.n	8019b50 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8019b82:	687b      	ldr	r3, [r7, #4]
 8019b84:	681b      	ldr	r3, [r3, #0]
 8019b86:	3308      	adds	r3, #8
 8019b88:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019b8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019b8c:	e853 3f00 	ldrex	r3, [r3]
 8019b90:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8019b92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019b94:	f023 0301 	bic.w	r3, r3, #1
 8019b98:	667b      	str	r3, [r7, #100]	@ 0x64
 8019b9a:	687b      	ldr	r3, [r7, #4]
 8019b9c:	681b      	ldr	r3, [r3, #0]
 8019b9e:	3308      	adds	r3, #8
 8019ba0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8019ba2:	647a      	str	r2, [r7, #68]	@ 0x44
 8019ba4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019ba6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8019ba8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8019baa:	e841 2300 	strex	r3, r2, [r1]
 8019bae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8019bb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019bb2:	2b00      	cmp	r3, #0
 8019bb4:	d1e5      	bne.n	8019b82 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8019bb6:	687b      	ldr	r3, [r7, #4]
 8019bb8:	2220      	movs	r2, #32
 8019bba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8019bbe:	687b      	ldr	r3, [r7, #4]
 8019bc0:	2200      	movs	r2, #0
 8019bc2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8019bc4:	687b      	ldr	r3, [r7, #4]
 8019bc6:	2200      	movs	r2, #0
 8019bc8:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8019bca:	687b      	ldr	r3, [r7, #4]
 8019bcc:	681b      	ldr	r3, [r3, #0]
 8019bce:	4a33      	ldr	r2, [pc, #204]	@ (8019c9c <UART_RxISR_8BIT+0x1b4>)
 8019bd0:	4293      	cmp	r3, r2
 8019bd2:	d01f      	beq.n	8019c14 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8019bd4:	687b      	ldr	r3, [r7, #4]
 8019bd6:	681b      	ldr	r3, [r3, #0]
 8019bd8:	685b      	ldr	r3, [r3, #4]
 8019bda:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8019bde:	2b00      	cmp	r3, #0
 8019be0:	d018      	beq.n	8019c14 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8019be2:	687b      	ldr	r3, [r7, #4]
 8019be4:	681b      	ldr	r3, [r3, #0]
 8019be6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019bea:	e853 3f00 	ldrex	r3, [r3]
 8019bee:	623b      	str	r3, [r7, #32]
   return(result);
 8019bf0:	6a3b      	ldr	r3, [r7, #32]
 8019bf2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8019bf6:	663b      	str	r3, [r7, #96]	@ 0x60
 8019bf8:	687b      	ldr	r3, [r7, #4]
 8019bfa:	681b      	ldr	r3, [r3, #0]
 8019bfc:	461a      	mov	r2, r3
 8019bfe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8019c00:	633b      	str	r3, [r7, #48]	@ 0x30
 8019c02:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019c04:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8019c06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019c08:	e841 2300 	strex	r3, r2, [r1]
 8019c0c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8019c0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019c10:	2b00      	cmp	r3, #0
 8019c12:	d1e6      	bne.n	8019be2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8019c14:	687b      	ldr	r3, [r7, #4]
 8019c16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019c18:	2b01      	cmp	r3, #1
 8019c1a:	d12e      	bne.n	8019c7a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8019c1c:	687b      	ldr	r3, [r7, #4]
 8019c1e:	2200      	movs	r2, #0
 8019c20:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8019c22:	687b      	ldr	r3, [r7, #4]
 8019c24:	681b      	ldr	r3, [r3, #0]
 8019c26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019c28:	693b      	ldr	r3, [r7, #16]
 8019c2a:	e853 3f00 	ldrex	r3, [r3]
 8019c2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8019c30:	68fb      	ldr	r3, [r7, #12]
 8019c32:	f023 0310 	bic.w	r3, r3, #16
 8019c36:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8019c38:	687b      	ldr	r3, [r7, #4]
 8019c3a:	681b      	ldr	r3, [r3, #0]
 8019c3c:	461a      	mov	r2, r3
 8019c3e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019c40:	61fb      	str	r3, [r7, #28]
 8019c42:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019c44:	69b9      	ldr	r1, [r7, #24]
 8019c46:	69fa      	ldr	r2, [r7, #28]
 8019c48:	e841 2300 	strex	r3, r2, [r1]
 8019c4c:	617b      	str	r3, [r7, #20]
   return(result);
 8019c4e:	697b      	ldr	r3, [r7, #20]
 8019c50:	2b00      	cmp	r3, #0
 8019c52:	d1e6      	bne.n	8019c22 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8019c54:	687b      	ldr	r3, [r7, #4]
 8019c56:	681b      	ldr	r3, [r3, #0]
 8019c58:	69db      	ldr	r3, [r3, #28]
 8019c5a:	f003 0310 	and.w	r3, r3, #16
 8019c5e:	2b10      	cmp	r3, #16
 8019c60:	d103      	bne.n	8019c6a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8019c62:	687b      	ldr	r3, [r7, #4]
 8019c64:	681b      	ldr	r3, [r3, #0]
 8019c66:	2210      	movs	r2, #16
 8019c68:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8019c6a:	687b      	ldr	r3, [r7, #4]
 8019c6c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8019c70:	4619      	mov	r1, r3
 8019c72:	6878      	ldr	r0, [r7, #4]
 8019c74:	f7fe fb9a 	bl	80183ac <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8019c78:	e00b      	b.n	8019c92 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8019c7a:	6878      	ldr	r0, [r7, #4]
 8019c7c:	f7ec fba2 	bl	80063c4 <HAL_UART_RxCpltCallback>
}
 8019c80:	e007      	b.n	8019c92 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8019c82:	687b      	ldr	r3, [r7, #4]
 8019c84:	681b      	ldr	r3, [r3, #0]
 8019c86:	699a      	ldr	r2, [r3, #24]
 8019c88:	687b      	ldr	r3, [r7, #4]
 8019c8a:	681b      	ldr	r3, [r3, #0]
 8019c8c:	f042 0208 	orr.w	r2, r2, #8
 8019c90:	619a      	str	r2, [r3, #24]
}
 8019c92:	bf00      	nop
 8019c94:	3770      	adds	r7, #112	@ 0x70
 8019c96:	46bd      	mov	sp, r7
 8019c98:	bd80      	pop	{r7, pc}
 8019c9a:	bf00      	nop
 8019c9c:	58000c00 	.word	0x58000c00

08019ca0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8019ca0:	b580      	push	{r7, lr}
 8019ca2:	b09c      	sub	sp, #112	@ 0x70
 8019ca4:	af00      	add	r7, sp, #0
 8019ca6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8019ca8:	687b      	ldr	r3, [r7, #4]
 8019caa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8019cae:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8019cb2:	687b      	ldr	r3, [r7, #4]
 8019cb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8019cb8:	2b22      	cmp	r3, #34	@ 0x22
 8019cba:	f040 80be 	bne.w	8019e3a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8019cbe:	687b      	ldr	r3, [r7, #4]
 8019cc0:	681b      	ldr	r3, [r3, #0]
 8019cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019cc4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8019cc8:	687b      	ldr	r3, [r7, #4]
 8019cca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019ccc:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8019cce:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8019cd2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8019cd6:	4013      	ands	r3, r2
 8019cd8:	b29a      	uxth	r2, r3
 8019cda:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8019cdc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8019cde:	687b      	ldr	r3, [r7, #4]
 8019ce0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019ce2:	1c9a      	adds	r2, r3, #2
 8019ce4:	687b      	ldr	r3, [r7, #4]
 8019ce6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8019ce8:	687b      	ldr	r3, [r7, #4]
 8019cea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8019cee:	b29b      	uxth	r3, r3
 8019cf0:	3b01      	subs	r3, #1
 8019cf2:	b29a      	uxth	r2, r3
 8019cf4:	687b      	ldr	r3, [r7, #4]
 8019cf6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8019cfa:	687b      	ldr	r3, [r7, #4]
 8019cfc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8019d00:	b29b      	uxth	r3, r3
 8019d02:	2b00      	cmp	r3, #0
 8019d04:	f040 80a1 	bne.w	8019e4a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8019d08:	687b      	ldr	r3, [r7, #4]
 8019d0a:	681b      	ldr	r3, [r3, #0]
 8019d0c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019d0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019d10:	e853 3f00 	ldrex	r3, [r3]
 8019d14:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8019d16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019d18:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8019d1c:	667b      	str	r3, [r7, #100]	@ 0x64
 8019d1e:	687b      	ldr	r3, [r7, #4]
 8019d20:	681b      	ldr	r3, [r3, #0]
 8019d22:	461a      	mov	r2, r3
 8019d24:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019d26:	657b      	str	r3, [r7, #84]	@ 0x54
 8019d28:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019d2a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8019d2c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8019d2e:	e841 2300 	strex	r3, r2, [r1]
 8019d32:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8019d34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019d36:	2b00      	cmp	r3, #0
 8019d38:	d1e6      	bne.n	8019d08 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8019d3a:	687b      	ldr	r3, [r7, #4]
 8019d3c:	681b      	ldr	r3, [r3, #0]
 8019d3e:	3308      	adds	r3, #8
 8019d40:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019d42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019d44:	e853 3f00 	ldrex	r3, [r3]
 8019d48:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8019d4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019d4c:	f023 0301 	bic.w	r3, r3, #1
 8019d50:	663b      	str	r3, [r7, #96]	@ 0x60
 8019d52:	687b      	ldr	r3, [r7, #4]
 8019d54:	681b      	ldr	r3, [r3, #0]
 8019d56:	3308      	adds	r3, #8
 8019d58:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8019d5a:	643a      	str	r2, [r7, #64]	@ 0x40
 8019d5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019d5e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8019d60:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8019d62:	e841 2300 	strex	r3, r2, [r1]
 8019d66:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8019d68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019d6a:	2b00      	cmp	r3, #0
 8019d6c:	d1e5      	bne.n	8019d3a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8019d6e:	687b      	ldr	r3, [r7, #4]
 8019d70:	2220      	movs	r2, #32
 8019d72:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8019d76:	687b      	ldr	r3, [r7, #4]
 8019d78:	2200      	movs	r2, #0
 8019d7a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8019d7c:	687b      	ldr	r3, [r7, #4]
 8019d7e:	2200      	movs	r2, #0
 8019d80:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8019d82:	687b      	ldr	r3, [r7, #4]
 8019d84:	681b      	ldr	r3, [r3, #0]
 8019d86:	4a33      	ldr	r2, [pc, #204]	@ (8019e54 <UART_RxISR_16BIT+0x1b4>)
 8019d88:	4293      	cmp	r3, r2
 8019d8a:	d01f      	beq.n	8019dcc <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8019d8c:	687b      	ldr	r3, [r7, #4]
 8019d8e:	681b      	ldr	r3, [r3, #0]
 8019d90:	685b      	ldr	r3, [r3, #4]
 8019d92:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8019d96:	2b00      	cmp	r3, #0
 8019d98:	d018      	beq.n	8019dcc <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8019d9a:	687b      	ldr	r3, [r7, #4]
 8019d9c:	681b      	ldr	r3, [r3, #0]
 8019d9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019da0:	6a3b      	ldr	r3, [r7, #32]
 8019da2:	e853 3f00 	ldrex	r3, [r3]
 8019da6:	61fb      	str	r3, [r7, #28]
   return(result);
 8019da8:	69fb      	ldr	r3, [r7, #28]
 8019daa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8019dae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8019db0:	687b      	ldr	r3, [r7, #4]
 8019db2:	681b      	ldr	r3, [r3, #0]
 8019db4:	461a      	mov	r2, r3
 8019db6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019db8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019dba:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019dbc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8019dbe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019dc0:	e841 2300 	strex	r3, r2, [r1]
 8019dc4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8019dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019dc8:	2b00      	cmp	r3, #0
 8019dca:	d1e6      	bne.n	8019d9a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8019dcc:	687b      	ldr	r3, [r7, #4]
 8019dce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019dd0:	2b01      	cmp	r3, #1
 8019dd2:	d12e      	bne.n	8019e32 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8019dd4:	687b      	ldr	r3, [r7, #4]
 8019dd6:	2200      	movs	r2, #0
 8019dd8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8019dda:	687b      	ldr	r3, [r7, #4]
 8019ddc:	681b      	ldr	r3, [r3, #0]
 8019dde:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019de0:	68fb      	ldr	r3, [r7, #12]
 8019de2:	e853 3f00 	ldrex	r3, [r3]
 8019de6:	60bb      	str	r3, [r7, #8]
   return(result);
 8019de8:	68bb      	ldr	r3, [r7, #8]
 8019dea:	f023 0310 	bic.w	r3, r3, #16
 8019dee:	65bb      	str	r3, [r7, #88]	@ 0x58
 8019df0:	687b      	ldr	r3, [r7, #4]
 8019df2:	681b      	ldr	r3, [r3, #0]
 8019df4:	461a      	mov	r2, r3
 8019df6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8019df8:	61bb      	str	r3, [r7, #24]
 8019dfa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019dfc:	6979      	ldr	r1, [r7, #20]
 8019dfe:	69ba      	ldr	r2, [r7, #24]
 8019e00:	e841 2300 	strex	r3, r2, [r1]
 8019e04:	613b      	str	r3, [r7, #16]
   return(result);
 8019e06:	693b      	ldr	r3, [r7, #16]
 8019e08:	2b00      	cmp	r3, #0
 8019e0a:	d1e6      	bne.n	8019dda <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8019e0c:	687b      	ldr	r3, [r7, #4]
 8019e0e:	681b      	ldr	r3, [r3, #0]
 8019e10:	69db      	ldr	r3, [r3, #28]
 8019e12:	f003 0310 	and.w	r3, r3, #16
 8019e16:	2b10      	cmp	r3, #16
 8019e18:	d103      	bne.n	8019e22 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8019e1a:	687b      	ldr	r3, [r7, #4]
 8019e1c:	681b      	ldr	r3, [r3, #0]
 8019e1e:	2210      	movs	r2, #16
 8019e20:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8019e22:	687b      	ldr	r3, [r7, #4]
 8019e24:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8019e28:	4619      	mov	r1, r3
 8019e2a:	6878      	ldr	r0, [r7, #4]
 8019e2c:	f7fe fabe 	bl	80183ac <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8019e30:	e00b      	b.n	8019e4a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8019e32:	6878      	ldr	r0, [r7, #4]
 8019e34:	f7ec fac6 	bl	80063c4 <HAL_UART_RxCpltCallback>
}
 8019e38:	e007      	b.n	8019e4a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8019e3a:	687b      	ldr	r3, [r7, #4]
 8019e3c:	681b      	ldr	r3, [r3, #0]
 8019e3e:	699a      	ldr	r2, [r3, #24]
 8019e40:	687b      	ldr	r3, [r7, #4]
 8019e42:	681b      	ldr	r3, [r3, #0]
 8019e44:	f042 0208 	orr.w	r2, r2, #8
 8019e48:	619a      	str	r2, [r3, #24]
}
 8019e4a:	bf00      	nop
 8019e4c:	3770      	adds	r7, #112	@ 0x70
 8019e4e:	46bd      	mov	sp, r7
 8019e50:	bd80      	pop	{r7, pc}
 8019e52:	bf00      	nop
 8019e54:	58000c00 	.word	0x58000c00

08019e58 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8019e58:	b580      	push	{r7, lr}
 8019e5a:	b0ac      	sub	sp, #176	@ 0xb0
 8019e5c:	af00      	add	r7, sp, #0
 8019e5e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8019e60:	687b      	ldr	r3, [r7, #4]
 8019e62:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8019e66:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8019e6a:	687b      	ldr	r3, [r7, #4]
 8019e6c:	681b      	ldr	r3, [r3, #0]
 8019e6e:	69db      	ldr	r3, [r3, #28]
 8019e70:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8019e74:	687b      	ldr	r3, [r7, #4]
 8019e76:	681b      	ldr	r3, [r3, #0]
 8019e78:	681b      	ldr	r3, [r3, #0]
 8019e7a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8019e7e:	687b      	ldr	r3, [r7, #4]
 8019e80:	681b      	ldr	r3, [r3, #0]
 8019e82:	689b      	ldr	r3, [r3, #8]
 8019e84:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8019e88:	687b      	ldr	r3, [r7, #4]
 8019e8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8019e8e:	2b22      	cmp	r3, #34	@ 0x22
 8019e90:	f040 8180 	bne.w	801a194 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8019e94:	687b      	ldr	r3, [r7, #4]
 8019e96:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8019e9a:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8019e9e:	e123      	b.n	801a0e8 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8019ea0:	687b      	ldr	r3, [r7, #4]
 8019ea2:	681b      	ldr	r3, [r3, #0]
 8019ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019ea6:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8019eaa:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8019eae:	b2d9      	uxtb	r1, r3
 8019eb0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8019eb4:	b2da      	uxtb	r2, r3
 8019eb6:	687b      	ldr	r3, [r7, #4]
 8019eb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019eba:	400a      	ands	r2, r1
 8019ebc:	b2d2      	uxtb	r2, r2
 8019ebe:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8019ec0:	687b      	ldr	r3, [r7, #4]
 8019ec2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019ec4:	1c5a      	adds	r2, r3, #1
 8019ec6:	687b      	ldr	r3, [r7, #4]
 8019ec8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8019eca:	687b      	ldr	r3, [r7, #4]
 8019ecc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8019ed0:	b29b      	uxth	r3, r3
 8019ed2:	3b01      	subs	r3, #1
 8019ed4:	b29a      	uxth	r2, r3
 8019ed6:	687b      	ldr	r3, [r7, #4]
 8019ed8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8019edc:	687b      	ldr	r3, [r7, #4]
 8019ede:	681b      	ldr	r3, [r3, #0]
 8019ee0:	69db      	ldr	r3, [r3, #28]
 8019ee2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8019ee6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8019eea:	f003 0307 	and.w	r3, r3, #7
 8019eee:	2b00      	cmp	r3, #0
 8019ef0:	d053      	beq.n	8019f9a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8019ef2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8019ef6:	f003 0301 	and.w	r3, r3, #1
 8019efa:	2b00      	cmp	r3, #0
 8019efc:	d011      	beq.n	8019f22 <UART_RxISR_8BIT_FIFOEN+0xca>
 8019efe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8019f02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8019f06:	2b00      	cmp	r3, #0
 8019f08:	d00b      	beq.n	8019f22 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8019f0a:	687b      	ldr	r3, [r7, #4]
 8019f0c:	681b      	ldr	r3, [r3, #0]
 8019f0e:	2201      	movs	r2, #1
 8019f10:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8019f12:	687b      	ldr	r3, [r7, #4]
 8019f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8019f18:	f043 0201 	orr.w	r2, r3, #1
 8019f1c:	687b      	ldr	r3, [r7, #4]
 8019f1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8019f22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8019f26:	f003 0302 	and.w	r3, r3, #2
 8019f2a:	2b00      	cmp	r3, #0
 8019f2c:	d011      	beq.n	8019f52 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8019f2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8019f32:	f003 0301 	and.w	r3, r3, #1
 8019f36:	2b00      	cmp	r3, #0
 8019f38:	d00b      	beq.n	8019f52 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8019f3a:	687b      	ldr	r3, [r7, #4]
 8019f3c:	681b      	ldr	r3, [r3, #0]
 8019f3e:	2202      	movs	r2, #2
 8019f40:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8019f42:	687b      	ldr	r3, [r7, #4]
 8019f44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8019f48:	f043 0204 	orr.w	r2, r3, #4
 8019f4c:	687b      	ldr	r3, [r7, #4]
 8019f4e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8019f52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8019f56:	f003 0304 	and.w	r3, r3, #4
 8019f5a:	2b00      	cmp	r3, #0
 8019f5c:	d011      	beq.n	8019f82 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8019f5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8019f62:	f003 0301 	and.w	r3, r3, #1
 8019f66:	2b00      	cmp	r3, #0
 8019f68:	d00b      	beq.n	8019f82 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8019f6a:	687b      	ldr	r3, [r7, #4]
 8019f6c:	681b      	ldr	r3, [r3, #0]
 8019f6e:	2204      	movs	r2, #4
 8019f70:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8019f72:	687b      	ldr	r3, [r7, #4]
 8019f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8019f78:	f043 0202 	orr.w	r2, r3, #2
 8019f7c:	687b      	ldr	r3, [r7, #4]
 8019f7e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8019f82:	687b      	ldr	r3, [r7, #4]
 8019f84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8019f88:	2b00      	cmp	r3, #0
 8019f8a:	d006      	beq.n	8019f9a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8019f8c:	6878      	ldr	r0, [r7, #4]
 8019f8e:	f7fe fa03 	bl	8018398 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8019f92:	687b      	ldr	r3, [r7, #4]
 8019f94:	2200      	movs	r2, #0
 8019f96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8019f9a:	687b      	ldr	r3, [r7, #4]
 8019f9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8019fa0:	b29b      	uxth	r3, r3
 8019fa2:	2b00      	cmp	r3, #0
 8019fa4:	f040 80a0 	bne.w	801a0e8 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8019fa8:	687b      	ldr	r3, [r7, #4]
 8019faa:	681b      	ldr	r3, [r3, #0]
 8019fac:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019fae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8019fb0:	e853 3f00 	ldrex	r3, [r3]
 8019fb4:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8019fb6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8019fb8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8019fbc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8019fc0:	687b      	ldr	r3, [r7, #4]
 8019fc2:	681b      	ldr	r3, [r3, #0]
 8019fc4:	461a      	mov	r2, r3
 8019fc6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8019fca:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8019fcc:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019fce:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8019fd0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8019fd2:	e841 2300 	strex	r3, r2, [r1]
 8019fd6:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8019fd8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8019fda:	2b00      	cmp	r3, #0
 8019fdc:	d1e4      	bne.n	8019fa8 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8019fde:	687b      	ldr	r3, [r7, #4]
 8019fe0:	681b      	ldr	r3, [r3, #0]
 8019fe2:	3308      	adds	r3, #8
 8019fe4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019fe6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019fe8:	e853 3f00 	ldrex	r3, [r3]
 8019fec:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8019fee:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8019ff0:	4b6e      	ldr	r3, [pc, #440]	@ (801a1ac <UART_RxISR_8BIT_FIFOEN+0x354>)
 8019ff2:	4013      	ands	r3, r2
 8019ff4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8019ff8:	687b      	ldr	r3, [r7, #4]
 8019ffa:	681b      	ldr	r3, [r3, #0]
 8019ffc:	3308      	adds	r3, #8
 8019ffe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801a002:	66ba      	str	r2, [r7, #104]	@ 0x68
 801a004:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a006:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 801a008:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801a00a:	e841 2300 	strex	r3, r2, [r1]
 801a00e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 801a010:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a012:	2b00      	cmp	r3, #0
 801a014:	d1e3      	bne.n	8019fde <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801a016:	687b      	ldr	r3, [r7, #4]
 801a018:	2220      	movs	r2, #32
 801a01a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801a01e:	687b      	ldr	r3, [r7, #4]
 801a020:	2200      	movs	r2, #0
 801a022:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 801a024:	687b      	ldr	r3, [r7, #4]
 801a026:	2200      	movs	r2, #0
 801a028:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801a02a:	687b      	ldr	r3, [r7, #4]
 801a02c:	681b      	ldr	r3, [r3, #0]
 801a02e:	4a60      	ldr	r2, [pc, #384]	@ (801a1b0 <UART_RxISR_8BIT_FIFOEN+0x358>)
 801a030:	4293      	cmp	r3, r2
 801a032:	d021      	beq.n	801a078 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801a034:	687b      	ldr	r3, [r7, #4]
 801a036:	681b      	ldr	r3, [r3, #0]
 801a038:	685b      	ldr	r3, [r3, #4]
 801a03a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801a03e:	2b00      	cmp	r3, #0
 801a040:	d01a      	beq.n	801a078 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801a042:	687b      	ldr	r3, [r7, #4]
 801a044:	681b      	ldr	r3, [r3, #0]
 801a046:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a048:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a04a:	e853 3f00 	ldrex	r3, [r3]
 801a04e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 801a050:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a052:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801a056:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801a05a:	687b      	ldr	r3, [r7, #4]
 801a05c:	681b      	ldr	r3, [r3, #0]
 801a05e:	461a      	mov	r2, r3
 801a060:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801a064:	657b      	str	r3, [r7, #84]	@ 0x54
 801a066:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a068:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801a06a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801a06c:	e841 2300 	strex	r3, r2, [r1]
 801a070:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 801a072:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a074:	2b00      	cmp	r3, #0
 801a076:	d1e4      	bne.n	801a042 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801a078:	687b      	ldr	r3, [r7, #4]
 801a07a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a07c:	2b01      	cmp	r3, #1
 801a07e:	d130      	bne.n	801a0e2 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a080:	687b      	ldr	r3, [r7, #4]
 801a082:	2200      	movs	r2, #0
 801a084:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801a086:	687b      	ldr	r3, [r7, #4]
 801a088:	681b      	ldr	r3, [r3, #0]
 801a08a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a08c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a08e:	e853 3f00 	ldrex	r3, [r3]
 801a092:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801a094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a096:	f023 0310 	bic.w	r3, r3, #16
 801a09a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801a09e:	687b      	ldr	r3, [r7, #4]
 801a0a0:	681b      	ldr	r3, [r3, #0]
 801a0a2:	461a      	mov	r2, r3
 801a0a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801a0a8:	643b      	str	r3, [r7, #64]	@ 0x40
 801a0aa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a0ac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801a0ae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801a0b0:	e841 2300 	strex	r3, r2, [r1]
 801a0b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801a0b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a0b8:	2b00      	cmp	r3, #0
 801a0ba:	d1e4      	bne.n	801a086 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801a0bc:	687b      	ldr	r3, [r7, #4]
 801a0be:	681b      	ldr	r3, [r3, #0]
 801a0c0:	69db      	ldr	r3, [r3, #28]
 801a0c2:	f003 0310 	and.w	r3, r3, #16
 801a0c6:	2b10      	cmp	r3, #16
 801a0c8:	d103      	bne.n	801a0d2 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801a0ca:	687b      	ldr	r3, [r7, #4]
 801a0cc:	681b      	ldr	r3, [r3, #0]
 801a0ce:	2210      	movs	r2, #16
 801a0d0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801a0d2:	687b      	ldr	r3, [r7, #4]
 801a0d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801a0d8:	4619      	mov	r1, r3
 801a0da:	6878      	ldr	r0, [r7, #4]
 801a0dc:	f7fe f966 	bl	80183ac <HAL_UARTEx_RxEventCallback>
 801a0e0:	e002      	b.n	801a0e8 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 801a0e2:	6878      	ldr	r0, [r7, #4]
 801a0e4:	f7ec f96e 	bl	80063c4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801a0e8:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 801a0ec:	2b00      	cmp	r3, #0
 801a0ee:	d006      	beq.n	801a0fe <UART_RxISR_8BIT_FIFOEN+0x2a6>
 801a0f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801a0f4:	f003 0320 	and.w	r3, r3, #32
 801a0f8:	2b00      	cmp	r3, #0
 801a0fa:	f47f aed1 	bne.w	8019ea0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801a0fe:	687b      	ldr	r3, [r7, #4]
 801a100:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a104:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801a108:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 801a10c:	2b00      	cmp	r3, #0
 801a10e:	d049      	beq.n	801a1a4 <UART_RxISR_8BIT_FIFOEN+0x34c>
 801a110:	687b      	ldr	r3, [r7, #4]
 801a112:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801a116:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 801a11a:	429a      	cmp	r2, r3
 801a11c:	d242      	bcs.n	801a1a4 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801a11e:	687b      	ldr	r3, [r7, #4]
 801a120:	681b      	ldr	r3, [r3, #0]
 801a122:	3308      	adds	r3, #8
 801a124:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a126:	6a3b      	ldr	r3, [r7, #32]
 801a128:	e853 3f00 	ldrex	r3, [r3]
 801a12c:	61fb      	str	r3, [r7, #28]
   return(result);
 801a12e:	69fb      	ldr	r3, [r7, #28]
 801a130:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801a134:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801a138:	687b      	ldr	r3, [r7, #4]
 801a13a:	681b      	ldr	r3, [r3, #0]
 801a13c:	3308      	adds	r3, #8
 801a13e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 801a142:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801a144:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a146:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801a148:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a14a:	e841 2300 	strex	r3, r2, [r1]
 801a14e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801a150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a152:	2b00      	cmp	r3, #0
 801a154:	d1e3      	bne.n	801a11e <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 801a156:	687b      	ldr	r3, [r7, #4]
 801a158:	4a16      	ldr	r2, [pc, #88]	@ (801a1b4 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 801a15a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801a15c:	687b      	ldr	r3, [r7, #4]
 801a15e:	681b      	ldr	r3, [r3, #0]
 801a160:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a162:	68fb      	ldr	r3, [r7, #12]
 801a164:	e853 3f00 	ldrex	r3, [r3]
 801a168:	60bb      	str	r3, [r7, #8]
   return(result);
 801a16a:	68bb      	ldr	r3, [r7, #8]
 801a16c:	f043 0320 	orr.w	r3, r3, #32
 801a170:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801a174:	687b      	ldr	r3, [r7, #4]
 801a176:	681b      	ldr	r3, [r3, #0]
 801a178:	461a      	mov	r2, r3
 801a17a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801a17e:	61bb      	str	r3, [r7, #24]
 801a180:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a182:	6979      	ldr	r1, [r7, #20]
 801a184:	69ba      	ldr	r2, [r7, #24]
 801a186:	e841 2300 	strex	r3, r2, [r1]
 801a18a:	613b      	str	r3, [r7, #16]
   return(result);
 801a18c:	693b      	ldr	r3, [r7, #16]
 801a18e:	2b00      	cmp	r3, #0
 801a190:	d1e4      	bne.n	801a15c <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801a192:	e007      	b.n	801a1a4 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801a194:	687b      	ldr	r3, [r7, #4]
 801a196:	681b      	ldr	r3, [r3, #0]
 801a198:	699a      	ldr	r2, [r3, #24]
 801a19a:	687b      	ldr	r3, [r7, #4]
 801a19c:	681b      	ldr	r3, [r3, #0]
 801a19e:	f042 0208 	orr.w	r2, r2, #8
 801a1a2:	619a      	str	r2, [r3, #24]
}
 801a1a4:	bf00      	nop
 801a1a6:	37b0      	adds	r7, #176	@ 0xb0
 801a1a8:	46bd      	mov	sp, r7
 801a1aa:	bd80      	pop	{r7, pc}
 801a1ac:	effffffe 	.word	0xeffffffe
 801a1b0:	58000c00 	.word	0x58000c00
 801a1b4:	08019ae9 	.word	0x08019ae9

0801a1b8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801a1b8:	b580      	push	{r7, lr}
 801a1ba:	b0ae      	sub	sp, #184	@ 0xb8
 801a1bc:	af00      	add	r7, sp, #0
 801a1be:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 801a1c0:	687b      	ldr	r3, [r7, #4]
 801a1c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801a1c6:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801a1ca:	687b      	ldr	r3, [r7, #4]
 801a1cc:	681b      	ldr	r3, [r3, #0]
 801a1ce:	69db      	ldr	r3, [r3, #28]
 801a1d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 801a1d4:	687b      	ldr	r3, [r7, #4]
 801a1d6:	681b      	ldr	r3, [r3, #0]
 801a1d8:	681b      	ldr	r3, [r3, #0]
 801a1da:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801a1de:	687b      	ldr	r3, [r7, #4]
 801a1e0:	681b      	ldr	r3, [r3, #0]
 801a1e2:	689b      	ldr	r3, [r3, #8]
 801a1e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801a1e8:	687b      	ldr	r3, [r7, #4]
 801a1ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801a1ee:	2b22      	cmp	r3, #34	@ 0x22
 801a1f0:	f040 8184 	bne.w	801a4fc <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 801a1f4:	687b      	ldr	r3, [r7, #4]
 801a1f6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801a1fa:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801a1fe:	e127      	b.n	801a450 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801a200:	687b      	ldr	r3, [r7, #4]
 801a202:	681b      	ldr	r3, [r3, #0]
 801a204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a206:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 801a20a:	687b      	ldr	r3, [r7, #4]
 801a20c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a20e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 801a212:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 801a216:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 801a21a:	4013      	ands	r3, r2
 801a21c:	b29a      	uxth	r2, r3
 801a21e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801a222:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 801a224:	687b      	ldr	r3, [r7, #4]
 801a226:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a228:	1c9a      	adds	r2, r3, #2
 801a22a:	687b      	ldr	r3, [r7, #4]
 801a22c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 801a22e:	687b      	ldr	r3, [r7, #4]
 801a230:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a234:	b29b      	uxth	r3, r3
 801a236:	3b01      	subs	r3, #1
 801a238:	b29a      	uxth	r2, r3
 801a23a:	687b      	ldr	r3, [r7, #4]
 801a23c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 801a240:	687b      	ldr	r3, [r7, #4]
 801a242:	681b      	ldr	r3, [r3, #0]
 801a244:	69db      	ldr	r3, [r3, #28]
 801a246:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801a24a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801a24e:	f003 0307 	and.w	r3, r3, #7
 801a252:	2b00      	cmp	r3, #0
 801a254:	d053      	beq.n	801a2fe <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801a256:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801a25a:	f003 0301 	and.w	r3, r3, #1
 801a25e:	2b00      	cmp	r3, #0
 801a260:	d011      	beq.n	801a286 <UART_RxISR_16BIT_FIFOEN+0xce>
 801a262:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801a266:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801a26a:	2b00      	cmp	r3, #0
 801a26c:	d00b      	beq.n	801a286 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801a26e:	687b      	ldr	r3, [r7, #4]
 801a270:	681b      	ldr	r3, [r3, #0]
 801a272:	2201      	movs	r2, #1
 801a274:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801a276:	687b      	ldr	r3, [r7, #4]
 801a278:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a27c:	f043 0201 	orr.w	r2, r3, #1
 801a280:	687b      	ldr	r3, [r7, #4]
 801a282:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801a286:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801a28a:	f003 0302 	and.w	r3, r3, #2
 801a28e:	2b00      	cmp	r3, #0
 801a290:	d011      	beq.n	801a2b6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 801a292:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801a296:	f003 0301 	and.w	r3, r3, #1
 801a29a:	2b00      	cmp	r3, #0
 801a29c:	d00b      	beq.n	801a2b6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801a29e:	687b      	ldr	r3, [r7, #4]
 801a2a0:	681b      	ldr	r3, [r3, #0]
 801a2a2:	2202      	movs	r2, #2
 801a2a4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801a2a6:	687b      	ldr	r3, [r7, #4]
 801a2a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a2ac:	f043 0204 	orr.w	r2, r3, #4
 801a2b0:	687b      	ldr	r3, [r7, #4]
 801a2b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801a2b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801a2ba:	f003 0304 	and.w	r3, r3, #4
 801a2be:	2b00      	cmp	r3, #0
 801a2c0:	d011      	beq.n	801a2e6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 801a2c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801a2c6:	f003 0301 	and.w	r3, r3, #1
 801a2ca:	2b00      	cmp	r3, #0
 801a2cc:	d00b      	beq.n	801a2e6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801a2ce:	687b      	ldr	r3, [r7, #4]
 801a2d0:	681b      	ldr	r3, [r3, #0]
 801a2d2:	2204      	movs	r2, #4
 801a2d4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801a2d6:	687b      	ldr	r3, [r7, #4]
 801a2d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a2dc:	f043 0202 	orr.w	r2, r3, #2
 801a2e0:	687b      	ldr	r3, [r7, #4]
 801a2e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801a2e6:	687b      	ldr	r3, [r7, #4]
 801a2e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a2ec:	2b00      	cmp	r3, #0
 801a2ee:	d006      	beq.n	801a2fe <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801a2f0:	6878      	ldr	r0, [r7, #4]
 801a2f2:	f7fe f851 	bl	8018398 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801a2f6:	687b      	ldr	r3, [r7, #4]
 801a2f8:	2200      	movs	r2, #0
 801a2fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801a2fe:	687b      	ldr	r3, [r7, #4]
 801a300:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a304:	b29b      	uxth	r3, r3
 801a306:	2b00      	cmp	r3, #0
 801a308:	f040 80a2 	bne.w	801a450 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801a30c:	687b      	ldr	r3, [r7, #4]
 801a30e:	681b      	ldr	r3, [r3, #0]
 801a310:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a312:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801a314:	e853 3f00 	ldrex	r3, [r3]
 801a318:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 801a31a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a31c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801a320:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801a324:	687b      	ldr	r3, [r7, #4]
 801a326:	681b      	ldr	r3, [r3, #0]
 801a328:	461a      	mov	r2, r3
 801a32a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801a32e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801a332:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a334:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 801a336:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801a33a:	e841 2300 	strex	r3, r2, [r1]
 801a33e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 801a340:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a342:	2b00      	cmp	r3, #0
 801a344:	d1e2      	bne.n	801a30c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801a346:	687b      	ldr	r3, [r7, #4]
 801a348:	681b      	ldr	r3, [r3, #0]
 801a34a:	3308      	adds	r3, #8
 801a34c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a34e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a350:	e853 3f00 	ldrex	r3, [r3]
 801a354:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 801a356:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801a358:	4b6e      	ldr	r3, [pc, #440]	@ (801a514 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 801a35a:	4013      	ands	r3, r2
 801a35c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801a360:	687b      	ldr	r3, [r7, #4]
 801a362:	681b      	ldr	r3, [r3, #0]
 801a364:	3308      	adds	r3, #8
 801a366:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 801a36a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 801a36c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a36e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 801a370:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801a372:	e841 2300 	strex	r3, r2, [r1]
 801a376:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 801a378:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a37a:	2b00      	cmp	r3, #0
 801a37c:	d1e3      	bne.n	801a346 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801a37e:	687b      	ldr	r3, [r7, #4]
 801a380:	2220      	movs	r2, #32
 801a382:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801a386:	687b      	ldr	r3, [r7, #4]
 801a388:	2200      	movs	r2, #0
 801a38a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 801a38c:	687b      	ldr	r3, [r7, #4]
 801a38e:	2200      	movs	r2, #0
 801a390:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801a392:	687b      	ldr	r3, [r7, #4]
 801a394:	681b      	ldr	r3, [r3, #0]
 801a396:	4a60      	ldr	r2, [pc, #384]	@ (801a518 <UART_RxISR_16BIT_FIFOEN+0x360>)
 801a398:	4293      	cmp	r3, r2
 801a39a:	d021      	beq.n	801a3e0 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801a39c:	687b      	ldr	r3, [r7, #4]
 801a39e:	681b      	ldr	r3, [r3, #0]
 801a3a0:	685b      	ldr	r3, [r3, #4]
 801a3a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801a3a6:	2b00      	cmp	r3, #0
 801a3a8:	d01a      	beq.n	801a3e0 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801a3aa:	687b      	ldr	r3, [r7, #4]
 801a3ac:	681b      	ldr	r3, [r3, #0]
 801a3ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a3b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a3b2:	e853 3f00 	ldrex	r3, [r3]
 801a3b6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801a3b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a3ba:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801a3be:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801a3c2:	687b      	ldr	r3, [r7, #4]
 801a3c4:	681b      	ldr	r3, [r3, #0]
 801a3c6:	461a      	mov	r2, r3
 801a3c8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801a3cc:	65bb      	str	r3, [r7, #88]	@ 0x58
 801a3ce:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a3d0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801a3d2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a3d4:	e841 2300 	strex	r3, r2, [r1]
 801a3d8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801a3da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a3dc:	2b00      	cmp	r3, #0
 801a3de:	d1e4      	bne.n	801a3aa <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801a3e0:	687b      	ldr	r3, [r7, #4]
 801a3e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a3e4:	2b01      	cmp	r3, #1
 801a3e6:	d130      	bne.n	801a44a <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a3e8:	687b      	ldr	r3, [r7, #4]
 801a3ea:	2200      	movs	r2, #0
 801a3ec:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801a3ee:	687b      	ldr	r3, [r7, #4]
 801a3f0:	681b      	ldr	r3, [r3, #0]
 801a3f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a3f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a3f6:	e853 3f00 	ldrex	r3, [r3]
 801a3fa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801a3fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a3fe:	f023 0310 	bic.w	r3, r3, #16
 801a402:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801a406:	687b      	ldr	r3, [r7, #4]
 801a408:	681b      	ldr	r3, [r3, #0]
 801a40a:	461a      	mov	r2, r3
 801a40c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801a410:	647b      	str	r3, [r7, #68]	@ 0x44
 801a412:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a414:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801a416:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801a418:	e841 2300 	strex	r3, r2, [r1]
 801a41c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801a41e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a420:	2b00      	cmp	r3, #0
 801a422:	d1e4      	bne.n	801a3ee <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801a424:	687b      	ldr	r3, [r7, #4]
 801a426:	681b      	ldr	r3, [r3, #0]
 801a428:	69db      	ldr	r3, [r3, #28]
 801a42a:	f003 0310 	and.w	r3, r3, #16
 801a42e:	2b10      	cmp	r3, #16
 801a430:	d103      	bne.n	801a43a <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801a432:	687b      	ldr	r3, [r7, #4]
 801a434:	681b      	ldr	r3, [r3, #0]
 801a436:	2210      	movs	r2, #16
 801a438:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801a43a:	687b      	ldr	r3, [r7, #4]
 801a43c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801a440:	4619      	mov	r1, r3
 801a442:	6878      	ldr	r0, [r7, #4]
 801a444:	f7fd ffb2 	bl	80183ac <HAL_UARTEx_RxEventCallback>
 801a448:	e002      	b.n	801a450 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 801a44a:	6878      	ldr	r0, [r7, #4]
 801a44c:	f7eb ffba 	bl	80063c4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801a450:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 801a454:	2b00      	cmp	r3, #0
 801a456:	d006      	beq.n	801a466 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 801a458:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801a45c:	f003 0320 	and.w	r3, r3, #32
 801a460:	2b00      	cmp	r3, #0
 801a462:	f47f aecd 	bne.w	801a200 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801a466:	687b      	ldr	r3, [r7, #4]
 801a468:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a46c:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801a470:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 801a474:	2b00      	cmp	r3, #0
 801a476:	d049      	beq.n	801a50c <UART_RxISR_16BIT_FIFOEN+0x354>
 801a478:	687b      	ldr	r3, [r7, #4]
 801a47a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801a47e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 801a482:	429a      	cmp	r2, r3
 801a484:	d242      	bcs.n	801a50c <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801a486:	687b      	ldr	r3, [r7, #4]
 801a488:	681b      	ldr	r3, [r3, #0]
 801a48a:	3308      	adds	r3, #8
 801a48c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a48e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a490:	e853 3f00 	ldrex	r3, [r3]
 801a494:	623b      	str	r3, [r7, #32]
   return(result);
 801a496:	6a3b      	ldr	r3, [r7, #32]
 801a498:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801a49c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801a4a0:	687b      	ldr	r3, [r7, #4]
 801a4a2:	681b      	ldr	r3, [r3, #0]
 801a4a4:	3308      	adds	r3, #8
 801a4a6:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 801a4aa:	633a      	str	r2, [r7, #48]	@ 0x30
 801a4ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a4ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801a4b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a4b2:	e841 2300 	strex	r3, r2, [r1]
 801a4b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801a4b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a4ba:	2b00      	cmp	r3, #0
 801a4bc:	d1e3      	bne.n	801a486 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 801a4be:	687b      	ldr	r3, [r7, #4]
 801a4c0:	4a16      	ldr	r2, [pc, #88]	@ (801a51c <UART_RxISR_16BIT_FIFOEN+0x364>)
 801a4c2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801a4c4:	687b      	ldr	r3, [r7, #4]
 801a4c6:	681b      	ldr	r3, [r3, #0]
 801a4c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a4ca:	693b      	ldr	r3, [r7, #16]
 801a4cc:	e853 3f00 	ldrex	r3, [r3]
 801a4d0:	60fb      	str	r3, [r7, #12]
   return(result);
 801a4d2:	68fb      	ldr	r3, [r7, #12]
 801a4d4:	f043 0320 	orr.w	r3, r3, #32
 801a4d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801a4dc:	687b      	ldr	r3, [r7, #4]
 801a4de:	681b      	ldr	r3, [r3, #0]
 801a4e0:	461a      	mov	r2, r3
 801a4e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801a4e6:	61fb      	str	r3, [r7, #28]
 801a4e8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a4ea:	69b9      	ldr	r1, [r7, #24]
 801a4ec:	69fa      	ldr	r2, [r7, #28]
 801a4ee:	e841 2300 	strex	r3, r2, [r1]
 801a4f2:	617b      	str	r3, [r7, #20]
   return(result);
 801a4f4:	697b      	ldr	r3, [r7, #20]
 801a4f6:	2b00      	cmp	r3, #0
 801a4f8:	d1e4      	bne.n	801a4c4 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801a4fa:	e007      	b.n	801a50c <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801a4fc:	687b      	ldr	r3, [r7, #4]
 801a4fe:	681b      	ldr	r3, [r3, #0]
 801a500:	699a      	ldr	r2, [r3, #24]
 801a502:	687b      	ldr	r3, [r7, #4]
 801a504:	681b      	ldr	r3, [r3, #0]
 801a506:	f042 0208 	orr.w	r2, r2, #8
 801a50a:	619a      	str	r2, [r3, #24]
}
 801a50c:	bf00      	nop
 801a50e:	37b8      	adds	r7, #184	@ 0xb8
 801a510:	46bd      	mov	sp, r7
 801a512:	bd80      	pop	{r7, pc}
 801a514:	effffffe 	.word	0xeffffffe
 801a518:	58000c00 	.word	0x58000c00
 801a51c:	08019ca1 	.word	0x08019ca1

0801a520 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801a520:	b480      	push	{r7}
 801a522:	b083      	sub	sp, #12
 801a524:	af00      	add	r7, sp, #0
 801a526:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801a528:	bf00      	nop
 801a52a:	370c      	adds	r7, #12
 801a52c:	46bd      	mov	sp, r7
 801a52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a532:	4770      	bx	lr

0801a534 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 801a534:	b480      	push	{r7}
 801a536:	b083      	sub	sp, #12
 801a538:	af00      	add	r7, sp, #0
 801a53a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801a53c:	bf00      	nop
 801a53e:	370c      	adds	r7, #12
 801a540:	46bd      	mov	sp, r7
 801a542:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a546:	4770      	bx	lr

0801a548 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 801a548:	b480      	push	{r7}
 801a54a:	b083      	sub	sp, #12
 801a54c:	af00      	add	r7, sp, #0
 801a54e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 801a550:	bf00      	nop
 801a552:	370c      	adds	r7, #12
 801a554:	46bd      	mov	sp, r7
 801a556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a55a:	4770      	bx	lr

0801a55c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801a55c:	b480      	push	{r7}
 801a55e:	b085      	sub	sp, #20
 801a560:	af00      	add	r7, sp, #0
 801a562:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801a564:	687b      	ldr	r3, [r7, #4]
 801a566:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801a56a:	2b01      	cmp	r3, #1
 801a56c:	d101      	bne.n	801a572 <HAL_UARTEx_DisableFifoMode+0x16>
 801a56e:	2302      	movs	r3, #2
 801a570:	e027      	b.n	801a5c2 <HAL_UARTEx_DisableFifoMode+0x66>
 801a572:	687b      	ldr	r3, [r7, #4]
 801a574:	2201      	movs	r2, #1
 801a576:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801a57a:	687b      	ldr	r3, [r7, #4]
 801a57c:	2224      	movs	r2, #36	@ 0x24
 801a57e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801a582:	687b      	ldr	r3, [r7, #4]
 801a584:	681b      	ldr	r3, [r3, #0]
 801a586:	681b      	ldr	r3, [r3, #0]
 801a588:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801a58a:	687b      	ldr	r3, [r7, #4]
 801a58c:	681b      	ldr	r3, [r3, #0]
 801a58e:	681a      	ldr	r2, [r3, #0]
 801a590:	687b      	ldr	r3, [r7, #4]
 801a592:	681b      	ldr	r3, [r3, #0]
 801a594:	f022 0201 	bic.w	r2, r2, #1
 801a598:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801a59a:	68fb      	ldr	r3, [r7, #12]
 801a59c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 801a5a0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801a5a2:	687b      	ldr	r3, [r7, #4]
 801a5a4:	2200      	movs	r2, #0
 801a5a6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801a5a8:	687b      	ldr	r3, [r7, #4]
 801a5aa:	681b      	ldr	r3, [r3, #0]
 801a5ac:	68fa      	ldr	r2, [r7, #12]
 801a5ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801a5b0:	687b      	ldr	r3, [r7, #4]
 801a5b2:	2220      	movs	r2, #32
 801a5b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801a5b8:	687b      	ldr	r3, [r7, #4]
 801a5ba:	2200      	movs	r2, #0
 801a5bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801a5c0:	2300      	movs	r3, #0
}
 801a5c2:	4618      	mov	r0, r3
 801a5c4:	3714      	adds	r7, #20
 801a5c6:	46bd      	mov	sp, r7
 801a5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5cc:	4770      	bx	lr

0801a5ce <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801a5ce:	b580      	push	{r7, lr}
 801a5d0:	b084      	sub	sp, #16
 801a5d2:	af00      	add	r7, sp, #0
 801a5d4:	6078      	str	r0, [r7, #4]
 801a5d6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801a5d8:	687b      	ldr	r3, [r7, #4]
 801a5da:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801a5de:	2b01      	cmp	r3, #1
 801a5e0:	d101      	bne.n	801a5e6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801a5e2:	2302      	movs	r3, #2
 801a5e4:	e02d      	b.n	801a642 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801a5e6:	687b      	ldr	r3, [r7, #4]
 801a5e8:	2201      	movs	r2, #1
 801a5ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801a5ee:	687b      	ldr	r3, [r7, #4]
 801a5f0:	2224      	movs	r2, #36	@ 0x24
 801a5f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801a5f6:	687b      	ldr	r3, [r7, #4]
 801a5f8:	681b      	ldr	r3, [r3, #0]
 801a5fa:	681b      	ldr	r3, [r3, #0]
 801a5fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801a5fe:	687b      	ldr	r3, [r7, #4]
 801a600:	681b      	ldr	r3, [r3, #0]
 801a602:	681a      	ldr	r2, [r3, #0]
 801a604:	687b      	ldr	r3, [r7, #4]
 801a606:	681b      	ldr	r3, [r3, #0]
 801a608:	f022 0201 	bic.w	r2, r2, #1
 801a60c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801a60e:	687b      	ldr	r3, [r7, #4]
 801a610:	681b      	ldr	r3, [r3, #0]
 801a612:	689b      	ldr	r3, [r3, #8]
 801a614:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 801a618:	687b      	ldr	r3, [r7, #4]
 801a61a:	681b      	ldr	r3, [r3, #0]
 801a61c:	683a      	ldr	r2, [r7, #0]
 801a61e:	430a      	orrs	r2, r1
 801a620:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801a622:	6878      	ldr	r0, [r7, #4]
 801a624:	f000 f850 	bl	801a6c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801a628:	687b      	ldr	r3, [r7, #4]
 801a62a:	681b      	ldr	r3, [r3, #0]
 801a62c:	68fa      	ldr	r2, [r7, #12]
 801a62e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801a630:	687b      	ldr	r3, [r7, #4]
 801a632:	2220      	movs	r2, #32
 801a634:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801a638:	687b      	ldr	r3, [r7, #4]
 801a63a:	2200      	movs	r2, #0
 801a63c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801a640:	2300      	movs	r3, #0
}
 801a642:	4618      	mov	r0, r3
 801a644:	3710      	adds	r7, #16
 801a646:	46bd      	mov	sp, r7
 801a648:	bd80      	pop	{r7, pc}

0801a64a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801a64a:	b580      	push	{r7, lr}
 801a64c:	b084      	sub	sp, #16
 801a64e:	af00      	add	r7, sp, #0
 801a650:	6078      	str	r0, [r7, #4]
 801a652:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801a654:	687b      	ldr	r3, [r7, #4]
 801a656:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801a65a:	2b01      	cmp	r3, #1
 801a65c:	d101      	bne.n	801a662 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801a65e:	2302      	movs	r3, #2
 801a660:	e02d      	b.n	801a6be <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801a662:	687b      	ldr	r3, [r7, #4]
 801a664:	2201      	movs	r2, #1
 801a666:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801a66a:	687b      	ldr	r3, [r7, #4]
 801a66c:	2224      	movs	r2, #36	@ 0x24
 801a66e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801a672:	687b      	ldr	r3, [r7, #4]
 801a674:	681b      	ldr	r3, [r3, #0]
 801a676:	681b      	ldr	r3, [r3, #0]
 801a678:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801a67a:	687b      	ldr	r3, [r7, #4]
 801a67c:	681b      	ldr	r3, [r3, #0]
 801a67e:	681a      	ldr	r2, [r3, #0]
 801a680:	687b      	ldr	r3, [r7, #4]
 801a682:	681b      	ldr	r3, [r3, #0]
 801a684:	f022 0201 	bic.w	r2, r2, #1
 801a688:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801a68a:	687b      	ldr	r3, [r7, #4]
 801a68c:	681b      	ldr	r3, [r3, #0]
 801a68e:	689b      	ldr	r3, [r3, #8]
 801a690:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 801a694:	687b      	ldr	r3, [r7, #4]
 801a696:	681b      	ldr	r3, [r3, #0]
 801a698:	683a      	ldr	r2, [r7, #0]
 801a69a:	430a      	orrs	r2, r1
 801a69c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801a69e:	6878      	ldr	r0, [r7, #4]
 801a6a0:	f000 f812 	bl	801a6c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801a6a4:	687b      	ldr	r3, [r7, #4]
 801a6a6:	681b      	ldr	r3, [r3, #0]
 801a6a8:	68fa      	ldr	r2, [r7, #12]
 801a6aa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801a6ac:	687b      	ldr	r3, [r7, #4]
 801a6ae:	2220      	movs	r2, #32
 801a6b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801a6b4:	687b      	ldr	r3, [r7, #4]
 801a6b6:	2200      	movs	r2, #0
 801a6b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801a6bc:	2300      	movs	r3, #0
}
 801a6be:	4618      	mov	r0, r3
 801a6c0:	3710      	adds	r7, #16
 801a6c2:	46bd      	mov	sp, r7
 801a6c4:	bd80      	pop	{r7, pc}
	...

0801a6c8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801a6c8:	b480      	push	{r7}
 801a6ca:	b085      	sub	sp, #20
 801a6cc:	af00      	add	r7, sp, #0
 801a6ce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801a6d0:	687b      	ldr	r3, [r7, #4]
 801a6d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801a6d4:	2b00      	cmp	r3, #0
 801a6d6:	d108      	bne.n	801a6ea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801a6d8:	687b      	ldr	r3, [r7, #4]
 801a6da:	2201      	movs	r2, #1
 801a6dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 801a6e0:	687b      	ldr	r3, [r7, #4]
 801a6e2:	2201      	movs	r2, #1
 801a6e4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801a6e8:	e031      	b.n	801a74e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801a6ea:	2310      	movs	r3, #16
 801a6ec:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801a6ee:	2310      	movs	r3, #16
 801a6f0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801a6f2:	687b      	ldr	r3, [r7, #4]
 801a6f4:	681b      	ldr	r3, [r3, #0]
 801a6f6:	689b      	ldr	r3, [r3, #8]
 801a6f8:	0e5b      	lsrs	r3, r3, #25
 801a6fa:	b2db      	uxtb	r3, r3
 801a6fc:	f003 0307 	and.w	r3, r3, #7
 801a700:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801a702:	687b      	ldr	r3, [r7, #4]
 801a704:	681b      	ldr	r3, [r3, #0]
 801a706:	689b      	ldr	r3, [r3, #8]
 801a708:	0f5b      	lsrs	r3, r3, #29
 801a70a:	b2db      	uxtb	r3, r3
 801a70c:	f003 0307 	and.w	r3, r3, #7
 801a710:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801a712:	7bbb      	ldrb	r3, [r7, #14]
 801a714:	7b3a      	ldrb	r2, [r7, #12]
 801a716:	4911      	ldr	r1, [pc, #68]	@ (801a75c <UARTEx_SetNbDataToProcess+0x94>)
 801a718:	5c8a      	ldrb	r2, [r1, r2]
 801a71a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801a71e:	7b3a      	ldrb	r2, [r7, #12]
 801a720:	490f      	ldr	r1, [pc, #60]	@ (801a760 <UARTEx_SetNbDataToProcess+0x98>)
 801a722:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801a724:	fb93 f3f2 	sdiv	r3, r3, r2
 801a728:	b29a      	uxth	r2, r3
 801a72a:	687b      	ldr	r3, [r7, #4]
 801a72c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801a730:	7bfb      	ldrb	r3, [r7, #15]
 801a732:	7b7a      	ldrb	r2, [r7, #13]
 801a734:	4909      	ldr	r1, [pc, #36]	@ (801a75c <UARTEx_SetNbDataToProcess+0x94>)
 801a736:	5c8a      	ldrb	r2, [r1, r2]
 801a738:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801a73c:	7b7a      	ldrb	r2, [r7, #13]
 801a73e:	4908      	ldr	r1, [pc, #32]	@ (801a760 <UARTEx_SetNbDataToProcess+0x98>)
 801a740:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801a742:	fb93 f3f2 	sdiv	r3, r3, r2
 801a746:	b29a      	uxth	r2, r3
 801a748:	687b      	ldr	r3, [r7, #4]
 801a74a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 801a74e:	bf00      	nop
 801a750:	3714      	adds	r7, #20
 801a752:	46bd      	mov	sp, r7
 801a754:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a758:	4770      	bx	lr
 801a75a:	bf00      	nop
 801a75c:	0801e5c4 	.word	0x0801e5c4
 801a760:	0801e5cc 	.word	0x0801e5cc

0801a764 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 801a764:	b580      	push	{r7, lr}
 801a766:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 801a768:	4904      	ldr	r1, [pc, #16]	@ (801a77c <MX_FATFS_Init+0x18>)
 801a76a:	4805      	ldr	r0, [pc, #20]	@ (801a780 <MX_FATFS_Init+0x1c>)
 801a76c:	f003 f8d8 	bl	801d920 <FATFS_LinkDriver>
 801a770:	4603      	mov	r3, r0
 801a772:	461a      	mov	r2, r3
 801a774:	4b03      	ldr	r3, [pc, #12]	@ (801a784 <MX_FATFS_Init+0x20>)
 801a776:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 801a778:	bf00      	nop
 801a77a:	bd80      	pop	{r7, pc}
 801a77c:	2400054c 	.word	0x2400054c
 801a780:	24000014 	.word	0x24000014
 801a784:	24000548 	.word	0x24000548

0801a788 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 801a788:	b480      	push	{r7}
 801a78a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 801a78c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 801a78e:	4618      	mov	r0, r3
 801a790:	46bd      	mov	sp, r7
 801a792:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a796:	4770      	bx	lr

0801a798 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 801a798:	b580      	push	{r7, lr}
 801a79a:	b082      	sub	sp, #8
 801a79c:	af00      	add	r7, sp, #0
 801a79e:	4603      	mov	r3, r0
 801a7a0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 801a7a2:	79fb      	ldrb	r3, [r7, #7]
 801a7a4:	4618      	mov	r0, r3
 801a7a6:	f7e9 feb9 	bl	800451c <SD_disk_initialize>
 801a7aa:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 801a7ac:	4618      	mov	r0, r3
 801a7ae:	3708      	adds	r7, #8
 801a7b0:	46bd      	mov	sp, r7
 801a7b2:	bd80      	pop	{r7, pc}

0801a7b4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 801a7b4:	b580      	push	{r7, lr}
 801a7b6:	b082      	sub	sp, #8
 801a7b8:	af00      	add	r7, sp, #0
 801a7ba:	4603      	mov	r3, r0
 801a7bc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 801a7be:	79fb      	ldrb	r3, [r7, #7]
 801a7c0:	4618      	mov	r0, r3
 801a7c2:	f7e9 ff97 	bl	80046f4 <SD_disk_status>
 801a7c6:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 801a7c8:	4618      	mov	r0, r3
 801a7ca:	3708      	adds	r7, #8
 801a7cc:	46bd      	mov	sp, r7
 801a7ce:	bd80      	pop	{r7, pc}

0801a7d0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 801a7d0:	b580      	push	{r7, lr}
 801a7d2:	b084      	sub	sp, #16
 801a7d4:	af00      	add	r7, sp, #0
 801a7d6:	60b9      	str	r1, [r7, #8]
 801a7d8:	607a      	str	r2, [r7, #4]
 801a7da:	603b      	str	r3, [r7, #0]
 801a7dc:	4603      	mov	r3, r0
 801a7de:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 801a7e0:	7bf8      	ldrb	r0, [r7, #15]
 801a7e2:	683b      	ldr	r3, [r7, #0]
 801a7e4:	687a      	ldr	r2, [r7, #4]
 801a7e6:	68b9      	ldr	r1, [r7, #8]
 801a7e8:	f7e9 ff9a 	bl	8004720 <SD_disk_read>
 801a7ec:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 801a7ee:	4618      	mov	r0, r3
 801a7f0:	3710      	adds	r7, #16
 801a7f2:	46bd      	mov	sp, r7
 801a7f4:	bd80      	pop	{r7, pc}

0801a7f6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 801a7f6:	b580      	push	{r7, lr}
 801a7f8:	b084      	sub	sp, #16
 801a7fa:	af00      	add	r7, sp, #0
 801a7fc:	60b9      	str	r1, [r7, #8]
 801a7fe:	607a      	str	r2, [r7, #4]
 801a800:	603b      	str	r3, [r7, #0]
 801a802:	4603      	mov	r3, r0
 801a804:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 801a806:	7bf8      	ldrb	r0, [r7, #15]
 801a808:	683b      	ldr	r3, [r7, #0]
 801a80a:	687a      	ldr	r2, [r7, #4]
 801a80c:	68b9      	ldr	r1, [r7, #8]
 801a80e:	f7e9 fff1 	bl	80047f4 <SD_disk_write>
 801a812:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 801a814:	4618      	mov	r0, r3
 801a816:	3710      	adds	r7, #16
 801a818:	46bd      	mov	sp, r7
 801a81a:	bd80      	pop	{r7, pc}

0801a81c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 801a81c:	b580      	push	{r7, lr}
 801a81e:	b082      	sub	sp, #8
 801a820:	af00      	add	r7, sp, #0
 801a822:	4603      	mov	r3, r0
 801a824:	603a      	str	r2, [r7, #0]
 801a826:	71fb      	strb	r3, [r7, #7]
 801a828:	460b      	mov	r3, r1
 801a82a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */

    return SD_disk_ioctl(pdrv, cmd, buff);
 801a82c:	79b9      	ldrb	r1, [r7, #6]
 801a82e:	79fb      	ldrb	r3, [r7, #7]
 801a830:	683a      	ldr	r2, [r7, #0]
 801a832:	4618      	mov	r0, r3
 801a834:	f7ea f862 	bl	80048fc <SD_disk_ioctl>
 801a838:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 801a83a:	4618      	mov	r0, r3
 801a83c:	3708      	adds	r7, #8
 801a83e:	46bd      	mov	sp, r7
 801a840:	bd80      	pop	{r7, pc}
	...

0801a844 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 801a844:	b580      	push	{r7, lr}
 801a846:	b084      	sub	sp, #16
 801a848:	af00      	add	r7, sp, #0
 801a84a:	4603      	mov	r3, r0
 801a84c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801a84e:	79fb      	ldrb	r3, [r7, #7]
 801a850:	4a08      	ldr	r2, [pc, #32]	@ (801a874 <disk_status+0x30>)
 801a852:	009b      	lsls	r3, r3, #2
 801a854:	4413      	add	r3, r2
 801a856:	685b      	ldr	r3, [r3, #4]
 801a858:	685b      	ldr	r3, [r3, #4]
 801a85a:	79fa      	ldrb	r2, [r7, #7]
 801a85c:	4905      	ldr	r1, [pc, #20]	@ (801a874 <disk_status+0x30>)
 801a85e:	440a      	add	r2, r1
 801a860:	7a12      	ldrb	r2, [r2, #8]
 801a862:	4610      	mov	r0, r2
 801a864:	4798      	blx	r3
 801a866:	4603      	mov	r3, r0
 801a868:	73fb      	strb	r3, [r7, #15]
  return stat;
 801a86a:	7bfb      	ldrb	r3, [r7, #15]
}
 801a86c:	4618      	mov	r0, r3
 801a86e:	3710      	adds	r7, #16
 801a870:	46bd      	mov	sp, r7
 801a872:	bd80      	pop	{r7, pc}
 801a874:	24000768 	.word	0x24000768

0801a878 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 801a878:	b580      	push	{r7, lr}
 801a87a:	b084      	sub	sp, #16
 801a87c:	af00      	add	r7, sp, #0
 801a87e:	4603      	mov	r3, r0
 801a880:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801a882:	2300      	movs	r3, #0
 801a884:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 801a886:	79fb      	ldrb	r3, [r7, #7]
 801a888:	4a0e      	ldr	r2, [pc, #56]	@ (801a8c4 <disk_initialize+0x4c>)
 801a88a:	5cd3      	ldrb	r3, [r2, r3]
 801a88c:	2b00      	cmp	r3, #0
 801a88e:	d114      	bne.n	801a8ba <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 801a890:	79fb      	ldrb	r3, [r7, #7]
 801a892:	4a0c      	ldr	r2, [pc, #48]	@ (801a8c4 <disk_initialize+0x4c>)
 801a894:	009b      	lsls	r3, r3, #2
 801a896:	4413      	add	r3, r2
 801a898:	685b      	ldr	r3, [r3, #4]
 801a89a:	681b      	ldr	r3, [r3, #0]
 801a89c:	79fa      	ldrb	r2, [r7, #7]
 801a89e:	4909      	ldr	r1, [pc, #36]	@ (801a8c4 <disk_initialize+0x4c>)
 801a8a0:	440a      	add	r2, r1
 801a8a2:	7a12      	ldrb	r2, [r2, #8]
 801a8a4:	4610      	mov	r0, r2
 801a8a6:	4798      	blx	r3
 801a8a8:	4603      	mov	r3, r0
 801a8aa:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 801a8ac:	7bfb      	ldrb	r3, [r7, #15]
 801a8ae:	2b00      	cmp	r3, #0
 801a8b0:	d103      	bne.n	801a8ba <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 801a8b2:	79fb      	ldrb	r3, [r7, #7]
 801a8b4:	4a03      	ldr	r2, [pc, #12]	@ (801a8c4 <disk_initialize+0x4c>)
 801a8b6:	2101      	movs	r1, #1
 801a8b8:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 801a8ba:	7bfb      	ldrb	r3, [r7, #15]
}
 801a8bc:	4618      	mov	r0, r3
 801a8be:	3710      	adds	r7, #16
 801a8c0:	46bd      	mov	sp, r7
 801a8c2:	bd80      	pop	{r7, pc}
 801a8c4:	24000768 	.word	0x24000768

0801a8c8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 801a8c8:	b590      	push	{r4, r7, lr}
 801a8ca:	b087      	sub	sp, #28
 801a8cc:	af00      	add	r7, sp, #0
 801a8ce:	60b9      	str	r1, [r7, #8]
 801a8d0:	607a      	str	r2, [r7, #4]
 801a8d2:	603b      	str	r3, [r7, #0]
 801a8d4:	4603      	mov	r3, r0
 801a8d6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 801a8d8:	7bfb      	ldrb	r3, [r7, #15]
 801a8da:	4a0a      	ldr	r2, [pc, #40]	@ (801a904 <disk_read+0x3c>)
 801a8dc:	009b      	lsls	r3, r3, #2
 801a8de:	4413      	add	r3, r2
 801a8e0:	685b      	ldr	r3, [r3, #4]
 801a8e2:	689c      	ldr	r4, [r3, #8]
 801a8e4:	7bfb      	ldrb	r3, [r7, #15]
 801a8e6:	4a07      	ldr	r2, [pc, #28]	@ (801a904 <disk_read+0x3c>)
 801a8e8:	4413      	add	r3, r2
 801a8ea:	7a18      	ldrb	r0, [r3, #8]
 801a8ec:	683b      	ldr	r3, [r7, #0]
 801a8ee:	687a      	ldr	r2, [r7, #4]
 801a8f0:	68b9      	ldr	r1, [r7, #8]
 801a8f2:	47a0      	blx	r4
 801a8f4:	4603      	mov	r3, r0
 801a8f6:	75fb      	strb	r3, [r7, #23]
  return res;
 801a8f8:	7dfb      	ldrb	r3, [r7, #23]
}
 801a8fa:	4618      	mov	r0, r3
 801a8fc:	371c      	adds	r7, #28
 801a8fe:	46bd      	mov	sp, r7
 801a900:	bd90      	pop	{r4, r7, pc}
 801a902:	bf00      	nop
 801a904:	24000768 	.word	0x24000768

0801a908 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 801a908:	b590      	push	{r4, r7, lr}
 801a90a:	b087      	sub	sp, #28
 801a90c:	af00      	add	r7, sp, #0
 801a90e:	60b9      	str	r1, [r7, #8]
 801a910:	607a      	str	r2, [r7, #4]
 801a912:	603b      	str	r3, [r7, #0]
 801a914:	4603      	mov	r3, r0
 801a916:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 801a918:	7bfb      	ldrb	r3, [r7, #15]
 801a91a:	4a0a      	ldr	r2, [pc, #40]	@ (801a944 <disk_write+0x3c>)
 801a91c:	009b      	lsls	r3, r3, #2
 801a91e:	4413      	add	r3, r2
 801a920:	685b      	ldr	r3, [r3, #4]
 801a922:	68dc      	ldr	r4, [r3, #12]
 801a924:	7bfb      	ldrb	r3, [r7, #15]
 801a926:	4a07      	ldr	r2, [pc, #28]	@ (801a944 <disk_write+0x3c>)
 801a928:	4413      	add	r3, r2
 801a92a:	7a18      	ldrb	r0, [r3, #8]
 801a92c:	683b      	ldr	r3, [r7, #0]
 801a92e:	687a      	ldr	r2, [r7, #4]
 801a930:	68b9      	ldr	r1, [r7, #8]
 801a932:	47a0      	blx	r4
 801a934:	4603      	mov	r3, r0
 801a936:	75fb      	strb	r3, [r7, #23]
  return res;
 801a938:	7dfb      	ldrb	r3, [r7, #23]
}
 801a93a:	4618      	mov	r0, r3
 801a93c:	371c      	adds	r7, #28
 801a93e:	46bd      	mov	sp, r7
 801a940:	bd90      	pop	{r4, r7, pc}
 801a942:	bf00      	nop
 801a944:	24000768 	.word	0x24000768

0801a948 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 801a948:	b580      	push	{r7, lr}
 801a94a:	b084      	sub	sp, #16
 801a94c:	af00      	add	r7, sp, #0
 801a94e:	4603      	mov	r3, r0
 801a950:	603a      	str	r2, [r7, #0]
 801a952:	71fb      	strb	r3, [r7, #7]
 801a954:	460b      	mov	r3, r1
 801a956:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 801a958:	79fb      	ldrb	r3, [r7, #7]
 801a95a:	4a09      	ldr	r2, [pc, #36]	@ (801a980 <disk_ioctl+0x38>)
 801a95c:	009b      	lsls	r3, r3, #2
 801a95e:	4413      	add	r3, r2
 801a960:	685b      	ldr	r3, [r3, #4]
 801a962:	691b      	ldr	r3, [r3, #16]
 801a964:	79fa      	ldrb	r2, [r7, #7]
 801a966:	4906      	ldr	r1, [pc, #24]	@ (801a980 <disk_ioctl+0x38>)
 801a968:	440a      	add	r2, r1
 801a96a:	7a10      	ldrb	r0, [r2, #8]
 801a96c:	79b9      	ldrb	r1, [r7, #6]
 801a96e:	683a      	ldr	r2, [r7, #0]
 801a970:	4798      	blx	r3
 801a972:	4603      	mov	r3, r0
 801a974:	73fb      	strb	r3, [r7, #15]
  return res;
 801a976:	7bfb      	ldrb	r3, [r7, #15]
}
 801a978:	4618      	mov	r0, r3
 801a97a:	3710      	adds	r7, #16
 801a97c:	46bd      	mov	sp, r7
 801a97e:	bd80      	pop	{r7, pc}
 801a980:	24000768 	.word	0x24000768

0801a984 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 801a984:	b480      	push	{r7}
 801a986:	b085      	sub	sp, #20
 801a988:	af00      	add	r7, sp, #0
 801a98a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 801a98c:	687b      	ldr	r3, [r7, #4]
 801a98e:	3301      	adds	r3, #1
 801a990:	781b      	ldrb	r3, [r3, #0]
 801a992:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 801a994:	89fb      	ldrh	r3, [r7, #14]
 801a996:	021b      	lsls	r3, r3, #8
 801a998:	b21a      	sxth	r2, r3
 801a99a:	687b      	ldr	r3, [r7, #4]
 801a99c:	781b      	ldrb	r3, [r3, #0]
 801a99e:	b21b      	sxth	r3, r3
 801a9a0:	4313      	orrs	r3, r2
 801a9a2:	b21b      	sxth	r3, r3
 801a9a4:	81fb      	strh	r3, [r7, #14]
	return rv;
 801a9a6:	89fb      	ldrh	r3, [r7, #14]
}
 801a9a8:	4618      	mov	r0, r3
 801a9aa:	3714      	adds	r7, #20
 801a9ac:	46bd      	mov	sp, r7
 801a9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a9b2:	4770      	bx	lr

0801a9b4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 801a9b4:	b480      	push	{r7}
 801a9b6:	b085      	sub	sp, #20
 801a9b8:	af00      	add	r7, sp, #0
 801a9ba:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 801a9bc:	687b      	ldr	r3, [r7, #4]
 801a9be:	3303      	adds	r3, #3
 801a9c0:	781b      	ldrb	r3, [r3, #0]
 801a9c2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 801a9c4:	68fb      	ldr	r3, [r7, #12]
 801a9c6:	021b      	lsls	r3, r3, #8
 801a9c8:	687a      	ldr	r2, [r7, #4]
 801a9ca:	3202      	adds	r2, #2
 801a9cc:	7812      	ldrb	r2, [r2, #0]
 801a9ce:	4313      	orrs	r3, r2
 801a9d0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801a9d2:	68fb      	ldr	r3, [r7, #12]
 801a9d4:	021b      	lsls	r3, r3, #8
 801a9d6:	687a      	ldr	r2, [r7, #4]
 801a9d8:	3201      	adds	r2, #1
 801a9da:	7812      	ldrb	r2, [r2, #0]
 801a9dc:	4313      	orrs	r3, r2
 801a9de:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 801a9e0:	68fb      	ldr	r3, [r7, #12]
 801a9e2:	021b      	lsls	r3, r3, #8
 801a9e4:	687a      	ldr	r2, [r7, #4]
 801a9e6:	7812      	ldrb	r2, [r2, #0]
 801a9e8:	4313      	orrs	r3, r2
 801a9ea:	60fb      	str	r3, [r7, #12]
	return rv;
 801a9ec:	68fb      	ldr	r3, [r7, #12]
}
 801a9ee:	4618      	mov	r0, r3
 801a9f0:	3714      	adds	r7, #20
 801a9f2:	46bd      	mov	sp, r7
 801a9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a9f8:	4770      	bx	lr

0801a9fa <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801a9fa:	b480      	push	{r7}
 801a9fc:	b083      	sub	sp, #12
 801a9fe:	af00      	add	r7, sp, #0
 801aa00:	6078      	str	r0, [r7, #4]
 801aa02:	460b      	mov	r3, r1
 801aa04:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801aa06:	687b      	ldr	r3, [r7, #4]
 801aa08:	1c5a      	adds	r2, r3, #1
 801aa0a:	607a      	str	r2, [r7, #4]
 801aa0c:	887a      	ldrh	r2, [r7, #2]
 801aa0e:	b2d2      	uxtb	r2, r2
 801aa10:	701a      	strb	r2, [r3, #0]
 801aa12:	887b      	ldrh	r3, [r7, #2]
 801aa14:	0a1b      	lsrs	r3, r3, #8
 801aa16:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 801aa18:	687b      	ldr	r3, [r7, #4]
 801aa1a:	1c5a      	adds	r2, r3, #1
 801aa1c:	607a      	str	r2, [r7, #4]
 801aa1e:	887a      	ldrh	r2, [r7, #2]
 801aa20:	b2d2      	uxtb	r2, r2
 801aa22:	701a      	strb	r2, [r3, #0]
}
 801aa24:	bf00      	nop
 801aa26:	370c      	adds	r7, #12
 801aa28:	46bd      	mov	sp, r7
 801aa2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa2e:	4770      	bx	lr

0801aa30 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 801aa30:	b480      	push	{r7}
 801aa32:	b083      	sub	sp, #12
 801aa34:	af00      	add	r7, sp, #0
 801aa36:	6078      	str	r0, [r7, #4]
 801aa38:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801aa3a:	687b      	ldr	r3, [r7, #4]
 801aa3c:	1c5a      	adds	r2, r3, #1
 801aa3e:	607a      	str	r2, [r7, #4]
 801aa40:	683a      	ldr	r2, [r7, #0]
 801aa42:	b2d2      	uxtb	r2, r2
 801aa44:	701a      	strb	r2, [r3, #0]
 801aa46:	683b      	ldr	r3, [r7, #0]
 801aa48:	0a1b      	lsrs	r3, r3, #8
 801aa4a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801aa4c:	687b      	ldr	r3, [r7, #4]
 801aa4e:	1c5a      	adds	r2, r3, #1
 801aa50:	607a      	str	r2, [r7, #4]
 801aa52:	683a      	ldr	r2, [r7, #0]
 801aa54:	b2d2      	uxtb	r2, r2
 801aa56:	701a      	strb	r2, [r3, #0]
 801aa58:	683b      	ldr	r3, [r7, #0]
 801aa5a:	0a1b      	lsrs	r3, r3, #8
 801aa5c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801aa5e:	687b      	ldr	r3, [r7, #4]
 801aa60:	1c5a      	adds	r2, r3, #1
 801aa62:	607a      	str	r2, [r7, #4]
 801aa64:	683a      	ldr	r2, [r7, #0]
 801aa66:	b2d2      	uxtb	r2, r2
 801aa68:	701a      	strb	r2, [r3, #0]
 801aa6a:	683b      	ldr	r3, [r7, #0]
 801aa6c:	0a1b      	lsrs	r3, r3, #8
 801aa6e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 801aa70:	687b      	ldr	r3, [r7, #4]
 801aa72:	1c5a      	adds	r2, r3, #1
 801aa74:	607a      	str	r2, [r7, #4]
 801aa76:	683a      	ldr	r2, [r7, #0]
 801aa78:	b2d2      	uxtb	r2, r2
 801aa7a:	701a      	strb	r2, [r3, #0]
}
 801aa7c:	bf00      	nop
 801aa7e:	370c      	adds	r7, #12
 801aa80:	46bd      	mov	sp, r7
 801aa82:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa86:	4770      	bx	lr

0801aa88 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 801aa88:	b480      	push	{r7}
 801aa8a:	b087      	sub	sp, #28
 801aa8c:	af00      	add	r7, sp, #0
 801aa8e:	60f8      	str	r0, [r7, #12]
 801aa90:	60b9      	str	r1, [r7, #8]
 801aa92:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801aa94:	68fb      	ldr	r3, [r7, #12]
 801aa96:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 801aa98:	68bb      	ldr	r3, [r7, #8]
 801aa9a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 801aa9c:	687b      	ldr	r3, [r7, #4]
 801aa9e:	2b00      	cmp	r3, #0
 801aaa0:	d00d      	beq.n	801aabe <mem_cpy+0x36>
		do {
			*d++ = *s++;
 801aaa2:	693a      	ldr	r2, [r7, #16]
 801aaa4:	1c53      	adds	r3, r2, #1
 801aaa6:	613b      	str	r3, [r7, #16]
 801aaa8:	697b      	ldr	r3, [r7, #20]
 801aaaa:	1c59      	adds	r1, r3, #1
 801aaac:	6179      	str	r1, [r7, #20]
 801aaae:	7812      	ldrb	r2, [r2, #0]
 801aab0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 801aab2:	687b      	ldr	r3, [r7, #4]
 801aab4:	3b01      	subs	r3, #1
 801aab6:	607b      	str	r3, [r7, #4]
 801aab8:	687b      	ldr	r3, [r7, #4]
 801aaba:	2b00      	cmp	r3, #0
 801aabc:	d1f1      	bne.n	801aaa2 <mem_cpy+0x1a>
	}
}
 801aabe:	bf00      	nop
 801aac0:	371c      	adds	r7, #28
 801aac2:	46bd      	mov	sp, r7
 801aac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aac8:	4770      	bx	lr

0801aaca <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801aaca:	b480      	push	{r7}
 801aacc:	b087      	sub	sp, #28
 801aace:	af00      	add	r7, sp, #0
 801aad0:	60f8      	str	r0, [r7, #12]
 801aad2:	60b9      	str	r1, [r7, #8]
 801aad4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801aad6:	68fb      	ldr	r3, [r7, #12]
 801aad8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801aada:	697b      	ldr	r3, [r7, #20]
 801aadc:	1c5a      	adds	r2, r3, #1
 801aade:	617a      	str	r2, [r7, #20]
 801aae0:	68ba      	ldr	r2, [r7, #8]
 801aae2:	b2d2      	uxtb	r2, r2
 801aae4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801aae6:	687b      	ldr	r3, [r7, #4]
 801aae8:	3b01      	subs	r3, #1
 801aaea:	607b      	str	r3, [r7, #4]
 801aaec:	687b      	ldr	r3, [r7, #4]
 801aaee:	2b00      	cmp	r3, #0
 801aaf0:	d1f3      	bne.n	801aada <mem_set+0x10>
}
 801aaf2:	bf00      	nop
 801aaf4:	bf00      	nop
 801aaf6:	371c      	adds	r7, #28
 801aaf8:	46bd      	mov	sp, r7
 801aafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aafe:	4770      	bx	lr

0801ab00 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 801ab00:	b480      	push	{r7}
 801ab02:	b089      	sub	sp, #36	@ 0x24
 801ab04:	af00      	add	r7, sp, #0
 801ab06:	60f8      	str	r0, [r7, #12]
 801ab08:	60b9      	str	r1, [r7, #8]
 801ab0a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 801ab0c:	68fb      	ldr	r3, [r7, #12]
 801ab0e:	61fb      	str	r3, [r7, #28]
 801ab10:	68bb      	ldr	r3, [r7, #8]
 801ab12:	61bb      	str	r3, [r7, #24]
	int r = 0;
 801ab14:	2300      	movs	r3, #0
 801ab16:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 801ab18:	69fb      	ldr	r3, [r7, #28]
 801ab1a:	1c5a      	adds	r2, r3, #1
 801ab1c:	61fa      	str	r2, [r7, #28]
 801ab1e:	781b      	ldrb	r3, [r3, #0]
 801ab20:	4619      	mov	r1, r3
 801ab22:	69bb      	ldr	r3, [r7, #24]
 801ab24:	1c5a      	adds	r2, r3, #1
 801ab26:	61ba      	str	r2, [r7, #24]
 801ab28:	781b      	ldrb	r3, [r3, #0]
 801ab2a:	1acb      	subs	r3, r1, r3
 801ab2c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 801ab2e:	687b      	ldr	r3, [r7, #4]
 801ab30:	3b01      	subs	r3, #1
 801ab32:	607b      	str	r3, [r7, #4]
 801ab34:	687b      	ldr	r3, [r7, #4]
 801ab36:	2b00      	cmp	r3, #0
 801ab38:	d002      	beq.n	801ab40 <mem_cmp+0x40>
 801ab3a:	697b      	ldr	r3, [r7, #20]
 801ab3c:	2b00      	cmp	r3, #0
 801ab3e:	d0eb      	beq.n	801ab18 <mem_cmp+0x18>

	return r;
 801ab40:	697b      	ldr	r3, [r7, #20]
}
 801ab42:	4618      	mov	r0, r3
 801ab44:	3724      	adds	r7, #36	@ 0x24
 801ab46:	46bd      	mov	sp, r7
 801ab48:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab4c:	4770      	bx	lr

0801ab4e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 801ab4e:	b480      	push	{r7}
 801ab50:	b083      	sub	sp, #12
 801ab52:	af00      	add	r7, sp, #0
 801ab54:	6078      	str	r0, [r7, #4]
 801ab56:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 801ab58:	e002      	b.n	801ab60 <chk_chr+0x12>
 801ab5a:	687b      	ldr	r3, [r7, #4]
 801ab5c:	3301      	adds	r3, #1
 801ab5e:	607b      	str	r3, [r7, #4]
 801ab60:	687b      	ldr	r3, [r7, #4]
 801ab62:	781b      	ldrb	r3, [r3, #0]
 801ab64:	2b00      	cmp	r3, #0
 801ab66:	d005      	beq.n	801ab74 <chk_chr+0x26>
 801ab68:	687b      	ldr	r3, [r7, #4]
 801ab6a:	781b      	ldrb	r3, [r3, #0]
 801ab6c:	461a      	mov	r2, r3
 801ab6e:	683b      	ldr	r3, [r7, #0]
 801ab70:	4293      	cmp	r3, r2
 801ab72:	d1f2      	bne.n	801ab5a <chk_chr+0xc>
	return *str;
 801ab74:	687b      	ldr	r3, [r7, #4]
 801ab76:	781b      	ldrb	r3, [r3, #0]
}
 801ab78:	4618      	mov	r0, r3
 801ab7a:	370c      	adds	r7, #12
 801ab7c:	46bd      	mov	sp, r7
 801ab7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab82:	4770      	bx	lr

0801ab84 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801ab84:	b480      	push	{r7}
 801ab86:	b085      	sub	sp, #20
 801ab88:	af00      	add	r7, sp, #0
 801ab8a:	6078      	str	r0, [r7, #4]
 801ab8c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801ab8e:	2300      	movs	r3, #0
 801ab90:	60bb      	str	r3, [r7, #8]
 801ab92:	68bb      	ldr	r3, [r7, #8]
 801ab94:	60fb      	str	r3, [r7, #12]
 801ab96:	e029      	b.n	801abec <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 801ab98:	4a27      	ldr	r2, [pc, #156]	@ (801ac38 <chk_lock+0xb4>)
 801ab9a:	68fb      	ldr	r3, [r7, #12]
 801ab9c:	011b      	lsls	r3, r3, #4
 801ab9e:	4413      	add	r3, r2
 801aba0:	681b      	ldr	r3, [r3, #0]
 801aba2:	2b00      	cmp	r3, #0
 801aba4:	d01d      	beq.n	801abe2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801aba6:	4a24      	ldr	r2, [pc, #144]	@ (801ac38 <chk_lock+0xb4>)
 801aba8:	68fb      	ldr	r3, [r7, #12]
 801abaa:	011b      	lsls	r3, r3, #4
 801abac:	4413      	add	r3, r2
 801abae:	681a      	ldr	r2, [r3, #0]
 801abb0:	687b      	ldr	r3, [r7, #4]
 801abb2:	681b      	ldr	r3, [r3, #0]
 801abb4:	429a      	cmp	r2, r3
 801abb6:	d116      	bne.n	801abe6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 801abb8:	4a1f      	ldr	r2, [pc, #124]	@ (801ac38 <chk_lock+0xb4>)
 801abba:	68fb      	ldr	r3, [r7, #12]
 801abbc:	011b      	lsls	r3, r3, #4
 801abbe:	4413      	add	r3, r2
 801abc0:	3304      	adds	r3, #4
 801abc2:	681a      	ldr	r2, [r3, #0]
 801abc4:	687b      	ldr	r3, [r7, #4]
 801abc6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801abc8:	429a      	cmp	r2, r3
 801abca:	d10c      	bne.n	801abe6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801abcc:	4a1a      	ldr	r2, [pc, #104]	@ (801ac38 <chk_lock+0xb4>)
 801abce:	68fb      	ldr	r3, [r7, #12]
 801abd0:	011b      	lsls	r3, r3, #4
 801abd2:	4413      	add	r3, r2
 801abd4:	3308      	adds	r3, #8
 801abd6:	681a      	ldr	r2, [r3, #0]
 801abd8:	687b      	ldr	r3, [r7, #4]
 801abda:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 801abdc:	429a      	cmp	r2, r3
 801abde:	d102      	bne.n	801abe6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801abe0:	e007      	b.n	801abf2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 801abe2:	2301      	movs	r3, #1
 801abe4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801abe6:	68fb      	ldr	r3, [r7, #12]
 801abe8:	3301      	adds	r3, #1
 801abea:	60fb      	str	r3, [r7, #12]
 801abec:	68fb      	ldr	r3, [r7, #12]
 801abee:	2b00      	cmp	r3, #0
 801abf0:	d0d2      	beq.n	801ab98 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 801abf2:	68fb      	ldr	r3, [r7, #12]
 801abf4:	2b01      	cmp	r3, #1
 801abf6:	d109      	bne.n	801ac0c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 801abf8:	68bb      	ldr	r3, [r7, #8]
 801abfa:	2b00      	cmp	r3, #0
 801abfc:	d102      	bne.n	801ac04 <chk_lock+0x80>
 801abfe:	683b      	ldr	r3, [r7, #0]
 801ac00:	2b02      	cmp	r3, #2
 801ac02:	d101      	bne.n	801ac08 <chk_lock+0x84>
 801ac04:	2300      	movs	r3, #0
 801ac06:	e010      	b.n	801ac2a <chk_lock+0xa6>
 801ac08:	2312      	movs	r3, #18
 801ac0a:	e00e      	b.n	801ac2a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 801ac0c:	683b      	ldr	r3, [r7, #0]
 801ac0e:	2b00      	cmp	r3, #0
 801ac10:	d108      	bne.n	801ac24 <chk_lock+0xa0>
 801ac12:	4a09      	ldr	r2, [pc, #36]	@ (801ac38 <chk_lock+0xb4>)
 801ac14:	68fb      	ldr	r3, [r7, #12]
 801ac16:	011b      	lsls	r3, r3, #4
 801ac18:	4413      	add	r3, r2
 801ac1a:	330c      	adds	r3, #12
 801ac1c:	881b      	ldrh	r3, [r3, #0]
 801ac1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801ac22:	d101      	bne.n	801ac28 <chk_lock+0xa4>
 801ac24:	2310      	movs	r3, #16
 801ac26:	e000      	b.n	801ac2a <chk_lock+0xa6>
 801ac28:	2300      	movs	r3, #0
}
 801ac2a:	4618      	mov	r0, r3
 801ac2c:	3714      	adds	r7, #20
 801ac2e:	46bd      	mov	sp, r7
 801ac30:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac34:	4770      	bx	lr
 801ac36:	bf00      	nop
 801ac38:	24000558 	.word	0x24000558

0801ac3c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 801ac3c:	b480      	push	{r7}
 801ac3e:	b083      	sub	sp, #12
 801ac40:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801ac42:	2300      	movs	r3, #0
 801ac44:	607b      	str	r3, [r7, #4]
 801ac46:	e002      	b.n	801ac4e <enq_lock+0x12>
 801ac48:	687b      	ldr	r3, [r7, #4]
 801ac4a:	3301      	adds	r3, #1
 801ac4c:	607b      	str	r3, [r7, #4]
 801ac4e:	687b      	ldr	r3, [r7, #4]
 801ac50:	2b00      	cmp	r3, #0
 801ac52:	d106      	bne.n	801ac62 <enq_lock+0x26>
 801ac54:	4a09      	ldr	r2, [pc, #36]	@ (801ac7c <enq_lock+0x40>)
 801ac56:	687b      	ldr	r3, [r7, #4]
 801ac58:	011b      	lsls	r3, r3, #4
 801ac5a:	4413      	add	r3, r2
 801ac5c:	681b      	ldr	r3, [r3, #0]
 801ac5e:	2b00      	cmp	r3, #0
 801ac60:	d1f2      	bne.n	801ac48 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801ac62:	687b      	ldr	r3, [r7, #4]
 801ac64:	2b01      	cmp	r3, #1
 801ac66:	bf14      	ite	ne
 801ac68:	2301      	movne	r3, #1
 801ac6a:	2300      	moveq	r3, #0
 801ac6c:	b2db      	uxtb	r3, r3
}
 801ac6e:	4618      	mov	r0, r3
 801ac70:	370c      	adds	r7, #12
 801ac72:	46bd      	mov	sp, r7
 801ac74:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac78:	4770      	bx	lr
 801ac7a:	bf00      	nop
 801ac7c:	24000558 	.word	0x24000558

0801ac80 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801ac80:	b480      	push	{r7}
 801ac82:	b085      	sub	sp, #20
 801ac84:	af00      	add	r7, sp, #0
 801ac86:	6078      	str	r0, [r7, #4]
 801ac88:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801ac8a:	2300      	movs	r3, #0
 801ac8c:	60fb      	str	r3, [r7, #12]
 801ac8e:	e01f      	b.n	801acd0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 801ac90:	4a41      	ldr	r2, [pc, #260]	@ (801ad98 <inc_lock+0x118>)
 801ac92:	68fb      	ldr	r3, [r7, #12]
 801ac94:	011b      	lsls	r3, r3, #4
 801ac96:	4413      	add	r3, r2
 801ac98:	681a      	ldr	r2, [r3, #0]
 801ac9a:	687b      	ldr	r3, [r7, #4]
 801ac9c:	681b      	ldr	r3, [r3, #0]
 801ac9e:	429a      	cmp	r2, r3
 801aca0:	d113      	bne.n	801acca <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 801aca2:	4a3d      	ldr	r2, [pc, #244]	@ (801ad98 <inc_lock+0x118>)
 801aca4:	68fb      	ldr	r3, [r7, #12]
 801aca6:	011b      	lsls	r3, r3, #4
 801aca8:	4413      	add	r3, r2
 801acaa:	3304      	adds	r3, #4
 801acac:	681a      	ldr	r2, [r3, #0]
 801acae:	687b      	ldr	r3, [r7, #4]
 801acb0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 801acb2:	429a      	cmp	r2, r3
 801acb4:	d109      	bne.n	801acca <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801acb6:	4a38      	ldr	r2, [pc, #224]	@ (801ad98 <inc_lock+0x118>)
 801acb8:	68fb      	ldr	r3, [r7, #12]
 801acba:	011b      	lsls	r3, r3, #4
 801acbc:	4413      	add	r3, r2
 801acbe:	3308      	adds	r3, #8
 801acc0:	681a      	ldr	r2, [r3, #0]
 801acc2:	687b      	ldr	r3, [r7, #4]
 801acc4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 801acc6:	429a      	cmp	r2, r3
 801acc8:	d006      	beq.n	801acd8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801acca:	68fb      	ldr	r3, [r7, #12]
 801accc:	3301      	adds	r3, #1
 801acce:	60fb      	str	r3, [r7, #12]
 801acd0:	68fb      	ldr	r3, [r7, #12]
 801acd2:	2b00      	cmp	r3, #0
 801acd4:	d0dc      	beq.n	801ac90 <inc_lock+0x10>
 801acd6:	e000      	b.n	801acda <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 801acd8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801acda:	68fb      	ldr	r3, [r7, #12]
 801acdc:	2b01      	cmp	r3, #1
 801acde:	d132      	bne.n	801ad46 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801ace0:	2300      	movs	r3, #0
 801ace2:	60fb      	str	r3, [r7, #12]
 801ace4:	e002      	b.n	801acec <inc_lock+0x6c>
 801ace6:	68fb      	ldr	r3, [r7, #12]
 801ace8:	3301      	adds	r3, #1
 801acea:	60fb      	str	r3, [r7, #12]
 801acec:	68fb      	ldr	r3, [r7, #12]
 801acee:	2b00      	cmp	r3, #0
 801acf0:	d106      	bne.n	801ad00 <inc_lock+0x80>
 801acf2:	4a29      	ldr	r2, [pc, #164]	@ (801ad98 <inc_lock+0x118>)
 801acf4:	68fb      	ldr	r3, [r7, #12]
 801acf6:	011b      	lsls	r3, r3, #4
 801acf8:	4413      	add	r3, r2
 801acfa:	681b      	ldr	r3, [r3, #0]
 801acfc:	2b00      	cmp	r3, #0
 801acfe:	d1f2      	bne.n	801ace6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 801ad00:	68fb      	ldr	r3, [r7, #12]
 801ad02:	2b01      	cmp	r3, #1
 801ad04:	d101      	bne.n	801ad0a <inc_lock+0x8a>
 801ad06:	2300      	movs	r3, #0
 801ad08:	e040      	b.n	801ad8c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801ad0a:	687b      	ldr	r3, [r7, #4]
 801ad0c:	681a      	ldr	r2, [r3, #0]
 801ad0e:	4922      	ldr	r1, [pc, #136]	@ (801ad98 <inc_lock+0x118>)
 801ad10:	68fb      	ldr	r3, [r7, #12]
 801ad12:	011b      	lsls	r3, r3, #4
 801ad14:	440b      	add	r3, r1
 801ad16:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 801ad18:	687b      	ldr	r3, [r7, #4]
 801ad1a:	689a      	ldr	r2, [r3, #8]
 801ad1c:	491e      	ldr	r1, [pc, #120]	@ (801ad98 <inc_lock+0x118>)
 801ad1e:	68fb      	ldr	r3, [r7, #12]
 801ad20:	011b      	lsls	r3, r3, #4
 801ad22:	440b      	add	r3, r1
 801ad24:	3304      	adds	r3, #4
 801ad26:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 801ad28:	687b      	ldr	r3, [r7, #4]
 801ad2a:	695a      	ldr	r2, [r3, #20]
 801ad2c:	491a      	ldr	r1, [pc, #104]	@ (801ad98 <inc_lock+0x118>)
 801ad2e:	68fb      	ldr	r3, [r7, #12]
 801ad30:	011b      	lsls	r3, r3, #4
 801ad32:	440b      	add	r3, r1
 801ad34:	3308      	adds	r3, #8
 801ad36:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 801ad38:	4a17      	ldr	r2, [pc, #92]	@ (801ad98 <inc_lock+0x118>)
 801ad3a:	68fb      	ldr	r3, [r7, #12]
 801ad3c:	011b      	lsls	r3, r3, #4
 801ad3e:	4413      	add	r3, r2
 801ad40:	330c      	adds	r3, #12
 801ad42:	2200      	movs	r2, #0
 801ad44:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801ad46:	683b      	ldr	r3, [r7, #0]
 801ad48:	2b00      	cmp	r3, #0
 801ad4a:	d009      	beq.n	801ad60 <inc_lock+0xe0>
 801ad4c:	4a12      	ldr	r2, [pc, #72]	@ (801ad98 <inc_lock+0x118>)
 801ad4e:	68fb      	ldr	r3, [r7, #12]
 801ad50:	011b      	lsls	r3, r3, #4
 801ad52:	4413      	add	r3, r2
 801ad54:	330c      	adds	r3, #12
 801ad56:	881b      	ldrh	r3, [r3, #0]
 801ad58:	2b00      	cmp	r3, #0
 801ad5a:	d001      	beq.n	801ad60 <inc_lock+0xe0>
 801ad5c:	2300      	movs	r3, #0
 801ad5e:	e015      	b.n	801ad8c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 801ad60:	683b      	ldr	r3, [r7, #0]
 801ad62:	2b00      	cmp	r3, #0
 801ad64:	d108      	bne.n	801ad78 <inc_lock+0xf8>
 801ad66:	4a0c      	ldr	r2, [pc, #48]	@ (801ad98 <inc_lock+0x118>)
 801ad68:	68fb      	ldr	r3, [r7, #12]
 801ad6a:	011b      	lsls	r3, r3, #4
 801ad6c:	4413      	add	r3, r2
 801ad6e:	330c      	adds	r3, #12
 801ad70:	881b      	ldrh	r3, [r3, #0]
 801ad72:	3301      	adds	r3, #1
 801ad74:	b29a      	uxth	r2, r3
 801ad76:	e001      	b.n	801ad7c <inc_lock+0xfc>
 801ad78:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801ad7c:	4906      	ldr	r1, [pc, #24]	@ (801ad98 <inc_lock+0x118>)
 801ad7e:	68fb      	ldr	r3, [r7, #12]
 801ad80:	011b      	lsls	r3, r3, #4
 801ad82:	440b      	add	r3, r1
 801ad84:	330c      	adds	r3, #12
 801ad86:	801a      	strh	r2, [r3, #0]

	return i + 1;
 801ad88:	68fb      	ldr	r3, [r7, #12]
 801ad8a:	3301      	adds	r3, #1
}
 801ad8c:	4618      	mov	r0, r3
 801ad8e:	3714      	adds	r7, #20
 801ad90:	46bd      	mov	sp, r7
 801ad92:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad96:	4770      	bx	lr
 801ad98:	24000558 	.word	0x24000558

0801ad9c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 801ad9c:	b480      	push	{r7}
 801ad9e:	b085      	sub	sp, #20
 801ada0:	af00      	add	r7, sp, #0
 801ada2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 801ada4:	687b      	ldr	r3, [r7, #4]
 801ada6:	3b01      	subs	r3, #1
 801ada8:	607b      	str	r3, [r7, #4]
 801adaa:	687b      	ldr	r3, [r7, #4]
 801adac:	2b00      	cmp	r3, #0
 801adae:	d125      	bne.n	801adfc <dec_lock+0x60>
		n = Files[i].ctr;
 801adb0:	4a17      	ldr	r2, [pc, #92]	@ (801ae10 <dec_lock+0x74>)
 801adb2:	687b      	ldr	r3, [r7, #4]
 801adb4:	011b      	lsls	r3, r3, #4
 801adb6:	4413      	add	r3, r2
 801adb8:	330c      	adds	r3, #12
 801adba:	881b      	ldrh	r3, [r3, #0]
 801adbc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 801adbe:	89fb      	ldrh	r3, [r7, #14]
 801adc0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801adc4:	d101      	bne.n	801adca <dec_lock+0x2e>
 801adc6:	2300      	movs	r3, #0
 801adc8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801adca:	89fb      	ldrh	r3, [r7, #14]
 801adcc:	2b00      	cmp	r3, #0
 801adce:	d002      	beq.n	801add6 <dec_lock+0x3a>
 801add0:	89fb      	ldrh	r3, [r7, #14]
 801add2:	3b01      	subs	r3, #1
 801add4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 801add6:	4a0e      	ldr	r2, [pc, #56]	@ (801ae10 <dec_lock+0x74>)
 801add8:	687b      	ldr	r3, [r7, #4]
 801adda:	011b      	lsls	r3, r3, #4
 801addc:	4413      	add	r3, r2
 801adde:	330c      	adds	r3, #12
 801ade0:	89fa      	ldrh	r2, [r7, #14]
 801ade2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 801ade4:	89fb      	ldrh	r3, [r7, #14]
 801ade6:	2b00      	cmp	r3, #0
 801ade8:	d105      	bne.n	801adf6 <dec_lock+0x5a>
 801adea:	4a09      	ldr	r2, [pc, #36]	@ (801ae10 <dec_lock+0x74>)
 801adec:	687b      	ldr	r3, [r7, #4]
 801adee:	011b      	lsls	r3, r3, #4
 801adf0:	4413      	add	r3, r2
 801adf2:	2200      	movs	r2, #0
 801adf4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 801adf6:	2300      	movs	r3, #0
 801adf8:	737b      	strb	r3, [r7, #13]
 801adfa:	e001      	b.n	801ae00 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 801adfc:	2302      	movs	r3, #2
 801adfe:	737b      	strb	r3, [r7, #13]
	}
	return res;
 801ae00:	7b7b      	ldrb	r3, [r7, #13]
}
 801ae02:	4618      	mov	r0, r3
 801ae04:	3714      	adds	r7, #20
 801ae06:	46bd      	mov	sp, r7
 801ae08:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae0c:	4770      	bx	lr
 801ae0e:	bf00      	nop
 801ae10:	24000558 	.word	0x24000558

0801ae14 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 801ae14:	b480      	push	{r7}
 801ae16:	b085      	sub	sp, #20
 801ae18:	af00      	add	r7, sp, #0
 801ae1a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 801ae1c:	2300      	movs	r3, #0
 801ae1e:	60fb      	str	r3, [r7, #12]
 801ae20:	e010      	b.n	801ae44 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801ae22:	4a0d      	ldr	r2, [pc, #52]	@ (801ae58 <clear_lock+0x44>)
 801ae24:	68fb      	ldr	r3, [r7, #12]
 801ae26:	011b      	lsls	r3, r3, #4
 801ae28:	4413      	add	r3, r2
 801ae2a:	681b      	ldr	r3, [r3, #0]
 801ae2c:	687a      	ldr	r2, [r7, #4]
 801ae2e:	429a      	cmp	r2, r3
 801ae30:	d105      	bne.n	801ae3e <clear_lock+0x2a>
 801ae32:	4a09      	ldr	r2, [pc, #36]	@ (801ae58 <clear_lock+0x44>)
 801ae34:	68fb      	ldr	r3, [r7, #12]
 801ae36:	011b      	lsls	r3, r3, #4
 801ae38:	4413      	add	r3, r2
 801ae3a:	2200      	movs	r2, #0
 801ae3c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801ae3e:	68fb      	ldr	r3, [r7, #12]
 801ae40:	3301      	adds	r3, #1
 801ae42:	60fb      	str	r3, [r7, #12]
 801ae44:	68fb      	ldr	r3, [r7, #12]
 801ae46:	2b00      	cmp	r3, #0
 801ae48:	d0eb      	beq.n	801ae22 <clear_lock+0xe>
	}
}
 801ae4a:	bf00      	nop
 801ae4c:	bf00      	nop
 801ae4e:	3714      	adds	r7, #20
 801ae50:	46bd      	mov	sp, r7
 801ae52:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae56:	4770      	bx	lr
 801ae58:	24000558 	.word	0x24000558

0801ae5c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 801ae5c:	b580      	push	{r7, lr}
 801ae5e:	b086      	sub	sp, #24
 801ae60:	af00      	add	r7, sp, #0
 801ae62:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 801ae64:	2300      	movs	r3, #0
 801ae66:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801ae68:	687b      	ldr	r3, [r7, #4]
 801ae6a:	78db      	ldrb	r3, [r3, #3]
 801ae6c:	2b00      	cmp	r3, #0
 801ae6e:	d034      	beq.n	801aeda <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 801ae70:	687b      	ldr	r3, [r7, #4]
 801ae72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801ae74:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801ae76:	687b      	ldr	r3, [r7, #4]
 801ae78:	7858      	ldrb	r0, [r3, #1]
 801ae7a:	687b      	ldr	r3, [r7, #4]
 801ae7c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801ae80:	2301      	movs	r3, #1
 801ae82:	697a      	ldr	r2, [r7, #20]
 801ae84:	f7ff fd40 	bl	801a908 <disk_write>
 801ae88:	4603      	mov	r3, r0
 801ae8a:	2b00      	cmp	r3, #0
 801ae8c:	d002      	beq.n	801ae94 <sync_window+0x38>
			res = FR_DISK_ERR;
 801ae8e:	2301      	movs	r3, #1
 801ae90:	73fb      	strb	r3, [r7, #15]
 801ae92:	e022      	b.n	801aeda <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 801ae94:	687b      	ldr	r3, [r7, #4]
 801ae96:	2200      	movs	r2, #0
 801ae98:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801ae9a:	687b      	ldr	r3, [r7, #4]
 801ae9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ae9e:	697a      	ldr	r2, [r7, #20]
 801aea0:	1ad2      	subs	r2, r2, r3
 801aea2:	687b      	ldr	r3, [r7, #4]
 801aea4:	6a1b      	ldr	r3, [r3, #32]
 801aea6:	429a      	cmp	r2, r3
 801aea8:	d217      	bcs.n	801aeda <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801aeaa:	687b      	ldr	r3, [r7, #4]
 801aeac:	789b      	ldrb	r3, [r3, #2]
 801aeae:	613b      	str	r3, [r7, #16]
 801aeb0:	e010      	b.n	801aed4 <sync_window+0x78>
					wsect += fs->fsize;
 801aeb2:	687b      	ldr	r3, [r7, #4]
 801aeb4:	6a1b      	ldr	r3, [r3, #32]
 801aeb6:	697a      	ldr	r2, [r7, #20]
 801aeb8:	4413      	add	r3, r2
 801aeba:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 801aebc:	687b      	ldr	r3, [r7, #4]
 801aebe:	7858      	ldrb	r0, [r3, #1]
 801aec0:	687b      	ldr	r3, [r7, #4]
 801aec2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801aec6:	2301      	movs	r3, #1
 801aec8:	697a      	ldr	r2, [r7, #20]
 801aeca:	f7ff fd1d 	bl	801a908 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801aece:	693b      	ldr	r3, [r7, #16]
 801aed0:	3b01      	subs	r3, #1
 801aed2:	613b      	str	r3, [r7, #16]
 801aed4:	693b      	ldr	r3, [r7, #16]
 801aed6:	2b01      	cmp	r3, #1
 801aed8:	d8eb      	bhi.n	801aeb2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801aeda:	7bfb      	ldrb	r3, [r7, #15]
}
 801aedc:	4618      	mov	r0, r3
 801aede:	3718      	adds	r7, #24
 801aee0:	46bd      	mov	sp, r7
 801aee2:	bd80      	pop	{r7, pc}

0801aee4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 801aee4:	b580      	push	{r7, lr}
 801aee6:	b084      	sub	sp, #16
 801aee8:	af00      	add	r7, sp, #0
 801aeea:	6078      	str	r0, [r7, #4]
 801aeec:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801aeee:	2300      	movs	r3, #0
 801aef0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801aef2:	687b      	ldr	r3, [r7, #4]
 801aef4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801aef6:	683a      	ldr	r2, [r7, #0]
 801aef8:	429a      	cmp	r2, r3
 801aefa:	d01b      	beq.n	801af34 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 801aefc:	6878      	ldr	r0, [r7, #4]
 801aefe:	f7ff ffad 	bl	801ae5c <sync_window>
 801af02:	4603      	mov	r3, r0
 801af04:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801af06:	7bfb      	ldrb	r3, [r7, #15]
 801af08:	2b00      	cmp	r3, #0
 801af0a:	d113      	bne.n	801af34 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801af0c:	687b      	ldr	r3, [r7, #4]
 801af0e:	7858      	ldrb	r0, [r3, #1]
 801af10:	687b      	ldr	r3, [r7, #4]
 801af12:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801af16:	2301      	movs	r3, #1
 801af18:	683a      	ldr	r2, [r7, #0]
 801af1a:	f7ff fcd5 	bl	801a8c8 <disk_read>
 801af1e:	4603      	mov	r3, r0
 801af20:	2b00      	cmp	r3, #0
 801af22:	d004      	beq.n	801af2e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 801af24:	f04f 33ff 	mov.w	r3, #4294967295
 801af28:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 801af2a:	2301      	movs	r3, #1
 801af2c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801af2e:	687b      	ldr	r3, [r7, #4]
 801af30:	683a      	ldr	r2, [r7, #0]
 801af32:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 801af34:	7bfb      	ldrb	r3, [r7, #15]
}
 801af36:	4618      	mov	r0, r3
 801af38:	3710      	adds	r7, #16
 801af3a:	46bd      	mov	sp, r7
 801af3c:	bd80      	pop	{r7, pc}
	...

0801af40 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 801af40:	b580      	push	{r7, lr}
 801af42:	b084      	sub	sp, #16
 801af44:	af00      	add	r7, sp, #0
 801af46:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 801af48:	6878      	ldr	r0, [r7, #4]
 801af4a:	f7ff ff87 	bl	801ae5c <sync_window>
 801af4e:	4603      	mov	r3, r0
 801af50:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801af52:	7bfb      	ldrb	r3, [r7, #15]
 801af54:	2b00      	cmp	r3, #0
 801af56:	d159      	bne.n	801b00c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 801af58:	687b      	ldr	r3, [r7, #4]
 801af5a:	781b      	ldrb	r3, [r3, #0]
 801af5c:	2b03      	cmp	r3, #3
 801af5e:	d149      	bne.n	801aff4 <sync_fs+0xb4>
 801af60:	687b      	ldr	r3, [r7, #4]
 801af62:	791b      	ldrb	r3, [r3, #4]
 801af64:	2b01      	cmp	r3, #1
 801af66:	d145      	bne.n	801aff4 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 801af68:	687b      	ldr	r3, [r7, #4]
 801af6a:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 801af6e:	687b      	ldr	r3, [r7, #4]
 801af70:	899b      	ldrh	r3, [r3, #12]
 801af72:	461a      	mov	r2, r3
 801af74:	2100      	movs	r1, #0
 801af76:	f7ff fda8 	bl	801aaca <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 801af7a:	687b      	ldr	r3, [r7, #4]
 801af7c:	3338      	adds	r3, #56	@ 0x38
 801af7e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801af82:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 801af86:	4618      	mov	r0, r3
 801af88:	f7ff fd37 	bl	801a9fa <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 801af8c:	687b      	ldr	r3, [r7, #4]
 801af8e:	3338      	adds	r3, #56	@ 0x38
 801af90:	4921      	ldr	r1, [pc, #132]	@ (801b018 <sync_fs+0xd8>)
 801af92:	4618      	mov	r0, r3
 801af94:	f7ff fd4c 	bl	801aa30 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 801af98:	687b      	ldr	r3, [r7, #4]
 801af9a:	3338      	adds	r3, #56	@ 0x38
 801af9c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 801afa0:	491e      	ldr	r1, [pc, #120]	@ (801b01c <sync_fs+0xdc>)
 801afa2:	4618      	mov	r0, r3
 801afa4:	f7ff fd44 	bl	801aa30 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 801afa8:	687b      	ldr	r3, [r7, #4]
 801afaa:	3338      	adds	r3, #56	@ 0x38
 801afac:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 801afb0:	687b      	ldr	r3, [r7, #4]
 801afb2:	699b      	ldr	r3, [r3, #24]
 801afb4:	4619      	mov	r1, r3
 801afb6:	4610      	mov	r0, r2
 801afb8:	f7ff fd3a 	bl	801aa30 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 801afbc:	687b      	ldr	r3, [r7, #4]
 801afbe:	3338      	adds	r3, #56	@ 0x38
 801afc0:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 801afc4:	687b      	ldr	r3, [r7, #4]
 801afc6:	695b      	ldr	r3, [r3, #20]
 801afc8:	4619      	mov	r1, r3
 801afca:	4610      	mov	r0, r2
 801afcc:	f7ff fd30 	bl	801aa30 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 801afd0:	687b      	ldr	r3, [r7, #4]
 801afd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801afd4:	1c5a      	adds	r2, r3, #1
 801afd6:	687b      	ldr	r3, [r7, #4]
 801afd8:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 801afda:	687b      	ldr	r3, [r7, #4]
 801afdc:	7858      	ldrb	r0, [r3, #1]
 801afde:	687b      	ldr	r3, [r7, #4]
 801afe0:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801afe4:	687b      	ldr	r3, [r7, #4]
 801afe6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801afe8:	2301      	movs	r3, #1
 801afea:	f7ff fc8d 	bl	801a908 <disk_write>
			fs->fsi_flag = 0;
 801afee:	687b      	ldr	r3, [r7, #4]
 801aff0:	2200      	movs	r2, #0
 801aff2:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 801aff4:	687b      	ldr	r3, [r7, #4]
 801aff6:	785b      	ldrb	r3, [r3, #1]
 801aff8:	2200      	movs	r2, #0
 801affa:	2100      	movs	r1, #0
 801affc:	4618      	mov	r0, r3
 801affe:	f7ff fca3 	bl	801a948 <disk_ioctl>
 801b002:	4603      	mov	r3, r0
 801b004:	2b00      	cmp	r3, #0
 801b006:	d001      	beq.n	801b00c <sync_fs+0xcc>
 801b008:	2301      	movs	r3, #1
 801b00a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 801b00c:	7bfb      	ldrb	r3, [r7, #15]
}
 801b00e:	4618      	mov	r0, r3
 801b010:	3710      	adds	r7, #16
 801b012:	46bd      	mov	sp, r7
 801b014:	bd80      	pop	{r7, pc}
 801b016:	bf00      	nop
 801b018:	41615252 	.word	0x41615252
 801b01c:	61417272 	.word	0x61417272

0801b020 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 801b020:	b480      	push	{r7}
 801b022:	b083      	sub	sp, #12
 801b024:	af00      	add	r7, sp, #0
 801b026:	6078      	str	r0, [r7, #4]
 801b028:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801b02a:	683b      	ldr	r3, [r7, #0]
 801b02c:	3b02      	subs	r3, #2
 801b02e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801b030:	687b      	ldr	r3, [r7, #4]
 801b032:	69db      	ldr	r3, [r3, #28]
 801b034:	3b02      	subs	r3, #2
 801b036:	683a      	ldr	r2, [r7, #0]
 801b038:	429a      	cmp	r2, r3
 801b03a:	d301      	bcc.n	801b040 <clust2sect+0x20>
 801b03c:	2300      	movs	r3, #0
 801b03e:	e008      	b.n	801b052 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 801b040:	687b      	ldr	r3, [r7, #4]
 801b042:	895b      	ldrh	r3, [r3, #10]
 801b044:	461a      	mov	r2, r3
 801b046:	683b      	ldr	r3, [r7, #0]
 801b048:	fb03 f202 	mul.w	r2, r3, r2
 801b04c:	687b      	ldr	r3, [r7, #4]
 801b04e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b050:	4413      	add	r3, r2
}
 801b052:	4618      	mov	r0, r3
 801b054:	370c      	adds	r7, #12
 801b056:	46bd      	mov	sp, r7
 801b058:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b05c:	4770      	bx	lr

0801b05e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 801b05e:	b580      	push	{r7, lr}
 801b060:	b086      	sub	sp, #24
 801b062:	af00      	add	r7, sp, #0
 801b064:	6078      	str	r0, [r7, #4]
 801b066:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 801b068:	687b      	ldr	r3, [r7, #4]
 801b06a:	681b      	ldr	r3, [r3, #0]
 801b06c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801b06e:	683b      	ldr	r3, [r7, #0]
 801b070:	2b01      	cmp	r3, #1
 801b072:	d904      	bls.n	801b07e <get_fat+0x20>
 801b074:	693b      	ldr	r3, [r7, #16]
 801b076:	69db      	ldr	r3, [r3, #28]
 801b078:	683a      	ldr	r2, [r7, #0]
 801b07a:	429a      	cmp	r2, r3
 801b07c:	d302      	bcc.n	801b084 <get_fat+0x26>
		val = 1;	/* Internal error */
 801b07e:	2301      	movs	r3, #1
 801b080:	617b      	str	r3, [r7, #20]
 801b082:	e0ba      	b.n	801b1fa <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 801b084:	f04f 33ff 	mov.w	r3, #4294967295
 801b088:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 801b08a:	693b      	ldr	r3, [r7, #16]
 801b08c:	781b      	ldrb	r3, [r3, #0]
 801b08e:	2b03      	cmp	r3, #3
 801b090:	f000 8082 	beq.w	801b198 <get_fat+0x13a>
 801b094:	2b03      	cmp	r3, #3
 801b096:	f300 80a6 	bgt.w	801b1e6 <get_fat+0x188>
 801b09a:	2b01      	cmp	r3, #1
 801b09c:	d002      	beq.n	801b0a4 <get_fat+0x46>
 801b09e:	2b02      	cmp	r3, #2
 801b0a0:	d055      	beq.n	801b14e <get_fat+0xf0>
 801b0a2:	e0a0      	b.n	801b1e6 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 801b0a4:	683b      	ldr	r3, [r7, #0]
 801b0a6:	60fb      	str	r3, [r7, #12]
 801b0a8:	68fb      	ldr	r3, [r7, #12]
 801b0aa:	085b      	lsrs	r3, r3, #1
 801b0ac:	68fa      	ldr	r2, [r7, #12]
 801b0ae:	4413      	add	r3, r2
 801b0b0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801b0b2:	693b      	ldr	r3, [r7, #16]
 801b0b4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b0b6:	693b      	ldr	r3, [r7, #16]
 801b0b8:	899b      	ldrh	r3, [r3, #12]
 801b0ba:	4619      	mov	r1, r3
 801b0bc:	68fb      	ldr	r3, [r7, #12]
 801b0be:	fbb3 f3f1 	udiv	r3, r3, r1
 801b0c2:	4413      	add	r3, r2
 801b0c4:	4619      	mov	r1, r3
 801b0c6:	6938      	ldr	r0, [r7, #16]
 801b0c8:	f7ff ff0c 	bl	801aee4 <move_window>
 801b0cc:	4603      	mov	r3, r0
 801b0ce:	2b00      	cmp	r3, #0
 801b0d0:	f040 808c 	bne.w	801b1ec <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 801b0d4:	68fb      	ldr	r3, [r7, #12]
 801b0d6:	1c5a      	adds	r2, r3, #1
 801b0d8:	60fa      	str	r2, [r7, #12]
 801b0da:	693a      	ldr	r2, [r7, #16]
 801b0dc:	8992      	ldrh	r2, [r2, #12]
 801b0de:	fbb3 f1f2 	udiv	r1, r3, r2
 801b0e2:	fb01 f202 	mul.w	r2, r1, r2
 801b0e6:	1a9b      	subs	r3, r3, r2
 801b0e8:	693a      	ldr	r2, [r7, #16]
 801b0ea:	4413      	add	r3, r2
 801b0ec:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801b0f0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801b0f2:	693b      	ldr	r3, [r7, #16]
 801b0f4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b0f6:	693b      	ldr	r3, [r7, #16]
 801b0f8:	899b      	ldrh	r3, [r3, #12]
 801b0fa:	4619      	mov	r1, r3
 801b0fc:	68fb      	ldr	r3, [r7, #12]
 801b0fe:	fbb3 f3f1 	udiv	r3, r3, r1
 801b102:	4413      	add	r3, r2
 801b104:	4619      	mov	r1, r3
 801b106:	6938      	ldr	r0, [r7, #16]
 801b108:	f7ff feec 	bl	801aee4 <move_window>
 801b10c:	4603      	mov	r3, r0
 801b10e:	2b00      	cmp	r3, #0
 801b110:	d16e      	bne.n	801b1f0 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 801b112:	693b      	ldr	r3, [r7, #16]
 801b114:	899b      	ldrh	r3, [r3, #12]
 801b116:	461a      	mov	r2, r3
 801b118:	68fb      	ldr	r3, [r7, #12]
 801b11a:	fbb3 f1f2 	udiv	r1, r3, r2
 801b11e:	fb01 f202 	mul.w	r2, r1, r2
 801b122:	1a9b      	subs	r3, r3, r2
 801b124:	693a      	ldr	r2, [r7, #16]
 801b126:	4413      	add	r3, r2
 801b128:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801b12c:	021b      	lsls	r3, r3, #8
 801b12e:	68ba      	ldr	r2, [r7, #8]
 801b130:	4313      	orrs	r3, r2
 801b132:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801b134:	683b      	ldr	r3, [r7, #0]
 801b136:	f003 0301 	and.w	r3, r3, #1
 801b13a:	2b00      	cmp	r3, #0
 801b13c:	d002      	beq.n	801b144 <get_fat+0xe6>
 801b13e:	68bb      	ldr	r3, [r7, #8]
 801b140:	091b      	lsrs	r3, r3, #4
 801b142:	e002      	b.n	801b14a <get_fat+0xec>
 801b144:	68bb      	ldr	r3, [r7, #8]
 801b146:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801b14a:	617b      	str	r3, [r7, #20]
			break;
 801b14c:	e055      	b.n	801b1fa <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801b14e:	693b      	ldr	r3, [r7, #16]
 801b150:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b152:	693b      	ldr	r3, [r7, #16]
 801b154:	899b      	ldrh	r3, [r3, #12]
 801b156:	085b      	lsrs	r3, r3, #1
 801b158:	b29b      	uxth	r3, r3
 801b15a:	4619      	mov	r1, r3
 801b15c:	683b      	ldr	r3, [r7, #0]
 801b15e:	fbb3 f3f1 	udiv	r3, r3, r1
 801b162:	4413      	add	r3, r2
 801b164:	4619      	mov	r1, r3
 801b166:	6938      	ldr	r0, [r7, #16]
 801b168:	f7ff febc 	bl	801aee4 <move_window>
 801b16c:	4603      	mov	r3, r0
 801b16e:	2b00      	cmp	r3, #0
 801b170:	d140      	bne.n	801b1f4 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 801b172:	693b      	ldr	r3, [r7, #16]
 801b174:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b178:	683b      	ldr	r3, [r7, #0]
 801b17a:	005b      	lsls	r3, r3, #1
 801b17c:	693a      	ldr	r2, [r7, #16]
 801b17e:	8992      	ldrh	r2, [r2, #12]
 801b180:	fbb3 f0f2 	udiv	r0, r3, r2
 801b184:	fb00 f202 	mul.w	r2, r0, r2
 801b188:	1a9b      	subs	r3, r3, r2
 801b18a:	440b      	add	r3, r1
 801b18c:	4618      	mov	r0, r3
 801b18e:	f7ff fbf9 	bl	801a984 <ld_word>
 801b192:	4603      	mov	r3, r0
 801b194:	617b      	str	r3, [r7, #20]
			break;
 801b196:	e030      	b.n	801b1fa <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801b198:	693b      	ldr	r3, [r7, #16]
 801b19a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b19c:	693b      	ldr	r3, [r7, #16]
 801b19e:	899b      	ldrh	r3, [r3, #12]
 801b1a0:	089b      	lsrs	r3, r3, #2
 801b1a2:	b29b      	uxth	r3, r3
 801b1a4:	4619      	mov	r1, r3
 801b1a6:	683b      	ldr	r3, [r7, #0]
 801b1a8:	fbb3 f3f1 	udiv	r3, r3, r1
 801b1ac:	4413      	add	r3, r2
 801b1ae:	4619      	mov	r1, r3
 801b1b0:	6938      	ldr	r0, [r7, #16]
 801b1b2:	f7ff fe97 	bl	801aee4 <move_window>
 801b1b6:	4603      	mov	r3, r0
 801b1b8:	2b00      	cmp	r3, #0
 801b1ba:	d11d      	bne.n	801b1f8 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801b1bc:	693b      	ldr	r3, [r7, #16]
 801b1be:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b1c2:	683b      	ldr	r3, [r7, #0]
 801b1c4:	009b      	lsls	r3, r3, #2
 801b1c6:	693a      	ldr	r2, [r7, #16]
 801b1c8:	8992      	ldrh	r2, [r2, #12]
 801b1ca:	fbb3 f0f2 	udiv	r0, r3, r2
 801b1ce:	fb00 f202 	mul.w	r2, r0, r2
 801b1d2:	1a9b      	subs	r3, r3, r2
 801b1d4:	440b      	add	r3, r1
 801b1d6:	4618      	mov	r0, r3
 801b1d8:	f7ff fbec 	bl	801a9b4 <ld_dword>
 801b1dc:	4603      	mov	r3, r0
 801b1de:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 801b1e2:	617b      	str	r3, [r7, #20]
			break;
 801b1e4:	e009      	b.n	801b1fa <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 801b1e6:	2301      	movs	r3, #1
 801b1e8:	617b      	str	r3, [r7, #20]
 801b1ea:	e006      	b.n	801b1fa <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801b1ec:	bf00      	nop
 801b1ee:	e004      	b.n	801b1fa <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801b1f0:	bf00      	nop
 801b1f2:	e002      	b.n	801b1fa <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801b1f4:	bf00      	nop
 801b1f6:	e000      	b.n	801b1fa <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801b1f8:	bf00      	nop
		}
	}

	return val;
 801b1fa:	697b      	ldr	r3, [r7, #20]
}
 801b1fc:	4618      	mov	r0, r3
 801b1fe:	3718      	adds	r7, #24
 801b200:	46bd      	mov	sp, r7
 801b202:	bd80      	pop	{r7, pc}

0801b204 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 801b204:	b590      	push	{r4, r7, lr}
 801b206:	b089      	sub	sp, #36	@ 0x24
 801b208:	af00      	add	r7, sp, #0
 801b20a:	60f8      	str	r0, [r7, #12]
 801b20c:	60b9      	str	r1, [r7, #8]
 801b20e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 801b210:	2302      	movs	r3, #2
 801b212:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801b214:	68bb      	ldr	r3, [r7, #8]
 801b216:	2b01      	cmp	r3, #1
 801b218:	f240 8109 	bls.w	801b42e <put_fat+0x22a>
 801b21c:	68fb      	ldr	r3, [r7, #12]
 801b21e:	69db      	ldr	r3, [r3, #28]
 801b220:	68ba      	ldr	r2, [r7, #8]
 801b222:	429a      	cmp	r2, r3
 801b224:	f080 8103 	bcs.w	801b42e <put_fat+0x22a>
		switch (fs->fs_type) {
 801b228:	68fb      	ldr	r3, [r7, #12]
 801b22a:	781b      	ldrb	r3, [r3, #0]
 801b22c:	2b03      	cmp	r3, #3
 801b22e:	f000 80b6 	beq.w	801b39e <put_fat+0x19a>
 801b232:	2b03      	cmp	r3, #3
 801b234:	f300 80fb 	bgt.w	801b42e <put_fat+0x22a>
 801b238:	2b01      	cmp	r3, #1
 801b23a:	d003      	beq.n	801b244 <put_fat+0x40>
 801b23c:	2b02      	cmp	r3, #2
 801b23e:	f000 8083 	beq.w	801b348 <put_fat+0x144>
 801b242:	e0f4      	b.n	801b42e <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 801b244:	68bb      	ldr	r3, [r7, #8]
 801b246:	61bb      	str	r3, [r7, #24]
 801b248:	69bb      	ldr	r3, [r7, #24]
 801b24a:	085b      	lsrs	r3, r3, #1
 801b24c:	69ba      	ldr	r2, [r7, #24]
 801b24e:	4413      	add	r3, r2
 801b250:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801b252:	68fb      	ldr	r3, [r7, #12]
 801b254:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b256:	68fb      	ldr	r3, [r7, #12]
 801b258:	899b      	ldrh	r3, [r3, #12]
 801b25a:	4619      	mov	r1, r3
 801b25c:	69bb      	ldr	r3, [r7, #24]
 801b25e:	fbb3 f3f1 	udiv	r3, r3, r1
 801b262:	4413      	add	r3, r2
 801b264:	4619      	mov	r1, r3
 801b266:	68f8      	ldr	r0, [r7, #12]
 801b268:	f7ff fe3c 	bl	801aee4 <move_window>
 801b26c:	4603      	mov	r3, r0
 801b26e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801b270:	7ffb      	ldrb	r3, [r7, #31]
 801b272:	2b00      	cmp	r3, #0
 801b274:	f040 80d4 	bne.w	801b420 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 801b278:	68fb      	ldr	r3, [r7, #12]
 801b27a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b27e:	69bb      	ldr	r3, [r7, #24]
 801b280:	1c5a      	adds	r2, r3, #1
 801b282:	61ba      	str	r2, [r7, #24]
 801b284:	68fa      	ldr	r2, [r7, #12]
 801b286:	8992      	ldrh	r2, [r2, #12]
 801b288:	fbb3 f0f2 	udiv	r0, r3, r2
 801b28c:	fb00 f202 	mul.w	r2, r0, r2
 801b290:	1a9b      	subs	r3, r3, r2
 801b292:	440b      	add	r3, r1
 801b294:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 801b296:	68bb      	ldr	r3, [r7, #8]
 801b298:	f003 0301 	and.w	r3, r3, #1
 801b29c:	2b00      	cmp	r3, #0
 801b29e:	d00d      	beq.n	801b2bc <put_fat+0xb8>
 801b2a0:	697b      	ldr	r3, [r7, #20]
 801b2a2:	781b      	ldrb	r3, [r3, #0]
 801b2a4:	b25b      	sxtb	r3, r3
 801b2a6:	f003 030f 	and.w	r3, r3, #15
 801b2aa:	b25a      	sxtb	r2, r3
 801b2ac:	687b      	ldr	r3, [r7, #4]
 801b2ae:	b2db      	uxtb	r3, r3
 801b2b0:	011b      	lsls	r3, r3, #4
 801b2b2:	b25b      	sxtb	r3, r3
 801b2b4:	4313      	orrs	r3, r2
 801b2b6:	b25b      	sxtb	r3, r3
 801b2b8:	b2db      	uxtb	r3, r3
 801b2ba:	e001      	b.n	801b2c0 <put_fat+0xbc>
 801b2bc:	687b      	ldr	r3, [r7, #4]
 801b2be:	b2db      	uxtb	r3, r3
 801b2c0:	697a      	ldr	r2, [r7, #20]
 801b2c2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801b2c4:	68fb      	ldr	r3, [r7, #12]
 801b2c6:	2201      	movs	r2, #1
 801b2c8:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801b2ca:	68fb      	ldr	r3, [r7, #12]
 801b2cc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b2ce:	68fb      	ldr	r3, [r7, #12]
 801b2d0:	899b      	ldrh	r3, [r3, #12]
 801b2d2:	4619      	mov	r1, r3
 801b2d4:	69bb      	ldr	r3, [r7, #24]
 801b2d6:	fbb3 f3f1 	udiv	r3, r3, r1
 801b2da:	4413      	add	r3, r2
 801b2dc:	4619      	mov	r1, r3
 801b2de:	68f8      	ldr	r0, [r7, #12]
 801b2e0:	f7ff fe00 	bl	801aee4 <move_window>
 801b2e4:	4603      	mov	r3, r0
 801b2e6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801b2e8:	7ffb      	ldrb	r3, [r7, #31]
 801b2ea:	2b00      	cmp	r3, #0
 801b2ec:	f040 809a 	bne.w	801b424 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 801b2f0:	68fb      	ldr	r3, [r7, #12]
 801b2f2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b2f6:	68fb      	ldr	r3, [r7, #12]
 801b2f8:	899b      	ldrh	r3, [r3, #12]
 801b2fa:	461a      	mov	r2, r3
 801b2fc:	69bb      	ldr	r3, [r7, #24]
 801b2fe:	fbb3 f0f2 	udiv	r0, r3, r2
 801b302:	fb00 f202 	mul.w	r2, r0, r2
 801b306:	1a9b      	subs	r3, r3, r2
 801b308:	440b      	add	r3, r1
 801b30a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801b30c:	68bb      	ldr	r3, [r7, #8]
 801b30e:	f003 0301 	and.w	r3, r3, #1
 801b312:	2b00      	cmp	r3, #0
 801b314:	d003      	beq.n	801b31e <put_fat+0x11a>
 801b316:	687b      	ldr	r3, [r7, #4]
 801b318:	091b      	lsrs	r3, r3, #4
 801b31a:	b2db      	uxtb	r3, r3
 801b31c:	e00e      	b.n	801b33c <put_fat+0x138>
 801b31e:	697b      	ldr	r3, [r7, #20]
 801b320:	781b      	ldrb	r3, [r3, #0]
 801b322:	b25b      	sxtb	r3, r3
 801b324:	f023 030f 	bic.w	r3, r3, #15
 801b328:	b25a      	sxtb	r2, r3
 801b32a:	687b      	ldr	r3, [r7, #4]
 801b32c:	0a1b      	lsrs	r3, r3, #8
 801b32e:	b25b      	sxtb	r3, r3
 801b330:	f003 030f 	and.w	r3, r3, #15
 801b334:	b25b      	sxtb	r3, r3
 801b336:	4313      	orrs	r3, r2
 801b338:	b25b      	sxtb	r3, r3
 801b33a:	b2db      	uxtb	r3, r3
 801b33c:	697a      	ldr	r2, [r7, #20]
 801b33e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801b340:	68fb      	ldr	r3, [r7, #12]
 801b342:	2201      	movs	r2, #1
 801b344:	70da      	strb	r2, [r3, #3]
			break;
 801b346:	e072      	b.n	801b42e <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 801b348:	68fb      	ldr	r3, [r7, #12]
 801b34a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b34c:	68fb      	ldr	r3, [r7, #12]
 801b34e:	899b      	ldrh	r3, [r3, #12]
 801b350:	085b      	lsrs	r3, r3, #1
 801b352:	b29b      	uxth	r3, r3
 801b354:	4619      	mov	r1, r3
 801b356:	68bb      	ldr	r3, [r7, #8]
 801b358:	fbb3 f3f1 	udiv	r3, r3, r1
 801b35c:	4413      	add	r3, r2
 801b35e:	4619      	mov	r1, r3
 801b360:	68f8      	ldr	r0, [r7, #12]
 801b362:	f7ff fdbf 	bl	801aee4 <move_window>
 801b366:	4603      	mov	r3, r0
 801b368:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801b36a:	7ffb      	ldrb	r3, [r7, #31]
 801b36c:	2b00      	cmp	r3, #0
 801b36e:	d15b      	bne.n	801b428 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 801b370:	68fb      	ldr	r3, [r7, #12]
 801b372:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b376:	68bb      	ldr	r3, [r7, #8]
 801b378:	005b      	lsls	r3, r3, #1
 801b37a:	68fa      	ldr	r2, [r7, #12]
 801b37c:	8992      	ldrh	r2, [r2, #12]
 801b37e:	fbb3 f0f2 	udiv	r0, r3, r2
 801b382:	fb00 f202 	mul.w	r2, r0, r2
 801b386:	1a9b      	subs	r3, r3, r2
 801b388:	440b      	add	r3, r1
 801b38a:	687a      	ldr	r2, [r7, #4]
 801b38c:	b292      	uxth	r2, r2
 801b38e:	4611      	mov	r1, r2
 801b390:	4618      	mov	r0, r3
 801b392:	f7ff fb32 	bl	801a9fa <st_word>
			fs->wflag = 1;
 801b396:	68fb      	ldr	r3, [r7, #12]
 801b398:	2201      	movs	r2, #1
 801b39a:	70da      	strb	r2, [r3, #3]
			break;
 801b39c:	e047      	b.n	801b42e <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 801b39e:	68fb      	ldr	r3, [r7, #12]
 801b3a0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b3a2:	68fb      	ldr	r3, [r7, #12]
 801b3a4:	899b      	ldrh	r3, [r3, #12]
 801b3a6:	089b      	lsrs	r3, r3, #2
 801b3a8:	b29b      	uxth	r3, r3
 801b3aa:	4619      	mov	r1, r3
 801b3ac:	68bb      	ldr	r3, [r7, #8]
 801b3ae:	fbb3 f3f1 	udiv	r3, r3, r1
 801b3b2:	4413      	add	r3, r2
 801b3b4:	4619      	mov	r1, r3
 801b3b6:	68f8      	ldr	r0, [r7, #12]
 801b3b8:	f7ff fd94 	bl	801aee4 <move_window>
 801b3bc:	4603      	mov	r3, r0
 801b3be:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801b3c0:	7ffb      	ldrb	r3, [r7, #31]
 801b3c2:	2b00      	cmp	r3, #0
 801b3c4:	d132      	bne.n	801b42c <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 801b3c6:	687b      	ldr	r3, [r7, #4]
 801b3c8:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 801b3cc:	68fb      	ldr	r3, [r7, #12]
 801b3ce:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b3d2:	68bb      	ldr	r3, [r7, #8]
 801b3d4:	009b      	lsls	r3, r3, #2
 801b3d6:	68fa      	ldr	r2, [r7, #12]
 801b3d8:	8992      	ldrh	r2, [r2, #12]
 801b3da:	fbb3 f0f2 	udiv	r0, r3, r2
 801b3de:	fb00 f202 	mul.w	r2, r0, r2
 801b3e2:	1a9b      	subs	r3, r3, r2
 801b3e4:	440b      	add	r3, r1
 801b3e6:	4618      	mov	r0, r3
 801b3e8:	f7ff fae4 	bl	801a9b4 <ld_dword>
 801b3ec:	4603      	mov	r3, r0
 801b3ee:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 801b3f2:	4323      	orrs	r3, r4
 801b3f4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 801b3f6:	68fb      	ldr	r3, [r7, #12]
 801b3f8:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b3fc:	68bb      	ldr	r3, [r7, #8]
 801b3fe:	009b      	lsls	r3, r3, #2
 801b400:	68fa      	ldr	r2, [r7, #12]
 801b402:	8992      	ldrh	r2, [r2, #12]
 801b404:	fbb3 f0f2 	udiv	r0, r3, r2
 801b408:	fb00 f202 	mul.w	r2, r0, r2
 801b40c:	1a9b      	subs	r3, r3, r2
 801b40e:	440b      	add	r3, r1
 801b410:	6879      	ldr	r1, [r7, #4]
 801b412:	4618      	mov	r0, r3
 801b414:	f7ff fb0c 	bl	801aa30 <st_dword>
			fs->wflag = 1;
 801b418:	68fb      	ldr	r3, [r7, #12]
 801b41a:	2201      	movs	r2, #1
 801b41c:	70da      	strb	r2, [r3, #3]
			break;
 801b41e:	e006      	b.n	801b42e <put_fat+0x22a>
			if (res != FR_OK) break;
 801b420:	bf00      	nop
 801b422:	e004      	b.n	801b42e <put_fat+0x22a>
			if (res != FR_OK) break;
 801b424:	bf00      	nop
 801b426:	e002      	b.n	801b42e <put_fat+0x22a>
			if (res != FR_OK) break;
 801b428:	bf00      	nop
 801b42a:	e000      	b.n	801b42e <put_fat+0x22a>
			if (res != FR_OK) break;
 801b42c:	bf00      	nop
		}
	}
	return res;
 801b42e:	7ffb      	ldrb	r3, [r7, #31]
}
 801b430:	4618      	mov	r0, r3
 801b432:	3724      	adds	r7, #36	@ 0x24
 801b434:	46bd      	mov	sp, r7
 801b436:	bd90      	pop	{r4, r7, pc}

0801b438 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 801b438:	b580      	push	{r7, lr}
 801b43a:	b088      	sub	sp, #32
 801b43c:	af00      	add	r7, sp, #0
 801b43e:	60f8      	str	r0, [r7, #12]
 801b440:	60b9      	str	r1, [r7, #8]
 801b442:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 801b444:	2300      	movs	r3, #0
 801b446:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 801b448:	68fb      	ldr	r3, [r7, #12]
 801b44a:	681b      	ldr	r3, [r3, #0]
 801b44c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 801b44e:	68bb      	ldr	r3, [r7, #8]
 801b450:	2b01      	cmp	r3, #1
 801b452:	d904      	bls.n	801b45e <remove_chain+0x26>
 801b454:	69bb      	ldr	r3, [r7, #24]
 801b456:	69db      	ldr	r3, [r3, #28]
 801b458:	68ba      	ldr	r2, [r7, #8]
 801b45a:	429a      	cmp	r2, r3
 801b45c:	d301      	bcc.n	801b462 <remove_chain+0x2a>
 801b45e:	2302      	movs	r3, #2
 801b460:	e04b      	b.n	801b4fa <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801b462:	687b      	ldr	r3, [r7, #4]
 801b464:	2b00      	cmp	r3, #0
 801b466:	d00c      	beq.n	801b482 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 801b468:	f04f 32ff 	mov.w	r2, #4294967295
 801b46c:	6879      	ldr	r1, [r7, #4]
 801b46e:	69b8      	ldr	r0, [r7, #24]
 801b470:	f7ff fec8 	bl	801b204 <put_fat>
 801b474:	4603      	mov	r3, r0
 801b476:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 801b478:	7ffb      	ldrb	r3, [r7, #31]
 801b47a:	2b00      	cmp	r3, #0
 801b47c:	d001      	beq.n	801b482 <remove_chain+0x4a>
 801b47e:	7ffb      	ldrb	r3, [r7, #31]
 801b480:	e03b      	b.n	801b4fa <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801b482:	68b9      	ldr	r1, [r7, #8]
 801b484:	68f8      	ldr	r0, [r7, #12]
 801b486:	f7ff fdea 	bl	801b05e <get_fat>
 801b48a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 801b48c:	697b      	ldr	r3, [r7, #20]
 801b48e:	2b00      	cmp	r3, #0
 801b490:	d031      	beq.n	801b4f6 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801b492:	697b      	ldr	r3, [r7, #20]
 801b494:	2b01      	cmp	r3, #1
 801b496:	d101      	bne.n	801b49c <remove_chain+0x64>
 801b498:	2302      	movs	r3, #2
 801b49a:	e02e      	b.n	801b4fa <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 801b49c:	697b      	ldr	r3, [r7, #20]
 801b49e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b4a2:	d101      	bne.n	801b4a8 <remove_chain+0x70>
 801b4a4:	2301      	movs	r3, #1
 801b4a6:	e028      	b.n	801b4fa <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 801b4a8:	2200      	movs	r2, #0
 801b4aa:	68b9      	ldr	r1, [r7, #8]
 801b4ac:	69b8      	ldr	r0, [r7, #24]
 801b4ae:	f7ff fea9 	bl	801b204 <put_fat>
 801b4b2:	4603      	mov	r3, r0
 801b4b4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 801b4b6:	7ffb      	ldrb	r3, [r7, #31]
 801b4b8:	2b00      	cmp	r3, #0
 801b4ba:	d001      	beq.n	801b4c0 <remove_chain+0x88>
 801b4bc:	7ffb      	ldrb	r3, [r7, #31]
 801b4be:	e01c      	b.n	801b4fa <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 801b4c0:	69bb      	ldr	r3, [r7, #24]
 801b4c2:	699a      	ldr	r2, [r3, #24]
 801b4c4:	69bb      	ldr	r3, [r7, #24]
 801b4c6:	69db      	ldr	r3, [r3, #28]
 801b4c8:	3b02      	subs	r3, #2
 801b4ca:	429a      	cmp	r2, r3
 801b4cc:	d20b      	bcs.n	801b4e6 <remove_chain+0xae>
			fs->free_clst++;
 801b4ce:	69bb      	ldr	r3, [r7, #24]
 801b4d0:	699b      	ldr	r3, [r3, #24]
 801b4d2:	1c5a      	adds	r2, r3, #1
 801b4d4:	69bb      	ldr	r3, [r7, #24]
 801b4d6:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 801b4d8:	69bb      	ldr	r3, [r7, #24]
 801b4da:	791b      	ldrb	r3, [r3, #4]
 801b4dc:	f043 0301 	orr.w	r3, r3, #1
 801b4e0:	b2da      	uxtb	r2, r3
 801b4e2:	69bb      	ldr	r3, [r7, #24]
 801b4e4:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 801b4e6:	697b      	ldr	r3, [r7, #20]
 801b4e8:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 801b4ea:	69bb      	ldr	r3, [r7, #24]
 801b4ec:	69db      	ldr	r3, [r3, #28]
 801b4ee:	68ba      	ldr	r2, [r7, #8]
 801b4f0:	429a      	cmp	r2, r3
 801b4f2:	d3c6      	bcc.n	801b482 <remove_chain+0x4a>
 801b4f4:	e000      	b.n	801b4f8 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 801b4f6:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 801b4f8:	2300      	movs	r3, #0
}
 801b4fa:	4618      	mov	r0, r3
 801b4fc:	3720      	adds	r7, #32
 801b4fe:	46bd      	mov	sp, r7
 801b500:	bd80      	pop	{r7, pc}

0801b502 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 801b502:	b580      	push	{r7, lr}
 801b504:	b088      	sub	sp, #32
 801b506:	af00      	add	r7, sp, #0
 801b508:	6078      	str	r0, [r7, #4]
 801b50a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801b50c:	687b      	ldr	r3, [r7, #4]
 801b50e:	681b      	ldr	r3, [r3, #0]
 801b510:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 801b512:	683b      	ldr	r3, [r7, #0]
 801b514:	2b00      	cmp	r3, #0
 801b516:	d10d      	bne.n	801b534 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801b518:	693b      	ldr	r3, [r7, #16]
 801b51a:	695b      	ldr	r3, [r3, #20]
 801b51c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 801b51e:	69bb      	ldr	r3, [r7, #24]
 801b520:	2b00      	cmp	r3, #0
 801b522:	d004      	beq.n	801b52e <create_chain+0x2c>
 801b524:	693b      	ldr	r3, [r7, #16]
 801b526:	69db      	ldr	r3, [r3, #28]
 801b528:	69ba      	ldr	r2, [r7, #24]
 801b52a:	429a      	cmp	r2, r3
 801b52c:	d31b      	bcc.n	801b566 <create_chain+0x64>
 801b52e:	2301      	movs	r3, #1
 801b530:	61bb      	str	r3, [r7, #24]
 801b532:	e018      	b.n	801b566 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801b534:	6839      	ldr	r1, [r7, #0]
 801b536:	6878      	ldr	r0, [r7, #4]
 801b538:	f7ff fd91 	bl	801b05e <get_fat>
 801b53c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 801b53e:	68fb      	ldr	r3, [r7, #12]
 801b540:	2b01      	cmp	r3, #1
 801b542:	d801      	bhi.n	801b548 <create_chain+0x46>
 801b544:	2301      	movs	r3, #1
 801b546:	e070      	b.n	801b62a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801b548:	68fb      	ldr	r3, [r7, #12]
 801b54a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b54e:	d101      	bne.n	801b554 <create_chain+0x52>
 801b550:	68fb      	ldr	r3, [r7, #12]
 801b552:	e06a      	b.n	801b62a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801b554:	693b      	ldr	r3, [r7, #16]
 801b556:	69db      	ldr	r3, [r3, #28]
 801b558:	68fa      	ldr	r2, [r7, #12]
 801b55a:	429a      	cmp	r2, r3
 801b55c:	d201      	bcs.n	801b562 <create_chain+0x60>
 801b55e:	68fb      	ldr	r3, [r7, #12]
 801b560:	e063      	b.n	801b62a <create_chain+0x128>
		scl = clst;
 801b562:	683b      	ldr	r3, [r7, #0]
 801b564:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 801b566:	69bb      	ldr	r3, [r7, #24]
 801b568:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 801b56a:	69fb      	ldr	r3, [r7, #28]
 801b56c:	3301      	adds	r3, #1
 801b56e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 801b570:	693b      	ldr	r3, [r7, #16]
 801b572:	69db      	ldr	r3, [r3, #28]
 801b574:	69fa      	ldr	r2, [r7, #28]
 801b576:	429a      	cmp	r2, r3
 801b578:	d307      	bcc.n	801b58a <create_chain+0x88>
				ncl = 2;
 801b57a:	2302      	movs	r3, #2
 801b57c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 801b57e:	69fa      	ldr	r2, [r7, #28]
 801b580:	69bb      	ldr	r3, [r7, #24]
 801b582:	429a      	cmp	r2, r3
 801b584:	d901      	bls.n	801b58a <create_chain+0x88>
 801b586:	2300      	movs	r3, #0
 801b588:	e04f      	b.n	801b62a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 801b58a:	69f9      	ldr	r1, [r7, #28]
 801b58c:	6878      	ldr	r0, [r7, #4]
 801b58e:	f7ff fd66 	bl	801b05e <get_fat>
 801b592:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801b594:	68fb      	ldr	r3, [r7, #12]
 801b596:	2b00      	cmp	r3, #0
 801b598:	d00e      	beq.n	801b5b8 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 801b59a:	68fb      	ldr	r3, [r7, #12]
 801b59c:	2b01      	cmp	r3, #1
 801b59e:	d003      	beq.n	801b5a8 <create_chain+0xa6>
 801b5a0:	68fb      	ldr	r3, [r7, #12]
 801b5a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b5a6:	d101      	bne.n	801b5ac <create_chain+0xaa>
 801b5a8:	68fb      	ldr	r3, [r7, #12]
 801b5aa:	e03e      	b.n	801b62a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 801b5ac:	69fa      	ldr	r2, [r7, #28]
 801b5ae:	69bb      	ldr	r3, [r7, #24]
 801b5b0:	429a      	cmp	r2, r3
 801b5b2:	d1da      	bne.n	801b56a <create_chain+0x68>
 801b5b4:	2300      	movs	r3, #0
 801b5b6:	e038      	b.n	801b62a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 801b5b8:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 801b5ba:	f04f 32ff 	mov.w	r2, #4294967295
 801b5be:	69f9      	ldr	r1, [r7, #28]
 801b5c0:	6938      	ldr	r0, [r7, #16]
 801b5c2:	f7ff fe1f 	bl	801b204 <put_fat>
 801b5c6:	4603      	mov	r3, r0
 801b5c8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 801b5ca:	7dfb      	ldrb	r3, [r7, #23]
 801b5cc:	2b00      	cmp	r3, #0
 801b5ce:	d109      	bne.n	801b5e4 <create_chain+0xe2>
 801b5d0:	683b      	ldr	r3, [r7, #0]
 801b5d2:	2b00      	cmp	r3, #0
 801b5d4:	d006      	beq.n	801b5e4 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 801b5d6:	69fa      	ldr	r2, [r7, #28]
 801b5d8:	6839      	ldr	r1, [r7, #0]
 801b5da:	6938      	ldr	r0, [r7, #16]
 801b5dc:	f7ff fe12 	bl	801b204 <put_fat>
 801b5e0:	4603      	mov	r3, r0
 801b5e2:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801b5e4:	7dfb      	ldrb	r3, [r7, #23]
 801b5e6:	2b00      	cmp	r3, #0
 801b5e8:	d116      	bne.n	801b618 <create_chain+0x116>
		fs->last_clst = ncl;
 801b5ea:	693b      	ldr	r3, [r7, #16]
 801b5ec:	69fa      	ldr	r2, [r7, #28]
 801b5ee:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 801b5f0:	693b      	ldr	r3, [r7, #16]
 801b5f2:	699a      	ldr	r2, [r3, #24]
 801b5f4:	693b      	ldr	r3, [r7, #16]
 801b5f6:	69db      	ldr	r3, [r3, #28]
 801b5f8:	3b02      	subs	r3, #2
 801b5fa:	429a      	cmp	r2, r3
 801b5fc:	d804      	bhi.n	801b608 <create_chain+0x106>
 801b5fe:	693b      	ldr	r3, [r7, #16]
 801b600:	699b      	ldr	r3, [r3, #24]
 801b602:	1e5a      	subs	r2, r3, #1
 801b604:	693b      	ldr	r3, [r7, #16]
 801b606:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 801b608:	693b      	ldr	r3, [r7, #16]
 801b60a:	791b      	ldrb	r3, [r3, #4]
 801b60c:	f043 0301 	orr.w	r3, r3, #1
 801b610:	b2da      	uxtb	r2, r3
 801b612:	693b      	ldr	r3, [r7, #16]
 801b614:	711a      	strb	r2, [r3, #4]
 801b616:	e007      	b.n	801b628 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801b618:	7dfb      	ldrb	r3, [r7, #23]
 801b61a:	2b01      	cmp	r3, #1
 801b61c:	d102      	bne.n	801b624 <create_chain+0x122>
 801b61e:	f04f 33ff 	mov.w	r3, #4294967295
 801b622:	e000      	b.n	801b626 <create_chain+0x124>
 801b624:	2301      	movs	r3, #1
 801b626:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801b628:	69fb      	ldr	r3, [r7, #28]
}
 801b62a:	4618      	mov	r0, r3
 801b62c:	3720      	adds	r7, #32
 801b62e:	46bd      	mov	sp, r7
 801b630:	bd80      	pop	{r7, pc}

0801b632 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 801b632:	b480      	push	{r7}
 801b634:	b087      	sub	sp, #28
 801b636:	af00      	add	r7, sp, #0
 801b638:	6078      	str	r0, [r7, #4]
 801b63a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 801b63c:	687b      	ldr	r3, [r7, #4]
 801b63e:	681b      	ldr	r3, [r3, #0]
 801b640:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801b642:	687b      	ldr	r3, [r7, #4]
 801b644:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b646:	3304      	adds	r3, #4
 801b648:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801b64a:	68fb      	ldr	r3, [r7, #12]
 801b64c:	899b      	ldrh	r3, [r3, #12]
 801b64e:	461a      	mov	r2, r3
 801b650:	683b      	ldr	r3, [r7, #0]
 801b652:	fbb3 f3f2 	udiv	r3, r3, r2
 801b656:	68fa      	ldr	r2, [r7, #12]
 801b658:	8952      	ldrh	r2, [r2, #10]
 801b65a:	fbb3 f3f2 	udiv	r3, r3, r2
 801b65e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801b660:	693b      	ldr	r3, [r7, #16]
 801b662:	1d1a      	adds	r2, r3, #4
 801b664:	613a      	str	r2, [r7, #16]
 801b666:	681b      	ldr	r3, [r3, #0]
 801b668:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 801b66a:	68bb      	ldr	r3, [r7, #8]
 801b66c:	2b00      	cmp	r3, #0
 801b66e:	d101      	bne.n	801b674 <clmt_clust+0x42>
 801b670:	2300      	movs	r3, #0
 801b672:	e010      	b.n	801b696 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 801b674:	697a      	ldr	r2, [r7, #20]
 801b676:	68bb      	ldr	r3, [r7, #8]
 801b678:	429a      	cmp	r2, r3
 801b67a:	d307      	bcc.n	801b68c <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 801b67c:	697a      	ldr	r2, [r7, #20]
 801b67e:	68bb      	ldr	r3, [r7, #8]
 801b680:	1ad3      	subs	r3, r2, r3
 801b682:	617b      	str	r3, [r7, #20]
 801b684:	693b      	ldr	r3, [r7, #16]
 801b686:	3304      	adds	r3, #4
 801b688:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801b68a:	e7e9      	b.n	801b660 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 801b68c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801b68e:	693b      	ldr	r3, [r7, #16]
 801b690:	681a      	ldr	r2, [r3, #0]
 801b692:	697b      	ldr	r3, [r7, #20]
 801b694:	4413      	add	r3, r2
}
 801b696:	4618      	mov	r0, r3
 801b698:	371c      	adds	r7, #28
 801b69a:	46bd      	mov	sp, r7
 801b69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6a0:	4770      	bx	lr

0801b6a2 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 801b6a2:	b580      	push	{r7, lr}
 801b6a4:	b086      	sub	sp, #24
 801b6a6:	af00      	add	r7, sp, #0
 801b6a8:	6078      	str	r0, [r7, #4]
 801b6aa:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801b6ac:	687b      	ldr	r3, [r7, #4]
 801b6ae:	681b      	ldr	r3, [r3, #0]
 801b6b0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801b6b2:	683b      	ldr	r3, [r7, #0]
 801b6b4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801b6b8:	d204      	bcs.n	801b6c4 <dir_sdi+0x22>
 801b6ba:	683b      	ldr	r3, [r7, #0]
 801b6bc:	f003 031f 	and.w	r3, r3, #31
 801b6c0:	2b00      	cmp	r3, #0
 801b6c2:	d001      	beq.n	801b6c8 <dir_sdi+0x26>
		return FR_INT_ERR;
 801b6c4:	2302      	movs	r3, #2
 801b6c6:	e071      	b.n	801b7ac <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 801b6c8:	687b      	ldr	r3, [r7, #4]
 801b6ca:	683a      	ldr	r2, [r7, #0]
 801b6cc:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801b6ce:	687b      	ldr	r3, [r7, #4]
 801b6d0:	689b      	ldr	r3, [r3, #8]
 801b6d2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 801b6d4:	697b      	ldr	r3, [r7, #20]
 801b6d6:	2b00      	cmp	r3, #0
 801b6d8:	d106      	bne.n	801b6e8 <dir_sdi+0x46>
 801b6da:	693b      	ldr	r3, [r7, #16]
 801b6dc:	781b      	ldrb	r3, [r3, #0]
 801b6de:	2b02      	cmp	r3, #2
 801b6e0:	d902      	bls.n	801b6e8 <dir_sdi+0x46>
		clst = fs->dirbase;
 801b6e2:	693b      	ldr	r3, [r7, #16]
 801b6e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b6e6:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801b6e8:	697b      	ldr	r3, [r7, #20]
 801b6ea:	2b00      	cmp	r3, #0
 801b6ec:	d10c      	bne.n	801b708 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801b6ee:	683b      	ldr	r3, [r7, #0]
 801b6f0:	095b      	lsrs	r3, r3, #5
 801b6f2:	693a      	ldr	r2, [r7, #16]
 801b6f4:	8912      	ldrh	r2, [r2, #8]
 801b6f6:	4293      	cmp	r3, r2
 801b6f8:	d301      	bcc.n	801b6fe <dir_sdi+0x5c>
 801b6fa:	2302      	movs	r3, #2
 801b6fc:	e056      	b.n	801b7ac <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 801b6fe:	693b      	ldr	r3, [r7, #16]
 801b700:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b702:	687b      	ldr	r3, [r7, #4]
 801b704:	61da      	str	r2, [r3, #28]
 801b706:	e02d      	b.n	801b764 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801b708:	693b      	ldr	r3, [r7, #16]
 801b70a:	895b      	ldrh	r3, [r3, #10]
 801b70c:	461a      	mov	r2, r3
 801b70e:	693b      	ldr	r3, [r7, #16]
 801b710:	899b      	ldrh	r3, [r3, #12]
 801b712:	fb02 f303 	mul.w	r3, r2, r3
 801b716:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 801b718:	e019      	b.n	801b74e <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801b71a:	687b      	ldr	r3, [r7, #4]
 801b71c:	6979      	ldr	r1, [r7, #20]
 801b71e:	4618      	mov	r0, r3
 801b720:	f7ff fc9d 	bl	801b05e <get_fat>
 801b724:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801b726:	697b      	ldr	r3, [r7, #20]
 801b728:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b72c:	d101      	bne.n	801b732 <dir_sdi+0x90>
 801b72e:	2301      	movs	r3, #1
 801b730:	e03c      	b.n	801b7ac <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801b732:	697b      	ldr	r3, [r7, #20]
 801b734:	2b01      	cmp	r3, #1
 801b736:	d904      	bls.n	801b742 <dir_sdi+0xa0>
 801b738:	693b      	ldr	r3, [r7, #16]
 801b73a:	69db      	ldr	r3, [r3, #28]
 801b73c:	697a      	ldr	r2, [r7, #20]
 801b73e:	429a      	cmp	r2, r3
 801b740:	d301      	bcc.n	801b746 <dir_sdi+0xa4>
 801b742:	2302      	movs	r3, #2
 801b744:	e032      	b.n	801b7ac <dir_sdi+0x10a>
			ofs -= csz;
 801b746:	683a      	ldr	r2, [r7, #0]
 801b748:	68fb      	ldr	r3, [r7, #12]
 801b74a:	1ad3      	subs	r3, r2, r3
 801b74c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 801b74e:	683a      	ldr	r2, [r7, #0]
 801b750:	68fb      	ldr	r3, [r7, #12]
 801b752:	429a      	cmp	r2, r3
 801b754:	d2e1      	bcs.n	801b71a <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 801b756:	6979      	ldr	r1, [r7, #20]
 801b758:	6938      	ldr	r0, [r7, #16]
 801b75a:	f7ff fc61 	bl	801b020 <clust2sect>
 801b75e:	4602      	mov	r2, r0
 801b760:	687b      	ldr	r3, [r7, #4]
 801b762:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 801b764:	687b      	ldr	r3, [r7, #4]
 801b766:	697a      	ldr	r2, [r7, #20]
 801b768:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 801b76a:	687b      	ldr	r3, [r7, #4]
 801b76c:	69db      	ldr	r3, [r3, #28]
 801b76e:	2b00      	cmp	r3, #0
 801b770:	d101      	bne.n	801b776 <dir_sdi+0xd4>
 801b772:	2302      	movs	r3, #2
 801b774:	e01a      	b.n	801b7ac <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 801b776:	687b      	ldr	r3, [r7, #4]
 801b778:	69da      	ldr	r2, [r3, #28]
 801b77a:	693b      	ldr	r3, [r7, #16]
 801b77c:	899b      	ldrh	r3, [r3, #12]
 801b77e:	4619      	mov	r1, r3
 801b780:	683b      	ldr	r3, [r7, #0]
 801b782:	fbb3 f3f1 	udiv	r3, r3, r1
 801b786:	441a      	add	r2, r3
 801b788:	687b      	ldr	r3, [r7, #4]
 801b78a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801b78c:	693b      	ldr	r3, [r7, #16]
 801b78e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b792:	693b      	ldr	r3, [r7, #16]
 801b794:	899b      	ldrh	r3, [r3, #12]
 801b796:	461a      	mov	r2, r3
 801b798:	683b      	ldr	r3, [r7, #0]
 801b79a:	fbb3 f0f2 	udiv	r0, r3, r2
 801b79e:	fb00 f202 	mul.w	r2, r0, r2
 801b7a2:	1a9b      	subs	r3, r3, r2
 801b7a4:	18ca      	adds	r2, r1, r3
 801b7a6:	687b      	ldr	r3, [r7, #4]
 801b7a8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801b7aa:	2300      	movs	r3, #0
}
 801b7ac:	4618      	mov	r0, r3
 801b7ae:	3718      	adds	r7, #24
 801b7b0:	46bd      	mov	sp, r7
 801b7b2:	bd80      	pop	{r7, pc}

0801b7b4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801b7b4:	b580      	push	{r7, lr}
 801b7b6:	b086      	sub	sp, #24
 801b7b8:	af00      	add	r7, sp, #0
 801b7ba:	6078      	str	r0, [r7, #4]
 801b7bc:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 801b7be:	687b      	ldr	r3, [r7, #4]
 801b7c0:	681b      	ldr	r3, [r3, #0]
 801b7c2:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801b7c4:	687b      	ldr	r3, [r7, #4]
 801b7c6:	695b      	ldr	r3, [r3, #20]
 801b7c8:	3320      	adds	r3, #32
 801b7ca:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801b7cc:	687b      	ldr	r3, [r7, #4]
 801b7ce:	69db      	ldr	r3, [r3, #28]
 801b7d0:	2b00      	cmp	r3, #0
 801b7d2:	d003      	beq.n	801b7dc <dir_next+0x28>
 801b7d4:	68bb      	ldr	r3, [r7, #8]
 801b7d6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801b7da:	d301      	bcc.n	801b7e0 <dir_next+0x2c>
 801b7dc:	2304      	movs	r3, #4
 801b7de:	e0bb      	b.n	801b958 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801b7e0:	68fb      	ldr	r3, [r7, #12]
 801b7e2:	899b      	ldrh	r3, [r3, #12]
 801b7e4:	461a      	mov	r2, r3
 801b7e6:	68bb      	ldr	r3, [r7, #8]
 801b7e8:	fbb3 f1f2 	udiv	r1, r3, r2
 801b7ec:	fb01 f202 	mul.w	r2, r1, r2
 801b7f0:	1a9b      	subs	r3, r3, r2
 801b7f2:	2b00      	cmp	r3, #0
 801b7f4:	f040 809d 	bne.w	801b932 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 801b7f8:	687b      	ldr	r3, [r7, #4]
 801b7fa:	69db      	ldr	r3, [r3, #28]
 801b7fc:	1c5a      	adds	r2, r3, #1
 801b7fe:	687b      	ldr	r3, [r7, #4]
 801b800:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801b802:	687b      	ldr	r3, [r7, #4]
 801b804:	699b      	ldr	r3, [r3, #24]
 801b806:	2b00      	cmp	r3, #0
 801b808:	d10b      	bne.n	801b822 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801b80a:	68bb      	ldr	r3, [r7, #8]
 801b80c:	095b      	lsrs	r3, r3, #5
 801b80e:	68fa      	ldr	r2, [r7, #12]
 801b810:	8912      	ldrh	r2, [r2, #8]
 801b812:	4293      	cmp	r3, r2
 801b814:	f0c0 808d 	bcc.w	801b932 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 801b818:	687b      	ldr	r3, [r7, #4]
 801b81a:	2200      	movs	r2, #0
 801b81c:	61da      	str	r2, [r3, #28]
 801b81e:	2304      	movs	r3, #4
 801b820:	e09a      	b.n	801b958 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801b822:	68fb      	ldr	r3, [r7, #12]
 801b824:	899b      	ldrh	r3, [r3, #12]
 801b826:	461a      	mov	r2, r3
 801b828:	68bb      	ldr	r3, [r7, #8]
 801b82a:	fbb3 f3f2 	udiv	r3, r3, r2
 801b82e:	68fa      	ldr	r2, [r7, #12]
 801b830:	8952      	ldrh	r2, [r2, #10]
 801b832:	3a01      	subs	r2, #1
 801b834:	4013      	ands	r3, r2
 801b836:	2b00      	cmp	r3, #0
 801b838:	d17b      	bne.n	801b932 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801b83a:	687a      	ldr	r2, [r7, #4]
 801b83c:	687b      	ldr	r3, [r7, #4]
 801b83e:	699b      	ldr	r3, [r3, #24]
 801b840:	4619      	mov	r1, r3
 801b842:	4610      	mov	r0, r2
 801b844:	f7ff fc0b 	bl	801b05e <get_fat>
 801b848:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801b84a:	697b      	ldr	r3, [r7, #20]
 801b84c:	2b01      	cmp	r3, #1
 801b84e:	d801      	bhi.n	801b854 <dir_next+0xa0>
 801b850:	2302      	movs	r3, #2
 801b852:	e081      	b.n	801b958 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801b854:	697b      	ldr	r3, [r7, #20]
 801b856:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b85a:	d101      	bne.n	801b860 <dir_next+0xac>
 801b85c:	2301      	movs	r3, #1
 801b85e:	e07b      	b.n	801b958 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801b860:	68fb      	ldr	r3, [r7, #12]
 801b862:	69db      	ldr	r3, [r3, #28]
 801b864:	697a      	ldr	r2, [r7, #20]
 801b866:	429a      	cmp	r2, r3
 801b868:	d359      	bcc.n	801b91e <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801b86a:	683b      	ldr	r3, [r7, #0]
 801b86c:	2b00      	cmp	r3, #0
 801b86e:	d104      	bne.n	801b87a <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 801b870:	687b      	ldr	r3, [r7, #4]
 801b872:	2200      	movs	r2, #0
 801b874:	61da      	str	r2, [r3, #28]
 801b876:	2304      	movs	r3, #4
 801b878:	e06e      	b.n	801b958 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801b87a:	687a      	ldr	r2, [r7, #4]
 801b87c:	687b      	ldr	r3, [r7, #4]
 801b87e:	699b      	ldr	r3, [r3, #24]
 801b880:	4619      	mov	r1, r3
 801b882:	4610      	mov	r0, r2
 801b884:	f7ff fe3d 	bl	801b502 <create_chain>
 801b888:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801b88a:	697b      	ldr	r3, [r7, #20]
 801b88c:	2b00      	cmp	r3, #0
 801b88e:	d101      	bne.n	801b894 <dir_next+0xe0>
 801b890:	2307      	movs	r3, #7
 801b892:	e061      	b.n	801b958 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801b894:	697b      	ldr	r3, [r7, #20]
 801b896:	2b01      	cmp	r3, #1
 801b898:	d101      	bne.n	801b89e <dir_next+0xea>
 801b89a:	2302      	movs	r3, #2
 801b89c:	e05c      	b.n	801b958 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801b89e:	697b      	ldr	r3, [r7, #20]
 801b8a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b8a4:	d101      	bne.n	801b8aa <dir_next+0xf6>
 801b8a6:	2301      	movs	r3, #1
 801b8a8:	e056      	b.n	801b958 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801b8aa:	68f8      	ldr	r0, [r7, #12]
 801b8ac:	f7ff fad6 	bl	801ae5c <sync_window>
 801b8b0:	4603      	mov	r3, r0
 801b8b2:	2b00      	cmp	r3, #0
 801b8b4:	d001      	beq.n	801b8ba <dir_next+0x106>
 801b8b6:	2301      	movs	r3, #1
 801b8b8:	e04e      	b.n	801b958 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801b8ba:	68fb      	ldr	r3, [r7, #12]
 801b8bc:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 801b8c0:	68fb      	ldr	r3, [r7, #12]
 801b8c2:	899b      	ldrh	r3, [r3, #12]
 801b8c4:	461a      	mov	r2, r3
 801b8c6:	2100      	movs	r1, #0
 801b8c8:	f7ff f8ff 	bl	801aaca <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801b8cc:	2300      	movs	r3, #0
 801b8ce:	613b      	str	r3, [r7, #16]
 801b8d0:	6979      	ldr	r1, [r7, #20]
 801b8d2:	68f8      	ldr	r0, [r7, #12]
 801b8d4:	f7ff fba4 	bl	801b020 <clust2sect>
 801b8d8:	4602      	mov	r2, r0
 801b8da:	68fb      	ldr	r3, [r7, #12]
 801b8dc:	635a      	str	r2, [r3, #52]	@ 0x34
 801b8de:	e012      	b.n	801b906 <dir_next+0x152>
						fs->wflag = 1;
 801b8e0:	68fb      	ldr	r3, [r7, #12]
 801b8e2:	2201      	movs	r2, #1
 801b8e4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801b8e6:	68f8      	ldr	r0, [r7, #12]
 801b8e8:	f7ff fab8 	bl	801ae5c <sync_window>
 801b8ec:	4603      	mov	r3, r0
 801b8ee:	2b00      	cmp	r3, #0
 801b8f0:	d001      	beq.n	801b8f6 <dir_next+0x142>
 801b8f2:	2301      	movs	r3, #1
 801b8f4:	e030      	b.n	801b958 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801b8f6:	693b      	ldr	r3, [r7, #16]
 801b8f8:	3301      	adds	r3, #1
 801b8fa:	613b      	str	r3, [r7, #16]
 801b8fc:	68fb      	ldr	r3, [r7, #12]
 801b8fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b900:	1c5a      	adds	r2, r3, #1
 801b902:	68fb      	ldr	r3, [r7, #12]
 801b904:	635a      	str	r2, [r3, #52]	@ 0x34
 801b906:	68fb      	ldr	r3, [r7, #12]
 801b908:	895b      	ldrh	r3, [r3, #10]
 801b90a:	461a      	mov	r2, r3
 801b90c:	693b      	ldr	r3, [r7, #16]
 801b90e:	4293      	cmp	r3, r2
 801b910:	d3e6      	bcc.n	801b8e0 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 801b912:	68fb      	ldr	r3, [r7, #12]
 801b914:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801b916:	693b      	ldr	r3, [r7, #16]
 801b918:	1ad2      	subs	r2, r2, r3
 801b91a:	68fb      	ldr	r3, [r7, #12]
 801b91c:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801b91e:	687b      	ldr	r3, [r7, #4]
 801b920:	697a      	ldr	r2, [r7, #20]
 801b922:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 801b924:	6979      	ldr	r1, [r7, #20]
 801b926:	68f8      	ldr	r0, [r7, #12]
 801b928:	f7ff fb7a 	bl	801b020 <clust2sect>
 801b92c:	4602      	mov	r2, r0
 801b92e:	687b      	ldr	r3, [r7, #4]
 801b930:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801b932:	687b      	ldr	r3, [r7, #4]
 801b934:	68ba      	ldr	r2, [r7, #8]
 801b936:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801b938:	68fb      	ldr	r3, [r7, #12]
 801b93a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b93e:	68fb      	ldr	r3, [r7, #12]
 801b940:	899b      	ldrh	r3, [r3, #12]
 801b942:	461a      	mov	r2, r3
 801b944:	68bb      	ldr	r3, [r7, #8]
 801b946:	fbb3 f0f2 	udiv	r0, r3, r2
 801b94a:	fb00 f202 	mul.w	r2, r0, r2
 801b94e:	1a9b      	subs	r3, r3, r2
 801b950:	18ca      	adds	r2, r1, r3
 801b952:	687b      	ldr	r3, [r7, #4]
 801b954:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801b956:	2300      	movs	r3, #0
}
 801b958:	4618      	mov	r0, r3
 801b95a:	3718      	adds	r7, #24
 801b95c:	46bd      	mov	sp, r7
 801b95e:	bd80      	pop	{r7, pc}

0801b960 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801b960:	b580      	push	{r7, lr}
 801b962:	b086      	sub	sp, #24
 801b964:	af00      	add	r7, sp, #0
 801b966:	6078      	str	r0, [r7, #4]
 801b968:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801b96a:	687b      	ldr	r3, [r7, #4]
 801b96c:	681b      	ldr	r3, [r3, #0]
 801b96e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801b970:	2100      	movs	r1, #0
 801b972:	6878      	ldr	r0, [r7, #4]
 801b974:	f7ff fe95 	bl	801b6a2 <dir_sdi>
 801b978:	4603      	mov	r3, r0
 801b97a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801b97c:	7dfb      	ldrb	r3, [r7, #23]
 801b97e:	2b00      	cmp	r3, #0
 801b980:	d12b      	bne.n	801b9da <dir_alloc+0x7a>
		n = 0;
 801b982:	2300      	movs	r3, #0
 801b984:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801b986:	687b      	ldr	r3, [r7, #4]
 801b988:	69db      	ldr	r3, [r3, #28]
 801b98a:	4619      	mov	r1, r3
 801b98c:	68f8      	ldr	r0, [r7, #12]
 801b98e:	f7ff faa9 	bl	801aee4 <move_window>
 801b992:	4603      	mov	r3, r0
 801b994:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801b996:	7dfb      	ldrb	r3, [r7, #23]
 801b998:	2b00      	cmp	r3, #0
 801b99a:	d11d      	bne.n	801b9d8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801b99c:	687b      	ldr	r3, [r7, #4]
 801b99e:	6a1b      	ldr	r3, [r3, #32]
 801b9a0:	781b      	ldrb	r3, [r3, #0]
 801b9a2:	2be5      	cmp	r3, #229	@ 0xe5
 801b9a4:	d004      	beq.n	801b9b0 <dir_alloc+0x50>
 801b9a6:	687b      	ldr	r3, [r7, #4]
 801b9a8:	6a1b      	ldr	r3, [r3, #32]
 801b9aa:	781b      	ldrb	r3, [r3, #0]
 801b9ac:	2b00      	cmp	r3, #0
 801b9ae:	d107      	bne.n	801b9c0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801b9b0:	693b      	ldr	r3, [r7, #16]
 801b9b2:	3301      	adds	r3, #1
 801b9b4:	613b      	str	r3, [r7, #16]
 801b9b6:	693a      	ldr	r2, [r7, #16]
 801b9b8:	683b      	ldr	r3, [r7, #0]
 801b9ba:	429a      	cmp	r2, r3
 801b9bc:	d102      	bne.n	801b9c4 <dir_alloc+0x64>
 801b9be:	e00c      	b.n	801b9da <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 801b9c0:	2300      	movs	r3, #0
 801b9c2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801b9c4:	2101      	movs	r1, #1
 801b9c6:	6878      	ldr	r0, [r7, #4]
 801b9c8:	f7ff fef4 	bl	801b7b4 <dir_next>
 801b9cc:	4603      	mov	r3, r0
 801b9ce:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 801b9d0:	7dfb      	ldrb	r3, [r7, #23]
 801b9d2:	2b00      	cmp	r3, #0
 801b9d4:	d0d7      	beq.n	801b986 <dir_alloc+0x26>
 801b9d6:	e000      	b.n	801b9da <dir_alloc+0x7a>
			if (res != FR_OK) break;
 801b9d8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801b9da:	7dfb      	ldrb	r3, [r7, #23]
 801b9dc:	2b04      	cmp	r3, #4
 801b9de:	d101      	bne.n	801b9e4 <dir_alloc+0x84>
 801b9e0:	2307      	movs	r3, #7
 801b9e2:	75fb      	strb	r3, [r7, #23]
	return res;
 801b9e4:	7dfb      	ldrb	r3, [r7, #23]
}
 801b9e6:	4618      	mov	r0, r3
 801b9e8:	3718      	adds	r7, #24
 801b9ea:	46bd      	mov	sp, r7
 801b9ec:	bd80      	pop	{r7, pc}

0801b9ee <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801b9ee:	b580      	push	{r7, lr}
 801b9f0:	b084      	sub	sp, #16
 801b9f2:	af00      	add	r7, sp, #0
 801b9f4:	6078      	str	r0, [r7, #4]
 801b9f6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801b9f8:	683b      	ldr	r3, [r7, #0]
 801b9fa:	331a      	adds	r3, #26
 801b9fc:	4618      	mov	r0, r3
 801b9fe:	f7fe ffc1 	bl	801a984 <ld_word>
 801ba02:	4603      	mov	r3, r0
 801ba04:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801ba06:	687b      	ldr	r3, [r7, #4]
 801ba08:	781b      	ldrb	r3, [r3, #0]
 801ba0a:	2b03      	cmp	r3, #3
 801ba0c:	d109      	bne.n	801ba22 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801ba0e:	683b      	ldr	r3, [r7, #0]
 801ba10:	3314      	adds	r3, #20
 801ba12:	4618      	mov	r0, r3
 801ba14:	f7fe ffb6 	bl	801a984 <ld_word>
 801ba18:	4603      	mov	r3, r0
 801ba1a:	041b      	lsls	r3, r3, #16
 801ba1c:	68fa      	ldr	r2, [r7, #12]
 801ba1e:	4313      	orrs	r3, r2
 801ba20:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801ba22:	68fb      	ldr	r3, [r7, #12]
}
 801ba24:	4618      	mov	r0, r3
 801ba26:	3710      	adds	r7, #16
 801ba28:	46bd      	mov	sp, r7
 801ba2a:	bd80      	pop	{r7, pc}

0801ba2c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801ba2c:	b580      	push	{r7, lr}
 801ba2e:	b084      	sub	sp, #16
 801ba30:	af00      	add	r7, sp, #0
 801ba32:	60f8      	str	r0, [r7, #12]
 801ba34:	60b9      	str	r1, [r7, #8]
 801ba36:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801ba38:	68bb      	ldr	r3, [r7, #8]
 801ba3a:	331a      	adds	r3, #26
 801ba3c:	687a      	ldr	r2, [r7, #4]
 801ba3e:	b292      	uxth	r2, r2
 801ba40:	4611      	mov	r1, r2
 801ba42:	4618      	mov	r0, r3
 801ba44:	f7fe ffd9 	bl	801a9fa <st_word>
	if (fs->fs_type == FS_FAT32) {
 801ba48:	68fb      	ldr	r3, [r7, #12]
 801ba4a:	781b      	ldrb	r3, [r3, #0]
 801ba4c:	2b03      	cmp	r3, #3
 801ba4e:	d109      	bne.n	801ba64 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801ba50:	68bb      	ldr	r3, [r7, #8]
 801ba52:	f103 0214 	add.w	r2, r3, #20
 801ba56:	687b      	ldr	r3, [r7, #4]
 801ba58:	0c1b      	lsrs	r3, r3, #16
 801ba5a:	b29b      	uxth	r3, r3
 801ba5c:	4619      	mov	r1, r3
 801ba5e:	4610      	mov	r0, r2
 801ba60:	f7fe ffcb 	bl	801a9fa <st_word>
	}
}
 801ba64:	bf00      	nop
 801ba66:	3710      	adds	r7, #16
 801ba68:	46bd      	mov	sp, r7
 801ba6a:	bd80      	pop	{r7, pc}

0801ba6c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 801ba6c:	b590      	push	{r4, r7, lr}
 801ba6e:	b087      	sub	sp, #28
 801ba70:	af00      	add	r7, sp, #0
 801ba72:	6078      	str	r0, [r7, #4]
 801ba74:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 801ba76:	683b      	ldr	r3, [r7, #0]
 801ba78:	331a      	adds	r3, #26
 801ba7a:	4618      	mov	r0, r3
 801ba7c:	f7fe ff82 	bl	801a984 <ld_word>
 801ba80:	4603      	mov	r3, r0
 801ba82:	2b00      	cmp	r3, #0
 801ba84:	d001      	beq.n	801ba8a <cmp_lfn+0x1e>
 801ba86:	2300      	movs	r3, #0
 801ba88:	e059      	b.n	801bb3e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 801ba8a:	683b      	ldr	r3, [r7, #0]
 801ba8c:	781b      	ldrb	r3, [r3, #0]
 801ba8e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801ba92:	1e5a      	subs	r2, r3, #1
 801ba94:	4613      	mov	r3, r2
 801ba96:	005b      	lsls	r3, r3, #1
 801ba98:	4413      	add	r3, r2
 801ba9a:	009b      	lsls	r3, r3, #2
 801ba9c:	4413      	add	r3, r2
 801ba9e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801baa0:	2301      	movs	r3, #1
 801baa2:	81fb      	strh	r3, [r7, #14]
 801baa4:	2300      	movs	r3, #0
 801baa6:	613b      	str	r3, [r7, #16]
 801baa8:	e033      	b.n	801bb12 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801baaa:	4a27      	ldr	r2, [pc, #156]	@ (801bb48 <cmp_lfn+0xdc>)
 801baac:	693b      	ldr	r3, [r7, #16]
 801baae:	4413      	add	r3, r2
 801bab0:	781b      	ldrb	r3, [r3, #0]
 801bab2:	461a      	mov	r2, r3
 801bab4:	683b      	ldr	r3, [r7, #0]
 801bab6:	4413      	add	r3, r2
 801bab8:	4618      	mov	r0, r3
 801baba:	f7fe ff63 	bl	801a984 <ld_word>
 801babe:	4603      	mov	r3, r0
 801bac0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801bac2:	89fb      	ldrh	r3, [r7, #14]
 801bac4:	2b00      	cmp	r3, #0
 801bac6:	d01a      	beq.n	801bafe <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 801bac8:	697b      	ldr	r3, [r7, #20]
 801baca:	2bfe      	cmp	r3, #254	@ 0xfe
 801bacc:	d812      	bhi.n	801baf4 <cmp_lfn+0x88>
 801bace:	89bb      	ldrh	r3, [r7, #12]
 801bad0:	4618      	mov	r0, r3
 801bad2:	f001 ff71 	bl	801d9b8 <ff_wtoupper>
 801bad6:	4603      	mov	r3, r0
 801bad8:	461c      	mov	r4, r3
 801bada:	697b      	ldr	r3, [r7, #20]
 801badc:	1c5a      	adds	r2, r3, #1
 801bade:	617a      	str	r2, [r7, #20]
 801bae0:	005b      	lsls	r3, r3, #1
 801bae2:	687a      	ldr	r2, [r7, #4]
 801bae4:	4413      	add	r3, r2
 801bae6:	881b      	ldrh	r3, [r3, #0]
 801bae8:	4618      	mov	r0, r3
 801baea:	f001 ff65 	bl	801d9b8 <ff_wtoupper>
 801baee:	4603      	mov	r3, r0
 801baf0:	429c      	cmp	r4, r3
 801baf2:	d001      	beq.n	801baf8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 801baf4:	2300      	movs	r3, #0
 801baf6:	e022      	b.n	801bb3e <cmp_lfn+0xd2>
			}
			wc = uc;
 801baf8:	89bb      	ldrh	r3, [r7, #12]
 801bafa:	81fb      	strh	r3, [r7, #14]
 801bafc:	e006      	b.n	801bb0c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801bafe:	89bb      	ldrh	r3, [r7, #12]
 801bb00:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801bb04:	4293      	cmp	r3, r2
 801bb06:	d001      	beq.n	801bb0c <cmp_lfn+0xa0>
 801bb08:	2300      	movs	r3, #0
 801bb0a:	e018      	b.n	801bb3e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801bb0c:	693b      	ldr	r3, [r7, #16]
 801bb0e:	3301      	adds	r3, #1
 801bb10:	613b      	str	r3, [r7, #16]
 801bb12:	693b      	ldr	r3, [r7, #16]
 801bb14:	2b0c      	cmp	r3, #12
 801bb16:	d9c8      	bls.n	801baaa <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 801bb18:	683b      	ldr	r3, [r7, #0]
 801bb1a:	781b      	ldrb	r3, [r3, #0]
 801bb1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801bb20:	2b00      	cmp	r3, #0
 801bb22:	d00b      	beq.n	801bb3c <cmp_lfn+0xd0>
 801bb24:	89fb      	ldrh	r3, [r7, #14]
 801bb26:	2b00      	cmp	r3, #0
 801bb28:	d008      	beq.n	801bb3c <cmp_lfn+0xd0>
 801bb2a:	697b      	ldr	r3, [r7, #20]
 801bb2c:	005b      	lsls	r3, r3, #1
 801bb2e:	687a      	ldr	r2, [r7, #4]
 801bb30:	4413      	add	r3, r2
 801bb32:	881b      	ldrh	r3, [r3, #0]
 801bb34:	2b00      	cmp	r3, #0
 801bb36:	d001      	beq.n	801bb3c <cmp_lfn+0xd0>
 801bb38:	2300      	movs	r3, #0
 801bb3a:	e000      	b.n	801bb3e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 801bb3c:	2301      	movs	r3, #1
}
 801bb3e:	4618      	mov	r0, r3
 801bb40:	371c      	adds	r7, #28
 801bb42:	46bd      	mov	sp, r7
 801bb44:	bd90      	pop	{r4, r7, pc}
 801bb46:	bf00      	nop
 801bb48:	0801e654 	.word	0x0801e654

0801bb4c <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 801bb4c:	b580      	push	{r7, lr}
 801bb4e:	b086      	sub	sp, #24
 801bb50:	af00      	add	r7, sp, #0
 801bb52:	6078      	str	r0, [r7, #4]
 801bb54:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 801bb56:	683b      	ldr	r3, [r7, #0]
 801bb58:	331a      	adds	r3, #26
 801bb5a:	4618      	mov	r0, r3
 801bb5c:	f7fe ff12 	bl	801a984 <ld_word>
 801bb60:	4603      	mov	r3, r0
 801bb62:	2b00      	cmp	r3, #0
 801bb64:	d001      	beq.n	801bb6a <pick_lfn+0x1e>
 801bb66:	2300      	movs	r3, #0
 801bb68:	e04d      	b.n	801bc06 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 801bb6a:	683b      	ldr	r3, [r7, #0]
 801bb6c:	781b      	ldrb	r3, [r3, #0]
 801bb6e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801bb72:	1e5a      	subs	r2, r3, #1
 801bb74:	4613      	mov	r3, r2
 801bb76:	005b      	lsls	r3, r3, #1
 801bb78:	4413      	add	r3, r2
 801bb7a:	009b      	lsls	r3, r3, #2
 801bb7c:	4413      	add	r3, r2
 801bb7e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801bb80:	2301      	movs	r3, #1
 801bb82:	81fb      	strh	r3, [r7, #14]
 801bb84:	2300      	movs	r3, #0
 801bb86:	613b      	str	r3, [r7, #16]
 801bb88:	e028      	b.n	801bbdc <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801bb8a:	4a21      	ldr	r2, [pc, #132]	@ (801bc10 <pick_lfn+0xc4>)
 801bb8c:	693b      	ldr	r3, [r7, #16]
 801bb8e:	4413      	add	r3, r2
 801bb90:	781b      	ldrb	r3, [r3, #0]
 801bb92:	461a      	mov	r2, r3
 801bb94:	683b      	ldr	r3, [r7, #0]
 801bb96:	4413      	add	r3, r2
 801bb98:	4618      	mov	r0, r3
 801bb9a:	f7fe fef3 	bl	801a984 <ld_word>
 801bb9e:	4603      	mov	r3, r0
 801bba0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801bba2:	89fb      	ldrh	r3, [r7, #14]
 801bba4:	2b00      	cmp	r3, #0
 801bba6:	d00f      	beq.n	801bbc8 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 801bba8:	697b      	ldr	r3, [r7, #20]
 801bbaa:	2bfe      	cmp	r3, #254	@ 0xfe
 801bbac:	d901      	bls.n	801bbb2 <pick_lfn+0x66>
 801bbae:	2300      	movs	r3, #0
 801bbb0:	e029      	b.n	801bc06 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 801bbb2:	89bb      	ldrh	r3, [r7, #12]
 801bbb4:	81fb      	strh	r3, [r7, #14]
 801bbb6:	697b      	ldr	r3, [r7, #20]
 801bbb8:	1c5a      	adds	r2, r3, #1
 801bbba:	617a      	str	r2, [r7, #20]
 801bbbc:	005b      	lsls	r3, r3, #1
 801bbbe:	687a      	ldr	r2, [r7, #4]
 801bbc0:	4413      	add	r3, r2
 801bbc2:	89fa      	ldrh	r2, [r7, #14]
 801bbc4:	801a      	strh	r2, [r3, #0]
 801bbc6:	e006      	b.n	801bbd6 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801bbc8:	89bb      	ldrh	r3, [r7, #12]
 801bbca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801bbce:	4293      	cmp	r3, r2
 801bbd0:	d001      	beq.n	801bbd6 <pick_lfn+0x8a>
 801bbd2:	2300      	movs	r3, #0
 801bbd4:	e017      	b.n	801bc06 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801bbd6:	693b      	ldr	r3, [r7, #16]
 801bbd8:	3301      	adds	r3, #1
 801bbda:	613b      	str	r3, [r7, #16]
 801bbdc:	693b      	ldr	r3, [r7, #16]
 801bbde:	2b0c      	cmp	r3, #12
 801bbe0:	d9d3      	bls.n	801bb8a <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 801bbe2:	683b      	ldr	r3, [r7, #0]
 801bbe4:	781b      	ldrb	r3, [r3, #0]
 801bbe6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801bbea:	2b00      	cmp	r3, #0
 801bbec:	d00a      	beq.n	801bc04 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 801bbee:	697b      	ldr	r3, [r7, #20]
 801bbf0:	2bfe      	cmp	r3, #254	@ 0xfe
 801bbf2:	d901      	bls.n	801bbf8 <pick_lfn+0xac>
 801bbf4:	2300      	movs	r3, #0
 801bbf6:	e006      	b.n	801bc06 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 801bbf8:	697b      	ldr	r3, [r7, #20]
 801bbfa:	005b      	lsls	r3, r3, #1
 801bbfc:	687a      	ldr	r2, [r7, #4]
 801bbfe:	4413      	add	r3, r2
 801bc00:	2200      	movs	r2, #0
 801bc02:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 801bc04:	2301      	movs	r3, #1
}
 801bc06:	4618      	mov	r0, r3
 801bc08:	3718      	adds	r7, #24
 801bc0a:	46bd      	mov	sp, r7
 801bc0c:	bd80      	pop	{r7, pc}
 801bc0e:	bf00      	nop
 801bc10:	0801e654 	.word	0x0801e654

0801bc14 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 801bc14:	b580      	push	{r7, lr}
 801bc16:	b088      	sub	sp, #32
 801bc18:	af00      	add	r7, sp, #0
 801bc1a:	60f8      	str	r0, [r7, #12]
 801bc1c:	60b9      	str	r1, [r7, #8]
 801bc1e:	4611      	mov	r1, r2
 801bc20:	461a      	mov	r2, r3
 801bc22:	460b      	mov	r3, r1
 801bc24:	71fb      	strb	r3, [r7, #7]
 801bc26:	4613      	mov	r3, r2
 801bc28:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 801bc2a:	68bb      	ldr	r3, [r7, #8]
 801bc2c:	330d      	adds	r3, #13
 801bc2e:	79ba      	ldrb	r2, [r7, #6]
 801bc30:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 801bc32:	68bb      	ldr	r3, [r7, #8]
 801bc34:	330b      	adds	r3, #11
 801bc36:	220f      	movs	r2, #15
 801bc38:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 801bc3a:	68bb      	ldr	r3, [r7, #8]
 801bc3c:	330c      	adds	r3, #12
 801bc3e:	2200      	movs	r2, #0
 801bc40:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 801bc42:	68bb      	ldr	r3, [r7, #8]
 801bc44:	331a      	adds	r3, #26
 801bc46:	2100      	movs	r1, #0
 801bc48:	4618      	mov	r0, r3
 801bc4a:	f7fe fed6 	bl	801a9fa <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 801bc4e:	79fb      	ldrb	r3, [r7, #7]
 801bc50:	1e5a      	subs	r2, r3, #1
 801bc52:	4613      	mov	r3, r2
 801bc54:	005b      	lsls	r3, r3, #1
 801bc56:	4413      	add	r3, r2
 801bc58:	009b      	lsls	r3, r3, #2
 801bc5a:	4413      	add	r3, r2
 801bc5c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 801bc5e:	2300      	movs	r3, #0
 801bc60:	82fb      	strh	r3, [r7, #22]
 801bc62:	2300      	movs	r3, #0
 801bc64:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801bc66:	8afb      	ldrh	r3, [r7, #22]
 801bc68:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801bc6c:	4293      	cmp	r3, r2
 801bc6e:	d007      	beq.n	801bc80 <put_lfn+0x6c>
 801bc70:	69fb      	ldr	r3, [r7, #28]
 801bc72:	1c5a      	adds	r2, r3, #1
 801bc74:	61fa      	str	r2, [r7, #28]
 801bc76:	005b      	lsls	r3, r3, #1
 801bc78:	68fa      	ldr	r2, [r7, #12]
 801bc7a:	4413      	add	r3, r2
 801bc7c:	881b      	ldrh	r3, [r3, #0]
 801bc7e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 801bc80:	4a17      	ldr	r2, [pc, #92]	@ (801bce0 <put_lfn+0xcc>)
 801bc82:	69bb      	ldr	r3, [r7, #24]
 801bc84:	4413      	add	r3, r2
 801bc86:	781b      	ldrb	r3, [r3, #0]
 801bc88:	461a      	mov	r2, r3
 801bc8a:	68bb      	ldr	r3, [r7, #8]
 801bc8c:	4413      	add	r3, r2
 801bc8e:	8afa      	ldrh	r2, [r7, #22]
 801bc90:	4611      	mov	r1, r2
 801bc92:	4618      	mov	r0, r3
 801bc94:	f7fe feb1 	bl	801a9fa <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 801bc98:	8afb      	ldrh	r3, [r7, #22]
 801bc9a:	2b00      	cmp	r3, #0
 801bc9c:	d102      	bne.n	801bca4 <put_lfn+0x90>
 801bc9e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801bca2:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 801bca4:	69bb      	ldr	r3, [r7, #24]
 801bca6:	3301      	adds	r3, #1
 801bca8:	61bb      	str	r3, [r7, #24]
 801bcaa:	69bb      	ldr	r3, [r7, #24]
 801bcac:	2b0c      	cmp	r3, #12
 801bcae:	d9da      	bls.n	801bc66 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 801bcb0:	8afb      	ldrh	r3, [r7, #22]
 801bcb2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801bcb6:	4293      	cmp	r3, r2
 801bcb8:	d006      	beq.n	801bcc8 <put_lfn+0xb4>
 801bcba:	69fb      	ldr	r3, [r7, #28]
 801bcbc:	005b      	lsls	r3, r3, #1
 801bcbe:	68fa      	ldr	r2, [r7, #12]
 801bcc0:	4413      	add	r3, r2
 801bcc2:	881b      	ldrh	r3, [r3, #0]
 801bcc4:	2b00      	cmp	r3, #0
 801bcc6:	d103      	bne.n	801bcd0 <put_lfn+0xbc>
 801bcc8:	79fb      	ldrb	r3, [r7, #7]
 801bcca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801bcce:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 801bcd0:	68bb      	ldr	r3, [r7, #8]
 801bcd2:	79fa      	ldrb	r2, [r7, #7]
 801bcd4:	701a      	strb	r2, [r3, #0]
}
 801bcd6:	bf00      	nop
 801bcd8:	3720      	adds	r7, #32
 801bcda:	46bd      	mov	sp, r7
 801bcdc:	bd80      	pop	{r7, pc}
 801bcde:	bf00      	nop
 801bce0:	0801e654 	.word	0x0801e654

0801bce4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 801bce4:	b580      	push	{r7, lr}
 801bce6:	b08c      	sub	sp, #48	@ 0x30
 801bce8:	af00      	add	r7, sp, #0
 801bcea:	60f8      	str	r0, [r7, #12]
 801bcec:	60b9      	str	r1, [r7, #8]
 801bcee:	607a      	str	r2, [r7, #4]
 801bcf0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 801bcf2:	220b      	movs	r2, #11
 801bcf4:	68b9      	ldr	r1, [r7, #8]
 801bcf6:	68f8      	ldr	r0, [r7, #12]
 801bcf8:	f7fe fec6 	bl	801aa88 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 801bcfc:	683b      	ldr	r3, [r7, #0]
 801bcfe:	2b05      	cmp	r3, #5
 801bd00:	d929      	bls.n	801bd56 <gen_numname+0x72>
		sr = seq;
 801bd02:	683b      	ldr	r3, [r7, #0]
 801bd04:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 801bd06:	e020      	b.n	801bd4a <gen_numname+0x66>
			wc = *lfn++;
 801bd08:	687b      	ldr	r3, [r7, #4]
 801bd0a:	1c9a      	adds	r2, r3, #2
 801bd0c:	607a      	str	r2, [r7, #4]
 801bd0e:	881b      	ldrh	r3, [r3, #0]
 801bd10:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 801bd12:	2300      	movs	r3, #0
 801bd14:	62bb      	str	r3, [r7, #40]	@ 0x28
 801bd16:	e015      	b.n	801bd44 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 801bd18:	69fb      	ldr	r3, [r7, #28]
 801bd1a:	005a      	lsls	r2, r3, #1
 801bd1c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801bd1e:	f003 0301 	and.w	r3, r3, #1
 801bd22:	4413      	add	r3, r2
 801bd24:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 801bd26:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801bd28:	085b      	lsrs	r3, r3, #1
 801bd2a:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 801bd2c:	69fb      	ldr	r3, [r7, #28]
 801bd2e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801bd32:	2b00      	cmp	r3, #0
 801bd34:	d003      	beq.n	801bd3e <gen_numname+0x5a>
 801bd36:	69fa      	ldr	r2, [r7, #28]
 801bd38:	4b30      	ldr	r3, [pc, #192]	@ (801bdfc <gen_numname+0x118>)
 801bd3a:	4053      	eors	r3, r2
 801bd3c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 801bd3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bd40:	3301      	adds	r3, #1
 801bd42:	62bb      	str	r3, [r7, #40]	@ 0x28
 801bd44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bd46:	2b0f      	cmp	r3, #15
 801bd48:	d9e6      	bls.n	801bd18 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 801bd4a:	687b      	ldr	r3, [r7, #4]
 801bd4c:	881b      	ldrh	r3, [r3, #0]
 801bd4e:	2b00      	cmp	r3, #0
 801bd50:	d1da      	bne.n	801bd08 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 801bd52:	69fb      	ldr	r3, [r7, #28]
 801bd54:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 801bd56:	2307      	movs	r3, #7
 801bd58:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 801bd5a:	683b      	ldr	r3, [r7, #0]
 801bd5c:	b2db      	uxtb	r3, r3
 801bd5e:	f003 030f 	and.w	r3, r3, #15
 801bd62:	b2db      	uxtb	r3, r3
 801bd64:	3330      	adds	r3, #48	@ 0x30
 801bd66:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 801bd6a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801bd6e:	2b39      	cmp	r3, #57	@ 0x39
 801bd70:	d904      	bls.n	801bd7c <gen_numname+0x98>
 801bd72:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801bd76:	3307      	adds	r3, #7
 801bd78:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 801bd7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bd7e:	1e5a      	subs	r2, r3, #1
 801bd80:	62ba      	str	r2, [r7, #40]	@ 0x28
 801bd82:	3330      	adds	r3, #48	@ 0x30
 801bd84:	443b      	add	r3, r7
 801bd86:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 801bd8a:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 801bd8e:	683b      	ldr	r3, [r7, #0]
 801bd90:	091b      	lsrs	r3, r3, #4
 801bd92:	603b      	str	r3, [r7, #0]
	} while (seq);
 801bd94:	683b      	ldr	r3, [r7, #0]
 801bd96:	2b00      	cmp	r3, #0
 801bd98:	d1df      	bne.n	801bd5a <gen_numname+0x76>
	ns[i] = '~';
 801bd9a:	f107 0214 	add.w	r2, r7, #20
 801bd9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bda0:	4413      	add	r3, r2
 801bda2:	227e      	movs	r2, #126	@ 0x7e
 801bda4:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 801bda6:	2300      	movs	r3, #0
 801bda8:	627b      	str	r3, [r7, #36]	@ 0x24
 801bdaa:	e002      	b.n	801bdb2 <gen_numname+0xce>
 801bdac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bdae:	3301      	adds	r3, #1
 801bdb0:	627b      	str	r3, [r7, #36]	@ 0x24
 801bdb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801bdb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bdb6:	429a      	cmp	r2, r3
 801bdb8:	d205      	bcs.n	801bdc6 <gen_numname+0xe2>
 801bdba:	68fa      	ldr	r2, [r7, #12]
 801bdbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bdbe:	4413      	add	r3, r2
 801bdc0:	781b      	ldrb	r3, [r3, #0]
 801bdc2:	2b20      	cmp	r3, #32
 801bdc4:	d1f2      	bne.n	801bdac <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801bdc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bdc8:	2b07      	cmp	r3, #7
 801bdca:	d807      	bhi.n	801bddc <gen_numname+0xf8>
 801bdcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bdce:	1c5a      	adds	r2, r3, #1
 801bdd0:	62ba      	str	r2, [r7, #40]	@ 0x28
 801bdd2:	3330      	adds	r3, #48	@ 0x30
 801bdd4:	443b      	add	r3, r7
 801bdd6:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 801bdda:	e000      	b.n	801bdde <gen_numname+0xfa>
 801bddc:	2120      	movs	r1, #32
 801bdde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bde0:	1c5a      	adds	r2, r3, #1
 801bde2:	627a      	str	r2, [r7, #36]	@ 0x24
 801bde4:	68fa      	ldr	r2, [r7, #12]
 801bde6:	4413      	add	r3, r2
 801bde8:	460a      	mov	r2, r1
 801bdea:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 801bdec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bdee:	2b07      	cmp	r3, #7
 801bdf0:	d9e9      	bls.n	801bdc6 <gen_numname+0xe2>
}
 801bdf2:	bf00      	nop
 801bdf4:	bf00      	nop
 801bdf6:	3730      	adds	r7, #48	@ 0x30
 801bdf8:	46bd      	mov	sp, r7
 801bdfa:	bd80      	pop	{r7, pc}
 801bdfc:	00011021 	.word	0x00011021

0801be00 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 801be00:	b480      	push	{r7}
 801be02:	b085      	sub	sp, #20
 801be04:	af00      	add	r7, sp, #0
 801be06:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 801be08:	2300      	movs	r3, #0
 801be0a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 801be0c:	230b      	movs	r3, #11
 801be0e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 801be10:	7bfb      	ldrb	r3, [r7, #15]
 801be12:	b2da      	uxtb	r2, r3
 801be14:	0852      	lsrs	r2, r2, #1
 801be16:	01db      	lsls	r3, r3, #7
 801be18:	4313      	orrs	r3, r2
 801be1a:	b2da      	uxtb	r2, r3
 801be1c:	687b      	ldr	r3, [r7, #4]
 801be1e:	1c59      	adds	r1, r3, #1
 801be20:	6079      	str	r1, [r7, #4]
 801be22:	781b      	ldrb	r3, [r3, #0]
 801be24:	4413      	add	r3, r2
 801be26:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 801be28:	68bb      	ldr	r3, [r7, #8]
 801be2a:	3b01      	subs	r3, #1
 801be2c:	60bb      	str	r3, [r7, #8]
 801be2e:	68bb      	ldr	r3, [r7, #8]
 801be30:	2b00      	cmp	r3, #0
 801be32:	d1ed      	bne.n	801be10 <sum_sfn+0x10>
	return sum;
 801be34:	7bfb      	ldrb	r3, [r7, #15]
}
 801be36:	4618      	mov	r0, r3
 801be38:	3714      	adds	r7, #20
 801be3a:	46bd      	mov	sp, r7
 801be3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be40:	4770      	bx	lr

0801be42 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 801be42:	b580      	push	{r7, lr}
 801be44:	b086      	sub	sp, #24
 801be46:	af00      	add	r7, sp, #0
 801be48:	6078      	str	r0, [r7, #4]
 801be4a:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 801be4c:	2304      	movs	r3, #4
 801be4e:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 801be50:	687b      	ldr	r3, [r7, #4]
 801be52:	681b      	ldr	r3, [r3, #0]
 801be54:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 801be56:	23ff      	movs	r3, #255	@ 0xff
 801be58:	757b      	strb	r3, [r7, #21]
 801be5a:	23ff      	movs	r3, #255	@ 0xff
 801be5c:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 801be5e:	e081      	b.n	801bf64 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 801be60:	687b      	ldr	r3, [r7, #4]
 801be62:	69db      	ldr	r3, [r3, #28]
 801be64:	4619      	mov	r1, r3
 801be66:	6938      	ldr	r0, [r7, #16]
 801be68:	f7ff f83c 	bl	801aee4 <move_window>
 801be6c:	4603      	mov	r3, r0
 801be6e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801be70:	7dfb      	ldrb	r3, [r7, #23]
 801be72:	2b00      	cmp	r3, #0
 801be74:	d17c      	bne.n	801bf70 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 801be76:	687b      	ldr	r3, [r7, #4]
 801be78:	6a1b      	ldr	r3, [r3, #32]
 801be7a:	781b      	ldrb	r3, [r3, #0]
 801be7c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 801be7e:	7dbb      	ldrb	r3, [r7, #22]
 801be80:	2b00      	cmp	r3, #0
 801be82:	d102      	bne.n	801be8a <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 801be84:	2304      	movs	r3, #4
 801be86:	75fb      	strb	r3, [r7, #23]
 801be88:	e077      	b.n	801bf7a <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 801be8a:	687b      	ldr	r3, [r7, #4]
 801be8c:	6a1b      	ldr	r3, [r3, #32]
 801be8e:	330b      	adds	r3, #11
 801be90:	781b      	ldrb	r3, [r3, #0]
 801be92:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801be96:	73fb      	strb	r3, [r7, #15]
 801be98:	687b      	ldr	r3, [r7, #4]
 801be9a:	7bfa      	ldrb	r2, [r7, #15]
 801be9c:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 801be9e:	7dbb      	ldrb	r3, [r7, #22]
 801bea0:	2be5      	cmp	r3, #229	@ 0xe5
 801bea2:	d00e      	beq.n	801bec2 <dir_read+0x80>
 801bea4:	7dbb      	ldrb	r3, [r7, #22]
 801bea6:	2b2e      	cmp	r3, #46	@ 0x2e
 801bea8:	d00b      	beq.n	801bec2 <dir_read+0x80>
 801beaa:	7bfb      	ldrb	r3, [r7, #15]
 801beac:	f023 0320 	bic.w	r3, r3, #32
 801beb0:	2b08      	cmp	r3, #8
 801beb2:	bf0c      	ite	eq
 801beb4:	2301      	moveq	r3, #1
 801beb6:	2300      	movne	r3, #0
 801beb8:	b2db      	uxtb	r3, r3
 801beba:	461a      	mov	r2, r3
 801bebc:	683b      	ldr	r3, [r7, #0]
 801bebe:	4293      	cmp	r3, r2
 801bec0:	d002      	beq.n	801bec8 <dir_read+0x86>
				ord = 0xFF;
 801bec2:	23ff      	movs	r3, #255	@ 0xff
 801bec4:	757b      	strb	r3, [r7, #21]
 801bec6:	e044      	b.n	801bf52 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 801bec8:	7bfb      	ldrb	r3, [r7, #15]
 801beca:	2b0f      	cmp	r3, #15
 801becc:	d12f      	bne.n	801bf2e <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 801bece:	7dbb      	ldrb	r3, [r7, #22]
 801bed0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801bed4:	2b00      	cmp	r3, #0
 801bed6:	d00d      	beq.n	801bef4 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 801bed8:	687b      	ldr	r3, [r7, #4]
 801beda:	6a1b      	ldr	r3, [r3, #32]
 801bedc:	7b5b      	ldrb	r3, [r3, #13]
 801bede:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 801bee0:	7dbb      	ldrb	r3, [r7, #22]
 801bee2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801bee6:	75bb      	strb	r3, [r7, #22]
 801bee8:	7dbb      	ldrb	r3, [r7, #22]
 801beea:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 801beec:	687b      	ldr	r3, [r7, #4]
 801beee:	695a      	ldr	r2, [r3, #20]
 801bef0:	687b      	ldr	r3, [r7, #4]
 801bef2:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801bef4:	7dba      	ldrb	r2, [r7, #22]
 801bef6:	7d7b      	ldrb	r3, [r7, #21]
 801bef8:	429a      	cmp	r2, r3
 801befa:	d115      	bne.n	801bf28 <dir_read+0xe6>
 801befc:	687b      	ldr	r3, [r7, #4]
 801befe:	6a1b      	ldr	r3, [r3, #32]
 801bf00:	330d      	adds	r3, #13
 801bf02:	781b      	ldrb	r3, [r3, #0]
 801bf04:	7d3a      	ldrb	r2, [r7, #20]
 801bf06:	429a      	cmp	r2, r3
 801bf08:	d10e      	bne.n	801bf28 <dir_read+0xe6>
 801bf0a:	693b      	ldr	r3, [r7, #16]
 801bf0c:	691a      	ldr	r2, [r3, #16]
 801bf0e:	687b      	ldr	r3, [r7, #4]
 801bf10:	6a1b      	ldr	r3, [r3, #32]
 801bf12:	4619      	mov	r1, r3
 801bf14:	4610      	mov	r0, r2
 801bf16:	f7ff fe19 	bl	801bb4c <pick_lfn>
 801bf1a:	4603      	mov	r3, r0
 801bf1c:	2b00      	cmp	r3, #0
 801bf1e:	d003      	beq.n	801bf28 <dir_read+0xe6>
 801bf20:	7d7b      	ldrb	r3, [r7, #21]
 801bf22:	3b01      	subs	r3, #1
 801bf24:	b2db      	uxtb	r3, r3
 801bf26:	e000      	b.n	801bf2a <dir_read+0xe8>
 801bf28:	23ff      	movs	r3, #255	@ 0xff
 801bf2a:	757b      	strb	r3, [r7, #21]
 801bf2c:	e011      	b.n	801bf52 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 801bf2e:	7d7b      	ldrb	r3, [r7, #21]
 801bf30:	2b00      	cmp	r3, #0
 801bf32:	d109      	bne.n	801bf48 <dir_read+0x106>
 801bf34:	687b      	ldr	r3, [r7, #4]
 801bf36:	6a1b      	ldr	r3, [r3, #32]
 801bf38:	4618      	mov	r0, r3
 801bf3a:	f7ff ff61 	bl	801be00 <sum_sfn>
 801bf3e:	4603      	mov	r3, r0
 801bf40:	461a      	mov	r2, r3
 801bf42:	7d3b      	ldrb	r3, [r7, #20]
 801bf44:	4293      	cmp	r3, r2
 801bf46:	d015      	beq.n	801bf74 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 801bf48:	687b      	ldr	r3, [r7, #4]
 801bf4a:	f04f 32ff 	mov.w	r2, #4294967295
 801bf4e:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					break;
 801bf50:	e010      	b.n	801bf74 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 801bf52:	2100      	movs	r1, #0
 801bf54:	6878      	ldr	r0, [r7, #4]
 801bf56:	f7ff fc2d 	bl	801b7b4 <dir_next>
 801bf5a:	4603      	mov	r3, r0
 801bf5c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801bf5e:	7dfb      	ldrb	r3, [r7, #23]
 801bf60:	2b00      	cmp	r3, #0
 801bf62:	d109      	bne.n	801bf78 <dir_read+0x136>
	while (dp->sect) {
 801bf64:	687b      	ldr	r3, [r7, #4]
 801bf66:	69db      	ldr	r3, [r3, #28]
 801bf68:	2b00      	cmp	r3, #0
 801bf6a:	f47f af79 	bne.w	801be60 <dir_read+0x1e>
 801bf6e:	e004      	b.n	801bf7a <dir_read+0x138>
		if (res != FR_OK) break;
 801bf70:	bf00      	nop
 801bf72:	e002      	b.n	801bf7a <dir_read+0x138>
					break;
 801bf74:	bf00      	nop
 801bf76:	e000      	b.n	801bf7a <dir_read+0x138>
		if (res != FR_OK) break;
 801bf78:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 801bf7a:	7dfb      	ldrb	r3, [r7, #23]
 801bf7c:	2b00      	cmp	r3, #0
 801bf7e:	d002      	beq.n	801bf86 <dir_read+0x144>
 801bf80:	687b      	ldr	r3, [r7, #4]
 801bf82:	2200      	movs	r2, #0
 801bf84:	61da      	str	r2, [r3, #28]
	return res;
 801bf86:	7dfb      	ldrb	r3, [r7, #23]
}
 801bf88:	4618      	mov	r0, r3
 801bf8a:	3718      	adds	r7, #24
 801bf8c:	46bd      	mov	sp, r7
 801bf8e:	bd80      	pop	{r7, pc}

0801bf90 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801bf90:	b580      	push	{r7, lr}
 801bf92:	b086      	sub	sp, #24
 801bf94:	af00      	add	r7, sp, #0
 801bf96:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801bf98:	687b      	ldr	r3, [r7, #4]
 801bf9a:	681b      	ldr	r3, [r3, #0]
 801bf9c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801bf9e:	2100      	movs	r1, #0
 801bfa0:	6878      	ldr	r0, [r7, #4]
 801bfa2:	f7ff fb7e 	bl	801b6a2 <dir_sdi>
 801bfa6:	4603      	mov	r3, r0
 801bfa8:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801bfaa:	7dfb      	ldrb	r3, [r7, #23]
 801bfac:	2b00      	cmp	r3, #0
 801bfae:	d001      	beq.n	801bfb4 <dir_find+0x24>
 801bfb0:	7dfb      	ldrb	r3, [r7, #23]
 801bfb2:	e0a9      	b.n	801c108 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801bfb4:	23ff      	movs	r3, #255	@ 0xff
 801bfb6:	753b      	strb	r3, [r7, #20]
 801bfb8:	7d3b      	ldrb	r3, [r7, #20]
 801bfba:	757b      	strb	r3, [r7, #21]
 801bfbc:	687b      	ldr	r3, [r7, #4]
 801bfbe:	f04f 32ff 	mov.w	r2, #4294967295
 801bfc2:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 801bfc4:	687b      	ldr	r3, [r7, #4]
 801bfc6:	69db      	ldr	r3, [r3, #28]
 801bfc8:	4619      	mov	r1, r3
 801bfca:	6938      	ldr	r0, [r7, #16]
 801bfcc:	f7fe ff8a 	bl	801aee4 <move_window>
 801bfd0:	4603      	mov	r3, r0
 801bfd2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801bfd4:	7dfb      	ldrb	r3, [r7, #23]
 801bfd6:	2b00      	cmp	r3, #0
 801bfd8:	f040 8090 	bne.w	801c0fc <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 801bfdc:	687b      	ldr	r3, [r7, #4]
 801bfde:	6a1b      	ldr	r3, [r3, #32]
 801bfe0:	781b      	ldrb	r3, [r3, #0]
 801bfe2:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801bfe4:	7dbb      	ldrb	r3, [r7, #22]
 801bfe6:	2b00      	cmp	r3, #0
 801bfe8:	d102      	bne.n	801bff0 <dir_find+0x60>
 801bfea:	2304      	movs	r3, #4
 801bfec:	75fb      	strb	r3, [r7, #23]
 801bfee:	e08a      	b.n	801c106 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 801bff0:	687b      	ldr	r3, [r7, #4]
 801bff2:	6a1b      	ldr	r3, [r3, #32]
 801bff4:	330b      	adds	r3, #11
 801bff6:	781b      	ldrb	r3, [r3, #0]
 801bff8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801bffc:	73fb      	strb	r3, [r7, #15]
 801bffe:	687b      	ldr	r3, [r7, #4]
 801c000:	7bfa      	ldrb	r2, [r7, #15]
 801c002:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 801c004:	7dbb      	ldrb	r3, [r7, #22]
 801c006:	2be5      	cmp	r3, #229	@ 0xe5
 801c008:	d007      	beq.n	801c01a <dir_find+0x8a>
 801c00a:	7bfb      	ldrb	r3, [r7, #15]
 801c00c:	f003 0308 	and.w	r3, r3, #8
 801c010:	2b00      	cmp	r3, #0
 801c012:	d009      	beq.n	801c028 <dir_find+0x98>
 801c014:	7bfb      	ldrb	r3, [r7, #15]
 801c016:	2b0f      	cmp	r3, #15
 801c018:	d006      	beq.n	801c028 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801c01a:	23ff      	movs	r3, #255	@ 0xff
 801c01c:	757b      	strb	r3, [r7, #21]
 801c01e:	687b      	ldr	r3, [r7, #4]
 801c020:	f04f 32ff 	mov.w	r2, #4294967295
 801c024:	631a      	str	r2, [r3, #48]	@ 0x30
 801c026:	e05e      	b.n	801c0e6 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 801c028:	7bfb      	ldrb	r3, [r7, #15]
 801c02a:	2b0f      	cmp	r3, #15
 801c02c:	d136      	bne.n	801c09c <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 801c02e:	687b      	ldr	r3, [r7, #4]
 801c030:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801c034:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801c038:	2b00      	cmp	r3, #0
 801c03a:	d154      	bne.n	801c0e6 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 801c03c:	7dbb      	ldrb	r3, [r7, #22]
 801c03e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801c042:	2b00      	cmp	r3, #0
 801c044:	d00d      	beq.n	801c062 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 801c046:	687b      	ldr	r3, [r7, #4]
 801c048:	6a1b      	ldr	r3, [r3, #32]
 801c04a:	7b5b      	ldrb	r3, [r3, #13]
 801c04c:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 801c04e:	7dbb      	ldrb	r3, [r7, #22]
 801c050:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801c054:	75bb      	strb	r3, [r7, #22]
 801c056:	7dbb      	ldrb	r3, [r7, #22]
 801c058:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 801c05a:	687b      	ldr	r3, [r7, #4]
 801c05c:	695a      	ldr	r2, [r3, #20]
 801c05e:	687b      	ldr	r3, [r7, #4]
 801c060:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801c062:	7dba      	ldrb	r2, [r7, #22]
 801c064:	7d7b      	ldrb	r3, [r7, #21]
 801c066:	429a      	cmp	r2, r3
 801c068:	d115      	bne.n	801c096 <dir_find+0x106>
 801c06a:	687b      	ldr	r3, [r7, #4]
 801c06c:	6a1b      	ldr	r3, [r3, #32]
 801c06e:	330d      	adds	r3, #13
 801c070:	781b      	ldrb	r3, [r3, #0]
 801c072:	7d3a      	ldrb	r2, [r7, #20]
 801c074:	429a      	cmp	r2, r3
 801c076:	d10e      	bne.n	801c096 <dir_find+0x106>
 801c078:	693b      	ldr	r3, [r7, #16]
 801c07a:	691a      	ldr	r2, [r3, #16]
 801c07c:	687b      	ldr	r3, [r7, #4]
 801c07e:	6a1b      	ldr	r3, [r3, #32]
 801c080:	4619      	mov	r1, r3
 801c082:	4610      	mov	r0, r2
 801c084:	f7ff fcf2 	bl	801ba6c <cmp_lfn>
 801c088:	4603      	mov	r3, r0
 801c08a:	2b00      	cmp	r3, #0
 801c08c:	d003      	beq.n	801c096 <dir_find+0x106>
 801c08e:	7d7b      	ldrb	r3, [r7, #21]
 801c090:	3b01      	subs	r3, #1
 801c092:	b2db      	uxtb	r3, r3
 801c094:	e000      	b.n	801c098 <dir_find+0x108>
 801c096:	23ff      	movs	r3, #255	@ 0xff
 801c098:	757b      	strb	r3, [r7, #21]
 801c09a:	e024      	b.n	801c0e6 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801c09c:	7d7b      	ldrb	r3, [r7, #21]
 801c09e:	2b00      	cmp	r3, #0
 801c0a0:	d109      	bne.n	801c0b6 <dir_find+0x126>
 801c0a2:	687b      	ldr	r3, [r7, #4]
 801c0a4:	6a1b      	ldr	r3, [r3, #32]
 801c0a6:	4618      	mov	r0, r3
 801c0a8:	f7ff feaa 	bl	801be00 <sum_sfn>
 801c0ac:	4603      	mov	r3, r0
 801c0ae:	461a      	mov	r2, r3
 801c0b0:	7d3b      	ldrb	r3, [r7, #20]
 801c0b2:	4293      	cmp	r3, r2
 801c0b4:	d024      	beq.n	801c100 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801c0b6:	687b      	ldr	r3, [r7, #4]
 801c0b8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801c0bc:	f003 0301 	and.w	r3, r3, #1
 801c0c0:	2b00      	cmp	r3, #0
 801c0c2:	d10a      	bne.n	801c0da <dir_find+0x14a>
 801c0c4:	687b      	ldr	r3, [r7, #4]
 801c0c6:	6a18      	ldr	r0, [r3, #32]
 801c0c8:	687b      	ldr	r3, [r7, #4]
 801c0ca:	3324      	adds	r3, #36	@ 0x24
 801c0cc:	220b      	movs	r2, #11
 801c0ce:	4619      	mov	r1, r3
 801c0d0:	f7fe fd16 	bl	801ab00 <mem_cmp>
 801c0d4:	4603      	mov	r3, r0
 801c0d6:	2b00      	cmp	r3, #0
 801c0d8:	d014      	beq.n	801c104 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801c0da:	23ff      	movs	r3, #255	@ 0xff
 801c0dc:	757b      	strb	r3, [r7, #21]
 801c0de:	687b      	ldr	r3, [r7, #4]
 801c0e0:	f04f 32ff 	mov.w	r2, #4294967295
 801c0e4:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801c0e6:	2100      	movs	r1, #0
 801c0e8:	6878      	ldr	r0, [r7, #4]
 801c0ea:	f7ff fb63 	bl	801b7b4 <dir_next>
 801c0ee:	4603      	mov	r3, r0
 801c0f0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 801c0f2:	7dfb      	ldrb	r3, [r7, #23]
 801c0f4:	2b00      	cmp	r3, #0
 801c0f6:	f43f af65 	beq.w	801bfc4 <dir_find+0x34>
 801c0fa:	e004      	b.n	801c106 <dir_find+0x176>
		if (res != FR_OK) break;
 801c0fc:	bf00      	nop
 801c0fe:	e002      	b.n	801c106 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801c100:	bf00      	nop
 801c102:	e000      	b.n	801c106 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801c104:	bf00      	nop

	return res;
 801c106:	7dfb      	ldrb	r3, [r7, #23]
}
 801c108:	4618      	mov	r0, r3
 801c10a:	3718      	adds	r7, #24
 801c10c:	46bd      	mov	sp, r7
 801c10e:	bd80      	pop	{r7, pc}

0801c110 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 801c110:	b580      	push	{r7, lr}
 801c112:	b08c      	sub	sp, #48	@ 0x30
 801c114:	af00      	add	r7, sp, #0
 801c116:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801c118:	687b      	ldr	r3, [r7, #4]
 801c11a:	681b      	ldr	r3, [r3, #0]
 801c11c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 801c11e:	687b      	ldr	r3, [r7, #4]
 801c120:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801c124:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 801c128:	2b00      	cmp	r3, #0
 801c12a:	d001      	beq.n	801c130 <dir_register+0x20>
 801c12c:	2306      	movs	r3, #6
 801c12e:	e0e0      	b.n	801c2f2 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 801c130:	2300      	movs	r3, #0
 801c132:	627b      	str	r3, [r7, #36]	@ 0x24
 801c134:	e002      	b.n	801c13c <dir_register+0x2c>
 801c136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c138:	3301      	adds	r3, #1
 801c13a:	627b      	str	r3, [r7, #36]	@ 0x24
 801c13c:	69fb      	ldr	r3, [r7, #28]
 801c13e:	691a      	ldr	r2, [r3, #16]
 801c140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c142:	005b      	lsls	r3, r3, #1
 801c144:	4413      	add	r3, r2
 801c146:	881b      	ldrh	r3, [r3, #0]
 801c148:	2b00      	cmp	r3, #0
 801c14a:	d1f4      	bne.n	801c136 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 801c14c:	687b      	ldr	r3, [r7, #4]
 801c14e:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 801c152:	f107 030c 	add.w	r3, r7, #12
 801c156:	220c      	movs	r2, #12
 801c158:	4618      	mov	r0, r3
 801c15a:	f7fe fc95 	bl	801aa88 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 801c15e:	7dfb      	ldrb	r3, [r7, #23]
 801c160:	f003 0301 	and.w	r3, r3, #1
 801c164:	2b00      	cmp	r3, #0
 801c166:	d032      	beq.n	801c1ce <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 801c168:	687b      	ldr	r3, [r7, #4]
 801c16a:	2240      	movs	r2, #64	@ 0x40
 801c16c:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 801c170:	2301      	movs	r3, #1
 801c172:	62bb      	str	r3, [r7, #40]	@ 0x28
 801c174:	e016      	b.n	801c1a4 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 801c176:	687b      	ldr	r3, [r7, #4]
 801c178:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 801c17c:	69fb      	ldr	r3, [r7, #28]
 801c17e:	691a      	ldr	r2, [r3, #16]
 801c180:	f107 010c 	add.w	r1, r7, #12
 801c184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c186:	f7ff fdad 	bl	801bce4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 801c18a:	6878      	ldr	r0, [r7, #4]
 801c18c:	f7ff ff00 	bl	801bf90 <dir_find>
 801c190:	4603      	mov	r3, r0
 801c192:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 801c196:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c19a:	2b00      	cmp	r3, #0
 801c19c:	d106      	bne.n	801c1ac <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 801c19e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c1a0:	3301      	adds	r3, #1
 801c1a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 801c1a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c1a6:	2b63      	cmp	r3, #99	@ 0x63
 801c1a8:	d9e5      	bls.n	801c176 <dir_register+0x66>
 801c1aa:	e000      	b.n	801c1ae <dir_register+0x9e>
			if (res != FR_OK) break;
 801c1ac:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 801c1ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c1b0:	2b64      	cmp	r3, #100	@ 0x64
 801c1b2:	d101      	bne.n	801c1b8 <dir_register+0xa8>
 801c1b4:	2307      	movs	r3, #7
 801c1b6:	e09c      	b.n	801c2f2 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 801c1b8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c1bc:	2b04      	cmp	r3, #4
 801c1be:	d002      	beq.n	801c1c6 <dir_register+0xb6>
 801c1c0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c1c4:	e095      	b.n	801c2f2 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 801c1c6:	7dfa      	ldrb	r2, [r7, #23]
 801c1c8:	687b      	ldr	r3, [r7, #4]
 801c1ca:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 801c1ce:	7dfb      	ldrb	r3, [r7, #23]
 801c1d0:	f003 0302 	and.w	r3, r3, #2
 801c1d4:	2b00      	cmp	r3, #0
 801c1d6:	d007      	beq.n	801c1e8 <dir_register+0xd8>
 801c1d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c1da:	330c      	adds	r3, #12
 801c1dc:	4a47      	ldr	r2, [pc, #284]	@ (801c2fc <dir_register+0x1ec>)
 801c1de:	fba2 2303 	umull	r2, r3, r2, r3
 801c1e2:	089b      	lsrs	r3, r3, #2
 801c1e4:	3301      	adds	r3, #1
 801c1e6:	e000      	b.n	801c1ea <dir_register+0xda>
 801c1e8:	2301      	movs	r3, #1
 801c1ea:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 801c1ec:	6a39      	ldr	r1, [r7, #32]
 801c1ee:	6878      	ldr	r0, [r7, #4]
 801c1f0:	f7ff fbb6 	bl	801b960 <dir_alloc>
 801c1f4:	4603      	mov	r3, r0
 801c1f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 801c1fa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c1fe:	2b00      	cmp	r3, #0
 801c200:	d148      	bne.n	801c294 <dir_register+0x184>
 801c202:	6a3b      	ldr	r3, [r7, #32]
 801c204:	3b01      	subs	r3, #1
 801c206:	623b      	str	r3, [r7, #32]
 801c208:	6a3b      	ldr	r3, [r7, #32]
 801c20a:	2b00      	cmp	r3, #0
 801c20c:	d042      	beq.n	801c294 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 801c20e:	687b      	ldr	r3, [r7, #4]
 801c210:	695a      	ldr	r2, [r3, #20]
 801c212:	6a3b      	ldr	r3, [r7, #32]
 801c214:	015b      	lsls	r3, r3, #5
 801c216:	1ad3      	subs	r3, r2, r3
 801c218:	4619      	mov	r1, r3
 801c21a:	6878      	ldr	r0, [r7, #4]
 801c21c:	f7ff fa41 	bl	801b6a2 <dir_sdi>
 801c220:	4603      	mov	r3, r0
 801c222:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 801c226:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c22a:	2b00      	cmp	r3, #0
 801c22c:	d132      	bne.n	801c294 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 801c22e:	687b      	ldr	r3, [r7, #4]
 801c230:	3324      	adds	r3, #36	@ 0x24
 801c232:	4618      	mov	r0, r3
 801c234:	f7ff fde4 	bl	801be00 <sum_sfn>
 801c238:	4603      	mov	r3, r0
 801c23a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 801c23c:	687b      	ldr	r3, [r7, #4]
 801c23e:	69db      	ldr	r3, [r3, #28]
 801c240:	4619      	mov	r1, r3
 801c242:	69f8      	ldr	r0, [r7, #28]
 801c244:	f7fe fe4e 	bl	801aee4 <move_window>
 801c248:	4603      	mov	r3, r0
 801c24a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 801c24e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c252:	2b00      	cmp	r3, #0
 801c254:	d11d      	bne.n	801c292 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 801c256:	69fb      	ldr	r3, [r7, #28]
 801c258:	6918      	ldr	r0, [r3, #16]
 801c25a:	687b      	ldr	r3, [r7, #4]
 801c25c:	6a19      	ldr	r1, [r3, #32]
 801c25e:	6a3b      	ldr	r3, [r7, #32]
 801c260:	b2da      	uxtb	r2, r3
 801c262:	7efb      	ldrb	r3, [r7, #27]
 801c264:	f7ff fcd6 	bl	801bc14 <put_lfn>
				fs->wflag = 1;
 801c268:	69fb      	ldr	r3, [r7, #28]
 801c26a:	2201      	movs	r2, #1
 801c26c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 801c26e:	2100      	movs	r1, #0
 801c270:	6878      	ldr	r0, [r7, #4]
 801c272:	f7ff fa9f 	bl	801b7b4 <dir_next>
 801c276:	4603      	mov	r3, r0
 801c278:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 801c27c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c280:	2b00      	cmp	r3, #0
 801c282:	d107      	bne.n	801c294 <dir_register+0x184>
 801c284:	6a3b      	ldr	r3, [r7, #32]
 801c286:	3b01      	subs	r3, #1
 801c288:	623b      	str	r3, [r7, #32]
 801c28a:	6a3b      	ldr	r3, [r7, #32]
 801c28c:	2b00      	cmp	r3, #0
 801c28e:	d1d5      	bne.n	801c23c <dir_register+0x12c>
 801c290:	e000      	b.n	801c294 <dir_register+0x184>
				if (res != FR_OK) break;
 801c292:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801c294:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c298:	2b00      	cmp	r3, #0
 801c29a:	d128      	bne.n	801c2ee <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 801c29c:	687b      	ldr	r3, [r7, #4]
 801c29e:	69db      	ldr	r3, [r3, #28]
 801c2a0:	4619      	mov	r1, r3
 801c2a2:	69f8      	ldr	r0, [r7, #28]
 801c2a4:	f7fe fe1e 	bl	801aee4 <move_window>
 801c2a8:	4603      	mov	r3, r0
 801c2aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 801c2ae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c2b2:	2b00      	cmp	r3, #0
 801c2b4:	d11b      	bne.n	801c2ee <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801c2b6:	687b      	ldr	r3, [r7, #4]
 801c2b8:	6a1b      	ldr	r3, [r3, #32]
 801c2ba:	2220      	movs	r2, #32
 801c2bc:	2100      	movs	r1, #0
 801c2be:	4618      	mov	r0, r3
 801c2c0:	f7fe fc03 	bl	801aaca <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 801c2c4:	687b      	ldr	r3, [r7, #4]
 801c2c6:	6a18      	ldr	r0, [r3, #32]
 801c2c8:	687b      	ldr	r3, [r7, #4]
 801c2ca:	3324      	adds	r3, #36	@ 0x24
 801c2cc:	220b      	movs	r2, #11
 801c2ce:	4619      	mov	r1, r3
 801c2d0:	f7fe fbda 	bl	801aa88 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 801c2d4:	687b      	ldr	r3, [r7, #4]
 801c2d6:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 801c2da:	687b      	ldr	r3, [r7, #4]
 801c2dc:	6a1b      	ldr	r3, [r3, #32]
 801c2de:	330c      	adds	r3, #12
 801c2e0:	f002 0218 	and.w	r2, r2, #24
 801c2e4:	b2d2      	uxtb	r2, r2
 801c2e6:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 801c2e8:	69fb      	ldr	r3, [r7, #28]
 801c2ea:	2201      	movs	r2, #1
 801c2ec:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801c2ee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 801c2f2:	4618      	mov	r0, r3
 801c2f4:	3730      	adds	r7, #48	@ 0x30
 801c2f6:	46bd      	mov	sp, r7
 801c2f8:	bd80      	pop	{r7, pc}
 801c2fa:	bf00      	nop
 801c2fc:	4ec4ec4f 	.word	0x4ec4ec4f

0801c300 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 801c300:	b580      	push	{r7, lr}
 801c302:	b086      	sub	sp, #24
 801c304:	af00      	add	r7, sp, #0
 801c306:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801c308:	687b      	ldr	r3, [r7, #4]
 801c30a:	681b      	ldr	r3, [r3, #0]
 801c30c:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 801c30e:	687b      	ldr	r3, [r7, #4]
 801c310:	695b      	ldr	r3, [r3, #20]
 801c312:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 801c314:	687b      	ldr	r3, [r7, #4]
 801c316:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c318:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c31c:	d007      	beq.n	801c32e <dir_remove+0x2e>
 801c31e:	687b      	ldr	r3, [r7, #4]
 801c320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c322:	4619      	mov	r1, r3
 801c324:	6878      	ldr	r0, [r7, #4]
 801c326:	f7ff f9bc 	bl	801b6a2 <dir_sdi>
 801c32a:	4603      	mov	r3, r0
 801c32c:	e000      	b.n	801c330 <dir_remove+0x30>
 801c32e:	2300      	movs	r3, #0
 801c330:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801c332:	7dfb      	ldrb	r3, [r7, #23]
 801c334:	2b00      	cmp	r3, #0
 801c336:	d128      	bne.n	801c38a <dir_remove+0x8a>
		do {
			res = move_window(fs, dp->sect);
 801c338:	687b      	ldr	r3, [r7, #4]
 801c33a:	69db      	ldr	r3, [r3, #28]
 801c33c:	4619      	mov	r1, r3
 801c33e:	6938      	ldr	r0, [r7, #16]
 801c340:	f7fe fdd0 	bl	801aee4 <move_window>
 801c344:	4603      	mov	r3, r0
 801c346:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801c348:	7dfb      	ldrb	r3, [r7, #23]
 801c34a:	2b00      	cmp	r3, #0
 801c34c:	d115      	bne.n	801c37a <dir_remove+0x7a>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
				dp->dir[XDIR_Type] &= 0x7F;
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 801c34e:	687b      	ldr	r3, [r7, #4]
 801c350:	6a1b      	ldr	r3, [r3, #32]
 801c352:	22e5      	movs	r2, #229	@ 0xe5
 801c354:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 801c356:	693b      	ldr	r3, [r7, #16]
 801c358:	2201      	movs	r2, #1
 801c35a:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 801c35c:	687b      	ldr	r3, [r7, #4]
 801c35e:	695b      	ldr	r3, [r3, #20]
 801c360:	68fa      	ldr	r2, [r7, #12]
 801c362:	429a      	cmp	r2, r3
 801c364:	d90b      	bls.n	801c37e <dir_remove+0x7e>
			res = dir_next(dp, 0);	/* Next entry */
 801c366:	2100      	movs	r1, #0
 801c368:	6878      	ldr	r0, [r7, #4]
 801c36a:	f7ff fa23 	bl	801b7b4 <dir_next>
 801c36e:	4603      	mov	r3, r0
 801c370:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 801c372:	7dfb      	ldrb	r3, [r7, #23]
 801c374:	2b00      	cmp	r3, #0
 801c376:	d0df      	beq.n	801c338 <dir_remove+0x38>
 801c378:	e002      	b.n	801c380 <dir_remove+0x80>
			if (res != FR_OK) break;
 801c37a:	bf00      	nop
 801c37c:	e000      	b.n	801c380 <dir_remove+0x80>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 801c37e:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 801c380:	7dfb      	ldrb	r3, [r7, #23]
 801c382:	2b04      	cmp	r3, #4
 801c384:	d101      	bne.n	801c38a <dir_remove+0x8a>
 801c386:	2302      	movs	r3, #2
 801c388:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 801c38a:	7dfb      	ldrb	r3, [r7, #23]
}
 801c38c:	4618      	mov	r0, r3
 801c38e:	3718      	adds	r7, #24
 801c390:	46bd      	mov	sp, r7
 801c392:	bd80      	pop	{r7, pc}

0801c394 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 801c394:	b580      	push	{r7, lr}
 801c396:	b08a      	sub	sp, #40	@ 0x28
 801c398:	af00      	add	r7, sp, #0
 801c39a:	6078      	str	r0, [r7, #4]
 801c39c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 801c39e:	683b      	ldr	r3, [r7, #0]
 801c3a0:	681b      	ldr	r3, [r3, #0]
 801c3a2:	613b      	str	r3, [r7, #16]
 801c3a4:	687b      	ldr	r3, [r7, #4]
 801c3a6:	681b      	ldr	r3, [r3, #0]
 801c3a8:	691b      	ldr	r3, [r3, #16]
 801c3aa:	60fb      	str	r3, [r7, #12]
 801c3ac:	2300      	movs	r3, #0
 801c3ae:	617b      	str	r3, [r7, #20]
 801c3b0:	697b      	ldr	r3, [r7, #20]
 801c3b2:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 801c3b4:	69bb      	ldr	r3, [r7, #24]
 801c3b6:	1c5a      	adds	r2, r3, #1
 801c3b8:	61ba      	str	r2, [r7, #24]
 801c3ba:	693a      	ldr	r2, [r7, #16]
 801c3bc:	4413      	add	r3, r2
 801c3be:	781b      	ldrb	r3, [r3, #0]
 801c3c0:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 801c3c2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c3c4:	2b1f      	cmp	r3, #31
 801c3c6:	d940      	bls.n	801c44a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 801c3c8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c3ca:	2b2f      	cmp	r3, #47	@ 0x2f
 801c3cc:	d006      	beq.n	801c3dc <create_name+0x48>
 801c3ce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c3d0:	2b5c      	cmp	r3, #92	@ 0x5c
 801c3d2:	d110      	bne.n	801c3f6 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 801c3d4:	e002      	b.n	801c3dc <create_name+0x48>
 801c3d6:	69bb      	ldr	r3, [r7, #24]
 801c3d8:	3301      	adds	r3, #1
 801c3da:	61bb      	str	r3, [r7, #24]
 801c3dc:	693a      	ldr	r2, [r7, #16]
 801c3de:	69bb      	ldr	r3, [r7, #24]
 801c3e0:	4413      	add	r3, r2
 801c3e2:	781b      	ldrb	r3, [r3, #0]
 801c3e4:	2b2f      	cmp	r3, #47	@ 0x2f
 801c3e6:	d0f6      	beq.n	801c3d6 <create_name+0x42>
 801c3e8:	693a      	ldr	r2, [r7, #16]
 801c3ea:	69bb      	ldr	r3, [r7, #24]
 801c3ec:	4413      	add	r3, r2
 801c3ee:	781b      	ldrb	r3, [r3, #0]
 801c3f0:	2b5c      	cmp	r3, #92	@ 0x5c
 801c3f2:	d0f0      	beq.n	801c3d6 <create_name+0x42>
			break;
 801c3f4:	e02a      	b.n	801c44c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 801c3f6:	697b      	ldr	r3, [r7, #20]
 801c3f8:	2bfe      	cmp	r3, #254	@ 0xfe
 801c3fa:	d901      	bls.n	801c400 <create_name+0x6c>
 801c3fc:	2306      	movs	r3, #6
 801c3fe:	e17d      	b.n	801c6fc <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 801c400:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c402:	b2db      	uxtb	r3, r3
 801c404:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 801c406:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c408:	2101      	movs	r1, #1
 801c40a:	4618      	mov	r0, r3
 801c40c:	f001 fa98 	bl	801d940 <ff_convert>
 801c410:	4603      	mov	r3, r0
 801c412:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 801c414:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c416:	2b00      	cmp	r3, #0
 801c418:	d101      	bne.n	801c41e <create_name+0x8a>
 801c41a:	2306      	movs	r3, #6
 801c41c:	e16e      	b.n	801c6fc <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 801c41e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c420:	2b7f      	cmp	r3, #127	@ 0x7f
 801c422:	d809      	bhi.n	801c438 <create_name+0xa4>
 801c424:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c426:	4619      	mov	r1, r3
 801c428:	488d      	ldr	r0, [pc, #564]	@ (801c660 <create_name+0x2cc>)
 801c42a:	f7fe fb90 	bl	801ab4e <chk_chr>
 801c42e:	4603      	mov	r3, r0
 801c430:	2b00      	cmp	r3, #0
 801c432:	d001      	beq.n	801c438 <create_name+0xa4>
 801c434:	2306      	movs	r3, #6
 801c436:	e161      	b.n	801c6fc <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 801c438:	697b      	ldr	r3, [r7, #20]
 801c43a:	1c5a      	adds	r2, r3, #1
 801c43c:	617a      	str	r2, [r7, #20]
 801c43e:	005b      	lsls	r3, r3, #1
 801c440:	68fa      	ldr	r2, [r7, #12]
 801c442:	4413      	add	r3, r2
 801c444:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801c446:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 801c448:	e7b4      	b.n	801c3b4 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 801c44a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 801c44c:	693a      	ldr	r2, [r7, #16]
 801c44e:	69bb      	ldr	r3, [r7, #24]
 801c450:	441a      	add	r2, r3
 801c452:	683b      	ldr	r3, [r7, #0]
 801c454:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801c456:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c458:	2b1f      	cmp	r3, #31
 801c45a:	d801      	bhi.n	801c460 <create_name+0xcc>
 801c45c:	2304      	movs	r3, #4
 801c45e:	e000      	b.n	801c462 <create_name+0xce>
 801c460:	2300      	movs	r3, #0
 801c462:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801c466:	e011      	b.n	801c48c <create_name+0xf8>
		w = lfn[di - 1];
 801c468:	697a      	ldr	r2, [r7, #20]
 801c46a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801c46e:	4413      	add	r3, r2
 801c470:	005b      	lsls	r3, r3, #1
 801c472:	68fa      	ldr	r2, [r7, #12]
 801c474:	4413      	add	r3, r2
 801c476:	881b      	ldrh	r3, [r3, #0]
 801c478:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 801c47a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c47c:	2b20      	cmp	r3, #32
 801c47e:	d002      	beq.n	801c486 <create_name+0xf2>
 801c480:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c482:	2b2e      	cmp	r3, #46	@ 0x2e
 801c484:	d106      	bne.n	801c494 <create_name+0x100>
		di--;
 801c486:	697b      	ldr	r3, [r7, #20]
 801c488:	3b01      	subs	r3, #1
 801c48a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801c48c:	697b      	ldr	r3, [r7, #20]
 801c48e:	2b00      	cmp	r3, #0
 801c490:	d1ea      	bne.n	801c468 <create_name+0xd4>
 801c492:	e000      	b.n	801c496 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 801c494:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 801c496:	697b      	ldr	r3, [r7, #20]
 801c498:	005b      	lsls	r3, r3, #1
 801c49a:	68fa      	ldr	r2, [r7, #12]
 801c49c:	4413      	add	r3, r2
 801c49e:	2200      	movs	r2, #0
 801c4a0:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 801c4a2:	697b      	ldr	r3, [r7, #20]
 801c4a4:	2b00      	cmp	r3, #0
 801c4a6:	d101      	bne.n	801c4ac <create_name+0x118>
 801c4a8:	2306      	movs	r3, #6
 801c4aa:	e127      	b.n	801c6fc <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 801c4ac:	687b      	ldr	r3, [r7, #4]
 801c4ae:	3324      	adds	r3, #36	@ 0x24
 801c4b0:	220b      	movs	r2, #11
 801c4b2:	2120      	movs	r1, #32
 801c4b4:	4618      	mov	r0, r3
 801c4b6:	f7fe fb08 	bl	801aaca <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 801c4ba:	2300      	movs	r3, #0
 801c4bc:	61bb      	str	r3, [r7, #24]
 801c4be:	e002      	b.n	801c4c6 <create_name+0x132>
 801c4c0:	69bb      	ldr	r3, [r7, #24]
 801c4c2:	3301      	adds	r3, #1
 801c4c4:	61bb      	str	r3, [r7, #24]
 801c4c6:	69bb      	ldr	r3, [r7, #24]
 801c4c8:	005b      	lsls	r3, r3, #1
 801c4ca:	68fa      	ldr	r2, [r7, #12]
 801c4cc:	4413      	add	r3, r2
 801c4ce:	881b      	ldrh	r3, [r3, #0]
 801c4d0:	2b20      	cmp	r3, #32
 801c4d2:	d0f5      	beq.n	801c4c0 <create_name+0x12c>
 801c4d4:	69bb      	ldr	r3, [r7, #24]
 801c4d6:	005b      	lsls	r3, r3, #1
 801c4d8:	68fa      	ldr	r2, [r7, #12]
 801c4da:	4413      	add	r3, r2
 801c4dc:	881b      	ldrh	r3, [r3, #0]
 801c4de:	2b2e      	cmp	r3, #46	@ 0x2e
 801c4e0:	d0ee      	beq.n	801c4c0 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 801c4e2:	69bb      	ldr	r3, [r7, #24]
 801c4e4:	2b00      	cmp	r3, #0
 801c4e6:	d009      	beq.n	801c4fc <create_name+0x168>
 801c4e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c4ec:	f043 0303 	orr.w	r3, r3, #3
 801c4f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 801c4f4:	e002      	b.n	801c4fc <create_name+0x168>
 801c4f6:	697b      	ldr	r3, [r7, #20]
 801c4f8:	3b01      	subs	r3, #1
 801c4fa:	617b      	str	r3, [r7, #20]
 801c4fc:	697b      	ldr	r3, [r7, #20]
 801c4fe:	2b00      	cmp	r3, #0
 801c500:	d009      	beq.n	801c516 <create_name+0x182>
 801c502:	697a      	ldr	r2, [r7, #20]
 801c504:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801c508:	4413      	add	r3, r2
 801c50a:	005b      	lsls	r3, r3, #1
 801c50c:	68fa      	ldr	r2, [r7, #12]
 801c50e:	4413      	add	r3, r2
 801c510:	881b      	ldrh	r3, [r3, #0]
 801c512:	2b2e      	cmp	r3, #46	@ 0x2e
 801c514:	d1ef      	bne.n	801c4f6 <create_name+0x162>

	i = b = 0; ni = 8;
 801c516:	2300      	movs	r3, #0
 801c518:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801c51c:	2300      	movs	r3, #0
 801c51e:	623b      	str	r3, [r7, #32]
 801c520:	2308      	movs	r3, #8
 801c522:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 801c524:	69bb      	ldr	r3, [r7, #24]
 801c526:	1c5a      	adds	r2, r3, #1
 801c528:	61ba      	str	r2, [r7, #24]
 801c52a:	005b      	lsls	r3, r3, #1
 801c52c:	68fa      	ldr	r2, [r7, #12]
 801c52e:	4413      	add	r3, r2
 801c530:	881b      	ldrh	r3, [r3, #0]
 801c532:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 801c534:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c536:	2b00      	cmp	r3, #0
 801c538:	f000 8090 	beq.w	801c65c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 801c53c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c53e:	2b20      	cmp	r3, #32
 801c540:	d006      	beq.n	801c550 <create_name+0x1bc>
 801c542:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c544:	2b2e      	cmp	r3, #46	@ 0x2e
 801c546:	d10a      	bne.n	801c55e <create_name+0x1ca>
 801c548:	69ba      	ldr	r2, [r7, #24]
 801c54a:	697b      	ldr	r3, [r7, #20]
 801c54c:	429a      	cmp	r2, r3
 801c54e:	d006      	beq.n	801c55e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 801c550:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c554:	f043 0303 	orr.w	r3, r3, #3
 801c558:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801c55c:	e07d      	b.n	801c65a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 801c55e:	6a3a      	ldr	r2, [r7, #32]
 801c560:	69fb      	ldr	r3, [r7, #28]
 801c562:	429a      	cmp	r2, r3
 801c564:	d203      	bcs.n	801c56e <create_name+0x1da>
 801c566:	69ba      	ldr	r2, [r7, #24]
 801c568:	697b      	ldr	r3, [r7, #20]
 801c56a:	429a      	cmp	r2, r3
 801c56c:	d123      	bne.n	801c5b6 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 801c56e:	69fb      	ldr	r3, [r7, #28]
 801c570:	2b0b      	cmp	r3, #11
 801c572:	d106      	bne.n	801c582 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 801c574:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c578:	f043 0303 	orr.w	r3, r3, #3
 801c57c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801c580:	e075      	b.n	801c66e <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 801c582:	69ba      	ldr	r2, [r7, #24]
 801c584:	697b      	ldr	r3, [r7, #20]
 801c586:	429a      	cmp	r2, r3
 801c588:	d005      	beq.n	801c596 <create_name+0x202>
 801c58a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c58e:	f043 0303 	orr.w	r3, r3, #3
 801c592:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 801c596:	69ba      	ldr	r2, [r7, #24]
 801c598:	697b      	ldr	r3, [r7, #20]
 801c59a:	429a      	cmp	r2, r3
 801c59c:	d866      	bhi.n	801c66c <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 801c59e:	697b      	ldr	r3, [r7, #20]
 801c5a0:	61bb      	str	r3, [r7, #24]
 801c5a2:	2308      	movs	r3, #8
 801c5a4:	623b      	str	r3, [r7, #32]
 801c5a6:	230b      	movs	r3, #11
 801c5a8:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 801c5aa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c5ae:	009b      	lsls	r3, r3, #2
 801c5b0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801c5b4:	e051      	b.n	801c65a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 801c5b6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c5b8:	2b7f      	cmp	r3, #127	@ 0x7f
 801c5ba:	d914      	bls.n	801c5e6 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 801c5bc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c5be:	2100      	movs	r1, #0
 801c5c0:	4618      	mov	r0, r3
 801c5c2:	f001 f9bd 	bl	801d940 <ff_convert>
 801c5c6:	4603      	mov	r3, r0
 801c5c8:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 801c5ca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c5cc:	2b00      	cmp	r3, #0
 801c5ce:	d004      	beq.n	801c5da <create_name+0x246>
 801c5d0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c5d2:	3b80      	subs	r3, #128	@ 0x80
 801c5d4:	4a23      	ldr	r2, [pc, #140]	@ (801c664 <create_name+0x2d0>)
 801c5d6:	5cd3      	ldrb	r3, [r2, r3]
 801c5d8:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 801c5da:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c5de:	f043 0302 	orr.w	r3, r3, #2
 801c5e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 801c5e6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c5e8:	2b00      	cmp	r3, #0
 801c5ea:	d007      	beq.n	801c5fc <create_name+0x268>
 801c5ec:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c5ee:	4619      	mov	r1, r3
 801c5f0:	481d      	ldr	r0, [pc, #116]	@ (801c668 <create_name+0x2d4>)
 801c5f2:	f7fe faac 	bl	801ab4e <chk_chr>
 801c5f6:	4603      	mov	r3, r0
 801c5f8:	2b00      	cmp	r3, #0
 801c5fa:	d008      	beq.n	801c60e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 801c5fc:	235f      	movs	r3, #95	@ 0x5f
 801c5fe:	84bb      	strh	r3, [r7, #36]	@ 0x24
 801c600:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c604:	f043 0303 	orr.w	r3, r3, #3
 801c608:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801c60c:	e01b      	b.n	801c646 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 801c60e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c610:	2b40      	cmp	r3, #64	@ 0x40
 801c612:	d909      	bls.n	801c628 <create_name+0x294>
 801c614:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c616:	2b5a      	cmp	r3, #90	@ 0x5a
 801c618:	d806      	bhi.n	801c628 <create_name+0x294>
					b |= 2;
 801c61a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c61e:	f043 0302 	orr.w	r3, r3, #2
 801c622:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801c626:	e00e      	b.n	801c646 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 801c628:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c62a:	2b60      	cmp	r3, #96	@ 0x60
 801c62c:	d90b      	bls.n	801c646 <create_name+0x2b2>
 801c62e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c630:	2b7a      	cmp	r3, #122	@ 0x7a
 801c632:	d808      	bhi.n	801c646 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 801c634:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c638:	f043 0301 	orr.w	r3, r3, #1
 801c63c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801c640:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c642:	3b20      	subs	r3, #32
 801c644:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 801c646:	6a3b      	ldr	r3, [r7, #32]
 801c648:	1c5a      	adds	r2, r3, #1
 801c64a:	623a      	str	r2, [r7, #32]
 801c64c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801c64e:	b2d1      	uxtb	r1, r2
 801c650:	687a      	ldr	r2, [r7, #4]
 801c652:	4413      	add	r3, r2
 801c654:	460a      	mov	r2, r1
 801c656:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 801c65a:	e763      	b.n	801c524 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 801c65c:	bf00      	nop
 801c65e:	e006      	b.n	801c66e <create_name+0x2da>
 801c660:	0801e53c 	.word	0x0801e53c
 801c664:	0801e5d4 	.word	0x0801e5d4
 801c668:	0801e548 	.word	0x0801e548
			if (si > di) break;			/* No extension */
 801c66c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801c66e:	687b      	ldr	r3, [r7, #4]
 801c670:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 801c674:	2be5      	cmp	r3, #229	@ 0xe5
 801c676:	d103      	bne.n	801c680 <create_name+0x2ec>
 801c678:	687b      	ldr	r3, [r7, #4]
 801c67a:	2205      	movs	r2, #5
 801c67c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 801c680:	69fb      	ldr	r3, [r7, #28]
 801c682:	2b08      	cmp	r3, #8
 801c684:	d104      	bne.n	801c690 <create_name+0x2fc>
 801c686:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c68a:	009b      	lsls	r3, r3, #2
 801c68c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 801c690:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c694:	f003 030c 	and.w	r3, r3, #12
 801c698:	2b0c      	cmp	r3, #12
 801c69a:	d005      	beq.n	801c6a8 <create_name+0x314>
 801c69c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c6a0:	f003 0303 	and.w	r3, r3, #3
 801c6a4:	2b03      	cmp	r3, #3
 801c6a6:	d105      	bne.n	801c6b4 <create_name+0x320>
 801c6a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c6ac:	f043 0302 	orr.w	r3, r3, #2
 801c6b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 801c6b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c6b8:	f003 0302 	and.w	r3, r3, #2
 801c6bc:	2b00      	cmp	r3, #0
 801c6be:	d117      	bne.n	801c6f0 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 801c6c0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c6c4:	f003 0303 	and.w	r3, r3, #3
 801c6c8:	2b01      	cmp	r3, #1
 801c6ca:	d105      	bne.n	801c6d8 <create_name+0x344>
 801c6cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c6d0:	f043 0310 	orr.w	r3, r3, #16
 801c6d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 801c6d8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c6dc:	f003 030c 	and.w	r3, r3, #12
 801c6e0:	2b04      	cmp	r3, #4
 801c6e2:	d105      	bne.n	801c6f0 <create_name+0x35c>
 801c6e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c6e8:	f043 0308 	orr.w	r3, r3, #8
 801c6ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 801c6f0:	687b      	ldr	r3, [r7, #4]
 801c6f2:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801c6f6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 801c6fa:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 801c6fc:	4618      	mov	r0, r3
 801c6fe:	3728      	adds	r7, #40	@ 0x28
 801c700:	46bd      	mov	sp, r7
 801c702:	bd80      	pop	{r7, pc}

0801c704 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 801c704:	b580      	push	{r7, lr}
 801c706:	b086      	sub	sp, #24
 801c708:	af00      	add	r7, sp, #0
 801c70a:	6078      	str	r0, [r7, #4]
 801c70c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801c70e:	687b      	ldr	r3, [r7, #4]
 801c710:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801c712:	693b      	ldr	r3, [r7, #16]
 801c714:	681b      	ldr	r3, [r3, #0]
 801c716:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801c718:	e002      	b.n	801c720 <follow_path+0x1c>
 801c71a:	683b      	ldr	r3, [r7, #0]
 801c71c:	3301      	adds	r3, #1
 801c71e:	603b      	str	r3, [r7, #0]
 801c720:	683b      	ldr	r3, [r7, #0]
 801c722:	781b      	ldrb	r3, [r3, #0]
 801c724:	2b2f      	cmp	r3, #47	@ 0x2f
 801c726:	d0f8      	beq.n	801c71a <follow_path+0x16>
 801c728:	683b      	ldr	r3, [r7, #0]
 801c72a:	781b      	ldrb	r3, [r3, #0]
 801c72c:	2b5c      	cmp	r3, #92	@ 0x5c
 801c72e:	d0f4      	beq.n	801c71a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 801c730:	693b      	ldr	r3, [r7, #16]
 801c732:	2200      	movs	r2, #0
 801c734:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801c736:	683b      	ldr	r3, [r7, #0]
 801c738:	781b      	ldrb	r3, [r3, #0]
 801c73a:	2b1f      	cmp	r3, #31
 801c73c:	d80a      	bhi.n	801c754 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801c73e:	687b      	ldr	r3, [r7, #4]
 801c740:	2280      	movs	r2, #128	@ 0x80
 801c742:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 801c746:	2100      	movs	r1, #0
 801c748:	6878      	ldr	r0, [r7, #4]
 801c74a:	f7fe ffaa 	bl	801b6a2 <dir_sdi>
 801c74e:	4603      	mov	r3, r0
 801c750:	75fb      	strb	r3, [r7, #23]
 801c752:	e048      	b.n	801c7e6 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801c754:	463b      	mov	r3, r7
 801c756:	4619      	mov	r1, r3
 801c758:	6878      	ldr	r0, [r7, #4]
 801c75a:	f7ff fe1b 	bl	801c394 <create_name>
 801c75e:	4603      	mov	r3, r0
 801c760:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801c762:	7dfb      	ldrb	r3, [r7, #23]
 801c764:	2b00      	cmp	r3, #0
 801c766:	d139      	bne.n	801c7dc <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 801c768:	6878      	ldr	r0, [r7, #4]
 801c76a:	f7ff fc11 	bl	801bf90 <dir_find>
 801c76e:	4603      	mov	r3, r0
 801c770:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801c772:	687b      	ldr	r3, [r7, #4]
 801c774:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801c778:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801c77a:	7dfb      	ldrb	r3, [r7, #23]
 801c77c:	2b00      	cmp	r3, #0
 801c77e:	d00a      	beq.n	801c796 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 801c780:	7dfb      	ldrb	r3, [r7, #23]
 801c782:	2b04      	cmp	r3, #4
 801c784:	d12c      	bne.n	801c7e0 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801c786:	7afb      	ldrb	r3, [r7, #11]
 801c788:	f003 0304 	and.w	r3, r3, #4
 801c78c:	2b00      	cmp	r3, #0
 801c78e:	d127      	bne.n	801c7e0 <follow_path+0xdc>
 801c790:	2305      	movs	r3, #5
 801c792:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 801c794:	e024      	b.n	801c7e0 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801c796:	7afb      	ldrb	r3, [r7, #11]
 801c798:	f003 0304 	and.w	r3, r3, #4
 801c79c:	2b00      	cmp	r3, #0
 801c79e:	d121      	bne.n	801c7e4 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801c7a0:	693b      	ldr	r3, [r7, #16]
 801c7a2:	799b      	ldrb	r3, [r3, #6]
 801c7a4:	f003 0310 	and.w	r3, r3, #16
 801c7a8:	2b00      	cmp	r3, #0
 801c7aa:	d102      	bne.n	801c7b2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 801c7ac:	2305      	movs	r3, #5
 801c7ae:	75fb      	strb	r3, [r7, #23]
 801c7b0:	e019      	b.n	801c7e6 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801c7b2:	68fb      	ldr	r3, [r7, #12]
 801c7b4:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801c7b8:	687b      	ldr	r3, [r7, #4]
 801c7ba:	695b      	ldr	r3, [r3, #20]
 801c7bc:	68fa      	ldr	r2, [r7, #12]
 801c7be:	8992      	ldrh	r2, [r2, #12]
 801c7c0:	fbb3 f0f2 	udiv	r0, r3, r2
 801c7c4:	fb00 f202 	mul.w	r2, r0, r2
 801c7c8:	1a9b      	subs	r3, r3, r2
 801c7ca:	440b      	add	r3, r1
 801c7cc:	4619      	mov	r1, r3
 801c7ce:	68f8      	ldr	r0, [r7, #12]
 801c7d0:	f7ff f90d 	bl	801b9ee <ld_clust>
 801c7d4:	4602      	mov	r2, r0
 801c7d6:	693b      	ldr	r3, [r7, #16]
 801c7d8:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801c7da:	e7bb      	b.n	801c754 <follow_path+0x50>
			if (res != FR_OK) break;
 801c7dc:	bf00      	nop
 801c7de:	e002      	b.n	801c7e6 <follow_path+0xe2>
				break;
 801c7e0:	bf00      	nop
 801c7e2:	e000      	b.n	801c7e6 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801c7e4:	bf00      	nop
			}
		}
	}

	return res;
 801c7e6:	7dfb      	ldrb	r3, [r7, #23]
}
 801c7e8:	4618      	mov	r0, r3
 801c7ea:	3718      	adds	r7, #24
 801c7ec:	46bd      	mov	sp, r7
 801c7ee:	bd80      	pop	{r7, pc}

0801c7f0 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801c7f0:	b480      	push	{r7}
 801c7f2:	b087      	sub	sp, #28
 801c7f4:	af00      	add	r7, sp, #0
 801c7f6:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801c7f8:	f04f 33ff 	mov.w	r3, #4294967295
 801c7fc:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801c7fe:	687b      	ldr	r3, [r7, #4]
 801c800:	681b      	ldr	r3, [r3, #0]
 801c802:	2b00      	cmp	r3, #0
 801c804:	d031      	beq.n	801c86a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801c806:	687b      	ldr	r3, [r7, #4]
 801c808:	681b      	ldr	r3, [r3, #0]
 801c80a:	617b      	str	r3, [r7, #20]
 801c80c:	e002      	b.n	801c814 <get_ldnumber+0x24>
 801c80e:	697b      	ldr	r3, [r7, #20]
 801c810:	3301      	adds	r3, #1
 801c812:	617b      	str	r3, [r7, #20]
 801c814:	697b      	ldr	r3, [r7, #20]
 801c816:	781b      	ldrb	r3, [r3, #0]
 801c818:	2b1f      	cmp	r3, #31
 801c81a:	d903      	bls.n	801c824 <get_ldnumber+0x34>
 801c81c:	697b      	ldr	r3, [r7, #20]
 801c81e:	781b      	ldrb	r3, [r3, #0]
 801c820:	2b3a      	cmp	r3, #58	@ 0x3a
 801c822:	d1f4      	bne.n	801c80e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801c824:	697b      	ldr	r3, [r7, #20]
 801c826:	781b      	ldrb	r3, [r3, #0]
 801c828:	2b3a      	cmp	r3, #58	@ 0x3a
 801c82a:	d11c      	bne.n	801c866 <get_ldnumber+0x76>
			tp = *path;
 801c82c:	687b      	ldr	r3, [r7, #4]
 801c82e:	681b      	ldr	r3, [r3, #0]
 801c830:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801c832:	68fb      	ldr	r3, [r7, #12]
 801c834:	1c5a      	adds	r2, r3, #1
 801c836:	60fa      	str	r2, [r7, #12]
 801c838:	781b      	ldrb	r3, [r3, #0]
 801c83a:	3b30      	subs	r3, #48	@ 0x30
 801c83c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801c83e:	68bb      	ldr	r3, [r7, #8]
 801c840:	2b09      	cmp	r3, #9
 801c842:	d80e      	bhi.n	801c862 <get_ldnumber+0x72>
 801c844:	68fa      	ldr	r2, [r7, #12]
 801c846:	697b      	ldr	r3, [r7, #20]
 801c848:	429a      	cmp	r2, r3
 801c84a:	d10a      	bne.n	801c862 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801c84c:	68bb      	ldr	r3, [r7, #8]
 801c84e:	2b00      	cmp	r3, #0
 801c850:	d107      	bne.n	801c862 <get_ldnumber+0x72>
					vol = (int)i;
 801c852:	68bb      	ldr	r3, [r7, #8]
 801c854:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801c856:	697b      	ldr	r3, [r7, #20]
 801c858:	3301      	adds	r3, #1
 801c85a:	617b      	str	r3, [r7, #20]
 801c85c:	687b      	ldr	r3, [r7, #4]
 801c85e:	697a      	ldr	r2, [r7, #20]
 801c860:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801c862:	693b      	ldr	r3, [r7, #16]
 801c864:	e002      	b.n	801c86c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801c866:	2300      	movs	r3, #0
 801c868:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 801c86a:	693b      	ldr	r3, [r7, #16]
}
 801c86c:	4618      	mov	r0, r3
 801c86e:	371c      	adds	r7, #28
 801c870:	46bd      	mov	sp, r7
 801c872:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c876:	4770      	bx	lr

0801c878 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 801c878:	b580      	push	{r7, lr}
 801c87a:	b082      	sub	sp, #8
 801c87c:	af00      	add	r7, sp, #0
 801c87e:	6078      	str	r0, [r7, #4]
 801c880:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801c882:	687b      	ldr	r3, [r7, #4]
 801c884:	2200      	movs	r2, #0
 801c886:	70da      	strb	r2, [r3, #3]
 801c888:	687b      	ldr	r3, [r7, #4]
 801c88a:	f04f 32ff 	mov.w	r2, #4294967295
 801c88e:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801c890:	6839      	ldr	r1, [r7, #0]
 801c892:	6878      	ldr	r0, [r7, #4]
 801c894:	f7fe fb26 	bl	801aee4 <move_window>
 801c898:	4603      	mov	r3, r0
 801c89a:	2b00      	cmp	r3, #0
 801c89c:	d001      	beq.n	801c8a2 <check_fs+0x2a>
 801c89e:	2304      	movs	r3, #4
 801c8a0:	e038      	b.n	801c914 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801c8a2:	687b      	ldr	r3, [r7, #4]
 801c8a4:	3338      	adds	r3, #56	@ 0x38
 801c8a6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801c8aa:	4618      	mov	r0, r3
 801c8ac:	f7fe f86a 	bl	801a984 <ld_word>
 801c8b0:	4603      	mov	r3, r0
 801c8b2:	461a      	mov	r2, r3
 801c8b4:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 801c8b8:	429a      	cmp	r2, r3
 801c8ba:	d001      	beq.n	801c8c0 <check_fs+0x48>
 801c8bc:	2303      	movs	r3, #3
 801c8be:	e029      	b.n	801c914 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801c8c0:	687b      	ldr	r3, [r7, #4]
 801c8c2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801c8c6:	2be9      	cmp	r3, #233	@ 0xe9
 801c8c8:	d009      	beq.n	801c8de <check_fs+0x66>
 801c8ca:	687b      	ldr	r3, [r7, #4]
 801c8cc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801c8d0:	2beb      	cmp	r3, #235	@ 0xeb
 801c8d2:	d11e      	bne.n	801c912 <check_fs+0x9a>
 801c8d4:	687b      	ldr	r3, [r7, #4]
 801c8d6:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 801c8da:	2b90      	cmp	r3, #144	@ 0x90
 801c8dc:	d119      	bne.n	801c912 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801c8de:	687b      	ldr	r3, [r7, #4]
 801c8e0:	3338      	adds	r3, #56	@ 0x38
 801c8e2:	3336      	adds	r3, #54	@ 0x36
 801c8e4:	4618      	mov	r0, r3
 801c8e6:	f7fe f865 	bl	801a9b4 <ld_dword>
 801c8ea:	4603      	mov	r3, r0
 801c8ec:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 801c8f0:	4a0a      	ldr	r2, [pc, #40]	@ (801c91c <check_fs+0xa4>)
 801c8f2:	4293      	cmp	r3, r2
 801c8f4:	d101      	bne.n	801c8fa <check_fs+0x82>
 801c8f6:	2300      	movs	r3, #0
 801c8f8:	e00c      	b.n	801c914 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801c8fa:	687b      	ldr	r3, [r7, #4]
 801c8fc:	3338      	adds	r3, #56	@ 0x38
 801c8fe:	3352      	adds	r3, #82	@ 0x52
 801c900:	4618      	mov	r0, r3
 801c902:	f7fe f857 	bl	801a9b4 <ld_dword>
 801c906:	4603      	mov	r3, r0
 801c908:	4a05      	ldr	r2, [pc, #20]	@ (801c920 <check_fs+0xa8>)
 801c90a:	4293      	cmp	r3, r2
 801c90c:	d101      	bne.n	801c912 <check_fs+0x9a>
 801c90e:	2300      	movs	r3, #0
 801c910:	e000      	b.n	801c914 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801c912:	2302      	movs	r3, #2
}
 801c914:	4618      	mov	r0, r3
 801c916:	3708      	adds	r7, #8
 801c918:	46bd      	mov	sp, r7
 801c91a:	bd80      	pop	{r7, pc}
 801c91c:	00544146 	.word	0x00544146
 801c920:	33544146 	.word	0x33544146

0801c924 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 801c924:	b580      	push	{r7, lr}
 801c926:	b096      	sub	sp, #88	@ 0x58
 801c928:	af00      	add	r7, sp, #0
 801c92a:	60f8      	str	r0, [r7, #12]
 801c92c:	60b9      	str	r1, [r7, #8]
 801c92e:	4613      	mov	r3, r2
 801c930:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801c932:	68bb      	ldr	r3, [r7, #8]
 801c934:	2200      	movs	r2, #0
 801c936:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 801c938:	68f8      	ldr	r0, [r7, #12]
 801c93a:	f7ff ff59 	bl	801c7f0 <get_ldnumber>
 801c93e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801c940:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c942:	2b00      	cmp	r3, #0
 801c944:	da01      	bge.n	801c94a <find_volume+0x26>
 801c946:	230b      	movs	r3, #11
 801c948:	e265      	b.n	801ce16 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801c94a:	4a9f      	ldr	r2, [pc, #636]	@ (801cbc8 <find_volume+0x2a4>)
 801c94c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c94e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801c952:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801c954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c956:	2b00      	cmp	r3, #0
 801c958:	d101      	bne.n	801c95e <find_volume+0x3a>
 801c95a:	230c      	movs	r3, #12
 801c95c:	e25b      	b.n	801ce16 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801c95e:	68bb      	ldr	r3, [r7, #8]
 801c960:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801c962:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801c964:	79fb      	ldrb	r3, [r7, #7]
 801c966:	f023 0301 	bic.w	r3, r3, #1
 801c96a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 801c96c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c96e:	781b      	ldrb	r3, [r3, #0]
 801c970:	2b00      	cmp	r3, #0
 801c972:	d01a      	beq.n	801c9aa <find_volume+0x86>
		stat = disk_status(fs->drv);
 801c974:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c976:	785b      	ldrb	r3, [r3, #1]
 801c978:	4618      	mov	r0, r3
 801c97a:	f7fd ff63 	bl	801a844 <disk_status>
 801c97e:	4603      	mov	r3, r0
 801c980:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801c984:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801c988:	f003 0301 	and.w	r3, r3, #1
 801c98c:	2b00      	cmp	r3, #0
 801c98e:	d10c      	bne.n	801c9aa <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801c990:	79fb      	ldrb	r3, [r7, #7]
 801c992:	2b00      	cmp	r3, #0
 801c994:	d007      	beq.n	801c9a6 <find_volume+0x82>
 801c996:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801c99a:	f003 0304 	and.w	r3, r3, #4
 801c99e:	2b00      	cmp	r3, #0
 801c9a0:	d001      	beq.n	801c9a6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801c9a2:	230a      	movs	r3, #10
 801c9a4:	e237      	b.n	801ce16 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 801c9a6:	2300      	movs	r3, #0
 801c9a8:	e235      	b.n	801ce16 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801c9aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c9ac:	2200      	movs	r2, #0
 801c9ae:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801c9b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c9b2:	b2da      	uxtb	r2, r3
 801c9b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c9b6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 801c9b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c9ba:	785b      	ldrb	r3, [r3, #1]
 801c9bc:	4618      	mov	r0, r3
 801c9be:	f7fd ff5b 	bl	801a878 <disk_initialize>
 801c9c2:	4603      	mov	r3, r0
 801c9c4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 801c9c8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801c9cc:	f003 0301 	and.w	r3, r3, #1
 801c9d0:	2b00      	cmp	r3, #0
 801c9d2:	d001      	beq.n	801c9d8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 801c9d4:	2303      	movs	r3, #3
 801c9d6:	e21e      	b.n	801ce16 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 801c9d8:	79fb      	ldrb	r3, [r7, #7]
 801c9da:	2b00      	cmp	r3, #0
 801c9dc:	d007      	beq.n	801c9ee <find_volume+0xca>
 801c9de:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801c9e2:	f003 0304 	and.w	r3, r3, #4
 801c9e6:	2b00      	cmp	r3, #0
 801c9e8:	d001      	beq.n	801c9ee <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 801c9ea:	230a      	movs	r3, #10
 801c9ec:	e213      	b.n	801ce16 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 801c9ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c9f0:	7858      	ldrb	r0, [r3, #1]
 801c9f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c9f4:	330c      	adds	r3, #12
 801c9f6:	461a      	mov	r2, r3
 801c9f8:	2102      	movs	r1, #2
 801c9fa:	f7fd ffa5 	bl	801a948 <disk_ioctl>
 801c9fe:	4603      	mov	r3, r0
 801ca00:	2b00      	cmp	r3, #0
 801ca02:	d001      	beq.n	801ca08 <find_volume+0xe4>
 801ca04:	2301      	movs	r3, #1
 801ca06:	e206      	b.n	801ce16 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 801ca08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ca0a:	899b      	ldrh	r3, [r3, #12]
 801ca0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801ca10:	d80d      	bhi.n	801ca2e <find_volume+0x10a>
 801ca12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ca14:	899b      	ldrh	r3, [r3, #12]
 801ca16:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801ca1a:	d308      	bcc.n	801ca2e <find_volume+0x10a>
 801ca1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ca1e:	899b      	ldrh	r3, [r3, #12]
 801ca20:	461a      	mov	r2, r3
 801ca22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ca24:	899b      	ldrh	r3, [r3, #12]
 801ca26:	3b01      	subs	r3, #1
 801ca28:	4013      	ands	r3, r2
 801ca2a:	2b00      	cmp	r3, #0
 801ca2c:	d001      	beq.n	801ca32 <find_volume+0x10e>
 801ca2e:	2301      	movs	r3, #1
 801ca30:	e1f1      	b.n	801ce16 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801ca32:	2300      	movs	r3, #0
 801ca34:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801ca36:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801ca38:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801ca3a:	f7ff ff1d 	bl	801c878 <check_fs>
 801ca3e:	4603      	mov	r3, r0
 801ca40:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 801ca44:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801ca48:	2b02      	cmp	r3, #2
 801ca4a:	d149      	bne.n	801cae0 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801ca4c:	2300      	movs	r3, #0
 801ca4e:	643b      	str	r3, [r7, #64]	@ 0x40
 801ca50:	e01e      	b.n	801ca90 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801ca52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ca54:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 801ca58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801ca5a:	011b      	lsls	r3, r3, #4
 801ca5c:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 801ca60:	4413      	add	r3, r2
 801ca62:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801ca64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ca66:	3304      	adds	r3, #4
 801ca68:	781b      	ldrb	r3, [r3, #0]
 801ca6a:	2b00      	cmp	r3, #0
 801ca6c:	d006      	beq.n	801ca7c <find_volume+0x158>
 801ca6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ca70:	3308      	adds	r3, #8
 801ca72:	4618      	mov	r0, r3
 801ca74:	f7fd ff9e 	bl	801a9b4 <ld_dword>
 801ca78:	4602      	mov	r2, r0
 801ca7a:	e000      	b.n	801ca7e <find_volume+0x15a>
 801ca7c:	2200      	movs	r2, #0
 801ca7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801ca80:	009b      	lsls	r3, r3, #2
 801ca82:	3358      	adds	r3, #88	@ 0x58
 801ca84:	443b      	add	r3, r7
 801ca86:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801ca8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801ca8c:	3301      	adds	r3, #1
 801ca8e:	643b      	str	r3, [r7, #64]	@ 0x40
 801ca90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801ca92:	2b03      	cmp	r3, #3
 801ca94:	d9dd      	bls.n	801ca52 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801ca96:	2300      	movs	r3, #0
 801ca98:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 801ca9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801ca9c:	2b00      	cmp	r3, #0
 801ca9e:	d002      	beq.n	801caa6 <find_volume+0x182>
 801caa0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801caa2:	3b01      	subs	r3, #1
 801caa4:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801caa6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801caa8:	009b      	lsls	r3, r3, #2
 801caaa:	3358      	adds	r3, #88	@ 0x58
 801caac:	443b      	add	r3, r7
 801caae:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801cab2:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801cab4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801cab6:	2b00      	cmp	r3, #0
 801cab8:	d005      	beq.n	801cac6 <find_volume+0x1a2>
 801caba:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801cabc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801cabe:	f7ff fedb 	bl	801c878 <check_fs>
 801cac2:	4603      	mov	r3, r0
 801cac4:	e000      	b.n	801cac8 <find_volume+0x1a4>
 801cac6:	2303      	movs	r3, #3
 801cac8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801cacc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801cad0:	2b01      	cmp	r3, #1
 801cad2:	d905      	bls.n	801cae0 <find_volume+0x1bc>
 801cad4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801cad6:	3301      	adds	r3, #1
 801cad8:	643b      	str	r3, [r7, #64]	@ 0x40
 801cada:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801cadc:	2b03      	cmp	r3, #3
 801cade:	d9e2      	bls.n	801caa6 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801cae0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801cae4:	2b04      	cmp	r3, #4
 801cae6:	d101      	bne.n	801caec <find_volume+0x1c8>
 801cae8:	2301      	movs	r3, #1
 801caea:	e194      	b.n	801ce16 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 801caec:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801caf0:	2b01      	cmp	r3, #1
 801caf2:	d901      	bls.n	801caf8 <find_volume+0x1d4>
 801caf4:	230d      	movs	r3, #13
 801caf6:	e18e      	b.n	801ce16 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801caf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cafa:	3338      	adds	r3, #56	@ 0x38
 801cafc:	330b      	adds	r3, #11
 801cafe:	4618      	mov	r0, r3
 801cb00:	f7fd ff40 	bl	801a984 <ld_word>
 801cb04:	4603      	mov	r3, r0
 801cb06:	461a      	mov	r2, r3
 801cb08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cb0a:	899b      	ldrh	r3, [r3, #12]
 801cb0c:	429a      	cmp	r2, r3
 801cb0e:	d001      	beq.n	801cb14 <find_volume+0x1f0>
 801cb10:	230d      	movs	r3, #13
 801cb12:	e180      	b.n	801ce16 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 801cb14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cb16:	3338      	adds	r3, #56	@ 0x38
 801cb18:	3316      	adds	r3, #22
 801cb1a:	4618      	mov	r0, r3
 801cb1c:	f7fd ff32 	bl	801a984 <ld_word>
 801cb20:	4603      	mov	r3, r0
 801cb22:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801cb24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801cb26:	2b00      	cmp	r3, #0
 801cb28:	d106      	bne.n	801cb38 <find_volume+0x214>
 801cb2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cb2c:	3338      	adds	r3, #56	@ 0x38
 801cb2e:	3324      	adds	r3, #36	@ 0x24
 801cb30:	4618      	mov	r0, r3
 801cb32:	f7fd ff3f 	bl	801a9b4 <ld_dword>
 801cb36:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 801cb38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cb3a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801cb3c:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801cb3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cb40:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 801cb44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cb46:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801cb48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cb4a:	789b      	ldrb	r3, [r3, #2]
 801cb4c:	2b01      	cmp	r3, #1
 801cb4e:	d005      	beq.n	801cb5c <find_volume+0x238>
 801cb50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cb52:	789b      	ldrb	r3, [r3, #2]
 801cb54:	2b02      	cmp	r3, #2
 801cb56:	d001      	beq.n	801cb5c <find_volume+0x238>
 801cb58:	230d      	movs	r3, #13
 801cb5a:	e15c      	b.n	801ce16 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801cb5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cb5e:	789b      	ldrb	r3, [r3, #2]
 801cb60:	461a      	mov	r2, r3
 801cb62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801cb64:	fb02 f303 	mul.w	r3, r2, r3
 801cb68:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801cb6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cb6c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801cb70:	461a      	mov	r2, r3
 801cb72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cb74:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801cb76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cb78:	895b      	ldrh	r3, [r3, #10]
 801cb7a:	2b00      	cmp	r3, #0
 801cb7c:	d008      	beq.n	801cb90 <find_volume+0x26c>
 801cb7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cb80:	895b      	ldrh	r3, [r3, #10]
 801cb82:	461a      	mov	r2, r3
 801cb84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cb86:	895b      	ldrh	r3, [r3, #10]
 801cb88:	3b01      	subs	r3, #1
 801cb8a:	4013      	ands	r3, r2
 801cb8c:	2b00      	cmp	r3, #0
 801cb8e:	d001      	beq.n	801cb94 <find_volume+0x270>
 801cb90:	230d      	movs	r3, #13
 801cb92:	e140      	b.n	801ce16 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801cb94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cb96:	3338      	adds	r3, #56	@ 0x38
 801cb98:	3311      	adds	r3, #17
 801cb9a:	4618      	mov	r0, r3
 801cb9c:	f7fd fef2 	bl	801a984 <ld_word>
 801cba0:	4603      	mov	r3, r0
 801cba2:	461a      	mov	r2, r3
 801cba4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cba6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801cba8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cbaa:	891b      	ldrh	r3, [r3, #8]
 801cbac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801cbae:	8992      	ldrh	r2, [r2, #12]
 801cbb0:	0952      	lsrs	r2, r2, #5
 801cbb2:	b292      	uxth	r2, r2
 801cbb4:	fbb3 f1f2 	udiv	r1, r3, r2
 801cbb8:	fb01 f202 	mul.w	r2, r1, r2
 801cbbc:	1a9b      	subs	r3, r3, r2
 801cbbe:	b29b      	uxth	r3, r3
 801cbc0:	2b00      	cmp	r3, #0
 801cbc2:	d003      	beq.n	801cbcc <find_volume+0x2a8>
 801cbc4:	230d      	movs	r3, #13
 801cbc6:	e126      	b.n	801ce16 <find_volume+0x4f2>
 801cbc8:	24000550 	.word	0x24000550

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801cbcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cbce:	3338      	adds	r3, #56	@ 0x38
 801cbd0:	3313      	adds	r3, #19
 801cbd2:	4618      	mov	r0, r3
 801cbd4:	f7fd fed6 	bl	801a984 <ld_word>
 801cbd8:	4603      	mov	r3, r0
 801cbda:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801cbdc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801cbde:	2b00      	cmp	r3, #0
 801cbe0:	d106      	bne.n	801cbf0 <find_volume+0x2cc>
 801cbe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cbe4:	3338      	adds	r3, #56	@ 0x38
 801cbe6:	3320      	adds	r3, #32
 801cbe8:	4618      	mov	r0, r3
 801cbea:	f7fd fee3 	bl	801a9b4 <ld_dword>
 801cbee:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801cbf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cbf2:	3338      	adds	r3, #56	@ 0x38
 801cbf4:	330e      	adds	r3, #14
 801cbf6:	4618      	mov	r0, r3
 801cbf8:	f7fd fec4 	bl	801a984 <ld_word>
 801cbfc:	4603      	mov	r3, r0
 801cbfe:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801cc00:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801cc02:	2b00      	cmp	r3, #0
 801cc04:	d101      	bne.n	801cc0a <find_volume+0x2e6>
 801cc06:	230d      	movs	r3, #13
 801cc08:	e105      	b.n	801ce16 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801cc0a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801cc0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801cc0e:	4413      	add	r3, r2
 801cc10:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801cc12:	8911      	ldrh	r1, [r2, #8]
 801cc14:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801cc16:	8992      	ldrh	r2, [r2, #12]
 801cc18:	0952      	lsrs	r2, r2, #5
 801cc1a:	b292      	uxth	r2, r2
 801cc1c:	fbb1 f2f2 	udiv	r2, r1, r2
 801cc20:	b292      	uxth	r2, r2
 801cc22:	4413      	add	r3, r2
 801cc24:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801cc26:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801cc28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cc2a:	429a      	cmp	r2, r3
 801cc2c:	d201      	bcs.n	801cc32 <find_volume+0x30e>
 801cc2e:	230d      	movs	r3, #13
 801cc30:	e0f1      	b.n	801ce16 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801cc32:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801cc34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cc36:	1ad3      	subs	r3, r2, r3
 801cc38:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801cc3a:	8952      	ldrh	r2, [r2, #10]
 801cc3c:	fbb3 f3f2 	udiv	r3, r3, r2
 801cc40:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801cc42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cc44:	2b00      	cmp	r3, #0
 801cc46:	d101      	bne.n	801cc4c <find_volume+0x328>
 801cc48:	230d      	movs	r3, #13
 801cc4a:	e0e4      	b.n	801ce16 <find_volume+0x4f2>
		fmt = FS_FAT32;
 801cc4c:	2303      	movs	r3, #3
 801cc4e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801cc52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cc54:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 801cc58:	4293      	cmp	r3, r2
 801cc5a:	d802      	bhi.n	801cc62 <find_volume+0x33e>
 801cc5c:	2302      	movs	r3, #2
 801cc5e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801cc62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cc64:	f640 72f5 	movw	r2, #4085	@ 0xff5
 801cc68:	4293      	cmp	r3, r2
 801cc6a:	d802      	bhi.n	801cc72 <find_volume+0x34e>
 801cc6c:	2301      	movs	r3, #1
 801cc6e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801cc72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cc74:	1c9a      	adds	r2, r3, #2
 801cc76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cc78:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 801cc7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cc7c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801cc7e:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801cc80:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801cc82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801cc84:	441a      	add	r2, r3
 801cc86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cc88:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 801cc8a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801cc8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cc8e:	441a      	add	r2, r3
 801cc90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cc92:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 801cc94:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801cc98:	2b03      	cmp	r3, #3
 801cc9a:	d11e      	bne.n	801ccda <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801cc9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cc9e:	3338      	adds	r3, #56	@ 0x38
 801cca0:	332a      	adds	r3, #42	@ 0x2a
 801cca2:	4618      	mov	r0, r3
 801cca4:	f7fd fe6e 	bl	801a984 <ld_word>
 801cca8:	4603      	mov	r3, r0
 801ccaa:	2b00      	cmp	r3, #0
 801ccac:	d001      	beq.n	801ccb2 <find_volume+0x38e>
 801ccae:	230d      	movs	r3, #13
 801ccb0:	e0b1      	b.n	801ce16 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801ccb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ccb4:	891b      	ldrh	r3, [r3, #8]
 801ccb6:	2b00      	cmp	r3, #0
 801ccb8:	d001      	beq.n	801ccbe <find_volume+0x39a>
 801ccba:	230d      	movs	r3, #13
 801ccbc:	e0ab      	b.n	801ce16 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801ccbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ccc0:	3338      	adds	r3, #56	@ 0x38
 801ccc2:	332c      	adds	r3, #44	@ 0x2c
 801ccc4:	4618      	mov	r0, r3
 801ccc6:	f7fd fe75 	bl	801a9b4 <ld_dword>
 801ccca:	4602      	mov	r2, r0
 801cccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ccce:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801ccd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ccd2:	69db      	ldr	r3, [r3, #28]
 801ccd4:	009b      	lsls	r3, r3, #2
 801ccd6:	647b      	str	r3, [r7, #68]	@ 0x44
 801ccd8:	e01f      	b.n	801cd1a <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801ccda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ccdc:	891b      	ldrh	r3, [r3, #8]
 801ccde:	2b00      	cmp	r3, #0
 801cce0:	d101      	bne.n	801cce6 <find_volume+0x3c2>
 801cce2:	230d      	movs	r3, #13
 801cce4:	e097      	b.n	801ce16 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801cce6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cce8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801ccea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ccec:	441a      	add	r2, r3
 801ccee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ccf0:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801ccf2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801ccf6:	2b02      	cmp	r3, #2
 801ccf8:	d103      	bne.n	801cd02 <find_volume+0x3de>
 801ccfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ccfc:	69db      	ldr	r3, [r3, #28]
 801ccfe:	005b      	lsls	r3, r3, #1
 801cd00:	e00a      	b.n	801cd18 <find_volume+0x3f4>
 801cd02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cd04:	69da      	ldr	r2, [r3, #28]
 801cd06:	4613      	mov	r3, r2
 801cd08:	005b      	lsls	r3, r3, #1
 801cd0a:	4413      	add	r3, r2
 801cd0c:	085a      	lsrs	r2, r3, #1
 801cd0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cd10:	69db      	ldr	r3, [r3, #28]
 801cd12:	f003 0301 	and.w	r3, r3, #1
 801cd16:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801cd18:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801cd1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cd1c:	6a1a      	ldr	r2, [r3, #32]
 801cd1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cd20:	899b      	ldrh	r3, [r3, #12]
 801cd22:	4619      	mov	r1, r3
 801cd24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801cd26:	440b      	add	r3, r1
 801cd28:	3b01      	subs	r3, #1
 801cd2a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801cd2c:	8989      	ldrh	r1, [r1, #12]
 801cd2e:	fbb3 f3f1 	udiv	r3, r3, r1
 801cd32:	429a      	cmp	r2, r3
 801cd34:	d201      	bcs.n	801cd3a <find_volume+0x416>
 801cd36:	230d      	movs	r3, #13
 801cd38:	e06d      	b.n	801ce16 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801cd3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cd3c:	f04f 32ff 	mov.w	r2, #4294967295
 801cd40:	619a      	str	r2, [r3, #24]
 801cd42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cd44:	699a      	ldr	r2, [r3, #24]
 801cd46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cd48:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 801cd4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cd4c:	2280      	movs	r2, #128	@ 0x80
 801cd4e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801cd50:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801cd54:	2b03      	cmp	r3, #3
 801cd56:	d149      	bne.n	801cdec <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801cd58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cd5a:	3338      	adds	r3, #56	@ 0x38
 801cd5c:	3330      	adds	r3, #48	@ 0x30
 801cd5e:	4618      	mov	r0, r3
 801cd60:	f7fd fe10 	bl	801a984 <ld_word>
 801cd64:	4603      	mov	r3, r0
 801cd66:	2b01      	cmp	r3, #1
 801cd68:	d140      	bne.n	801cdec <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 801cd6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801cd6c:	3301      	adds	r3, #1
 801cd6e:	4619      	mov	r1, r3
 801cd70:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801cd72:	f7fe f8b7 	bl	801aee4 <move_window>
 801cd76:	4603      	mov	r3, r0
 801cd78:	2b00      	cmp	r3, #0
 801cd7a:	d137      	bne.n	801cdec <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 801cd7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cd7e:	2200      	movs	r2, #0
 801cd80:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801cd82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cd84:	3338      	adds	r3, #56	@ 0x38
 801cd86:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801cd8a:	4618      	mov	r0, r3
 801cd8c:	f7fd fdfa 	bl	801a984 <ld_word>
 801cd90:	4603      	mov	r3, r0
 801cd92:	461a      	mov	r2, r3
 801cd94:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 801cd98:	429a      	cmp	r2, r3
 801cd9a:	d127      	bne.n	801cdec <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801cd9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cd9e:	3338      	adds	r3, #56	@ 0x38
 801cda0:	4618      	mov	r0, r3
 801cda2:	f7fd fe07 	bl	801a9b4 <ld_dword>
 801cda6:	4603      	mov	r3, r0
 801cda8:	4a1d      	ldr	r2, [pc, #116]	@ (801ce20 <find_volume+0x4fc>)
 801cdaa:	4293      	cmp	r3, r2
 801cdac:	d11e      	bne.n	801cdec <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801cdae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cdb0:	3338      	adds	r3, #56	@ 0x38
 801cdb2:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 801cdb6:	4618      	mov	r0, r3
 801cdb8:	f7fd fdfc 	bl	801a9b4 <ld_dword>
 801cdbc:	4603      	mov	r3, r0
 801cdbe:	4a19      	ldr	r2, [pc, #100]	@ (801ce24 <find_volume+0x500>)
 801cdc0:	4293      	cmp	r3, r2
 801cdc2:	d113      	bne.n	801cdec <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801cdc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cdc6:	3338      	adds	r3, #56	@ 0x38
 801cdc8:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 801cdcc:	4618      	mov	r0, r3
 801cdce:	f7fd fdf1 	bl	801a9b4 <ld_dword>
 801cdd2:	4602      	mov	r2, r0
 801cdd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cdd6:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801cdd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cdda:	3338      	adds	r3, #56	@ 0x38
 801cddc:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 801cde0:	4618      	mov	r0, r3
 801cde2:	f7fd fde7 	bl	801a9b4 <ld_dword>
 801cde6:	4602      	mov	r2, r0
 801cde8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cdea:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801cdec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cdee:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 801cdf2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801cdf4:	4b0c      	ldr	r3, [pc, #48]	@ (801ce28 <find_volume+0x504>)
 801cdf6:	881b      	ldrh	r3, [r3, #0]
 801cdf8:	3301      	adds	r3, #1
 801cdfa:	b29a      	uxth	r2, r3
 801cdfc:	4b0a      	ldr	r3, [pc, #40]	@ (801ce28 <find_volume+0x504>)
 801cdfe:	801a      	strh	r2, [r3, #0]
 801ce00:	4b09      	ldr	r3, [pc, #36]	@ (801ce28 <find_volume+0x504>)
 801ce02:	881a      	ldrh	r2, [r3, #0]
 801ce04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ce06:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 801ce08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ce0a:	4a08      	ldr	r2, [pc, #32]	@ (801ce2c <find_volume+0x508>)
 801ce0c:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801ce0e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801ce10:	f7fe f800 	bl	801ae14 <clear_lock>
#endif
	return FR_OK;
 801ce14:	2300      	movs	r3, #0
}
 801ce16:	4618      	mov	r0, r3
 801ce18:	3758      	adds	r7, #88	@ 0x58
 801ce1a:	46bd      	mov	sp, r7
 801ce1c:	bd80      	pop	{r7, pc}
 801ce1e:	bf00      	nop
 801ce20:	41615252 	.word	0x41615252
 801ce24:	61417272 	.word	0x61417272
 801ce28:	24000554 	.word	0x24000554
 801ce2c:	24000568 	.word	0x24000568

0801ce30 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 801ce30:	b580      	push	{r7, lr}
 801ce32:	b084      	sub	sp, #16
 801ce34:	af00      	add	r7, sp, #0
 801ce36:	6078      	str	r0, [r7, #4]
 801ce38:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801ce3a:	2309      	movs	r3, #9
 801ce3c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801ce3e:	687b      	ldr	r3, [r7, #4]
 801ce40:	2b00      	cmp	r3, #0
 801ce42:	d01c      	beq.n	801ce7e <validate+0x4e>
 801ce44:	687b      	ldr	r3, [r7, #4]
 801ce46:	681b      	ldr	r3, [r3, #0]
 801ce48:	2b00      	cmp	r3, #0
 801ce4a:	d018      	beq.n	801ce7e <validate+0x4e>
 801ce4c:	687b      	ldr	r3, [r7, #4]
 801ce4e:	681b      	ldr	r3, [r3, #0]
 801ce50:	781b      	ldrb	r3, [r3, #0]
 801ce52:	2b00      	cmp	r3, #0
 801ce54:	d013      	beq.n	801ce7e <validate+0x4e>
 801ce56:	687b      	ldr	r3, [r7, #4]
 801ce58:	889a      	ldrh	r2, [r3, #4]
 801ce5a:	687b      	ldr	r3, [r7, #4]
 801ce5c:	681b      	ldr	r3, [r3, #0]
 801ce5e:	88db      	ldrh	r3, [r3, #6]
 801ce60:	429a      	cmp	r2, r3
 801ce62:	d10c      	bne.n	801ce7e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801ce64:	687b      	ldr	r3, [r7, #4]
 801ce66:	681b      	ldr	r3, [r3, #0]
 801ce68:	785b      	ldrb	r3, [r3, #1]
 801ce6a:	4618      	mov	r0, r3
 801ce6c:	f7fd fcea 	bl	801a844 <disk_status>
 801ce70:	4603      	mov	r3, r0
 801ce72:	f003 0301 	and.w	r3, r3, #1
 801ce76:	2b00      	cmp	r3, #0
 801ce78:	d101      	bne.n	801ce7e <validate+0x4e>
			res = FR_OK;
 801ce7a:	2300      	movs	r3, #0
 801ce7c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801ce7e:	7bfb      	ldrb	r3, [r7, #15]
 801ce80:	2b00      	cmp	r3, #0
 801ce82:	d102      	bne.n	801ce8a <validate+0x5a>
 801ce84:	687b      	ldr	r3, [r7, #4]
 801ce86:	681b      	ldr	r3, [r3, #0]
 801ce88:	e000      	b.n	801ce8c <validate+0x5c>
 801ce8a:	2300      	movs	r3, #0
 801ce8c:	683a      	ldr	r2, [r7, #0]
 801ce8e:	6013      	str	r3, [r2, #0]
	return res;
 801ce90:	7bfb      	ldrb	r3, [r7, #15]
}
 801ce92:	4618      	mov	r0, r3
 801ce94:	3710      	adds	r7, #16
 801ce96:	46bd      	mov	sp, r7
 801ce98:	bd80      	pop	{r7, pc}
	...

0801ce9c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801ce9c:	b580      	push	{r7, lr}
 801ce9e:	b088      	sub	sp, #32
 801cea0:	af00      	add	r7, sp, #0
 801cea2:	60f8      	str	r0, [r7, #12]
 801cea4:	60b9      	str	r1, [r7, #8]
 801cea6:	4613      	mov	r3, r2
 801cea8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801ceaa:	68bb      	ldr	r3, [r7, #8]
 801ceac:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801ceae:	f107 0310 	add.w	r3, r7, #16
 801ceb2:	4618      	mov	r0, r3
 801ceb4:	f7ff fc9c 	bl	801c7f0 <get_ldnumber>
 801ceb8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801ceba:	69fb      	ldr	r3, [r7, #28]
 801cebc:	2b00      	cmp	r3, #0
 801cebe:	da01      	bge.n	801cec4 <f_mount+0x28>
 801cec0:	230b      	movs	r3, #11
 801cec2:	e02b      	b.n	801cf1c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801cec4:	4a17      	ldr	r2, [pc, #92]	@ (801cf24 <f_mount+0x88>)
 801cec6:	69fb      	ldr	r3, [r7, #28]
 801cec8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801cecc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801cece:	69bb      	ldr	r3, [r7, #24]
 801ced0:	2b00      	cmp	r3, #0
 801ced2:	d005      	beq.n	801cee0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 801ced4:	69b8      	ldr	r0, [r7, #24]
 801ced6:	f7fd ff9d 	bl	801ae14 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801ceda:	69bb      	ldr	r3, [r7, #24]
 801cedc:	2200      	movs	r2, #0
 801cede:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 801cee0:	68fb      	ldr	r3, [r7, #12]
 801cee2:	2b00      	cmp	r3, #0
 801cee4:	d002      	beq.n	801ceec <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801cee6:	68fb      	ldr	r3, [r7, #12]
 801cee8:	2200      	movs	r2, #0
 801ceea:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801ceec:	68fa      	ldr	r2, [r7, #12]
 801ceee:	490d      	ldr	r1, [pc, #52]	@ (801cf24 <f_mount+0x88>)
 801cef0:	69fb      	ldr	r3, [r7, #28]
 801cef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801cef6:	68fb      	ldr	r3, [r7, #12]
 801cef8:	2b00      	cmp	r3, #0
 801cefa:	d002      	beq.n	801cf02 <f_mount+0x66>
 801cefc:	79fb      	ldrb	r3, [r7, #7]
 801cefe:	2b01      	cmp	r3, #1
 801cf00:	d001      	beq.n	801cf06 <f_mount+0x6a>
 801cf02:	2300      	movs	r3, #0
 801cf04:	e00a      	b.n	801cf1c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801cf06:	f107 010c 	add.w	r1, r7, #12
 801cf0a:	f107 0308 	add.w	r3, r7, #8
 801cf0e:	2200      	movs	r2, #0
 801cf10:	4618      	mov	r0, r3
 801cf12:	f7ff fd07 	bl	801c924 <find_volume>
 801cf16:	4603      	mov	r3, r0
 801cf18:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801cf1a:	7dfb      	ldrb	r3, [r7, #23]
}
 801cf1c:	4618      	mov	r0, r3
 801cf1e:	3720      	adds	r7, #32
 801cf20:	46bd      	mov	sp, r7
 801cf22:	bd80      	pop	{r7, pc}
 801cf24:	24000550 	.word	0x24000550

0801cf28 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801cf28:	b580      	push	{r7, lr}
 801cf2a:	b09a      	sub	sp, #104	@ 0x68
 801cf2c:	af00      	add	r7, sp, #0
 801cf2e:	60f8      	str	r0, [r7, #12]
 801cf30:	60b9      	str	r1, [r7, #8]
 801cf32:	4613      	mov	r3, r2
 801cf34:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801cf36:	68fb      	ldr	r3, [r7, #12]
 801cf38:	2b00      	cmp	r3, #0
 801cf3a:	d101      	bne.n	801cf40 <f_open+0x18>
 801cf3c:	2309      	movs	r3, #9
 801cf3e:	e1b7      	b.n	801d2b0 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801cf40:	79fb      	ldrb	r3, [r7, #7]
 801cf42:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801cf46:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 801cf48:	79fa      	ldrb	r2, [r7, #7]
 801cf4a:	f107 0114 	add.w	r1, r7, #20
 801cf4e:	f107 0308 	add.w	r3, r7, #8
 801cf52:	4618      	mov	r0, r3
 801cf54:	f7ff fce6 	bl	801c924 <find_volume>
 801cf58:	4603      	mov	r3, r0
 801cf5a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 801cf5e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801cf62:	2b00      	cmp	r3, #0
 801cf64:	f040 819b 	bne.w	801d29e <f_open+0x376>
		dj.obj.fs = fs;
 801cf68:	697b      	ldr	r3, [r7, #20]
 801cf6a:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801cf6c:	68ba      	ldr	r2, [r7, #8]
 801cf6e:	f107 0318 	add.w	r3, r7, #24
 801cf72:	4611      	mov	r1, r2
 801cf74:	4618      	mov	r0, r3
 801cf76:	f7ff fbc5 	bl	801c704 <follow_path>
 801cf7a:	4603      	mov	r3, r0
 801cf7c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801cf80:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801cf84:	2b00      	cmp	r3, #0
 801cf86:	d118      	bne.n	801cfba <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801cf88:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801cf8c:	b25b      	sxtb	r3, r3
 801cf8e:	2b00      	cmp	r3, #0
 801cf90:	da03      	bge.n	801cf9a <f_open+0x72>
				res = FR_INVALID_NAME;
 801cf92:	2306      	movs	r3, #6
 801cf94:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801cf98:	e00f      	b.n	801cfba <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801cf9a:	79fb      	ldrb	r3, [r7, #7]
 801cf9c:	2b01      	cmp	r3, #1
 801cf9e:	bf8c      	ite	hi
 801cfa0:	2301      	movhi	r3, #1
 801cfa2:	2300      	movls	r3, #0
 801cfa4:	b2db      	uxtb	r3, r3
 801cfa6:	461a      	mov	r2, r3
 801cfa8:	f107 0318 	add.w	r3, r7, #24
 801cfac:	4611      	mov	r1, r2
 801cfae:	4618      	mov	r0, r3
 801cfb0:	f7fd fde8 	bl	801ab84 <chk_lock>
 801cfb4:	4603      	mov	r3, r0
 801cfb6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801cfba:	79fb      	ldrb	r3, [r7, #7]
 801cfbc:	f003 031c 	and.w	r3, r3, #28
 801cfc0:	2b00      	cmp	r3, #0
 801cfc2:	d07f      	beq.n	801d0c4 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 801cfc4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801cfc8:	2b00      	cmp	r3, #0
 801cfca:	d017      	beq.n	801cffc <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801cfcc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801cfd0:	2b04      	cmp	r3, #4
 801cfd2:	d10e      	bne.n	801cff2 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801cfd4:	f7fd fe32 	bl	801ac3c <enq_lock>
 801cfd8:	4603      	mov	r3, r0
 801cfda:	2b00      	cmp	r3, #0
 801cfdc:	d006      	beq.n	801cfec <f_open+0xc4>
 801cfde:	f107 0318 	add.w	r3, r7, #24
 801cfe2:	4618      	mov	r0, r3
 801cfe4:	f7ff f894 	bl	801c110 <dir_register>
 801cfe8:	4603      	mov	r3, r0
 801cfea:	e000      	b.n	801cfee <f_open+0xc6>
 801cfec:	2312      	movs	r3, #18
 801cfee:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801cff2:	79fb      	ldrb	r3, [r7, #7]
 801cff4:	f043 0308 	orr.w	r3, r3, #8
 801cff8:	71fb      	strb	r3, [r7, #7]
 801cffa:	e010      	b.n	801d01e <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801cffc:	7fbb      	ldrb	r3, [r7, #30]
 801cffe:	f003 0311 	and.w	r3, r3, #17
 801d002:	2b00      	cmp	r3, #0
 801d004:	d003      	beq.n	801d00e <f_open+0xe6>
					res = FR_DENIED;
 801d006:	2307      	movs	r3, #7
 801d008:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801d00c:	e007      	b.n	801d01e <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801d00e:	79fb      	ldrb	r3, [r7, #7]
 801d010:	f003 0304 	and.w	r3, r3, #4
 801d014:	2b00      	cmp	r3, #0
 801d016:	d002      	beq.n	801d01e <f_open+0xf6>
 801d018:	2308      	movs	r3, #8
 801d01a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801d01e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d022:	2b00      	cmp	r3, #0
 801d024:	d168      	bne.n	801d0f8 <f_open+0x1d0>
 801d026:	79fb      	ldrb	r3, [r7, #7]
 801d028:	f003 0308 	and.w	r3, r3, #8
 801d02c:	2b00      	cmp	r3, #0
 801d02e:	d063      	beq.n	801d0f8 <f_open+0x1d0>
				dw = GET_FATTIME();
 801d030:	f7fd fbaa 	bl	801a788 <get_fattime>
 801d034:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801d036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d038:	330e      	adds	r3, #14
 801d03a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801d03c:	4618      	mov	r0, r3
 801d03e:	f7fd fcf7 	bl	801aa30 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801d042:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d044:	3316      	adds	r3, #22
 801d046:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801d048:	4618      	mov	r0, r3
 801d04a:	f7fd fcf1 	bl	801aa30 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801d04e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d050:	330b      	adds	r3, #11
 801d052:	2220      	movs	r2, #32
 801d054:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801d056:	697b      	ldr	r3, [r7, #20]
 801d058:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801d05a:	4611      	mov	r1, r2
 801d05c:	4618      	mov	r0, r3
 801d05e:	f7fe fcc6 	bl	801b9ee <ld_clust>
 801d062:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801d064:	697b      	ldr	r3, [r7, #20]
 801d066:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801d068:	2200      	movs	r2, #0
 801d06a:	4618      	mov	r0, r3
 801d06c:	f7fe fcde 	bl	801ba2c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801d070:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d072:	331c      	adds	r3, #28
 801d074:	2100      	movs	r1, #0
 801d076:	4618      	mov	r0, r3
 801d078:	f7fd fcda 	bl	801aa30 <st_dword>
					fs->wflag = 1;
 801d07c:	697b      	ldr	r3, [r7, #20]
 801d07e:	2201      	movs	r2, #1
 801d080:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801d082:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801d084:	2b00      	cmp	r3, #0
 801d086:	d037      	beq.n	801d0f8 <f_open+0x1d0>
						dw = fs->winsect;
 801d088:	697b      	ldr	r3, [r7, #20]
 801d08a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801d08c:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 801d08e:	f107 0318 	add.w	r3, r7, #24
 801d092:	2200      	movs	r2, #0
 801d094:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801d096:	4618      	mov	r0, r3
 801d098:	f7fe f9ce 	bl	801b438 <remove_chain>
 801d09c:	4603      	mov	r3, r0
 801d09e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 801d0a2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d0a6:	2b00      	cmp	r3, #0
 801d0a8:	d126      	bne.n	801d0f8 <f_open+0x1d0>
							res = move_window(fs, dw);
 801d0aa:	697b      	ldr	r3, [r7, #20]
 801d0ac:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801d0ae:	4618      	mov	r0, r3
 801d0b0:	f7fd ff18 	bl	801aee4 <move_window>
 801d0b4:	4603      	mov	r3, r0
 801d0b6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801d0ba:	697b      	ldr	r3, [r7, #20]
 801d0bc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801d0be:	3a01      	subs	r2, #1
 801d0c0:	615a      	str	r2, [r3, #20]
 801d0c2:	e019      	b.n	801d0f8 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801d0c4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d0c8:	2b00      	cmp	r3, #0
 801d0ca:	d115      	bne.n	801d0f8 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801d0cc:	7fbb      	ldrb	r3, [r7, #30]
 801d0ce:	f003 0310 	and.w	r3, r3, #16
 801d0d2:	2b00      	cmp	r3, #0
 801d0d4:	d003      	beq.n	801d0de <f_open+0x1b6>
					res = FR_NO_FILE;
 801d0d6:	2304      	movs	r3, #4
 801d0d8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801d0dc:	e00c      	b.n	801d0f8 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801d0de:	79fb      	ldrb	r3, [r7, #7]
 801d0e0:	f003 0302 	and.w	r3, r3, #2
 801d0e4:	2b00      	cmp	r3, #0
 801d0e6:	d007      	beq.n	801d0f8 <f_open+0x1d0>
 801d0e8:	7fbb      	ldrb	r3, [r7, #30]
 801d0ea:	f003 0301 	and.w	r3, r3, #1
 801d0ee:	2b00      	cmp	r3, #0
 801d0f0:	d002      	beq.n	801d0f8 <f_open+0x1d0>
						res = FR_DENIED;
 801d0f2:	2307      	movs	r3, #7
 801d0f4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 801d0f8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d0fc:	2b00      	cmp	r3, #0
 801d0fe:	d126      	bne.n	801d14e <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801d100:	79fb      	ldrb	r3, [r7, #7]
 801d102:	f003 0308 	and.w	r3, r3, #8
 801d106:	2b00      	cmp	r3, #0
 801d108:	d003      	beq.n	801d112 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 801d10a:	79fb      	ldrb	r3, [r7, #7]
 801d10c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d110:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801d112:	697b      	ldr	r3, [r7, #20]
 801d114:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801d116:	68fb      	ldr	r3, [r7, #12]
 801d118:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 801d11a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801d11c:	68fb      	ldr	r3, [r7, #12]
 801d11e:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801d120:	79fb      	ldrb	r3, [r7, #7]
 801d122:	2b01      	cmp	r3, #1
 801d124:	bf8c      	ite	hi
 801d126:	2301      	movhi	r3, #1
 801d128:	2300      	movls	r3, #0
 801d12a:	b2db      	uxtb	r3, r3
 801d12c:	461a      	mov	r2, r3
 801d12e:	f107 0318 	add.w	r3, r7, #24
 801d132:	4611      	mov	r1, r2
 801d134:	4618      	mov	r0, r3
 801d136:	f7fd fda3 	bl	801ac80 <inc_lock>
 801d13a:	4602      	mov	r2, r0
 801d13c:	68fb      	ldr	r3, [r7, #12]
 801d13e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801d140:	68fb      	ldr	r3, [r7, #12]
 801d142:	691b      	ldr	r3, [r3, #16]
 801d144:	2b00      	cmp	r3, #0
 801d146:	d102      	bne.n	801d14e <f_open+0x226>
 801d148:	2302      	movs	r3, #2
 801d14a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 801d14e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d152:	2b00      	cmp	r3, #0
 801d154:	f040 80a3 	bne.w	801d29e <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801d158:	697b      	ldr	r3, [r7, #20]
 801d15a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801d15c:	4611      	mov	r1, r2
 801d15e:	4618      	mov	r0, r3
 801d160:	f7fe fc45 	bl	801b9ee <ld_clust>
 801d164:	4602      	mov	r2, r0
 801d166:	68fb      	ldr	r3, [r7, #12]
 801d168:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801d16a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d16c:	331c      	adds	r3, #28
 801d16e:	4618      	mov	r0, r3
 801d170:	f7fd fc20 	bl	801a9b4 <ld_dword>
 801d174:	4602      	mov	r2, r0
 801d176:	68fb      	ldr	r3, [r7, #12]
 801d178:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801d17a:	68fb      	ldr	r3, [r7, #12]
 801d17c:	2200      	movs	r2, #0
 801d17e:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801d180:	697a      	ldr	r2, [r7, #20]
 801d182:	68fb      	ldr	r3, [r7, #12]
 801d184:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801d186:	697b      	ldr	r3, [r7, #20]
 801d188:	88da      	ldrh	r2, [r3, #6]
 801d18a:	68fb      	ldr	r3, [r7, #12]
 801d18c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801d18e:	68fb      	ldr	r3, [r7, #12]
 801d190:	79fa      	ldrb	r2, [r7, #7]
 801d192:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 801d194:	68fb      	ldr	r3, [r7, #12]
 801d196:	2200      	movs	r2, #0
 801d198:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801d19a:	68fb      	ldr	r3, [r7, #12]
 801d19c:	2200      	movs	r2, #0
 801d19e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801d1a0:	68fb      	ldr	r3, [r7, #12]
 801d1a2:	2200      	movs	r2, #0
 801d1a4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801d1a6:	68fb      	ldr	r3, [r7, #12]
 801d1a8:	3330      	adds	r3, #48	@ 0x30
 801d1aa:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 801d1ae:	2100      	movs	r1, #0
 801d1b0:	4618      	mov	r0, r3
 801d1b2:	f7fd fc8a 	bl	801aaca <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801d1b6:	79fb      	ldrb	r3, [r7, #7]
 801d1b8:	f003 0320 	and.w	r3, r3, #32
 801d1bc:	2b00      	cmp	r3, #0
 801d1be:	d06e      	beq.n	801d29e <f_open+0x376>
 801d1c0:	68fb      	ldr	r3, [r7, #12]
 801d1c2:	68db      	ldr	r3, [r3, #12]
 801d1c4:	2b00      	cmp	r3, #0
 801d1c6:	d06a      	beq.n	801d29e <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801d1c8:	68fb      	ldr	r3, [r7, #12]
 801d1ca:	68da      	ldr	r2, [r3, #12]
 801d1cc:	68fb      	ldr	r3, [r7, #12]
 801d1ce:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801d1d0:	697b      	ldr	r3, [r7, #20]
 801d1d2:	895b      	ldrh	r3, [r3, #10]
 801d1d4:	461a      	mov	r2, r3
 801d1d6:	697b      	ldr	r3, [r7, #20]
 801d1d8:	899b      	ldrh	r3, [r3, #12]
 801d1da:	fb02 f303 	mul.w	r3, r2, r3
 801d1de:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801d1e0:	68fb      	ldr	r3, [r7, #12]
 801d1e2:	689b      	ldr	r3, [r3, #8]
 801d1e4:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801d1e6:	68fb      	ldr	r3, [r7, #12]
 801d1e8:	68db      	ldr	r3, [r3, #12]
 801d1ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801d1ec:	e016      	b.n	801d21c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 801d1ee:	68fb      	ldr	r3, [r7, #12]
 801d1f0:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801d1f2:	4618      	mov	r0, r3
 801d1f4:	f7fd ff33 	bl	801b05e <get_fat>
 801d1f8:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 801d1fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801d1fc:	2b01      	cmp	r3, #1
 801d1fe:	d802      	bhi.n	801d206 <f_open+0x2de>
 801d200:	2302      	movs	r3, #2
 801d202:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801d206:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801d208:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d20c:	d102      	bne.n	801d214 <f_open+0x2ec>
 801d20e:	2301      	movs	r3, #1
 801d210:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801d214:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801d216:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801d218:	1ad3      	subs	r3, r2, r3
 801d21a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801d21c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d220:	2b00      	cmp	r3, #0
 801d222:	d103      	bne.n	801d22c <f_open+0x304>
 801d224:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801d226:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801d228:	429a      	cmp	r2, r3
 801d22a:	d8e0      	bhi.n	801d1ee <f_open+0x2c6>
				}
				fp->clust = clst;
 801d22c:	68fb      	ldr	r3, [r7, #12]
 801d22e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801d230:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801d232:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d236:	2b00      	cmp	r3, #0
 801d238:	d131      	bne.n	801d29e <f_open+0x376>
 801d23a:	697b      	ldr	r3, [r7, #20]
 801d23c:	899b      	ldrh	r3, [r3, #12]
 801d23e:	461a      	mov	r2, r3
 801d240:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801d242:	fbb3 f1f2 	udiv	r1, r3, r2
 801d246:	fb01 f202 	mul.w	r2, r1, r2
 801d24a:	1a9b      	subs	r3, r3, r2
 801d24c:	2b00      	cmp	r3, #0
 801d24e:	d026      	beq.n	801d29e <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801d250:	697b      	ldr	r3, [r7, #20]
 801d252:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801d254:	4618      	mov	r0, r3
 801d256:	f7fd fee3 	bl	801b020 <clust2sect>
 801d25a:	64f8      	str	r0, [r7, #76]	@ 0x4c
 801d25c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d25e:	2b00      	cmp	r3, #0
 801d260:	d103      	bne.n	801d26a <f_open+0x342>
						res = FR_INT_ERR;
 801d262:	2302      	movs	r3, #2
 801d264:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801d268:	e019      	b.n	801d29e <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801d26a:	697b      	ldr	r3, [r7, #20]
 801d26c:	899b      	ldrh	r3, [r3, #12]
 801d26e:	461a      	mov	r2, r3
 801d270:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801d272:	fbb3 f2f2 	udiv	r2, r3, r2
 801d276:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d278:	441a      	add	r2, r3
 801d27a:	68fb      	ldr	r3, [r7, #12]
 801d27c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801d27e:	697b      	ldr	r3, [r7, #20]
 801d280:	7858      	ldrb	r0, [r3, #1]
 801d282:	68fb      	ldr	r3, [r7, #12]
 801d284:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801d288:	68fb      	ldr	r3, [r7, #12]
 801d28a:	6a1a      	ldr	r2, [r3, #32]
 801d28c:	2301      	movs	r3, #1
 801d28e:	f7fd fb1b 	bl	801a8c8 <disk_read>
 801d292:	4603      	mov	r3, r0
 801d294:	2b00      	cmp	r3, #0
 801d296:	d002      	beq.n	801d29e <f_open+0x376>
 801d298:	2301      	movs	r3, #1
 801d29a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801d29e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d2a2:	2b00      	cmp	r3, #0
 801d2a4:	d002      	beq.n	801d2ac <f_open+0x384>
 801d2a6:	68fb      	ldr	r3, [r7, #12]
 801d2a8:	2200      	movs	r2, #0
 801d2aa:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801d2ac:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 801d2b0:	4618      	mov	r0, r3
 801d2b2:	3768      	adds	r7, #104	@ 0x68
 801d2b4:	46bd      	mov	sp, r7
 801d2b6:	bd80      	pop	{r7, pc}

0801d2b8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801d2b8:	b580      	push	{r7, lr}
 801d2ba:	b08c      	sub	sp, #48	@ 0x30
 801d2bc:	af00      	add	r7, sp, #0
 801d2be:	60f8      	str	r0, [r7, #12]
 801d2c0:	60b9      	str	r1, [r7, #8]
 801d2c2:	607a      	str	r2, [r7, #4]
 801d2c4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801d2c6:	68bb      	ldr	r3, [r7, #8]
 801d2c8:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801d2ca:	683b      	ldr	r3, [r7, #0]
 801d2cc:	2200      	movs	r2, #0
 801d2ce:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801d2d0:	68fb      	ldr	r3, [r7, #12]
 801d2d2:	f107 0210 	add.w	r2, r7, #16
 801d2d6:	4611      	mov	r1, r2
 801d2d8:	4618      	mov	r0, r3
 801d2da:	f7ff fda9 	bl	801ce30 <validate>
 801d2de:	4603      	mov	r3, r0
 801d2e0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801d2e4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801d2e8:	2b00      	cmp	r3, #0
 801d2ea:	d107      	bne.n	801d2fc <f_write+0x44>
 801d2ec:	68fb      	ldr	r3, [r7, #12]
 801d2ee:	7d5b      	ldrb	r3, [r3, #21]
 801d2f0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 801d2f4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801d2f8:	2b00      	cmp	r3, #0
 801d2fa:	d002      	beq.n	801d302 <f_write+0x4a>
 801d2fc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801d300:	e16a      	b.n	801d5d8 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801d302:	68fb      	ldr	r3, [r7, #12]
 801d304:	7d1b      	ldrb	r3, [r3, #20]
 801d306:	f003 0302 	and.w	r3, r3, #2
 801d30a:	2b00      	cmp	r3, #0
 801d30c:	d101      	bne.n	801d312 <f_write+0x5a>
 801d30e:	2307      	movs	r3, #7
 801d310:	e162      	b.n	801d5d8 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801d312:	68fb      	ldr	r3, [r7, #12]
 801d314:	699a      	ldr	r2, [r3, #24]
 801d316:	687b      	ldr	r3, [r7, #4]
 801d318:	441a      	add	r2, r3
 801d31a:	68fb      	ldr	r3, [r7, #12]
 801d31c:	699b      	ldr	r3, [r3, #24]
 801d31e:	429a      	cmp	r2, r3
 801d320:	f080 814c 	bcs.w	801d5bc <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801d324:	68fb      	ldr	r3, [r7, #12]
 801d326:	699b      	ldr	r3, [r3, #24]
 801d328:	43db      	mvns	r3, r3
 801d32a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801d32c:	e146      	b.n	801d5bc <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801d32e:	68fb      	ldr	r3, [r7, #12]
 801d330:	699b      	ldr	r3, [r3, #24]
 801d332:	693a      	ldr	r2, [r7, #16]
 801d334:	8992      	ldrh	r2, [r2, #12]
 801d336:	fbb3 f1f2 	udiv	r1, r3, r2
 801d33a:	fb01 f202 	mul.w	r2, r1, r2
 801d33e:	1a9b      	subs	r3, r3, r2
 801d340:	2b00      	cmp	r3, #0
 801d342:	f040 80f1 	bne.w	801d528 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801d346:	68fb      	ldr	r3, [r7, #12]
 801d348:	699b      	ldr	r3, [r3, #24]
 801d34a:	693a      	ldr	r2, [r7, #16]
 801d34c:	8992      	ldrh	r2, [r2, #12]
 801d34e:	fbb3 f3f2 	udiv	r3, r3, r2
 801d352:	693a      	ldr	r2, [r7, #16]
 801d354:	8952      	ldrh	r2, [r2, #10]
 801d356:	3a01      	subs	r2, #1
 801d358:	4013      	ands	r3, r2
 801d35a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801d35c:	69bb      	ldr	r3, [r7, #24]
 801d35e:	2b00      	cmp	r3, #0
 801d360:	d143      	bne.n	801d3ea <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801d362:	68fb      	ldr	r3, [r7, #12]
 801d364:	699b      	ldr	r3, [r3, #24]
 801d366:	2b00      	cmp	r3, #0
 801d368:	d10c      	bne.n	801d384 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801d36a:	68fb      	ldr	r3, [r7, #12]
 801d36c:	689b      	ldr	r3, [r3, #8]
 801d36e:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801d370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d372:	2b00      	cmp	r3, #0
 801d374:	d11a      	bne.n	801d3ac <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801d376:	68fb      	ldr	r3, [r7, #12]
 801d378:	2100      	movs	r1, #0
 801d37a:	4618      	mov	r0, r3
 801d37c:	f7fe f8c1 	bl	801b502 <create_chain>
 801d380:	62b8      	str	r0, [r7, #40]	@ 0x28
 801d382:	e013      	b.n	801d3ac <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801d384:	68fb      	ldr	r3, [r7, #12]
 801d386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d388:	2b00      	cmp	r3, #0
 801d38a:	d007      	beq.n	801d39c <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801d38c:	68fb      	ldr	r3, [r7, #12]
 801d38e:	699b      	ldr	r3, [r3, #24]
 801d390:	4619      	mov	r1, r3
 801d392:	68f8      	ldr	r0, [r7, #12]
 801d394:	f7fe f94d 	bl	801b632 <clmt_clust>
 801d398:	62b8      	str	r0, [r7, #40]	@ 0x28
 801d39a:	e007      	b.n	801d3ac <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801d39c:	68fa      	ldr	r2, [r7, #12]
 801d39e:	68fb      	ldr	r3, [r7, #12]
 801d3a0:	69db      	ldr	r3, [r3, #28]
 801d3a2:	4619      	mov	r1, r3
 801d3a4:	4610      	mov	r0, r2
 801d3a6:	f7fe f8ac 	bl	801b502 <create_chain>
 801d3aa:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801d3ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d3ae:	2b00      	cmp	r3, #0
 801d3b0:	f000 8109 	beq.w	801d5c6 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801d3b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d3b6:	2b01      	cmp	r3, #1
 801d3b8:	d104      	bne.n	801d3c4 <f_write+0x10c>
 801d3ba:	68fb      	ldr	r3, [r7, #12]
 801d3bc:	2202      	movs	r2, #2
 801d3be:	755a      	strb	r2, [r3, #21]
 801d3c0:	2302      	movs	r3, #2
 801d3c2:	e109      	b.n	801d5d8 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801d3c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d3c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d3ca:	d104      	bne.n	801d3d6 <f_write+0x11e>
 801d3cc:	68fb      	ldr	r3, [r7, #12]
 801d3ce:	2201      	movs	r2, #1
 801d3d0:	755a      	strb	r2, [r3, #21]
 801d3d2:	2301      	movs	r3, #1
 801d3d4:	e100      	b.n	801d5d8 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 801d3d6:	68fb      	ldr	r3, [r7, #12]
 801d3d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801d3da:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801d3dc:	68fb      	ldr	r3, [r7, #12]
 801d3de:	689b      	ldr	r3, [r3, #8]
 801d3e0:	2b00      	cmp	r3, #0
 801d3e2:	d102      	bne.n	801d3ea <f_write+0x132>
 801d3e4:	68fb      	ldr	r3, [r7, #12]
 801d3e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801d3e8:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801d3ea:	68fb      	ldr	r3, [r7, #12]
 801d3ec:	7d1b      	ldrb	r3, [r3, #20]
 801d3ee:	b25b      	sxtb	r3, r3
 801d3f0:	2b00      	cmp	r3, #0
 801d3f2:	da18      	bge.n	801d426 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801d3f4:	693b      	ldr	r3, [r7, #16]
 801d3f6:	7858      	ldrb	r0, [r3, #1]
 801d3f8:	68fb      	ldr	r3, [r7, #12]
 801d3fa:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801d3fe:	68fb      	ldr	r3, [r7, #12]
 801d400:	6a1a      	ldr	r2, [r3, #32]
 801d402:	2301      	movs	r3, #1
 801d404:	f7fd fa80 	bl	801a908 <disk_write>
 801d408:	4603      	mov	r3, r0
 801d40a:	2b00      	cmp	r3, #0
 801d40c:	d004      	beq.n	801d418 <f_write+0x160>
 801d40e:	68fb      	ldr	r3, [r7, #12]
 801d410:	2201      	movs	r2, #1
 801d412:	755a      	strb	r2, [r3, #21]
 801d414:	2301      	movs	r3, #1
 801d416:	e0df      	b.n	801d5d8 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 801d418:	68fb      	ldr	r3, [r7, #12]
 801d41a:	7d1b      	ldrb	r3, [r3, #20]
 801d41c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801d420:	b2da      	uxtb	r2, r3
 801d422:	68fb      	ldr	r3, [r7, #12]
 801d424:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801d426:	693a      	ldr	r2, [r7, #16]
 801d428:	68fb      	ldr	r3, [r7, #12]
 801d42a:	69db      	ldr	r3, [r3, #28]
 801d42c:	4619      	mov	r1, r3
 801d42e:	4610      	mov	r0, r2
 801d430:	f7fd fdf6 	bl	801b020 <clust2sect>
 801d434:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801d436:	697b      	ldr	r3, [r7, #20]
 801d438:	2b00      	cmp	r3, #0
 801d43a:	d104      	bne.n	801d446 <f_write+0x18e>
 801d43c:	68fb      	ldr	r3, [r7, #12]
 801d43e:	2202      	movs	r2, #2
 801d440:	755a      	strb	r2, [r3, #21]
 801d442:	2302      	movs	r3, #2
 801d444:	e0c8      	b.n	801d5d8 <f_write+0x320>
			sect += csect;
 801d446:	697a      	ldr	r2, [r7, #20]
 801d448:	69bb      	ldr	r3, [r7, #24]
 801d44a:	4413      	add	r3, r2
 801d44c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801d44e:	693b      	ldr	r3, [r7, #16]
 801d450:	899b      	ldrh	r3, [r3, #12]
 801d452:	461a      	mov	r2, r3
 801d454:	687b      	ldr	r3, [r7, #4]
 801d456:	fbb3 f3f2 	udiv	r3, r3, r2
 801d45a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801d45c:	6a3b      	ldr	r3, [r7, #32]
 801d45e:	2b00      	cmp	r3, #0
 801d460:	d043      	beq.n	801d4ea <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801d462:	69ba      	ldr	r2, [r7, #24]
 801d464:	6a3b      	ldr	r3, [r7, #32]
 801d466:	4413      	add	r3, r2
 801d468:	693a      	ldr	r2, [r7, #16]
 801d46a:	8952      	ldrh	r2, [r2, #10]
 801d46c:	4293      	cmp	r3, r2
 801d46e:	d905      	bls.n	801d47c <f_write+0x1c4>
					cc = fs->csize - csect;
 801d470:	693b      	ldr	r3, [r7, #16]
 801d472:	895b      	ldrh	r3, [r3, #10]
 801d474:	461a      	mov	r2, r3
 801d476:	69bb      	ldr	r3, [r7, #24]
 801d478:	1ad3      	subs	r3, r2, r3
 801d47a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801d47c:	693b      	ldr	r3, [r7, #16]
 801d47e:	7858      	ldrb	r0, [r3, #1]
 801d480:	6a3b      	ldr	r3, [r7, #32]
 801d482:	697a      	ldr	r2, [r7, #20]
 801d484:	69f9      	ldr	r1, [r7, #28]
 801d486:	f7fd fa3f 	bl	801a908 <disk_write>
 801d48a:	4603      	mov	r3, r0
 801d48c:	2b00      	cmp	r3, #0
 801d48e:	d004      	beq.n	801d49a <f_write+0x1e2>
 801d490:	68fb      	ldr	r3, [r7, #12]
 801d492:	2201      	movs	r2, #1
 801d494:	755a      	strb	r2, [r3, #21]
 801d496:	2301      	movs	r3, #1
 801d498:	e09e      	b.n	801d5d8 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801d49a:	68fb      	ldr	r3, [r7, #12]
 801d49c:	6a1a      	ldr	r2, [r3, #32]
 801d49e:	697b      	ldr	r3, [r7, #20]
 801d4a0:	1ad3      	subs	r3, r2, r3
 801d4a2:	6a3a      	ldr	r2, [r7, #32]
 801d4a4:	429a      	cmp	r2, r3
 801d4a6:	d918      	bls.n	801d4da <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801d4a8:	68fb      	ldr	r3, [r7, #12]
 801d4aa:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 801d4ae:	68fb      	ldr	r3, [r7, #12]
 801d4b0:	6a1a      	ldr	r2, [r3, #32]
 801d4b2:	697b      	ldr	r3, [r7, #20]
 801d4b4:	1ad3      	subs	r3, r2, r3
 801d4b6:	693a      	ldr	r2, [r7, #16]
 801d4b8:	8992      	ldrh	r2, [r2, #12]
 801d4ba:	fb02 f303 	mul.w	r3, r2, r3
 801d4be:	69fa      	ldr	r2, [r7, #28]
 801d4c0:	18d1      	adds	r1, r2, r3
 801d4c2:	693b      	ldr	r3, [r7, #16]
 801d4c4:	899b      	ldrh	r3, [r3, #12]
 801d4c6:	461a      	mov	r2, r3
 801d4c8:	f7fd fade 	bl	801aa88 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801d4cc:	68fb      	ldr	r3, [r7, #12]
 801d4ce:	7d1b      	ldrb	r3, [r3, #20]
 801d4d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801d4d4:	b2da      	uxtb	r2, r3
 801d4d6:	68fb      	ldr	r3, [r7, #12]
 801d4d8:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801d4da:	693b      	ldr	r3, [r7, #16]
 801d4dc:	899b      	ldrh	r3, [r3, #12]
 801d4de:	461a      	mov	r2, r3
 801d4e0:	6a3b      	ldr	r3, [r7, #32]
 801d4e2:	fb02 f303 	mul.w	r3, r2, r3
 801d4e6:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 801d4e8:	e04b      	b.n	801d582 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801d4ea:	68fb      	ldr	r3, [r7, #12]
 801d4ec:	6a1b      	ldr	r3, [r3, #32]
 801d4ee:	697a      	ldr	r2, [r7, #20]
 801d4f0:	429a      	cmp	r2, r3
 801d4f2:	d016      	beq.n	801d522 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 801d4f4:	68fb      	ldr	r3, [r7, #12]
 801d4f6:	699a      	ldr	r2, [r3, #24]
 801d4f8:	68fb      	ldr	r3, [r7, #12]
 801d4fa:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801d4fc:	429a      	cmp	r2, r3
 801d4fe:	d210      	bcs.n	801d522 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801d500:	693b      	ldr	r3, [r7, #16]
 801d502:	7858      	ldrb	r0, [r3, #1]
 801d504:	68fb      	ldr	r3, [r7, #12]
 801d506:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801d50a:	2301      	movs	r3, #1
 801d50c:	697a      	ldr	r2, [r7, #20]
 801d50e:	f7fd f9db 	bl	801a8c8 <disk_read>
 801d512:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801d514:	2b00      	cmp	r3, #0
 801d516:	d004      	beq.n	801d522 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 801d518:	68fb      	ldr	r3, [r7, #12]
 801d51a:	2201      	movs	r2, #1
 801d51c:	755a      	strb	r2, [r3, #21]
 801d51e:	2301      	movs	r3, #1
 801d520:	e05a      	b.n	801d5d8 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 801d522:	68fb      	ldr	r3, [r7, #12]
 801d524:	697a      	ldr	r2, [r7, #20]
 801d526:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801d528:	693b      	ldr	r3, [r7, #16]
 801d52a:	899b      	ldrh	r3, [r3, #12]
 801d52c:	4618      	mov	r0, r3
 801d52e:	68fb      	ldr	r3, [r7, #12]
 801d530:	699b      	ldr	r3, [r3, #24]
 801d532:	693a      	ldr	r2, [r7, #16]
 801d534:	8992      	ldrh	r2, [r2, #12]
 801d536:	fbb3 f1f2 	udiv	r1, r3, r2
 801d53a:	fb01 f202 	mul.w	r2, r1, r2
 801d53e:	1a9b      	subs	r3, r3, r2
 801d540:	1ac3      	subs	r3, r0, r3
 801d542:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801d544:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801d546:	687b      	ldr	r3, [r7, #4]
 801d548:	429a      	cmp	r2, r3
 801d54a:	d901      	bls.n	801d550 <f_write+0x298>
 801d54c:	687b      	ldr	r3, [r7, #4]
 801d54e:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801d550:	68fb      	ldr	r3, [r7, #12]
 801d552:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801d556:	68fb      	ldr	r3, [r7, #12]
 801d558:	699b      	ldr	r3, [r3, #24]
 801d55a:	693a      	ldr	r2, [r7, #16]
 801d55c:	8992      	ldrh	r2, [r2, #12]
 801d55e:	fbb3 f0f2 	udiv	r0, r3, r2
 801d562:	fb00 f202 	mul.w	r2, r0, r2
 801d566:	1a9b      	subs	r3, r3, r2
 801d568:	440b      	add	r3, r1
 801d56a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801d56c:	69f9      	ldr	r1, [r7, #28]
 801d56e:	4618      	mov	r0, r3
 801d570:	f7fd fa8a 	bl	801aa88 <mem_cpy>
		fp->flag |= FA_DIRTY;
 801d574:	68fb      	ldr	r3, [r7, #12]
 801d576:	7d1b      	ldrb	r3, [r3, #20]
 801d578:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801d57c:	b2da      	uxtb	r2, r3
 801d57e:	68fb      	ldr	r3, [r7, #12]
 801d580:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801d582:	69fa      	ldr	r2, [r7, #28]
 801d584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d586:	4413      	add	r3, r2
 801d588:	61fb      	str	r3, [r7, #28]
 801d58a:	68fb      	ldr	r3, [r7, #12]
 801d58c:	699a      	ldr	r2, [r3, #24]
 801d58e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d590:	441a      	add	r2, r3
 801d592:	68fb      	ldr	r3, [r7, #12]
 801d594:	619a      	str	r2, [r3, #24]
 801d596:	68fb      	ldr	r3, [r7, #12]
 801d598:	68da      	ldr	r2, [r3, #12]
 801d59a:	68fb      	ldr	r3, [r7, #12]
 801d59c:	699b      	ldr	r3, [r3, #24]
 801d59e:	429a      	cmp	r2, r3
 801d5a0:	bf38      	it	cc
 801d5a2:	461a      	movcc	r2, r3
 801d5a4:	68fb      	ldr	r3, [r7, #12]
 801d5a6:	60da      	str	r2, [r3, #12]
 801d5a8:	683b      	ldr	r3, [r7, #0]
 801d5aa:	681a      	ldr	r2, [r3, #0]
 801d5ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d5ae:	441a      	add	r2, r3
 801d5b0:	683b      	ldr	r3, [r7, #0]
 801d5b2:	601a      	str	r2, [r3, #0]
 801d5b4:	687a      	ldr	r2, [r7, #4]
 801d5b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d5b8:	1ad3      	subs	r3, r2, r3
 801d5ba:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801d5bc:	687b      	ldr	r3, [r7, #4]
 801d5be:	2b00      	cmp	r3, #0
 801d5c0:	f47f aeb5 	bne.w	801d32e <f_write+0x76>
 801d5c4:	e000      	b.n	801d5c8 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801d5c6:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801d5c8:	68fb      	ldr	r3, [r7, #12]
 801d5ca:	7d1b      	ldrb	r3, [r3, #20]
 801d5cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d5d0:	b2da      	uxtb	r2, r3
 801d5d2:	68fb      	ldr	r3, [r7, #12]
 801d5d4:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801d5d6:	2300      	movs	r3, #0
}
 801d5d8:	4618      	mov	r0, r3
 801d5da:	3730      	adds	r7, #48	@ 0x30
 801d5dc:	46bd      	mov	sp, r7
 801d5de:	bd80      	pop	{r7, pc}

0801d5e0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801d5e0:	b580      	push	{r7, lr}
 801d5e2:	b086      	sub	sp, #24
 801d5e4:	af00      	add	r7, sp, #0
 801d5e6:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801d5e8:	687b      	ldr	r3, [r7, #4]
 801d5ea:	f107 0208 	add.w	r2, r7, #8
 801d5ee:	4611      	mov	r1, r2
 801d5f0:	4618      	mov	r0, r3
 801d5f2:	f7ff fc1d 	bl	801ce30 <validate>
 801d5f6:	4603      	mov	r3, r0
 801d5f8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801d5fa:	7dfb      	ldrb	r3, [r7, #23]
 801d5fc:	2b00      	cmp	r3, #0
 801d5fe:	d168      	bne.n	801d6d2 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801d600:	687b      	ldr	r3, [r7, #4]
 801d602:	7d1b      	ldrb	r3, [r3, #20]
 801d604:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801d608:	2b00      	cmp	r3, #0
 801d60a:	d062      	beq.n	801d6d2 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801d60c:	687b      	ldr	r3, [r7, #4]
 801d60e:	7d1b      	ldrb	r3, [r3, #20]
 801d610:	b25b      	sxtb	r3, r3
 801d612:	2b00      	cmp	r3, #0
 801d614:	da15      	bge.n	801d642 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801d616:	68bb      	ldr	r3, [r7, #8]
 801d618:	7858      	ldrb	r0, [r3, #1]
 801d61a:	687b      	ldr	r3, [r7, #4]
 801d61c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801d620:	687b      	ldr	r3, [r7, #4]
 801d622:	6a1a      	ldr	r2, [r3, #32]
 801d624:	2301      	movs	r3, #1
 801d626:	f7fd f96f 	bl	801a908 <disk_write>
 801d62a:	4603      	mov	r3, r0
 801d62c:	2b00      	cmp	r3, #0
 801d62e:	d001      	beq.n	801d634 <f_sync+0x54>
 801d630:	2301      	movs	r3, #1
 801d632:	e04f      	b.n	801d6d4 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 801d634:	687b      	ldr	r3, [r7, #4]
 801d636:	7d1b      	ldrb	r3, [r3, #20]
 801d638:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801d63c:	b2da      	uxtb	r2, r3
 801d63e:	687b      	ldr	r3, [r7, #4]
 801d640:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801d642:	f7fd f8a1 	bl	801a788 <get_fattime>
 801d646:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801d648:	68ba      	ldr	r2, [r7, #8]
 801d64a:	687b      	ldr	r3, [r7, #4]
 801d64c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d64e:	4619      	mov	r1, r3
 801d650:	4610      	mov	r0, r2
 801d652:	f7fd fc47 	bl	801aee4 <move_window>
 801d656:	4603      	mov	r3, r0
 801d658:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801d65a:	7dfb      	ldrb	r3, [r7, #23]
 801d65c:	2b00      	cmp	r3, #0
 801d65e:	d138      	bne.n	801d6d2 <f_sync+0xf2>
					dir = fp->dir_ptr;
 801d660:	687b      	ldr	r3, [r7, #4]
 801d662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d664:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801d666:	68fb      	ldr	r3, [r7, #12]
 801d668:	330b      	adds	r3, #11
 801d66a:	781a      	ldrb	r2, [r3, #0]
 801d66c:	68fb      	ldr	r3, [r7, #12]
 801d66e:	330b      	adds	r3, #11
 801d670:	f042 0220 	orr.w	r2, r2, #32
 801d674:	b2d2      	uxtb	r2, r2
 801d676:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801d678:	687b      	ldr	r3, [r7, #4]
 801d67a:	6818      	ldr	r0, [r3, #0]
 801d67c:	687b      	ldr	r3, [r7, #4]
 801d67e:	689b      	ldr	r3, [r3, #8]
 801d680:	461a      	mov	r2, r3
 801d682:	68f9      	ldr	r1, [r7, #12]
 801d684:	f7fe f9d2 	bl	801ba2c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801d688:	68fb      	ldr	r3, [r7, #12]
 801d68a:	f103 021c 	add.w	r2, r3, #28
 801d68e:	687b      	ldr	r3, [r7, #4]
 801d690:	68db      	ldr	r3, [r3, #12]
 801d692:	4619      	mov	r1, r3
 801d694:	4610      	mov	r0, r2
 801d696:	f7fd f9cb 	bl	801aa30 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801d69a:	68fb      	ldr	r3, [r7, #12]
 801d69c:	3316      	adds	r3, #22
 801d69e:	6939      	ldr	r1, [r7, #16]
 801d6a0:	4618      	mov	r0, r3
 801d6a2:	f7fd f9c5 	bl	801aa30 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801d6a6:	68fb      	ldr	r3, [r7, #12]
 801d6a8:	3312      	adds	r3, #18
 801d6aa:	2100      	movs	r1, #0
 801d6ac:	4618      	mov	r0, r3
 801d6ae:	f7fd f9a4 	bl	801a9fa <st_word>
					fs->wflag = 1;
 801d6b2:	68bb      	ldr	r3, [r7, #8]
 801d6b4:	2201      	movs	r2, #1
 801d6b6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801d6b8:	68bb      	ldr	r3, [r7, #8]
 801d6ba:	4618      	mov	r0, r3
 801d6bc:	f7fd fc40 	bl	801af40 <sync_fs>
 801d6c0:	4603      	mov	r3, r0
 801d6c2:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801d6c4:	687b      	ldr	r3, [r7, #4]
 801d6c6:	7d1b      	ldrb	r3, [r3, #20]
 801d6c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801d6cc:	b2da      	uxtb	r2, r3
 801d6ce:	687b      	ldr	r3, [r7, #4]
 801d6d0:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801d6d2:	7dfb      	ldrb	r3, [r7, #23]
}
 801d6d4:	4618      	mov	r0, r3
 801d6d6:	3718      	adds	r7, #24
 801d6d8:	46bd      	mov	sp, r7
 801d6da:	bd80      	pop	{r7, pc}

0801d6dc <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801d6dc:	b580      	push	{r7, lr}
 801d6de:	b084      	sub	sp, #16
 801d6e0:	af00      	add	r7, sp, #0
 801d6e2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801d6e4:	6878      	ldr	r0, [r7, #4]
 801d6e6:	f7ff ff7b 	bl	801d5e0 <f_sync>
 801d6ea:	4603      	mov	r3, r0
 801d6ec:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801d6ee:	7bfb      	ldrb	r3, [r7, #15]
 801d6f0:	2b00      	cmp	r3, #0
 801d6f2:	d118      	bne.n	801d726 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801d6f4:	687b      	ldr	r3, [r7, #4]
 801d6f6:	f107 0208 	add.w	r2, r7, #8
 801d6fa:	4611      	mov	r1, r2
 801d6fc:	4618      	mov	r0, r3
 801d6fe:	f7ff fb97 	bl	801ce30 <validate>
 801d702:	4603      	mov	r3, r0
 801d704:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801d706:	7bfb      	ldrb	r3, [r7, #15]
 801d708:	2b00      	cmp	r3, #0
 801d70a:	d10c      	bne.n	801d726 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801d70c:	687b      	ldr	r3, [r7, #4]
 801d70e:	691b      	ldr	r3, [r3, #16]
 801d710:	4618      	mov	r0, r3
 801d712:	f7fd fb43 	bl	801ad9c <dec_lock>
 801d716:	4603      	mov	r3, r0
 801d718:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801d71a:	7bfb      	ldrb	r3, [r7, #15]
 801d71c:	2b00      	cmp	r3, #0
 801d71e:	d102      	bne.n	801d726 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801d720:	687b      	ldr	r3, [r7, #4]
 801d722:	2200      	movs	r2, #0
 801d724:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801d726:	7bfb      	ldrb	r3, [r7, #15]
}
 801d728:	4618      	mov	r0, r3
 801d72a:	3710      	adds	r7, #16
 801d72c:	46bd      	mov	sp, r7
 801d72e:	bd80      	pop	{r7, pc}

0801d730 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 801d730:	b580      	push	{r7, lr}
 801d732:	b0a0      	sub	sp, #128	@ 0x80
 801d734:	af00      	add	r7, sp, #0
 801d736:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 801d738:	2300      	movs	r3, #0
 801d73a:	67bb      	str	r3, [r7, #120]	@ 0x78
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 801d73c:	f107 010c 	add.w	r1, r7, #12
 801d740:	1d3b      	adds	r3, r7, #4
 801d742:	2202      	movs	r2, #2
 801d744:	4618      	mov	r0, r3
 801d746:	f7ff f8ed 	bl	801c924 <find_volume>
 801d74a:	4603      	mov	r3, r0
 801d74c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	dj.obj.fs = fs;
 801d750:	68fb      	ldr	r3, [r7, #12]
 801d752:	647b      	str	r3, [r7, #68]	@ 0x44
	if (res == FR_OK) {
 801d754:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801d758:	2b00      	cmp	r3, #0
 801d75a:	f040 808e 	bne.w	801d87a <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 801d75e:	687a      	ldr	r2, [r7, #4]
 801d760:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801d764:	4611      	mov	r1, r2
 801d766:	4618      	mov	r0, r3
 801d768:	f7fe ffcc 	bl	801c704 <follow_path>
 801d76c:	4603      	mov	r3, r0
 801d76e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 801d772:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801d776:	2b00      	cmp	r3, #0
 801d778:	d108      	bne.n	801d78c <f_unlink+0x5c>
 801d77a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801d77e:	2102      	movs	r1, #2
 801d780:	4618      	mov	r0, r3
 801d782:	f7fd f9ff 	bl	801ab84 <chk_lock>
 801d786:	4603      	mov	r3, r0
 801d788:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
#endif
		if (res == FR_OK) {					/* The object is accessible */
 801d78c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801d790:	2b00      	cmp	r3, #0
 801d792:	d172      	bne.n	801d87a <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 801d794:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 801d798:	b25b      	sxtb	r3, r3
 801d79a:	2b00      	cmp	r3, #0
 801d79c:	da03      	bge.n	801d7a6 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 801d79e:	2306      	movs	r3, #6
 801d7a0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 801d7a4:	e008      	b.n	801d7b8 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 801d7a6:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 801d7aa:	f003 0301 	and.w	r3, r3, #1
 801d7ae:	2b00      	cmp	r3, #0
 801d7b0:	d002      	beq.n	801d7b8 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 801d7b2:	2307      	movs	r3, #7
 801d7b4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				}
			}
			if (res == FR_OK) {
 801d7b8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801d7bc:	2b00      	cmp	r3, #0
 801d7be:	d134      	bne.n	801d82a <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 801d7c0:	68fb      	ldr	r3, [r7, #12]
 801d7c2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801d7c4:	4611      	mov	r1, r2
 801d7c6:	4618      	mov	r0, r3
 801d7c8:	f7fe f911 	bl	801b9ee <ld_clust>
 801d7cc:	67b8      	str	r0, [r7, #120]	@ 0x78
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 801d7ce:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 801d7d2:	f003 0310 	and.w	r3, r3, #16
 801d7d6:	2b00      	cmp	r3, #0
 801d7d8:	d027      	beq.n	801d82a <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 801d7da:	68fb      	ldr	r3, [r7, #12]
 801d7dc:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 801d7de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801d7e0:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 801d7e2:	f107 0310 	add.w	r3, r7, #16
 801d7e6:	2100      	movs	r1, #0
 801d7e8:	4618      	mov	r0, r3
 801d7ea:	f7fd ff5a 	bl	801b6a2 <dir_sdi>
 801d7ee:	4603      	mov	r3, r0
 801d7f0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
						if (res == FR_OK) {
 801d7f4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801d7f8:	2b00      	cmp	r3, #0
 801d7fa:	d116      	bne.n	801d82a <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 801d7fc:	f107 0310 	add.w	r3, r7, #16
 801d800:	2100      	movs	r1, #0
 801d802:	4618      	mov	r0, r3
 801d804:	f7fe fb1d 	bl	801be42 <dir_read>
 801d808:	4603      	mov	r3, r0
 801d80a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 801d80e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801d812:	2b00      	cmp	r3, #0
 801d814:	d102      	bne.n	801d81c <f_unlink+0xec>
 801d816:	2307      	movs	r3, #7
 801d818:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 801d81c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801d820:	2b04      	cmp	r3, #4
 801d822:	d102      	bne.n	801d82a <f_unlink+0xfa>
 801d824:	2300      	movs	r3, #0
 801d826:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
						}
					}
				}
			}
			if (res == FR_OK) {
 801d82a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801d82e:	2b00      	cmp	r3, #0
 801d830:	d123      	bne.n	801d87a <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 801d832:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801d836:	4618      	mov	r0, r3
 801d838:	f7fe fd62 	bl	801c300 <dir_remove>
 801d83c:	4603      	mov	r3, r0
 801d83e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 801d842:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801d846:	2b00      	cmp	r3, #0
 801d848:	d10c      	bne.n	801d864 <f_unlink+0x134>
 801d84a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801d84c:	2b00      	cmp	r3, #0
 801d84e:	d009      	beq.n	801d864 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 801d850:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801d854:	2200      	movs	r2, #0
 801d856:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 801d858:	4618      	mov	r0, r3
 801d85a:	f7fd fded 	bl	801b438 <remove_chain>
 801d85e:	4603      	mov	r3, r0
 801d860:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 801d864:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801d868:	2b00      	cmp	r3, #0
 801d86a:	d106      	bne.n	801d87a <f_unlink+0x14a>
 801d86c:	68fb      	ldr	r3, [r7, #12]
 801d86e:	4618      	mov	r0, r3
 801d870:	f7fd fb66 	bl	801af40 <sync_fs>
 801d874:	4603      	mov	r3, r0
 801d876:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 801d87a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 801d87e:	4618      	mov	r0, r3
 801d880:	3780      	adds	r7, #128	@ 0x80
 801d882:	46bd      	mov	sp, r7
 801d884:	bd80      	pop	{r7, pc}
	...

0801d888 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801d888:	b480      	push	{r7}
 801d88a:	b087      	sub	sp, #28
 801d88c:	af00      	add	r7, sp, #0
 801d88e:	60f8      	str	r0, [r7, #12]
 801d890:	60b9      	str	r1, [r7, #8]
 801d892:	4613      	mov	r3, r2
 801d894:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801d896:	2301      	movs	r3, #1
 801d898:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801d89a:	2300      	movs	r3, #0
 801d89c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801d89e:	4b1f      	ldr	r3, [pc, #124]	@ (801d91c <FATFS_LinkDriverEx+0x94>)
 801d8a0:	7a5b      	ldrb	r3, [r3, #9]
 801d8a2:	b2db      	uxtb	r3, r3
 801d8a4:	2b00      	cmp	r3, #0
 801d8a6:	d131      	bne.n	801d90c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801d8a8:	4b1c      	ldr	r3, [pc, #112]	@ (801d91c <FATFS_LinkDriverEx+0x94>)
 801d8aa:	7a5b      	ldrb	r3, [r3, #9]
 801d8ac:	b2db      	uxtb	r3, r3
 801d8ae:	461a      	mov	r2, r3
 801d8b0:	4b1a      	ldr	r3, [pc, #104]	@ (801d91c <FATFS_LinkDriverEx+0x94>)
 801d8b2:	2100      	movs	r1, #0
 801d8b4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801d8b6:	4b19      	ldr	r3, [pc, #100]	@ (801d91c <FATFS_LinkDriverEx+0x94>)
 801d8b8:	7a5b      	ldrb	r3, [r3, #9]
 801d8ba:	b2db      	uxtb	r3, r3
 801d8bc:	4a17      	ldr	r2, [pc, #92]	@ (801d91c <FATFS_LinkDriverEx+0x94>)
 801d8be:	009b      	lsls	r3, r3, #2
 801d8c0:	4413      	add	r3, r2
 801d8c2:	68fa      	ldr	r2, [r7, #12]
 801d8c4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801d8c6:	4b15      	ldr	r3, [pc, #84]	@ (801d91c <FATFS_LinkDriverEx+0x94>)
 801d8c8:	7a5b      	ldrb	r3, [r3, #9]
 801d8ca:	b2db      	uxtb	r3, r3
 801d8cc:	461a      	mov	r2, r3
 801d8ce:	4b13      	ldr	r3, [pc, #76]	@ (801d91c <FATFS_LinkDriverEx+0x94>)
 801d8d0:	4413      	add	r3, r2
 801d8d2:	79fa      	ldrb	r2, [r7, #7]
 801d8d4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801d8d6:	4b11      	ldr	r3, [pc, #68]	@ (801d91c <FATFS_LinkDriverEx+0x94>)
 801d8d8:	7a5b      	ldrb	r3, [r3, #9]
 801d8da:	b2db      	uxtb	r3, r3
 801d8dc:	1c5a      	adds	r2, r3, #1
 801d8de:	b2d1      	uxtb	r1, r2
 801d8e0:	4a0e      	ldr	r2, [pc, #56]	@ (801d91c <FATFS_LinkDriverEx+0x94>)
 801d8e2:	7251      	strb	r1, [r2, #9]
 801d8e4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801d8e6:	7dbb      	ldrb	r3, [r7, #22]
 801d8e8:	3330      	adds	r3, #48	@ 0x30
 801d8ea:	b2da      	uxtb	r2, r3
 801d8ec:	68bb      	ldr	r3, [r7, #8]
 801d8ee:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801d8f0:	68bb      	ldr	r3, [r7, #8]
 801d8f2:	3301      	adds	r3, #1
 801d8f4:	223a      	movs	r2, #58	@ 0x3a
 801d8f6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801d8f8:	68bb      	ldr	r3, [r7, #8]
 801d8fa:	3302      	adds	r3, #2
 801d8fc:	222f      	movs	r2, #47	@ 0x2f
 801d8fe:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801d900:	68bb      	ldr	r3, [r7, #8]
 801d902:	3303      	adds	r3, #3
 801d904:	2200      	movs	r2, #0
 801d906:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801d908:	2300      	movs	r3, #0
 801d90a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801d90c:	7dfb      	ldrb	r3, [r7, #23]
}
 801d90e:	4618      	mov	r0, r3
 801d910:	371c      	adds	r7, #28
 801d912:	46bd      	mov	sp, r7
 801d914:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d918:	4770      	bx	lr
 801d91a:	bf00      	nop
 801d91c:	24000768 	.word	0x24000768

0801d920 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801d920:	b580      	push	{r7, lr}
 801d922:	b082      	sub	sp, #8
 801d924:	af00      	add	r7, sp, #0
 801d926:	6078      	str	r0, [r7, #4]
 801d928:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801d92a:	2200      	movs	r2, #0
 801d92c:	6839      	ldr	r1, [r7, #0]
 801d92e:	6878      	ldr	r0, [r7, #4]
 801d930:	f7ff ffaa 	bl	801d888 <FATFS_LinkDriverEx>
 801d934:	4603      	mov	r3, r0
}
 801d936:	4618      	mov	r0, r3
 801d938:	3708      	adds	r7, #8
 801d93a:	46bd      	mov	sp, r7
 801d93c:	bd80      	pop	{r7, pc}
	...

0801d940 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 801d940:	b480      	push	{r7}
 801d942:	b085      	sub	sp, #20
 801d944:	af00      	add	r7, sp, #0
 801d946:	4603      	mov	r3, r0
 801d948:	6039      	str	r1, [r7, #0]
 801d94a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 801d94c:	88fb      	ldrh	r3, [r7, #6]
 801d94e:	2b7f      	cmp	r3, #127	@ 0x7f
 801d950:	d802      	bhi.n	801d958 <ff_convert+0x18>
		c = chr;
 801d952:	88fb      	ldrh	r3, [r7, #6]
 801d954:	81fb      	strh	r3, [r7, #14]
 801d956:	e025      	b.n	801d9a4 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 801d958:	683b      	ldr	r3, [r7, #0]
 801d95a:	2b00      	cmp	r3, #0
 801d95c:	d00b      	beq.n	801d976 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801d95e:	88fb      	ldrh	r3, [r7, #6]
 801d960:	2bff      	cmp	r3, #255	@ 0xff
 801d962:	d805      	bhi.n	801d970 <ff_convert+0x30>
 801d964:	88fb      	ldrh	r3, [r7, #6]
 801d966:	3b80      	subs	r3, #128	@ 0x80
 801d968:	4a12      	ldr	r2, [pc, #72]	@ (801d9b4 <ff_convert+0x74>)
 801d96a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801d96e:	e000      	b.n	801d972 <ff_convert+0x32>
 801d970:	2300      	movs	r3, #0
 801d972:	81fb      	strh	r3, [r7, #14]
 801d974:	e016      	b.n	801d9a4 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801d976:	2300      	movs	r3, #0
 801d978:	81fb      	strh	r3, [r7, #14]
 801d97a:	e009      	b.n	801d990 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 801d97c:	89fb      	ldrh	r3, [r7, #14]
 801d97e:	4a0d      	ldr	r2, [pc, #52]	@ (801d9b4 <ff_convert+0x74>)
 801d980:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801d984:	88fa      	ldrh	r2, [r7, #6]
 801d986:	429a      	cmp	r2, r3
 801d988:	d006      	beq.n	801d998 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 801d98a:	89fb      	ldrh	r3, [r7, #14]
 801d98c:	3301      	adds	r3, #1
 801d98e:	81fb      	strh	r3, [r7, #14]
 801d990:	89fb      	ldrh	r3, [r7, #14]
 801d992:	2b7f      	cmp	r3, #127	@ 0x7f
 801d994:	d9f2      	bls.n	801d97c <ff_convert+0x3c>
 801d996:	e000      	b.n	801d99a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 801d998:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801d99a:	89fb      	ldrh	r3, [r7, #14]
 801d99c:	3380      	adds	r3, #128	@ 0x80
 801d99e:	b29b      	uxth	r3, r3
 801d9a0:	b2db      	uxtb	r3, r3
 801d9a2:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 801d9a4:	89fb      	ldrh	r3, [r7, #14]
}
 801d9a6:	4618      	mov	r0, r3
 801d9a8:	3714      	adds	r7, #20
 801d9aa:	46bd      	mov	sp, r7
 801d9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d9b0:	4770      	bx	lr
 801d9b2:	bf00      	nop
 801d9b4:	0801e664 	.word	0x0801e664

0801d9b8 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 801d9b8:	b480      	push	{r7}
 801d9ba:	b087      	sub	sp, #28
 801d9bc:	af00      	add	r7, sp, #0
 801d9be:	4603      	mov	r3, r0
 801d9c0:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 801d9c2:	88fb      	ldrh	r3, [r7, #6]
 801d9c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801d9c8:	d201      	bcs.n	801d9ce <ff_wtoupper+0x16>
 801d9ca:	4b3e      	ldr	r3, [pc, #248]	@ (801dac4 <ff_wtoupper+0x10c>)
 801d9cc:	e000      	b.n	801d9d0 <ff_wtoupper+0x18>
 801d9ce:	4b3e      	ldr	r3, [pc, #248]	@ (801dac8 <ff_wtoupper+0x110>)
 801d9d0:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 801d9d2:	697b      	ldr	r3, [r7, #20]
 801d9d4:	1c9a      	adds	r2, r3, #2
 801d9d6:	617a      	str	r2, [r7, #20]
 801d9d8:	881b      	ldrh	r3, [r3, #0]
 801d9da:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 801d9dc:	8a7b      	ldrh	r3, [r7, #18]
 801d9de:	2b00      	cmp	r3, #0
 801d9e0:	d068      	beq.n	801dab4 <ff_wtoupper+0xfc>
 801d9e2:	88fa      	ldrh	r2, [r7, #6]
 801d9e4:	8a7b      	ldrh	r3, [r7, #18]
 801d9e6:	429a      	cmp	r2, r3
 801d9e8:	d364      	bcc.n	801dab4 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 801d9ea:	697b      	ldr	r3, [r7, #20]
 801d9ec:	1c9a      	adds	r2, r3, #2
 801d9ee:	617a      	str	r2, [r7, #20]
 801d9f0:	881b      	ldrh	r3, [r3, #0]
 801d9f2:	823b      	strh	r3, [r7, #16]
 801d9f4:	8a3b      	ldrh	r3, [r7, #16]
 801d9f6:	0a1b      	lsrs	r3, r3, #8
 801d9f8:	81fb      	strh	r3, [r7, #14]
 801d9fa:	8a3b      	ldrh	r3, [r7, #16]
 801d9fc:	b2db      	uxtb	r3, r3
 801d9fe:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 801da00:	88fa      	ldrh	r2, [r7, #6]
 801da02:	8a79      	ldrh	r1, [r7, #18]
 801da04:	8a3b      	ldrh	r3, [r7, #16]
 801da06:	440b      	add	r3, r1
 801da08:	429a      	cmp	r2, r3
 801da0a:	da49      	bge.n	801daa0 <ff_wtoupper+0xe8>
			switch (cmd) {
 801da0c:	89fb      	ldrh	r3, [r7, #14]
 801da0e:	2b08      	cmp	r3, #8
 801da10:	d84f      	bhi.n	801dab2 <ff_wtoupper+0xfa>
 801da12:	a201      	add	r2, pc, #4	@ (adr r2, 801da18 <ff_wtoupper+0x60>)
 801da14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801da18:	0801da3d 	.word	0x0801da3d
 801da1c:	0801da4f 	.word	0x0801da4f
 801da20:	0801da65 	.word	0x0801da65
 801da24:	0801da6d 	.word	0x0801da6d
 801da28:	0801da75 	.word	0x0801da75
 801da2c:	0801da7d 	.word	0x0801da7d
 801da30:	0801da85 	.word	0x0801da85
 801da34:	0801da8d 	.word	0x0801da8d
 801da38:	0801da95 	.word	0x0801da95
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 801da3c:	88fa      	ldrh	r2, [r7, #6]
 801da3e:	8a7b      	ldrh	r3, [r7, #18]
 801da40:	1ad3      	subs	r3, r2, r3
 801da42:	005b      	lsls	r3, r3, #1
 801da44:	697a      	ldr	r2, [r7, #20]
 801da46:	4413      	add	r3, r2
 801da48:	881b      	ldrh	r3, [r3, #0]
 801da4a:	80fb      	strh	r3, [r7, #6]
 801da4c:	e027      	b.n	801da9e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 801da4e:	88fa      	ldrh	r2, [r7, #6]
 801da50:	8a7b      	ldrh	r3, [r7, #18]
 801da52:	1ad3      	subs	r3, r2, r3
 801da54:	b29b      	uxth	r3, r3
 801da56:	f003 0301 	and.w	r3, r3, #1
 801da5a:	b29b      	uxth	r3, r3
 801da5c:	88fa      	ldrh	r2, [r7, #6]
 801da5e:	1ad3      	subs	r3, r2, r3
 801da60:	80fb      	strh	r3, [r7, #6]
 801da62:	e01c      	b.n	801da9e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 801da64:	88fb      	ldrh	r3, [r7, #6]
 801da66:	3b10      	subs	r3, #16
 801da68:	80fb      	strh	r3, [r7, #6]
 801da6a:	e018      	b.n	801da9e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 801da6c:	88fb      	ldrh	r3, [r7, #6]
 801da6e:	3b20      	subs	r3, #32
 801da70:	80fb      	strh	r3, [r7, #6]
 801da72:	e014      	b.n	801da9e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 801da74:	88fb      	ldrh	r3, [r7, #6]
 801da76:	3b30      	subs	r3, #48	@ 0x30
 801da78:	80fb      	strh	r3, [r7, #6]
 801da7a:	e010      	b.n	801da9e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 801da7c:	88fb      	ldrh	r3, [r7, #6]
 801da7e:	3b1a      	subs	r3, #26
 801da80:	80fb      	strh	r3, [r7, #6]
 801da82:	e00c      	b.n	801da9e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 801da84:	88fb      	ldrh	r3, [r7, #6]
 801da86:	3308      	adds	r3, #8
 801da88:	80fb      	strh	r3, [r7, #6]
 801da8a:	e008      	b.n	801da9e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 801da8c:	88fb      	ldrh	r3, [r7, #6]
 801da8e:	3b50      	subs	r3, #80	@ 0x50
 801da90:	80fb      	strh	r3, [r7, #6]
 801da92:	e004      	b.n	801da9e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 801da94:	88fb      	ldrh	r3, [r7, #6]
 801da96:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 801da9a:	80fb      	strh	r3, [r7, #6]
 801da9c:	bf00      	nop
			}
			break;
 801da9e:	e008      	b.n	801dab2 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 801daa0:	89fb      	ldrh	r3, [r7, #14]
 801daa2:	2b00      	cmp	r3, #0
 801daa4:	d195      	bne.n	801d9d2 <ff_wtoupper+0x1a>
 801daa6:	8a3b      	ldrh	r3, [r7, #16]
 801daa8:	005b      	lsls	r3, r3, #1
 801daaa:	697a      	ldr	r2, [r7, #20]
 801daac:	4413      	add	r3, r2
 801daae:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 801dab0:	e78f      	b.n	801d9d2 <ff_wtoupper+0x1a>
			break;
 801dab2:	bf00      	nop
	}

	return chr;
 801dab4:	88fb      	ldrh	r3, [r7, #6]
}
 801dab6:	4618      	mov	r0, r3
 801dab8:	371c      	adds	r7, #28
 801daba:	46bd      	mov	sp, r7
 801dabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dac0:	4770      	bx	lr
 801dac2:	bf00      	nop
 801dac4:	0801e764 	.word	0x0801e764
 801dac8:	0801e958 	.word	0x0801e958

0801dacc <memset>:
 801dacc:	4402      	add	r2, r0
 801dace:	4603      	mov	r3, r0
 801dad0:	4293      	cmp	r3, r2
 801dad2:	d100      	bne.n	801dad6 <memset+0xa>
 801dad4:	4770      	bx	lr
 801dad6:	f803 1b01 	strb.w	r1, [r3], #1
 801dada:	e7f9      	b.n	801dad0 <memset+0x4>

0801dadc <__errno>:
 801dadc:	4b01      	ldr	r3, [pc, #4]	@ (801dae4 <__errno+0x8>)
 801dade:	6818      	ldr	r0, [r3, #0]
 801dae0:	4770      	bx	lr
 801dae2:	bf00      	nop
 801dae4:	24000028 	.word	0x24000028

0801dae8 <__libc_init_array>:
 801dae8:	b570      	push	{r4, r5, r6, lr}
 801daea:	4d0d      	ldr	r5, [pc, #52]	@ (801db20 <__libc_init_array+0x38>)
 801daec:	4c0d      	ldr	r4, [pc, #52]	@ (801db24 <__libc_init_array+0x3c>)
 801daee:	1b64      	subs	r4, r4, r5
 801daf0:	10a4      	asrs	r4, r4, #2
 801daf2:	2600      	movs	r6, #0
 801daf4:	42a6      	cmp	r6, r4
 801daf6:	d109      	bne.n	801db0c <__libc_init_array+0x24>
 801daf8:	4d0b      	ldr	r5, [pc, #44]	@ (801db28 <__libc_init_array+0x40>)
 801dafa:	4c0c      	ldr	r4, [pc, #48]	@ (801db2c <__libc_init_array+0x44>)
 801dafc:	f000 fd00 	bl	801e500 <_init>
 801db00:	1b64      	subs	r4, r4, r5
 801db02:	10a4      	asrs	r4, r4, #2
 801db04:	2600      	movs	r6, #0
 801db06:	42a6      	cmp	r6, r4
 801db08:	d105      	bne.n	801db16 <__libc_init_array+0x2e>
 801db0a:	bd70      	pop	{r4, r5, r6, pc}
 801db0c:	f855 3b04 	ldr.w	r3, [r5], #4
 801db10:	4798      	blx	r3
 801db12:	3601      	adds	r6, #1
 801db14:	e7ee      	b.n	801daf4 <__libc_init_array+0xc>
 801db16:	f855 3b04 	ldr.w	r3, [r5], #4
 801db1a:	4798      	blx	r3
 801db1c:	3601      	adds	r6, #1
 801db1e:	e7f2      	b.n	801db06 <__libc_init_array+0x1e>
 801db20:	08020348 	.word	0x08020348
 801db24:	08020348 	.word	0x08020348
 801db28:	08020348 	.word	0x08020348
 801db2c:	0802034c 	.word	0x0802034c

0801db30 <atan2>:
 801db30:	f000 baaa 	b.w	801e088 <__ieee754_atan2>
 801db34:	0000      	movs	r0, r0
	...

0801db38 <sqrt>:
 801db38:	b508      	push	{r3, lr}
 801db3a:	ed2d 8b04 	vpush	{d8-d9}
 801db3e:	eeb0 8b40 	vmov.f64	d8, d0
 801db42:	f000 fa9d 	bl	801e080 <__ieee754_sqrt>
 801db46:	eeb4 8b48 	vcmp.f64	d8, d8
 801db4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801db4e:	d60c      	bvs.n	801db6a <sqrt+0x32>
 801db50:	ed9f 9b07 	vldr	d9, [pc, #28]	@ 801db70 <sqrt+0x38>
 801db54:	eeb4 8bc9 	vcmpe.f64	d8, d9
 801db58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801db5c:	d505      	bpl.n	801db6a <sqrt+0x32>
 801db5e:	f7ff ffbd 	bl	801dadc <__errno>
 801db62:	ee89 0b09 	vdiv.f64	d0, d9, d9
 801db66:	2321      	movs	r3, #33	@ 0x21
 801db68:	6003      	str	r3, [r0, #0]
 801db6a:	ecbd 8b04 	vpop	{d8-d9}
 801db6e:	bd08      	pop	{r3, pc}
	...

0801db78 <checkint>:
 801db78:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801db7c:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 801db80:	429a      	cmp	r2, r3
 801db82:	b570      	push	{r4, r5, r6, lr}
 801db84:	dd2a      	ble.n	801dbdc <checkint+0x64>
 801db86:	f240 4333 	movw	r3, #1075	@ 0x433
 801db8a:	429a      	cmp	r2, r3
 801db8c:	dc24      	bgt.n	801dbd8 <checkint+0x60>
 801db8e:	1a9b      	subs	r3, r3, r2
 801db90:	f1a3 0620 	sub.w	r6, r3, #32
 801db94:	f04f 32ff 	mov.w	r2, #4294967295
 801db98:	fa02 f403 	lsl.w	r4, r2, r3
 801db9c:	fa02 f606 	lsl.w	r6, r2, r6
 801dba0:	f1c3 0520 	rsb	r5, r3, #32
 801dba4:	fa22 f505 	lsr.w	r5, r2, r5
 801dba8:	4334      	orrs	r4, r6
 801dbaa:	432c      	orrs	r4, r5
 801dbac:	409a      	lsls	r2, r3
 801dbae:	ea20 0202 	bic.w	r2, r0, r2
 801dbb2:	ea21 0404 	bic.w	r4, r1, r4
 801dbb6:	4322      	orrs	r2, r4
 801dbb8:	f1a3 0420 	sub.w	r4, r3, #32
 801dbbc:	f1c3 0220 	rsb	r2, r3, #32
 801dbc0:	d10c      	bne.n	801dbdc <checkint+0x64>
 801dbc2:	40d8      	lsrs	r0, r3
 801dbc4:	fa01 f302 	lsl.w	r3, r1, r2
 801dbc8:	4318      	orrs	r0, r3
 801dbca:	40e1      	lsrs	r1, r4
 801dbcc:	4308      	orrs	r0, r1
 801dbce:	f000 0001 	and.w	r0, r0, #1
 801dbd2:	f1d0 0002 	rsbs	r0, r0, #2
 801dbd6:	bd70      	pop	{r4, r5, r6, pc}
 801dbd8:	2002      	movs	r0, #2
 801dbda:	e7fc      	b.n	801dbd6 <checkint+0x5e>
 801dbdc:	2000      	movs	r0, #0
 801dbde:	e7fa      	b.n	801dbd6 <checkint+0x5e>

0801dbe0 <pow>:
 801dbe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dbe4:	ee10 4a90 	vmov	r4, s1
 801dbe8:	ed2d 8b0a 	vpush	{d8-d12}
 801dbec:	ea4f 5814 	mov.w	r8, r4, lsr #20
 801dbf0:	ee11 aa90 	vmov	sl, s3
 801dbf4:	f108 32ff 	add.w	r2, r8, #4294967295
 801dbf8:	f240 73fd 	movw	r3, #2045	@ 0x7fd
 801dbfc:	429a      	cmp	r2, r3
 801dbfe:	ee10 5a10 	vmov	r5, s0
 801dc02:	ee11 0a10 	vmov	r0, s2
 801dc06:	b087      	sub	sp, #28
 801dc08:	46c4      	mov	ip, r8
 801dc0a:	ea4f 561a 	mov.w	r6, sl, lsr #20
 801dc0e:	d806      	bhi.n	801dc1e <pow+0x3e>
 801dc10:	f3c6 030a 	ubfx	r3, r6, #0, #11
 801dc14:	f2a3 33be 	subw	r3, r3, #958	@ 0x3be
 801dc18:	2b7f      	cmp	r3, #127	@ 0x7f
 801dc1a:	f240 8157 	bls.w	801decc <pow+0x2ec>
 801dc1e:	1802      	adds	r2, r0, r0
 801dc20:	eb4a 010a 	adc.w	r1, sl, sl
 801dc24:	f06f 0b01 	mvn.w	fp, #1
 801dc28:	1e57      	subs	r7, r2, #1
 801dc2a:	f141 33ff 	adc.w	r3, r1, #4294967295
 801dc2e:	f46f 1e00 	mvn.w	lr, #2097152	@ 0x200000
 801dc32:	45bb      	cmp	fp, r7
 801dc34:	eb7e 0303 	sbcs.w	r3, lr, r3
 801dc38:	d242      	bcs.n	801dcc0 <pow+0xe0>
 801dc3a:	ea52 0301 	orrs.w	r3, r2, r1
 801dc3e:	f04f 0300 	mov.w	r3, #0
 801dc42:	d10c      	bne.n	801dc5e <pow+0x7e>
 801dc44:	196d      	adds	r5, r5, r5
 801dc46:	f484 2400 	eor.w	r4, r4, #524288	@ 0x80000
 801dc4a:	4164      	adcs	r4, r4
 801dc4c:	42ab      	cmp	r3, r5
 801dc4e:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801dc52:	41a3      	sbcs	r3, r4
 801dc54:	f0c0 808f 	bcc.w	801dd76 <pow+0x196>
 801dc58:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801dc5c:	e02b      	b.n	801dcb6 <pow+0xd6>
 801dc5e:	4ed4      	ldr	r6, [pc, #848]	@ (801dfb0 <pow+0x3d0>)
 801dc60:	42b4      	cmp	r4, r6
 801dc62:	bf08      	it	eq
 801dc64:	429d      	cmpeq	r5, r3
 801dc66:	d109      	bne.n	801dc7c <pow+0x9c>
 801dc68:	1800      	adds	r0, r0, r0
 801dc6a:	f48a 2a00 	eor.w	sl, sl, #524288	@ 0x80000
 801dc6e:	eb4a 0a0a 	adc.w	sl, sl, sl
 801dc72:	4283      	cmp	r3, r0
 801dc74:	4bcf      	ldr	r3, [pc, #828]	@ (801dfb4 <pow+0x3d4>)
 801dc76:	eb73 030a 	sbcs.w	r3, r3, sl
 801dc7a:	e7eb      	b.n	801dc54 <pow+0x74>
 801dc7c:	196d      	adds	r5, r5, r5
 801dc7e:	48ce      	ldr	r0, [pc, #824]	@ (801dfb8 <pow+0x3d8>)
 801dc80:	4164      	adcs	r4, r4
 801dc82:	42ab      	cmp	r3, r5
 801dc84:	eb70 0604 	sbcs.w	r6, r0, r4
 801dc88:	d375      	bcc.n	801dd76 <pow+0x196>
 801dc8a:	4281      	cmp	r1, r0
 801dc8c:	bf08      	it	eq
 801dc8e:	429a      	cmpeq	r2, r3
 801dc90:	d171      	bne.n	801dd76 <pow+0x196>
 801dc92:	4aca      	ldr	r2, [pc, #808]	@ (801dfbc <pow+0x3dc>)
 801dc94:	4294      	cmp	r4, r2
 801dc96:	bf08      	it	eq
 801dc98:	429d      	cmpeq	r5, r3
 801dc9a:	d0dd      	beq.n	801dc58 <pow+0x78>
 801dc9c:	4294      	cmp	r4, r2
 801dc9e:	ea6f 0a0a 	mvn.w	sl, sl
 801dca2:	bf34      	ite	cc
 801dca4:	2400      	movcc	r4, #0
 801dca6:	2401      	movcs	r4, #1
 801dca8:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 801dcac:	4554      	cmp	r4, sl
 801dcae:	f040 81dc 	bne.w	801e06a <pow+0x48a>
 801dcb2:	ee21 0b01 	vmul.f64	d0, d1, d1
 801dcb6:	b007      	add	sp, #28
 801dcb8:	ecbd 8b0a 	vpop	{d8-d12}
 801dcbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dcc0:	196f      	adds	r7, r5, r5
 801dcc2:	eb44 0904 	adc.w	r9, r4, r4
 801dcc6:	1e7a      	subs	r2, r7, #1
 801dcc8:	f169 0300 	sbc.w	r3, r9, #0
 801dccc:	4593      	cmp	fp, r2
 801dcce:	eb7e 0303 	sbcs.w	r3, lr, r3
 801dcd2:	d225      	bcs.n	801dd20 <pow+0x140>
 801dcd4:	ee20 0b00 	vmul.f64	d0, d0, d0
 801dcd8:	2c00      	cmp	r4, #0
 801dcda:	da13      	bge.n	801dd04 <pow+0x124>
 801dcdc:	4651      	mov	r1, sl
 801dcde:	f7ff ff4b 	bl	801db78 <checkint>
 801dce2:	2801      	cmp	r0, #1
 801dce4:	d10e      	bne.n	801dd04 <pow+0x124>
 801dce6:	eeb1 0b40 	vneg.f64	d0, d0
 801dcea:	ea57 0909 	orrs.w	r9, r7, r9
 801dcee:	d10b      	bne.n	801dd08 <pow+0x128>
 801dcf0:	f1ba 0f00 	cmp.w	sl, #0
 801dcf4:	dadf      	bge.n	801dcb6 <pow+0xd6>
 801dcf6:	b007      	add	sp, #28
 801dcf8:	ecbd 8b0a 	vpop	{d8-d12}
 801dcfc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dd00:	f000 bbba 	b.w	801e478 <__math_divzero>
 801dd04:	2000      	movs	r0, #0
 801dd06:	e7f0      	b.n	801dcea <pow+0x10a>
 801dd08:	f1ba 0f00 	cmp.w	sl, #0
 801dd0c:	dad3      	bge.n	801dcb6 <pow+0xd6>
 801dd0e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801dd12:	ee86 7b00 	vdiv.f64	d7, d6, d0
 801dd16:	ed8d 7b00 	vstr	d7, [sp]
 801dd1a:	ed9d 0b00 	vldr	d0, [sp]
 801dd1e:	e7ca      	b.n	801dcb6 <pow+0xd6>
 801dd20:	2c00      	cmp	r4, #0
 801dd22:	da2b      	bge.n	801dd7c <pow+0x19c>
 801dd24:	4651      	mov	r1, sl
 801dd26:	f7ff ff27 	bl	801db78 <checkint>
 801dd2a:	b930      	cbnz	r0, 801dd3a <pow+0x15a>
 801dd2c:	b007      	add	sp, #28
 801dd2e:	ecbd 8b0a 	vpop	{d8-d12}
 801dd32:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dd36:	f000 bbb7 	b.w	801e4a8 <__math_invalid>
 801dd3a:	1e41      	subs	r1, r0, #1
 801dd3c:	4248      	negs	r0, r1
 801dd3e:	4148      	adcs	r0, r1
 801dd40:	0480      	lsls	r0, r0, #18
 801dd42:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801dd46:	f3c8 0c0a 	ubfx	ip, r8, #0, #11
 801dd4a:	f3c6 020a 	ubfx	r2, r6, #0, #11
 801dd4e:	f2a2 33be 	subw	r3, r2, #958	@ 0x3be
 801dd52:	2b7f      	cmp	r3, #127	@ 0x7f
 801dd54:	d92d      	bls.n	801ddb2 <pow+0x1d2>
 801dd56:	4b96      	ldr	r3, [pc, #600]	@ (801dfb0 <pow+0x3d0>)
 801dd58:	2000      	movs	r0, #0
 801dd5a:	429c      	cmp	r4, r3
 801dd5c:	bf08      	it	eq
 801dd5e:	4285      	cmpeq	r5, r0
 801dd60:	f43f af7a 	beq.w	801dc58 <pow+0x78>
 801dd64:	f240 31bd 	movw	r1, #957	@ 0x3bd
 801dd68:	428a      	cmp	r2, r1
 801dd6a:	d80c      	bhi.n	801dd86 <pow+0x1a6>
 801dd6c:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801dd70:	42a8      	cmp	r0, r5
 801dd72:	41a3      	sbcs	r3, r4
 801dd74:	d204      	bcs.n	801dd80 <pow+0x1a0>
 801dd76:	ee31 0b00 	vadd.f64	d0, d1, d0
 801dd7a:	e79c      	b.n	801dcb6 <pow+0xd6>
 801dd7c:	2000      	movs	r0, #0
 801dd7e:	e7e4      	b.n	801dd4a <pow+0x16a>
 801dd80:	ee30 0b41 	vsub.f64	d0, d0, d1
 801dd84:	e797      	b.n	801dcb6 <pow+0xd6>
 801dd86:	2d01      	cmp	r5, #1
 801dd88:	eb74 0303 	sbcs.w	r3, r4, r3
 801dd8c:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801dd90:	bf34      	ite	cc
 801dd92:	2301      	movcc	r3, #1
 801dd94:	2300      	movcs	r3, #0
 801dd96:	4296      	cmp	r6, r2
 801dd98:	bf8c      	ite	hi
 801dd9a:	2600      	movhi	r6, #0
 801dd9c:	2601      	movls	r6, #1
 801dd9e:	42b3      	cmp	r3, r6
 801dda0:	f000 809c 	beq.w	801dedc <pow+0x2fc>
 801dda4:	b007      	add	sp, #28
 801dda6:	ecbd 8b0a 	vpop	{d8-d12}
 801ddaa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ddae:	f000 bb5b 	b.w	801e468 <__math_oflow>
 801ddb2:	f1bc 0f00 	cmp.w	ip, #0
 801ddb6:	d10a      	bne.n	801ddce <pow+0x1ee>
 801ddb8:	ed9f 7b79 	vldr	d7, [pc, #484]	@ 801dfa0 <pow+0x3c0>
 801ddbc:	ee20 7b07 	vmul.f64	d7, d0, d7
 801ddc0:	ec53 2b17 	vmov	r2, r3, d7
 801ddc4:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 801ddc8:	4615      	mov	r5, r2
 801ddca:	f1a4 7450 	sub.w	r4, r4, #54525952	@ 0x3400000
 801ddce:	4a7c      	ldr	r2, [pc, #496]	@ (801dfc0 <pow+0x3e0>)
 801ddd0:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 801ddd4:	4422      	add	r2, r4
 801ddd6:	1513      	asrs	r3, r2, #20
 801ddd8:	f3c2 3146 	ubfx	r1, r2, #13, #7
 801dddc:	ee03 3a10 	vmov	s6, r3
 801dde0:	0d12      	lsrs	r2, r2, #20
 801dde2:	4b78      	ldr	r3, [pc, #480]	@ (801dfc4 <pow+0x3e4>)
 801dde4:	0512      	lsls	r2, r2, #20
 801dde6:	eb03 1641 	add.w	r6, r3, r1, lsl #5
 801ddea:	1aa7      	subs	r7, r4, r2
 801ddec:	eb03 1241 	add.w	r2, r3, r1, lsl #5
 801ddf0:	ed92 5b12 	vldr	d5, [r2, #72]	@ 0x48
 801ddf4:	ed96 7b18 	vldr	d7, [r6, #96]	@ 0x60
 801ddf8:	1e2e      	subs	r6, r5, #0
 801ddfa:	ec47 6b14 	vmov	d4, r6, r7
 801ddfe:	ed92 2b16 	vldr	d2, [r2, #88]	@ 0x58
 801de02:	eea4 6b05 	vfma.f64	d6, d4, d5
 801de06:	ed93 5b00 	vldr	d5, [r3]
 801de0a:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 801de0e:	eea3 2b05 	vfma.f64	d2, d3, d5
 801de12:	ed93 5b02 	vldr	d5, [r3, #8]
 801de16:	ee36 4b02 	vadd.f64	d4, d6, d2
 801de1a:	ee32 2b44 	vsub.f64	d2, d2, d4
 801de1e:	eea3 7b05 	vfma.f64	d7, d3, d5
 801de22:	ed93 5b04 	vldr	d5, [r3, #16]
 801de26:	ee32 2b06 	vadd.f64	d2, d2, d6
 801de2a:	ee37 7b02 	vadd.f64	d7, d7, d2
 801de2e:	ee26 5b05 	vmul.f64	d5, d6, d5
 801de32:	ee26 0b05 	vmul.f64	d0, d6, d5
 801de36:	ee34 8b00 	vadd.f64	d8, d4, d0
 801de3a:	eeb0 9b40 	vmov.f64	d9, d0
 801de3e:	ee34 4b48 	vsub.f64	d4, d4, d8
 801de42:	ee96 9b05 	vfnms.f64	d9, d6, d5
 801de46:	ee34 ab00 	vadd.f64	d10, d4, d0
 801de4a:	ed93 5b06 	vldr	d5, [r3, #24]
 801de4e:	ee26 bb00 	vmul.f64	d11, d6, d0
 801de52:	ee37 7b09 	vadd.f64	d7, d7, d9
 801de56:	ed93 4b08 	vldr	d4, [r3, #32]
 801de5a:	ee37 7b0a 	vadd.f64	d7, d7, d10
 801de5e:	ed93 3b0c 	vldr	d3, [r3, #48]	@ 0x30
 801de62:	eea6 5b04 	vfma.f64	d5, d6, d4
 801de66:	ed93 4b0a 	vldr	d4, [r3, #40]	@ 0x28
 801de6a:	ed93 cb10 	vldr	d12, [r3, #64]	@ 0x40
 801de6e:	eea6 4b03 	vfma.f64	d4, d6, d3
 801de72:	ed93 3b0e 	vldr	d3, [r3, #56]	@ 0x38
 801de76:	eea6 3b0c 	vfma.f64	d3, d6, d12
 801de7a:	eea0 4b03 	vfma.f64	d4, d0, d3
 801de7e:	eea0 5b04 	vfma.f64	d5, d0, d4
 801de82:	eeab 7b05 	vfma.f64	d7, d11, d5
 801de86:	ee38 4b07 	vadd.f64	d4, d8, d7
 801de8a:	ee21 6b04 	vmul.f64	d6, d1, d4
 801de8e:	ee16 3a90 	vmov	r3, s13
 801de92:	eeb0 5b46 	vmov.f64	d5, d6
 801de96:	f3c3 560a 	ubfx	r6, r3, #20, #11
 801de9a:	f46f 7272 	mvn.w	r2, #968	@ 0x3c8
 801de9e:	18b2      	adds	r2, r6, r2
 801dea0:	2a3e      	cmp	r2, #62	@ 0x3e
 801dea2:	ee91 5b04 	vfnms.f64	d5, d1, d4
 801dea6:	ee38 8b44 	vsub.f64	d8, d8, d4
 801deaa:	ee38 8b07 	vadd.f64	d8, d8, d7
 801deae:	eea1 5b08 	vfma.f64	d5, d1, d8
 801deb2:	d91b      	bls.n	801deec <pow+0x30c>
 801deb4:	2a00      	cmp	r2, #0
 801deb6:	da0b      	bge.n	801ded0 <pow+0x2f0>
 801deb8:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801debc:	ee36 0b00 	vadd.f64	d0, d6, d0
 801dec0:	2800      	cmp	r0, #0
 801dec2:	f43f aef8 	beq.w	801dcb6 <pow+0xd6>
 801dec6:	eeb1 0b40 	vneg.f64	d0, d0
 801deca:	e6f4      	b.n	801dcb6 <pow+0xd6>
 801decc:	2000      	movs	r0, #0
 801dece:	e77e      	b.n	801ddce <pow+0x1ee>
 801ded0:	f5b6 6f81 	cmp.w	r6, #1032	@ 0x408
 801ded4:	d909      	bls.n	801deea <pow+0x30a>
 801ded6:	2b00      	cmp	r3, #0
 801ded8:	f6bf af64 	bge.w	801dda4 <pow+0x1c4>
 801dedc:	b007      	add	sp, #28
 801dede:	ecbd 8b0a 	vpop	{d8-d12}
 801dee2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dee6:	f000 bab7 	b.w	801e458 <__math_uflow>
 801deea:	2600      	movs	r6, #0
 801deec:	4936      	ldr	r1, [pc, #216]	@ (801dfc8 <pow+0x3e8>)
 801deee:	ed91 4b02 	vldr	d4, [r1, #8]
 801def2:	ed91 3b00 	vldr	d3, [r1]
 801def6:	eeb0 7b44 	vmov.f64	d7, d4
 801defa:	eea6 7b03 	vfma.f64	d7, d6, d3
 801defe:	ee17 5a10 	vmov	r5, s14
 801df02:	ee37 7b44 	vsub.f64	d7, d7, d4
 801df06:	ed91 4b04 	vldr	d4, [r1, #16]
 801df0a:	f005 037f 	and.w	r3, r5, #127	@ 0x7f
 801df0e:	eea7 6b04 	vfma.f64	d6, d7, d4
 801df12:	ed91 4b06 	vldr	d4, [r1, #24]
 801df16:	18dc      	adds	r4, r3, r3
 801df18:	f104 030f 	add.w	r3, r4, #15
 801df1c:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 801df20:	eea7 6b04 	vfma.f64	d6, d7, d4
 801df24:	ed91 3b0a 	vldr	d3, [r1, #40]	@ 0x28
 801df28:	ee35 5b06 	vadd.f64	d5, d5, d6
 801df2c:	ee25 6b05 	vmul.f64	d6, d5, d5
 801df30:	ed94 7b1c 	vldr	d7, [r4, #112]	@ 0x70
 801df34:	ed91 4b08 	vldr	d4, [r1, #32]
 801df38:	ee35 7b07 	vadd.f64	d7, d5, d7
 801df3c:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 801df40:	eea5 4b03 	vfma.f64	d4, d5, d3
 801df44:	ed91 3b0e 	vldr	d3, [r1, #56]	@ 0x38
 801df48:	eea6 7b04 	vfma.f64	d7, d6, d4
 801df4c:	ee26 6b06 	vmul.f64	d6, d6, d6
 801df50:	ed91 4b0c 	vldr	d4, [r1, #48]	@ 0x30
 801df54:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 801df58:	f8d2 e004 	ldr.w	lr, [r2, #4]
 801df5c:	eea5 4b03 	vfma.f64	d4, d5, d3
 801df60:	1940      	adds	r0, r0, r5
 801df62:	2700      	movs	r7, #0
 801df64:	eb17 020c 	adds.w	r2, r7, ip
 801df68:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 801df6c:	eea6 7b04 	vfma.f64	d7, d6, d4
 801df70:	2e00      	cmp	r6, #0
 801df72:	d175      	bne.n	801e060 <pow+0x480>
 801df74:	42bd      	cmp	r5, r7
 801df76:	db29      	blt.n	801dfcc <pow+0x3ec>
 801df78:	f103 4140 	add.w	r1, r3, #3221225472	@ 0xc0000000
 801df7c:	f501 0170 	add.w	r1, r1, #15728640	@ 0xf00000
 801df80:	4610      	mov	r0, r2
 801df82:	ec41 0b10 	vmov	d0, r0, r1
 801df86:	eea7 0b00 	vfma.f64	d0, d7, d0
 801df8a:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 801dfa8 <pow+0x3c8>
 801df8e:	ee20 0b07 	vmul.f64	d0, d0, d7
 801df92:	b007      	add	sp, #28
 801df94:	ecbd 8b0a 	vpop	{d8-d12}
 801df98:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801df9c:	f000 ba9c 	b.w	801e4d8 <__math_check_oflow>
 801dfa0:	00000000 	.word	0x00000000
 801dfa4:	43300000 	.word	0x43300000
 801dfa8:	00000000 	.word	0x00000000
 801dfac:	7f000000 	.word	0x7f000000
 801dfb0:	3ff00000 	.word	0x3ff00000
 801dfb4:	fff00000 	.word	0xfff00000
 801dfb8:	ffe00000 	.word	0xffe00000
 801dfbc:	7fe00000 	.word	0x7fe00000
 801dfc0:	c0196aab 	.word	0xc0196aab
 801dfc4:	0801ea18 	.word	0x0801ea18
 801dfc8:	0801fad0 	.word	0x0801fad0
 801dfcc:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 801dfd0:	f501 1100 	add.w	r1, r1, #2097152	@ 0x200000
 801dfd4:	4610      	mov	r0, r2
 801dfd6:	ec41 0b15 	vmov	d5, r0, r1
 801dfda:	eeb7 3b00 	vmov.f64	d3, #112	@ 0x3f800000  1.0
 801dfde:	ee27 6b05 	vmul.f64	d6, d7, d5
 801dfe2:	ee35 7b06 	vadd.f64	d7, d5, d6
 801dfe6:	eeb0 4bc7 	vabs.f64	d4, d7
 801dfea:	eeb4 4bc3 	vcmpe.f64	d4, d3
 801dfee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dff2:	ed9f 0b1f 	vldr	d0, [pc, #124]	@ 801e070 <pow+0x490>
 801dff6:	d52a      	bpl.n	801e04e <pow+0x46e>
 801dff8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801dffc:	ee35 5b47 	vsub.f64	d5, d5, d7
 801e000:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e004:	ee35 5b06 	vadd.f64	d5, d5, d6
 801e008:	eebf 4b00 	vmov.f64	d4, #240	@ 0xbf800000 -1.0
 801e00c:	bf58      	it	pl
 801e00e:	eeb0 4b43 	vmovpl.f64	d4, d3
 801e012:	ee37 3b04 	vadd.f64	d3, d7, d4
 801e016:	ee34 6b43 	vsub.f64	d6, d4, d3
 801e01a:	ee36 6b07 	vadd.f64	d6, d6, d7
 801e01e:	ee36 6b05 	vadd.f64	d6, d6, d5
 801e022:	ee36 6b03 	vadd.f64	d6, d6, d3
 801e026:	ee36 7b44 	vsub.f64	d7, d6, d4
 801e02a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801e02e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e032:	d104      	bne.n	801e03e <pow+0x45e>
 801e034:	4632      	mov	r2, r6
 801e036:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 801e03a:	ec43 2b17 	vmov	d7, r2, r3
 801e03e:	ed8d 0b02 	vstr	d0, [sp, #8]
 801e042:	ed9d 6b02 	vldr	d6, [sp, #8]
 801e046:	ee26 6b00 	vmul.f64	d6, d6, d0
 801e04a:	ed8d 6b04 	vstr	d6, [sp, #16]
 801e04e:	ee27 0b00 	vmul.f64	d0, d7, d0
 801e052:	b007      	add	sp, #28
 801e054:	ecbd 8b0a 	vpop	{d8-d12}
 801e058:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e05c:	f000 ba33 	b.w	801e4c6 <__math_check_uflow>
 801e060:	ec43 2b10 	vmov	d0, r2, r3
 801e064:	eea7 0b00 	vfma.f64	d0, d7, d0
 801e068:	e625      	b.n	801dcb6 <pow+0xd6>
 801e06a:	ed9f 0b03 	vldr	d0, [pc, #12]	@ 801e078 <pow+0x498>
 801e06e:	e622      	b.n	801dcb6 <pow+0xd6>
 801e070:	00000000 	.word	0x00000000
 801e074:	00100000 	.word	0x00100000
	...

0801e080 <__ieee754_sqrt>:
 801e080:	eeb1 0bc0 	vsqrt.f64	d0, d0
 801e084:	4770      	bx	lr
	...

0801e088 <__ieee754_atan2>:
 801e088:	ee11 1a10 	vmov	r1, s2
 801e08c:	eeb0 7b40 	vmov.f64	d7, d0
 801e090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e092:	ee11 5a90 	vmov	r5, s3
 801e096:	424b      	negs	r3, r1
 801e098:	4f59      	ldr	r7, [pc, #356]	@ (801e200 <__ieee754_atan2+0x178>)
 801e09a:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801e09e:	430b      	orrs	r3, r1
 801e0a0:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 801e0a4:	42bb      	cmp	r3, r7
 801e0a6:	d80d      	bhi.n	801e0c4 <__ieee754_atan2+0x3c>
 801e0a8:	ee10 ca10 	vmov	ip, s0
 801e0ac:	ee17 6a90 	vmov	r6, s15
 801e0b0:	f1cc 0000 	rsb	r0, ip, #0
 801e0b4:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801e0b8:	ea40 000c 	orr.w	r0, r0, ip
 801e0bc:	ea43 70d0 	orr.w	r0, r3, r0, lsr #31
 801e0c0:	42b8      	cmp	r0, r7
 801e0c2:	d904      	bls.n	801e0ce <__ieee754_atan2+0x46>
 801e0c4:	ee37 7b01 	vadd.f64	d7, d7, d1
 801e0c8:	eeb0 0b47 	vmov.f64	d0, d7
 801e0cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e0ce:	f105 4040 	add.w	r0, r5, #3221225472	@ 0xc0000000
 801e0d2:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 801e0d6:	4308      	orrs	r0, r1
 801e0d8:	d103      	bne.n	801e0e2 <__ieee754_atan2+0x5a>
 801e0da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801e0de:	f000 b897 	b.w	801e210 <atan>
 801e0e2:	17ac      	asrs	r4, r5, #30
 801e0e4:	f004 0402 	and.w	r4, r4, #2
 801e0e8:	ea53 0c0c 	orrs.w	ip, r3, ip
 801e0ec:	ea44 74d6 	orr.w	r4, r4, r6, lsr #31
 801e0f0:	d107      	bne.n	801e102 <__ieee754_atan2+0x7a>
 801e0f2:	2c02      	cmp	r4, #2
 801e0f4:	d05c      	beq.n	801e1b0 <__ieee754_atan2+0x128>
 801e0f6:	ed9f 6b34 	vldr	d6, [pc, #208]	@ 801e1c8 <__ieee754_atan2+0x140>
 801e0fa:	2c03      	cmp	r4, #3
 801e0fc:	fe06 7b00 	vseleq.f64	d7, d6, d0
 801e100:	e7e2      	b.n	801e0c8 <__ieee754_atan2+0x40>
 801e102:	4311      	orrs	r1, r2
 801e104:	d107      	bne.n	801e116 <__ieee754_atan2+0x8e>
 801e106:	ed9f 7b32 	vldr	d7, [pc, #200]	@ 801e1d0 <__ieee754_atan2+0x148>
 801e10a:	ed9f 6b33 	vldr	d6, [pc, #204]	@ 801e1d8 <__ieee754_atan2+0x150>
 801e10e:	2e00      	cmp	r6, #0
 801e110:	fe27 7b06 	vselge.f64	d7, d7, d6
 801e114:	e7d8      	b.n	801e0c8 <__ieee754_atan2+0x40>
 801e116:	42ba      	cmp	r2, r7
 801e118:	d10f      	bne.n	801e13a <__ieee754_atan2+0xb2>
 801e11a:	4293      	cmp	r3, r2
 801e11c:	f104 34ff 	add.w	r4, r4, #4294967295
 801e120:	d107      	bne.n	801e132 <__ieee754_atan2+0xaa>
 801e122:	2c02      	cmp	r4, #2
 801e124:	d847      	bhi.n	801e1b6 <__ieee754_atan2+0x12e>
 801e126:	4b37      	ldr	r3, [pc, #220]	@ (801e204 <__ieee754_atan2+0x17c>)
 801e128:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801e12c:	ed93 7b00 	vldr	d7, [r3]
 801e130:	e7ca      	b.n	801e0c8 <__ieee754_atan2+0x40>
 801e132:	2c02      	cmp	r4, #2
 801e134:	d842      	bhi.n	801e1bc <__ieee754_atan2+0x134>
 801e136:	4b34      	ldr	r3, [pc, #208]	@ (801e208 <__ieee754_atan2+0x180>)
 801e138:	e7f6      	b.n	801e128 <__ieee754_atan2+0xa0>
 801e13a:	42bb      	cmp	r3, r7
 801e13c:	d0e3      	beq.n	801e106 <__ieee754_atan2+0x7e>
 801e13e:	1a9b      	subs	r3, r3, r2
 801e140:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 801e144:	ea4f 5223 	mov.w	r2, r3, asr #20
 801e148:	da1a      	bge.n	801e180 <__ieee754_atan2+0xf8>
 801e14a:	2d00      	cmp	r5, #0
 801e14c:	da01      	bge.n	801e152 <__ieee754_atan2+0xca>
 801e14e:	323c      	adds	r2, #60	@ 0x3c
 801e150:	db19      	blt.n	801e186 <__ieee754_atan2+0xfe>
 801e152:	ee87 0b01 	vdiv.f64	d0, d7, d1
 801e156:	f000 f955 	bl	801e404 <fabs>
 801e15a:	f000 f859 	bl	801e210 <atan>
 801e15e:	eeb0 7b40 	vmov.f64	d7, d0
 801e162:	2c01      	cmp	r4, #1
 801e164:	d012      	beq.n	801e18c <__ieee754_atan2+0x104>
 801e166:	2c02      	cmp	r4, #2
 801e168:	d019      	beq.n	801e19e <__ieee754_atan2+0x116>
 801e16a:	2c00      	cmp	r4, #0
 801e16c:	d0ac      	beq.n	801e0c8 <__ieee754_atan2+0x40>
 801e16e:	ed9f 6b1c 	vldr	d6, [pc, #112]	@ 801e1e0 <__ieee754_atan2+0x158>
 801e172:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e176:	ed9f 6b1c 	vldr	d6, [pc, #112]	@ 801e1e8 <__ieee754_atan2+0x160>
 801e17a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e17e:	e7a3      	b.n	801e0c8 <__ieee754_atan2+0x40>
 801e180:	ed9f 7b13 	vldr	d7, [pc, #76]	@ 801e1d0 <__ieee754_atan2+0x148>
 801e184:	e7ed      	b.n	801e162 <__ieee754_atan2+0xda>
 801e186:	ed9f 7b1a 	vldr	d7, [pc, #104]	@ 801e1f0 <__ieee754_atan2+0x168>
 801e18a:	e7ea      	b.n	801e162 <__ieee754_atan2+0xda>
 801e18c:	ee17 1a90 	vmov	r1, s15
 801e190:	ec53 2b17 	vmov	r2, r3, d7
 801e194:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801e198:	ec43 2b17 	vmov	d7, r2, r3
 801e19c:	e794      	b.n	801e0c8 <__ieee754_atan2+0x40>
 801e19e:	ed9f 6b10 	vldr	d6, [pc, #64]	@ 801e1e0 <__ieee754_atan2+0x158>
 801e1a2:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e1a6:	ed9f 6b10 	vldr	d6, [pc, #64]	@ 801e1e8 <__ieee754_atan2+0x160>
 801e1aa:	ee36 7b47 	vsub.f64	d7, d6, d7
 801e1ae:	e78b      	b.n	801e0c8 <__ieee754_atan2+0x40>
 801e1b0:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 801e1e8 <__ieee754_atan2+0x160>
 801e1b4:	e788      	b.n	801e0c8 <__ieee754_atan2+0x40>
 801e1b6:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 801e1f8 <__ieee754_atan2+0x170>
 801e1ba:	e785      	b.n	801e0c8 <__ieee754_atan2+0x40>
 801e1bc:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 801e1f0 <__ieee754_atan2+0x168>
 801e1c0:	e782      	b.n	801e0c8 <__ieee754_atan2+0x40>
 801e1c2:	bf00      	nop
 801e1c4:	f3af 8000 	nop.w
 801e1c8:	54442d18 	.word	0x54442d18
 801e1cc:	c00921fb 	.word	0xc00921fb
 801e1d0:	54442d18 	.word	0x54442d18
 801e1d4:	3ff921fb 	.word	0x3ff921fb
 801e1d8:	54442d18 	.word	0x54442d18
 801e1dc:	bff921fb 	.word	0xbff921fb
 801e1e0:	33145c07 	.word	0x33145c07
 801e1e4:	3ca1a626 	.word	0x3ca1a626
 801e1e8:	54442d18 	.word	0x54442d18
 801e1ec:	400921fb 	.word	0x400921fb
	...
 801e1f8:	54442d18 	.word	0x54442d18
 801e1fc:	3fe921fb 	.word	0x3fe921fb
 801e200:	7ff00000 	.word	0x7ff00000
 801e204:	0801fa78 	.word	0x0801fa78
 801e208:	0801fa60 	.word	0x0801fa60
 801e20c:	00000000 	.word	0x00000000

0801e210 <atan>:
 801e210:	b538      	push	{r3, r4, r5, lr}
 801e212:	eeb0 7b40 	vmov.f64	d7, d0
 801e216:	ee17 5a90 	vmov	r5, s15
 801e21a:	4b73      	ldr	r3, [pc, #460]	@ (801e3e8 <atan+0x1d8>)
 801e21c:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 801e220:	429c      	cmp	r4, r3
 801e222:	d913      	bls.n	801e24c <atan+0x3c>
 801e224:	4b71      	ldr	r3, [pc, #452]	@ (801e3ec <atan+0x1dc>)
 801e226:	429c      	cmp	r4, r3
 801e228:	d803      	bhi.n	801e232 <atan+0x22>
 801e22a:	d107      	bne.n	801e23c <atan+0x2c>
 801e22c:	ee10 3a10 	vmov	r3, s0
 801e230:	b123      	cbz	r3, 801e23c <atan+0x2c>
 801e232:	ee37 7b07 	vadd.f64	d7, d7, d7
 801e236:	eeb0 0b47 	vmov.f64	d0, d7
 801e23a:	bd38      	pop	{r3, r4, r5, pc}
 801e23c:	ed9f 7b4e 	vldr	d7, [pc, #312]	@ 801e378 <atan+0x168>
 801e240:	ed9f 6b4f 	vldr	d6, [pc, #316]	@ 801e380 <atan+0x170>
 801e244:	2d00      	cmp	r5, #0
 801e246:	fe36 7b07 	vselgt.f64	d7, d6, d7
 801e24a:	e7f4      	b.n	801e236 <atan+0x26>
 801e24c:	4b68      	ldr	r3, [pc, #416]	@ (801e3f0 <atan+0x1e0>)
 801e24e:	429c      	cmp	r4, r3
 801e250:	d811      	bhi.n	801e276 <atan+0x66>
 801e252:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 801e256:	429c      	cmp	r4, r3
 801e258:	d80a      	bhi.n	801e270 <atan+0x60>
 801e25a:	eeb7 5b00 	vmov.f64	d5, #112	@ 0x3f800000  1.0
 801e25e:	ed9f 6b4a 	vldr	d6, [pc, #296]	@ 801e388 <atan+0x178>
 801e262:	ee30 6b06 	vadd.f64	d6, d0, d6
 801e266:	eeb4 6bc5 	vcmpe.f64	d6, d5
 801e26a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e26e:	dce2      	bgt.n	801e236 <atan+0x26>
 801e270:	f04f 33ff 	mov.w	r3, #4294967295
 801e274:	e013      	b.n	801e29e <atan+0x8e>
 801e276:	f000 f8c5 	bl	801e404 <fabs>
 801e27a:	4b5e      	ldr	r3, [pc, #376]	@ (801e3f4 <atan+0x1e4>)
 801e27c:	429c      	cmp	r4, r3
 801e27e:	d84f      	bhi.n	801e320 <atan+0x110>
 801e280:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 801e284:	429c      	cmp	r4, r3
 801e286:	d841      	bhi.n	801e30c <atan+0xfc>
 801e288:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 801e28c:	eebf 5b00 	vmov.f64	d5, #240	@ 0xbf800000 -1.0
 801e290:	2300      	movs	r3, #0
 801e292:	eea0 5b07 	vfma.f64	d5, d0, d7
 801e296:	ee30 0b07 	vadd.f64	d0, d0, d7
 801e29a:	ee85 7b00 	vdiv.f64	d7, d5, d0
 801e29e:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 801e390 <atan+0x180>
 801e2a2:	ee27 4b07 	vmul.f64	d4, d7, d7
 801e2a6:	ee24 5b04 	vmul.f64	d5, d4, d4
 801e2aa:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 801e398 <atan+0x188>
 801e2ae:	eea5 3b06 	vfma.f64	d3, d5, d6
 801e2b2:	ed9f 6b3b 	vldr	d6, [pc, #236]	@ 801e3a0 <atan+0x190>
 801e2b6:	eea3 6b05 	vfma.f64	d6, d3, d5
 801e2ba:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 801e3a8 <atan+0x198>
 801e2be:	eea6 3b05 	vfma.f64	d3, d6, d5
 801e2c2:	ed9f 6b3b 	vldr	d6, [pc, #236]	@ 801e3b0 <atan+0x1a0>
 801e2c6:	eea3 6b05 	vfma.f64	d6, d3, d5
 801e2ca:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 801e3b8 <atan+0x1a8>
 801e2ce:	ed9f 2b3c 	vldr	d2, [pc, #240]	@ 801e3c0 <atan+0x1b0>
 801e2d2:	eea6 3b05 	vfma.f64	d3, d6, d5
 801e2d6:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 801e3c8 <atan+0x1b8>
 801e2da:	eea5 2b06 	vfma.f64	d2, d5, d6
 801e2de:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 801e3d0 <atan+0x1c0>
 801e2e2:	eea2 6b05 	vfma.f64	d6, d2, d5
 801e2e6:	ed9f 2b3c 	vldr	d2, [pc, #240]	@ 801e3d8 <atan+0x1c8>
 801e2ea:	eea6 2b05 	vfma.f64	d2, d6, d5
 801e2ee:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 801e3e0 <atan+0x1d0>
 801e2f2:	1c5a      	adds	r2, r3, #1
 801e2f4:	eea2 6b05 	vfma.f64	d6, d2, d5
 801e2f8:	ee26 6b05 	vmul.f64	d6, d6, d5
 801e2fc:	eea3 6b04 	vfma.f64	d6, d3, d4
 801e300:	ee27 6b06 	vmul.f64	d6, d7, d6
 801e304:	d121      	bne.n	801e34a <atan+0x13a>
 801e306:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e30a:	e794      	b.n	801e236 <atan+0x26>
 801e30c:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 801e310:	2301      	movs	r3, #1
 801e312:	ee30 5b47 	vsub.f64	d5, d0, d7
 801e316:	ee30 0b07 	vadd.f64	d0, d0, d7
 801e31a:	ee85 7b00 	vdiv.f64	d7, d5, d0
 801e31e:	e7be      	b.n	801e29e <atan+0x8e>
 801e320:	4b35      	ldr	r3, [pc, #212]	@ (801e3f8 <atan+0x1e8>)
 801e322:	429c      	cmp	r4, r3
 801e324:	d20b      	bcs.n	801e33e <atan+0x12e>
 801e326:	eeb7 7b08 	vmov.f64	d7, #120	@ 0x3fc00000  1.5
 801e32a:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801e32e:	ee30 5b47 	vsub.f64	d5, d0, d7
 801e332:	eea0 6b07 	vfma.f64	d6, d0, d7
 801e336:	2302      	movs	r3, #2
 801e338:	ee85 7b06 	vdiv.f64	d7, d5, d6
 801e33c:	e7af      	b.n	801e29e <atan+0x8e>
 801e33e:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 801e342:	2303      	movs	r3, #3
 801e344:	ee86 7b00 	vdiv.f64	d7, d6, d0
 801e348:	e7a9      	b.n	801e29e <atan+0x8e>
 801e34a:	4a2c      	ldr	r2, [pc, #176]	@ (801e3fc <atan+0x1ec>)
 801e34c:	492c      	ldr	r1, [pc, #176]	@ (801e400 <atan+0x1f0>)
 801e34e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801e352:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 801e356:	ed93 5b00 	vldr	d5, [r3]
 801e35a:	ee36 6b45 	vsub.f64	d6, d6, d5
 801e35e:	ee36 6b47 	vsub.f64	d6, d6, d7
 801e362:	ed92 7b00 	vldr	d7, [r2]
 801e366:	2d00      	cmp	r5, #0
 801e368:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e36c:	bfb8      	it	lt
 801e36e:	eeb1 7b47 	vneglt.f64	d7, d7
 801e372:	e760      	b.n	801e236 <atan+0x26>
 801e374:	f3af 8000 	nop.w
 801e378:	54442d18 	.word	0x54442d18
 801e37c:	bff921fb 	.word	0xbff921fb
 801e380:	54442d18 	.word	0x54442d18
 801e384:	3ff921fb 	.word	0x3ff921fb
 801e388:	8800759c 	.word	0x8800759c
 801e38c:	7e37e43c 	.word	0x7e37e43c
 801e390:	e322da11 	.word	0xe322da11
 801e394:	3f90ad3a 	.word	0x3f90ad3a
 801e398:	24760deb 	.word	0x24760deb
 801e39c:	3fa97b4b 	.word	0x3fa97b4b
 801e3a0:	a0d03d51 	.word	0xa0d03d51
 801e3a4:	3fb10d66 	.word	0x3fb10d66
 801e3a8:	c54c206e 	.word	0xc54c206e
 801e3ac:	3fb745cd 	.word	0x3fb745cd
 801e3b0:	920083ff 	.word	0x920083ff
 801e3b4:	3fc24924 	.word	0x3fc24924
 801e3b8:	5555550d 	.word	0x5555550d
 801e3bc:	3fd55555 	.word	0x3fd55555
 801e3c0:	52defd9a 	.word	0x52defd9a
 801e3c4:	bfadde2d 	.word	0xbfadde2d
 801e3c8:	2c6a6c2f 	.word	0x2c6a6c2f
 801e3cc:	bfa2b444 	.word	0xbfa2b444
 801e3d0:	af749a6d 	.word	0xaf749a6d
 801e3d4:	bfb3b0f2 	.word	0xbfb3b0f2
 801e3d8:	fe231671 	.word	0xfe231671
 801e3dc:	bfbc71c6 	.word	0xbfbc71c6
 801e3e0:	9998ebc4 	.word	0x9998ebc4
 801e3e4:	bfc99999 	.word	0xbfc99999
 801e3e8:	440fffff 	.word	0x440fffff
 801e3ec:	7ff00000 	.word	0x7ff00000
 801e3f0:	3fdbffff 	.word	0x3fdbffff
 801e3f4:	3ff2ffff 	.word	0x3ff2ffff
 801e3f8:	40038000 	.word	0x40038000
 801e3fc:	0801fab0 	.word	0x0801fab0
 801e400:	0801fa90 	.word	0x0801fa90

0801e404 <fabs>:
 801e404:	ec51 0b10 	vmov	r0, r1, d0
 801e408:	4602      	mov	r2, r0
 801e40a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801e40e:	ec43 2b10 	vmov	d0, r2, r3
 801e412:	4770      	bx	lr

0801e414 <with_errno>:
 801e414:	b510      	push	{r4, lr}
 801e416:	ed2d 8b02 	vpush	{d8}
 801e41a:	eeb0 8b40 	vmov.f64	d8, d0
 801e41e:	4604      	mov	r4, r0
 801e420:	f7ff fb5c 	bl	801dadc <__errno>
 801e424:	eeb0 0b48 	vmov.f64	d0, d8
 801e428:	ecbd 8b02 	vpop	{d8}
 801e42c:	6004      	str	r4, [r0, #0]
 801e42e:	bd10      	pop	{r4, pc}

0801e430 <xflow>:
 801e430:	b082      	sub	sp, #8
 801e432:	b158      	cbz	r0, 801e44c <xflow+0x1c>
 801e434:	eeb1 7b40 	vneg.f64	d7, d0
 801e438:	ed8d 7b00 	vstr	d7, [sp]
 801e43c:	ed9d 7b00 	vldr	d7, [sp]
 801e440:	2022      	movs	r0, #34	@ 0x22
 801e442:	ee20 0b07 	vmul.f64	d0, d0, d7
 801e446:	b002      	add	sp, #8
 801e448:	f7ff bfe4 	b.w	801e414 <with_errno>
 801e44c:	eeb0 7b40 	vmov.f64	d7, d0
 801e450:	e7f2      	b.n	801e438 <xflow+0x8>
 801e452:	0000      	movs	r0, r0
 801e454:	0000      	movs	r0, r0
	...

0801e458 <__math_uflow>:
 801e458:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801e460 <__math_uflow+0x8>
 801e45c:	f7ff bfe8 	b.w	801e430 <xflow>
 801e460:	00000000 	.word	0x00000000
 801e464:	10000000 	.word	0x10000000

0801e468 <__math_oflow>:
 801e468:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801e470 <__math_oflow+0x8>
 801e46c:	f7ff bfe0 	b.w	801e430 <xflow>
 801e470:	00000000 	.word	0x00000000
 801e474:	70000000 	.word	0x70000000

0801e478 <__math_divzero>:
 801e478:	b082      	sub	sp, #8
 801e47a:	2800      	cmp	r0, #0
 801e47c:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 801e480:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 801e484:	fe07 7b06 	vseleq.f64	d7, d7, d6
 801e488:	ed8d 7b00 	vstr	d7, [sp]
 801e48c:	ed9d 0b00 	vldr	d0, [sp]
 801e490:	ed9f 7b03 	vldr	d7, [pc, #12]	@ 801e4a0 <__math_divzero+0x28>
 801e494:	2022      	movs	r0, #34	@ 0x22
 801e496:	ee80 0b07 	vdiv.f64	d0, d0, d7
 801e49a:	b002      	add	sp, #8
 801e49c:	f7ff bfba 	b.w	801e414 <with_errno>
	...

0801e4a8 <__math_invalid>:
 801e4a8:	eeb0 7b40 	vmov.f64	d7, d0
 801e4ac:	eeb4 7b47 	vcmp.f64	d7, d7
 801e4b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e4b4:	ee30 6b40 	vsub.f64	d6, d0, d0
 801e4b8:	ee86 0b06 	vdiv.f64	d0, d6, d6
 801e4bc:	d602      	bvs.n	801e4c4 <__math_invalid+0x1c>
 801e4be:	2021      	movs	r0, #33	@ 0x21
 801e4c0:	f7ff bfa8 	b.w	801e414 <with_errno>
 801e4c4:	4770      	bx	lr

0801e4c6 <__math_check_uflow>:
 801e4c6:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801e4ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e4ce:	d102      	bne.n	801e4d6 <__math_check_uflow+0x10>
 801e4d0:	2022      	movs	r0, #34	@ 0x22
 801e4d2:	f7ff bf9f 	b.w	801e414 <with_errno>
 801e4d6:	4770      	bx	lr

0801e4d8 <__math_check_oflow>:
 801e4d8:	ed9f 6b07 	vldr	d6, [pc, #28]	@ 801e4f8 <__math_check_oflow+0x20>
 801e4dc:	eeb0 7bc0 	vabs.f64	d7, d0
 801e4e0:	eeb4 7b46 	vcmp.f64	d7, d6
 801e4e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e4e8:	dd02      	ble.n	801e4f0 <__math_check_oflow+0x18>
 801e4ea:	2022      	movs	r0, #34	@ 0x22
 801e4ec:	f7ff bf92 	b.w	801e414 <with_errno>
 801e4f0:	4770      	bx	lr
 801e4f2:	bf00      	nop
 801e4f4:	f3af 8000 	nop.w
 801e4f8:	ffffffff 	.word	0xffffffff
 801e4fc:	7fefffff 	.word	0x7fefffff

0801e500 <_init>:
 801e500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e502:	bf00      	nop
 801e504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e506:	bc08      	pop	{r3}
 801e508:	469e      	mov	lr, r3
 801e50a:	4770      	bx	lr

0801e50c <_fini>:
 801e50c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e50e:	bf00      	nop
 801e510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e512:	bc08      	pop	{r3}
 801e514:	469e      	mov	lr, r3
 801e516:	4770      	bx	lr
